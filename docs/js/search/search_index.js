var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/classes/AllExceptionFilter.html",[0,0.214,1,3.384]],["body/classes/AllExceptionFilter.html",[0,0.233,1,4.907,2,0.794,3,0.14,4,0.14,5,0.102,6,6.069,7,3.694,8,3.15,9,6.069,10,0.387,11,1.086,12,3.153,13,0.926,14,6.92,15,1.709,16,3.769,17,0.37,18,0.011,19,1.402,20,1.625,21,2.424,22,6.159,23,0.58,24,4.636,25,5.404,26,5.112,27,4.484,28,6.466,29,4.636,30,1.182,31,1.149,32,0.704,33,6.069,34,1.149,35,5.094,36,0.244,37,4.636,38,6.069,39,0.971,40,4.907,41,4.636,42,2.193,43,2.113,44,2.583,45,0.14,46,2.608,47,3.191,48,4.068,49,3.694,50,4.636,51,2.846,52,4.068,53,6.069,54,6.159,55,4.068,56,4.636,57,5.427,58,4.068,59,3.694,60,6.159,61,4.636,62,4.636,63,4.636,64,4.068,65,4.636,66,4.636,67,4.636,68,3.005,69,4.636,70,3.005,71,4.636,72,1.784,73,4.068,74,4.636,75,1.057,76,4.068,77,4.068,78,0.008,79,0.008]],["title/controllers/AppController.html",[80,2.009,81,3.128]],["body/controllers/AppController.html",[0,0.223,3,0.134,4,0.134,5,0.098,10,0.37,12,3.689,13,1.066,15,1.659,18,0.011,23,0.418,27,2.875,34,1.1,36,0.25,39,0.929,45,0.134,75,1.011,78,0.007,79,0.007,80,2.097,81,4.403,82,2.179,83,3.891,84,2.59,85,4.64,86,0.404,87,0.82,88,0.983,89,4.435,90,4.435,91,1.916,92,5.979,93,4.435,94,3.891,95,2.875,96,1.011,97,5.979,98,4.435,99,5.979,100,5.979,101,5.979,102,5.979,103,5.979,104,3.533,105,2.973,106,3.533,107,4.435,108,4.435,109,4.403,110,3.891,111,2.039,112,2.161,113,5.979,114,5.979,115,5.979,116,1.464,117,4.435,118,4.435,119,4.435,120,4.435,121,4.435,122,2.268,123,4.435,124,5.979,125,4.435,126,4.435,127,4.435,128,4.435,129,4.435,130,4.435,131,1.706,132,2.875,133,4.435,134,3.266,135,4.435,136,4.435,137,3.891,138,4.435,139,3.891,140,3.533,141,2.097]],["title/modules/AppModule.html",[142,1.688,143,3.128]],["body/modules/AppModule.html",[0,0.217,3,0.131,4,0.131,5,0.095,18,0.011,27,2.801,36,0.279,39,0.905,45,0.131,78,0.007,79,0.007,81,4.915,82,2.887,86,0.339,104,3.442,105,3.247,106,3.442,134,3.182,142,2.334,143,6.359,144,2.123,145,3.273,146,3.791,147,3.791,148,5.318,149,5.318,150,5.318,151,5.318,152,5.156,153,5.318,154,4.744,155,3.607,156,2.653,157,2.523,158,4.32,159,3.43,160,5.874,161,4.32,162,3.791,163,5.874,164,4.32,165,3.791,166,5.874,167,3.442,168,2.123,169,3.791,170,4.32,171,4.32,172,4.32,173,4.32,174,4.32,175,4.32,176,2.778,177,3.132,178,3.791,179,4.32,180,2.801,181,4.32,182,4.32,183,1.514,184,3.442,185,3.791,186,3.791,187,1.836,188,3.791,189,3.791,190,1.611,191,4.32,192,2.523,193,3.442,194,2.523]],["title/controllers/AuthController.html",[80,2.009,195,3.128]],["body/controllers/AuthController.html",[0,0.115,3,0.069,4,0.069,5,0.05,10,0.191,12,2.087,13,0.613,15,1.016,17,0.448,18,0.011,23,0.678,30,1.836,31,1.786,32,1.094,34,1.786,36,0.221,39,0.479,45,0.069,46,1.557,68,2.373,70,3.393,72,3.136,75,1.567,78,0.005,79,0.005,80,1.082,82,1.124,84,1.335,86,0.417,87,1.019,88,1.596,91,2.585,95,1.483,96,0.521,111,2.102,116,0.755,131,2.203,157,1.335,183,2.946,187,1.555,195,2.696,196,2.007,197,2.007,198,3.661,199,3.212,200,3.212,201,3.661,202,2.52,203,3.212,204,4.578,205,3.212,206,4.578,207,4.578,208,4.578,209,2.287,210,3.602,211,3.661,212,2.287,213,3.377,214,2.287,215,3.602,216,3.661,217,2.287,218,2.007,219,3.602,220,3.661,221,2.287,222,2.287,223,2.394,224,3.661,225,2.287,226,3.515,227,2.287,228,2.287,229,3.661,230,2.287,231,2.287,232,2.007,233,3.393,234,5.233,235,2.287,236,2.287,237,3.854,238,2.287,239,2.287,240,2.007,241,3.393,242,3.661,243,2.287,244,2.287,245,3.393,246,2.287,247,2.287,248,2.287,249,3.213,250,2.287,251,2.287,252,2.287,253,3.213,254,2.287,255,2.287,256,3.941,257,4.017,258,1.574,259,1.574,260,1.574,261,1.574,262,1.574,263,1.574,264,1.404,265,2.811,266,2.916,267,2.007,268,1.335,269,1.082,270,3.056,271,1.684,272,1.684,273,1.335,274,2.287,275,2.287,276,2.287,277,1.574,278,2.287,279,2.287,280,2.287,281,2.287,282,3.661,283,2.287,284,2.811,285,3.212,286,2.165,287,2.287,288,1.958,289,2.287,290,1.732,291,3.648,292,1.822,293,2.287,294,2.287,295,2.007,296,2.287,297,2.287,298,2.287,299,2.287,300,2.287,301,2.287,302,2.287,303,2.287,304,2.287,305,3.602,306,2.007,307,2.287,308,2.007,309,2.287,310,2.287,311,2.287,312,2.287]],["title/modules/AuthModule.html",[142,1.688,148,2.924]],["body/modules/AuthModule.html",[0,0.216,3,0.13,4,0.13,5,0.095,18,0.011,19,1.301,27,2.791,36,0.275,39,0.902,45,0.13,78,0.007,79,0.007,82,2.88,84,2.514,86,0.338,105,3.244,132,2.791,134,3.17,137,3.777,139,3.777,140,3.43,141,2.036,142,2.329,144,2.116,145,3.265,148,5.871,154,4.739,155,3.598,156,2.643,157,2.514,159,3.422,176,2.771,177,3.125,178,3.777,184,3.43,185,3.777,186,3.777,188,3.777,189,3.777,192,3.422,195,4.906,270,4.895,271,3.17,313,3.777,314,3.777,315,3.777,316,3.777,317,5.149,318,5.313,319,5.313,320,4.305,321,3.598,322,4.305,323,5.859,324,5.859,325,3.17,326,3.43,327,5.142,328,6.661,329,2.791,330,5.859,331,3.43,332,2.399,333,3.17,334,4.305,335,4.669,336,4.305,337,4.305,338,3.777,339,4.305,340,4.305,341,4.305,342,4.305,343,4.305,344,3.17,345,4.305,346,4.305]],["title/injectables/AuthService.html",[270,2.48,347,1.053]],["body/injectables/AuthService.html",[0,0.085,3,0.051,4,0.051,5,0.037,10,0.141,11,0.503,12,3.355,13,0.974,15,0.791,16,0.863,17,0.419,18,0.011,19,0.51,20,0.999,21,1.968,23,0.693,30,1.776,31,1.727,32,1.058,34,1.696,36,0.222,39,0.354,43,0.769,45,0.051,46,2.474,72,2.68,75,1.49,78,0.004,79,0.004,86,0.407,87,0.999,91,2.358,105,2.424,111,2.102,112,0.61,116,0.941,131,1.87,141,1.751,176,0.798,183,2.761,187,2.507,190,1.063,199,3.248,200,2.502,203,2.502,205,2.502,210,2.994,213,2.95,215,2.994,218,2.502,219,2.994,223,1.921,232,2.502,233,2.82,240,2.502,241,2.82,249,2.671,253,2.671,264,1.036,265,3.238,266,3.289,267,1.481,268,2.161,269,0.798,270,1.665,284,3.238,286,3.349,288,2.162,290,1.348,291,3.466,295,2.502,306,1.481,308,3.248,325,3.58,326,1.345,331,1.345,332,0.941,338,1.481,347,0.707,348,0.693,349,1.481,350,3.701,351,3.701,352,3.701,353,3.701,354,3.701,355,2.851,356,3.701,357,2.851,358,2.851,359,3.701,360,2.851,361,2.851,362,3.701,363,1.688,364,3.865,365,5.901,366,3.701,367,2.851,368,1.688,369,1.688,370,1.688,371,1.688,372,3.901,373,1.688,374,1.049,375,2.851,376,1.913,377,3.466,378,1.688,379,3.701,380,1.963,381,2.851,382,1.688,383,1.688,384,2.851,385,5.901,386,1.688,387,1.688,388,1.688,389,2.851,390,1.848,391,1.688,392,1.688,393,1.688,394,2.851,395,1.688,396,2.851,397,3.817,398,1.688,399,1.688,400,2.82,401,2.709,402,1.688,403,1.974,404,0.863,405,1.688,406,1.688,407,1.688,408,1.481,409,1.688,410,1.243,411,1.243,412,1.243,413,1.094,414,0.829,415,1.665,416,1.665,417,1.688,418,2.851,419,1.688,420,2.851,421,1.688,422,2.851,423,1.688,424,2.851,425,1.688,426,2.671,427,2.851,428,2.851,429,2.851,430,2.851,431,1.665,432,1.458,433,1.688,434,1.688,435,1.481,436,1.688,437,1.688,438,1.345,439,1.688,440,1.243,441,2.495,442,1.688,443,1.688,444,3.701,445,2.47,446,2.502,447,2.851,448,1.481,449,1.688,450,2.726,451,2.404,452,1.243,453,2.272,454,1.481,455,0.9,456,1.688,457,1.688,458,1.688,459,3.701,460,3.631,461,2.851,462,1.688,463,1.688,464,1.688,465,1.688,466,1.688,467,1.688,468,2.851,469,1.688,470,1.688,471,1.688,472,1.688,473,2.851,474,1.688,475,1.688,476,2.851,477,1.688]],["title/modules/ConfigModule.html",[142,1.688,149,2.924]],["body/modules/ConfigModule.html",[0,0.295,3,0.178,4,0.178,5,0.129,18,0.011,36,0.237,39,1.231,45,0.178,78,0.009,79,0.009,86,0.392,105,3.599,142,2.846,144,2.887,145,3.991,149,5.845,155,4.397,156,3.607,157,3.431,192,4.182,321,4.397,478,5.155,479,5.155,480,5.155,481,5.875,482,5.707,483,5.875]],["title/injectables/ConfigService.html",[105,1.744,347,1.053]],["body/injectables/ConfigService.html",[0,0.176,3,0.106,4,0.106,5,0.164,10,0.293,15,1.408,16,1.794,17,0.434,18,0.011,20,2.29,23,0.615,26,3.866,30,1.666,31,1.719,32,1.053,34,1.928,36,0.216,39,0.735,45,0.106,46,1.726,64,6.342,75,1.699,78,0.006,79,0.006,86,0.332,87,0.943,105,2.085,106,5.207,109,5.323,111,1.763,116,2.288,190,1.308,347,1.258,348,1.441,374,1.324,404,1.794,445,2.232,484,3.078,485,6.535,486,6.535,487,5.075,488,5.075,489,3.508,490,5.233,491,5.075,492,3.508,493,4.751,494,4.044,495,7.018,496,7.632,497,5.354,498,4.813,499,5.075,500,5.075,501,3.494,502,5.075,503,5.075,504,5.075,505,4.154,506,3.508,507,7.632,508,5.075,509,5.075,510,5.075,511,5.075,512,6.342,513,3.508,514,5.075,515,4.454,516,4.454,517,5.734,518,5.524,519,5.075,520,3.738,521,3.212,522,1.543,523,3.508,524,3.508,525,3.508,526,3.508,527,3.508,528,3.508,529,3.508,530,3.508,531,2.795,532,3.508]],["title/classes/ConfirmationEmailDto.html",[0,0.214,210,2.924]],["body/classes/ConfirmationEmailDto.html",[0,0.352,2,0.967,3,0.171,4,0.171,5,0.124,10,0.471,11,1.233,13,1.017,17,0.34,18,0.011,23,0.532,36,0.251,45,0.171,78,0.009,79,0.009,86,0.414,87,0.921,88,1.252,96,1.288,210,4.813,374,1.095,380,4.813,441,2.672,460,5.227,533,6.135,534,4.957,535,5.649,536,5.571,537,3.075,538,5.649,539,3.012,540,3.299,541,2.241,542,2.575,543,4.813,544,3.012,545,2.245,546,1.087,547,3.888,548,4.501,549,1.98]],["title/classes/CreateFileDto.html",[0,0.214,550,3.128]],["body/classes/CreateFileDto.html",[0,0.348,2,0.954,3,0.169,4,0.169,5,0.182,10,0.465,11,1.222,13,1.01,17,0.417,18,0.011,23,0.524,36,0.25,42,3.278,45,0.169,78,0.009,79,0.009,86,0.412,87,0.915,88,1.234,96,1.269,168,3.88,374,1.085,541,2.221,545,2.213,550,5.104,551,6.081,552,4.101,553,4.891,554,5.569,555,6.93,556,6.93,557,4.047,558,5.569,559,6.93,560,5.522,561,4.886]],["title/interfaces/CreateMockFileReturn.html",[562,1.688,563,3.128]],["body/interfaces/CreateMockFileReturn.html",[3,0.141,4,0.141,5,0.177,10,0.388,11,1.089,17,0.474,18,0.011,21,1.631,32,0.938,36,0.244,45,0.21,46,2.781,75,1.408,78,0.008,79,0.008,105,2.846,132,4.003,213,2.536,332,2.594,374,1.329,390,2.164,411,4.548,435,7.446,501,4.251,505,4.614,562,1.85,563,5.436,564,2.287,565,3.428,566,3.428,567,5.303,568,7.177,569,4.777,570,6.93,571,6.175,572,5.418,573,4.084,574,4.654,575,4.654,576,4.654,577,4.654,578,4.654,579,4.654,580,4.654,581,4.084,582,3.708,583,4.654,584,4.654]],["title/classes/CreateNotificationDto.html",[0,0.214,585,2.924]],["body/classes/CreateNotificationDto.html",[0,0.352,2,0.97,3,0.171,4,0.171,5,0.125,10,0.472,11,1.235,13,1.113,17,0.49,18,0.011,23,0.659,36,0.252,44,3.156,45,0.171,78,0.009,79,0.009,87,1.008,88,1.552,96,1.291,374,1.096,537,2.491,541,2.436,545,2.25,585,4.82,586,6.67,587,4.512,588,4.054,589,5.662,590,4.969,591,6.057,592,5.662,593,5.662,594,3.671,595,4.512,596,4.969,597,4.969,598,5.662]],["title/classes/CreateProfileDto.html",[0,0.214,219,2.924]],["body/classes/CreateProfileDto.html",[0,0.319,2,1.088,3,0.192,4,0.192,5,0.14,18,0.011,36,0.248,45,0.192,78,0.009,79,0.009,86,0.405,96,1.448,187,2.698,219,5.166,441,3.004,539,3.387,540,3.708,542,2.895,546,1.222,547,4.372,599,5.573,600,4.117]],["title/classes/CreateUserDto.html",[0,0.214,539,2.265]],["body/classes/CreateUserDto.html",[0,0.351,2,0.81,3,0.143,4,0.143,5,0.104,10,0.395,11,1.101,13,1.112,17,0.477,18,0.011,23,0.658,32,0.948,36,0.246,45,0.143,78,0.008,79,0.008,86,0.422,87,1.007,88,1.548,96,1.078,187,3.28,190,1.763,288,2.268,374,1.163,441,3.304,537,3.396,539,3.328,541,2.38,545,1.879,549,2.448,594,4.046,601,5.918,602,3.483,603,6.129,604,4.729,605,4.729,606,4.729,607,4.972,608,5.476,609,4.729,610,4.149,611,4.046,612,4.296,613,4.729,614,6.24,615,3.831,616,6.24,617,2.237,618,1.879,619,3.483,620,3.483]],["title/classes/CreateUserNotificationTokenDto.html",[0,0.214,621,2.753]],["body/classes/CreateUserNotificationTokenDto.html",[0,0.357,2,0.994,3,0.176,4,0.176,5,0.128,10,0.484,11,1.254,13,1.029,17,0.349,18,0.011,23,0.546,36,0.235,45,0.176,72,2.735,78,0.009,79,0.009,86,0.417,87,0.932,88,1.286,96,1.323,374,1.113,432,3.93,537,3.127,541,2.278,545,2.306,601,5.664,621,4.608,622,3.493,623,3.994,624,5.091,625,6.237,626,5.802,627,5.802]],["title/classes/CredentialsDto.html",[0,0.214,215,2.924]],["body/classes/CredentialsDto.html",[0,0.32,2,1.09,3,0.193,4,0.193,5,0.14,18,0.011,36,0.249,45,0.193,78,0.009,79,0.009,86,0.406,96,1.452,187,2.705,215,5.174,441,3.012,539,3.396,540,3.719,542,2.903,546,1.225,547,4.383,628,5.588]],["title/modules/DatabaseModule.html",[142,1.688,150,2.924]],["body/modules/DatabaseModule.html",[0,0.267,3,0.161,4,0.161,5,0.117,17,0.319,18,0.011,27,3.439,31,1.315,36,0.265,39,1.111,45,0.161,46,1.804,75,1.209,78,0.008,79,0.008,86,0.375,105,3.187,109,3.907,134,3.907,140,4.227,141,2.509,142,2.671,144,2.607,150,4.627,159,3.098,169,4.655,176,2.509,177,2.829,187,2.254,325,3.907,332,2.956,629,5.305,630,3.907,631,6.722,632,2.829,633,5.305,634,6.722,635,5.305,636,5.305,637,6.722,638,5.305,639,5.305,640,5.305,641,5.305,642,5.305,643,5.305,644,5.305,645,5.305,646,5.305,647,5.305,648,5.305,649,5.305,650,5.305,651,5.305,652,5.305,653,5.305,654,5.305,655,5.305,656,1.7,657,5.305,658,5.305,659,5.305,660,5.305,661,5.305]],["title/classes/DeleteUserNotificationTokenDto.html",[0,0.214,662,3.128]],["body/classes/DeleteUserNotificationTokenDto.html",[0,0.302,2,1.029,3,0.182,4,0.182,5,0.132,10,0.501,11,1.281,13,0.972,17,0.361,18,0.011,23,0.566,36,0.199,45,0.182,72,2.794,78,0.009,79,0.009,86,0.411,87,0.881,88,1.332,374,0.941,432,3.714,546,1.397,621,5.255,622,3.569,623,4.137,624,5.273,625,5.273,662,5.348,663,5.273,664,2.954,665,6.01,666,4.426,667,5.273]],["title/classes/DownloadFileDto.html",[0,0.214,668,2.924]],["body/classes/DownloadFileDto.html",[0,0.348,2,0.954,3,0.169,4,0.169,5,0.122,10,0.465,11,1.222,13,1.088,17,0.417,18,0.011,23,0.653,32,1.052,36,0.229,45,0.169,78,0.009,79,0.009,86,0.412,87,0.985,88,1.536,288,2.467,374,0.872,521,3.406,545,2.213,546,1.333,552,4.101,615,4.255,618,2.213,664,2.737,668,4.77,669,6.081,670,6.62,671,5.569,672,5.569,673,4.886,674,5.569,675,1.894,676,6.93]],["title/classes/FileEntity.html",[0,0.214,677,2.172]],["body/classes/FileEntity.html",[0,0.245,2,0.43,3,0.076,4,0.076,5,0.055,8,2.015,10,0.209,11,0.695,13,1.163,17,0.487,18,0.011,19,1.667,21,0.879,23,0.696,34,0.622,36,0.21,40,1.999,42,1.187,45,0.119,46,0.853,75,1.257,78,0.005,79,0.005,86,0.424,87,1.022,88,1.606,96,0.572,111,1.312,112,0.907,116,0.828,122,2.015,168,1.936,190,1.469,223,1.191,288,1.953,290,2.301,374,1.232,390,2.099,451,3.927,505,2.711,522,1.104,537,2.635,541,2.368,542,1.144,544,3.865,546,0.483,549,1.381,567,3.154,569,2.841,588,2.594,617,1.187,675,0.853,677,2.015,678,1.999,679,3.154,680,3.349,681,3.384,682,3.154,683,2.554,684,5.835,685,3.219,686,3.349,687,2.202,688,3.574,689,2.509,690,6.358,691,4.699,692,4.837,693,5.729,694,5.99,695,2.509,696,5.794,697,2.509,698,2.509,699,3.457,700,2.509,701,3.457,702,2.509,703,1.727,704,2.509,705,2.509,706,1.999,707,2.554,708,2.554,709,2.509,710,2.509,711,2.202,712,2.509,713,2.509,714,2.509,715,3.139,716,3.457,717,2.554,718,2.902,719,1.999,720,4.311,721,2.554,722,2.712,723,2.554,724,2.554,725,1.627,726,1.465,727,2.202,728,1.627,729,2.202,730,2.202,731,1.999,732,2.202,733,2.202,734,2.202,735,2.202,736,2.202,737,2.902,738,1.727,739,2.202,740,1.283,741,1.54]],["title/classes/FileEntityPreview.html",[0,0.214,738,2.924]],["body/classes/FileEntityPreview.html",[0,0.292,2,0.573,3,0.101,4,0.101,5,0.074,8,1.71,13,1.138,17,0.462,18,0.011,19,1.482,21,1.172,23,0.315,30,0.853,31,0.829,32,0.508,36,0.235,40,2.664,42,1.582,45,0.148,46,1.137,75,1.322,78,0.006,79,0.006,86,0.422,87,0.947,96,0.762,111,1.565,112,1.208,116,1.617,122,1.71,168,2.409,223,1.482,288,1.998,290,1.582,374,1.179,390,2.384,451,3.919,505,1.863,522,1.471,537,2.992,541,2.537,542,1.524,544,3.627,546,0.643,549,1.172,567,2.168,569,1.953,588,1.783,617,1.582,675,1.137,677,1.71,678,2.664,679,2.168,680,2.302,681,3.009,682,2.168,684,5.968,685,2.862,688,3.177,691,4.409,692,4.3,693,5.567,696,5.547,699,2.934,701,2.934,707,2.168,708,2.168,715,2.664,716,2.934,717,3.177,718,3.609,719,2.664,720,4.761,721,3.177,722,3.374,723,3.177,724,3.177,725,2.168,726,1.953,727,2.934,728,2.168,729,2.934,730,2.934,731,2.664,732,2.934,733,2.934,734,2.934,735,2.934,736,2.934,737,3.609,738,3.374,739,2.934,740,1.71,741,2.053,742,2.302,743,3.344]],["title/injectables/FileValidationPipe.html",[347,1.053,744,3.128]],["body/injectables/FileValidationPipe.html",[0,0.25,3,0.15,4,0.15,5,0.109,8,2.541,10,0.415,11,1.137,12,3.261,13,1.014,15,1.789,17,0.43,18,0.011,20,2.507,21,1.741,23,0.674,30,1.644,31,1.598,32,0.979,34,1.232,36,0.251,39,1.041,42,2.35,43,2.265,45,0.15,75,1.133,78,0.008,79,0.008,86,0.426,105,3.361,111,1.739,116,1.64,168,3.855,332,2.769,347,1.598,348,2.041,374,1.009,414,2.442,445,2.185,744,4.747,745,6.643,746,4.36,747,7.155,748,4.437,749,3.42,750,6.446,751,6.446,752,4.969,753,6.446,754,4.969,755,3.051,756,4.969,757,4.969,758,4.969,759,4.969]],["title/controllers/FilesController.html",[80,2.009,760,3.128]],["body/controllers/FilesController.html",[0,0.137,3,0.082,4,0.082,5,0.16,10,0.227,13,0.365,15,1.166,17,0.446,18,0.011,23,0.619,30,1.677,31,1.7,32,0.999,34,1.631,35,4.244,36,0.257,39,0.571,42,1.987,45,0.082,68,3.324,72,2.395,75,1.499,78,0.005,79,0.005,80,1.288,82,1.339,84,1.591,86,0.406,87,0.983,88,1.458,91,2.455,95,1.766,96,0.621,111,2.187,131,2.986,168,3.478,183,2.841,213,2.367,223,2.346,256,4.528,257,4.499,258,2.891,259,1.875,260,1.875,261,1.875,262,1.875,263,1.875,264,1.672,269,1.288,273,1.591,277,1.875,288,2.327,290,3.899,305,4.285,374,0.658,403,4.138,455,1.453,505,2.341,550,3.776,618,1.083,656,0.873,668,3.966,677,1.393,755,1.672,760,3.094,761,2.39,762,2.39,763,2.24,764,2.148,765,4.499,766,2.341,767,2.734,768,2.857,769,2.724,770,2.724,771,4.2,772,2.724,773,1.518,774,2.724,775,2.724,776,2.39,777,2.724,778,2.724,779,4.499,780,1.518,781,4.244,782,2.724,783,2.724,784,4.244,785,2.724,786,2.724,787,2.39,788,2.724,789,2.724,790,2.724,791,4.2,792,4.2,793,2.006,794,2.006,795,2.724,796,2.39,797,1.875,798,3.736,799,2.39,800,1.672,801,2.724,802,2.724,803,2.724,804,4.2,805,2.724,806,2.724,807,4.591,808,4.499,809,2.17,810,2.724,811,2.006,812,2.724,813,2.006,814,2.724,815,2.006,816,2.39,817,2.724,818,2.724,819,2.724,820,2.724]],["title/modules/FilesModule.html",[142,1.688,151,2.924]],["body/modules/FilesModule.html",[0,0.282,3,0.17,4,0.17,5,0.123,18,0.011,36,0.269,39,1.175,45,0.17,78,0.009,79,0.009,82,3.421,86,0.384,142,2.766,144,2.756,145,3.879,151,5.788,155,4.274,156,3.443,157,3.275,159,3.275,192,4.065,321,4.274,630,4.131,632,2.991,656,1.797,677,2.868,760,5.575,798,5.647,799,4.921,821,4.921,822,4.921,823,4.921,824,5.608,825,5.608,826,5.608]],["title/injectables/FilesService.html",[347,1.053,798,2.753]],["body/injectables/FilesService.html",[0,0.169,3,0.062,4,0.062,5,0.128,10,0.172,12,1.534,13,0.451,15,0.934,16,1.054,17,0.385,18,0.011,19,1.641,20,1.902,21,2.041,23,0.603,30,1.634,31,1.589,32,0.973,34,1.523,35,3.626,36,0.231,39,0.432,42,1.592,43,0.939,45,0.062,46,2.536,75,1.624,78,0.004,79,0.004,86,0.394,87,0.955,91,2.283,111,2.035,112,0.745,116,1.111,122,1.721,131,3.051,141,3.302,168,3.351,183,2.697,190,0.768,213,2.022,269,0.975,286,2.567,288,0.605,290,2.754,347,0.834,348,0.846,390,1.495,400,4.699,401,2.744,403,3.976,404,1.721,414,1.013,438,2.681,445,2.387,453,3.023,455,1.099,505,2.377,544,1.794,549,0.722,561,1.808,569,1.203,588,1.099,617,0.975,632,1.099,656,0.66,668,3.389,670,2.953,675,1.45,677,1.054,681,3.772,763,2.274,764,2.181,765,3.743,766,2.377,767,2.274,768,2.377,773,1.148,776,1.808,779,5.109,780,1.148,787,1.808,797,1.418,798,2.182,827,1.808,828,2.182,829,2.06,830,3.192,831,4.411,832,2.06,833,4.265,834,1.642,835,4.229,836,2.06,837,4.008,838,3.389,839,2.06,840,2.06,841,2.316,842,3.023,843,2.06,844,2.316,845,2.765,846,3.389,847,2.06,848,2.06,849,2.06,850,1.518,851,1.265,852,1.418,853,1.265,854,1.418,855,2.06,856,2.06,857,4.265,858,2.316,859,2.06,860,2.936,861,2.06,862,2.06,863,3.365,864,2.936,865,3.365,866,3.365,867,2.182,868,2.06,869,2.182,870,2.06,871,1.418,872,1.418,873,1.642,874,1.642,875,1.808,876,1.808,877,1.642,878,1.642,879,1.203,880,2.06,881,2.06,882,1.642,883,1.808,884,1.808,885,1.642,886,2.06,887,2.06,888,1.418,889,1.418,890,2.06,891,2.06,892,1.642,893,2.681,894,3.365,895,2.06,896,2.06,897,2.681,898,2.936,899,2.06,900,2.06,901,2.06,902,2.06,903,5.426,904,2.06,905,2.06,906,2.06,907,3.365,908,2.06,909,3.743,910,3.365,911,3.365,912,4.924,913,5.823,914,3.365,915,3.365,916,3.365,917,3.365,918,4.265,919,2.06,920,2.06,921,5.426,922,2.06,923,2.06,924,4.324,925,2.06,926,2.06,927,2.06,928,2.06,929,2.06,930,2.06]],["title/interfaces/FindManyBracketsOptions.html",[562,1.688,846,2.924]],["body/interfaces/FindManyBracketsOptions.html",[3,0.184,4,0.184,5,0.134,10,0.507,11,1.289,17,0.365,18,0.011,32,1.11,36,0.201,45,0.184,78,0.009,79,0.009,86,0.422,112,2.194,546,1.405,562,2.413,564,2.984,842,4.812,846,5.03,931,4.838,932,4.838,933,5.328,934,7.137,935,6.481]],["title/classes/FindManyOptionsDto.html",[0,0.214,936,2.608]],["body/classes/FindManyOptionsDto.html",[0,0.257,2,0.463,3,0.082,4,0.082,5,0.06,8,2.137,10,0.226,11,0.737,13,1.069,17,0.445,18,0.011,19,1.736,20,2.012,23,0.665,32,1.161,34,0.671,36,0.226,45,0.082,75,0.952,78,0.005,79,0.005,86,0.393,87,0.982,88,1.454,96,0.617,112,0.978,122,3.174,131,1.041,132,1.754,180,3.722,190,2.14,374,1.18,376,3.256,413,1.754,451,2.99,498,4.228,521,1.329,522,1.19,541,1.989,543,3.514,545,1.075,546,0.804,549,2.175,557,2.44,560,4.067,615,3.81,617,1.28,656,2.451,664,2.053,675,1.421,683,2.709,718,3.759,748,3.514,828,1.754,842,1.661,846,3.514,853,3.525,879,2.44,931,2.155,932,6.304,936,2.565,937,5.448,938,5.448,939,2.155,940,2.935,941,3.722,942,4.578,943,3.514,944,3.514,945,2.137,946,2.228,947,4.626,948,6.205,949,2.722,950,2.722,951,2.722,952,3.952,953,2.876,954,2.876,955,2.705,956,3.952,957,3.952,958,3.952,959,3.952,960,3.952,961,3.952,962,3.952,963,3.952,964,2.705,965,1.862,966,3.952,967,4.861,968,4.861,969,2.705,970,3.722,971,1.862,972,2.876,973,4.272,974,2.705,975,1.443,976,2.228,977,2.053,978,2.228,979,1.508,980,1.443,981,1.28,982,3.309,983,2.228,984,2.228,985,2.228,986,1.508,987,2.705,988,2.705,989,5.038,990,4.574,991,5.038,992,2.705,993,2.705,994,4.479,995,2.705,996,1.992,997,1.992,998,2.705,999,5.038,1000,3.666,1001,3.666,1002,2.705,1003,2.705,1004,2.705,1005,2.705,1006,2.705,1007,4.178,1008,2.705,1009,2.705,1010,2.705]],["title/classes/FindOneOptionsDto.html",[0,0.214,940,2.009]],["body/classes/FindOneOptionsDto.html",[0,0.314,2,0.652,3,0.115,4,0.115,5,0.084,8,2.753,10,0.318,11,0.949,13,0.995,17,0.408,18,0.011,20,1.335,23,0.639,32,1.03,34,1.335,36,0.237,45,0.115,75,1.227,78,0.007,79,0.007,86,0.388,87,0.946,88,1.193,96,0.868,112,1.377,132,2.47,190,2.007,374,1.062,401,3.479,413,2.47,450,5.271,451,3.387,453,4.394,521,3.334,522,2.368,541,2.001,543,3.706,545,1.514,549,1.887,557,3.144,560,4.289,615,3.833,617,1.802,675,2.434,683,3.49,718,5.271,748,3.706,853,3.305,937,5.703,938,5.703,939,3.035,940,2.546,945,3.193,946,3.329,949,2.032,950,2.032,951,2.032,975,2.032,976,3.618,977,3.334,978,3.618,980,2.871,981,2.546,982,3.618,983,3.962,984,3.962,985,3.962,989,4.724,990,4.289,991,4.724,994,4.724,996,5.922,997,2.806,999,4.724,1000,3.343,1001,4.724,1011,3.81,1012,3.81,1013,3.81,1014,3.81,1015,6.243,1016,3.81,1017,3.81,1018,4.724,1019,5.383,1020,3.81,1021,3.81,1022,3.81,1023,3.81,1024,3.81]],["title/classes/HttpExceptionFilter.html",[0,0.214,1025,3.384]],["body/classes/HttpExceptionFilter.html",[0,0.27,2,0.919,3,0.162,4,0.162,5,0.118,7,4.275,8,3.463,9,6.509,10,0.448,15,1.879,16,3.794,17,0.322,18,0.011,23,0.505,25,5.941,26,4.389,27,4.809,28,6.836,30,1.368,31,1.33,32,0.815,33,4.708,34,1.33,35,5.463,36,0.224,38,6.836,39,1.124,42,2.538,45,0.162,46,2.649,47,3.693,48,4.708,51,3.294,52,4.708,53,5.941,55,4.708,57,4.986,58,4.708,59,4.275,75,1.223,76,4.708,77,4.708,78,0.008,79,0.008,86,0.408,1025,5.394,1026,5.941,1027,5.365,1028,5.365]],["title/classes/ID.html",[0,0.214,288,1.248]],["body/classes/ID.html",[0,0.362,2,1.014,3,0.179,4,0.179,5,0.13,10,0.494,11,1.269,13,1.038,17,0.356,18,0.011,23,0.557,36,0.238,45,0.179,78,0.009,79,0.009,86,0.393,87,0.94,88,1.312,96,1.349,288,2.498,374,1.126,541,2.306,545,2.352,673,5.194,675,2.447,1029,5.194,1030,5.919,1031,7.195]],["title/classes/JwtAccessTokenPayloadDto.html",[0,0.214,415,2.48]],["body/classes/JwtAccessTokenPayloadDto.html",[0,0.383,2,0.865,3,0.153,4,0.153,5,0.111,10,0.422,11,1.149,13,1.126,17,0.392,18,0.011,23,0.614,36,0.167,45,0.231,78,0.008,79,0.008,86,0.438,87,1.02,96,1.152,226,3.103,268,2.951,284,4.001,288,2.119,374,1.286,415,4.212,416,2.951,426,4.429,431,2.951,432,2.585,541,2.311,542,2.304,546,1.254,1032,4.965,1033,3.103,1034,5.054,1035,5.054,1036,3.722]],["title/injectables/JwtAuthGuard.html",[273,2.48,347,1.053]],["body/injectables/JwtAuthGuard.html",[0,0.234,3,0.239,4,0.141,5,0.102,10,0.388,13,0.622,15,1.711,17,0.371,18,0.011,21,2.426,23,0.581,26,5.115,30,1.573,31,1.529,32,0.936,34,1.152,36,0.261,39,0.973,43,2.117,45,0.141,46,1.579,47,5.077,72,3.036,75,1.059,78,0.008,79,0.008,86,0.409,87,0.84,111,2.071,116,1.533,167,3.701,223,2.386,273,3.601,329,3.011,347,1.529,348,1.908,414,2.283,445,3.045,546,0.893,726,2.712,740,2.376,755,2.852,800,2.852,1037,4.076,1038,6.075,1039,4.645,1040,8.051,1041,4.645,1042,4.076,1043,5.432,1044,4.645,1045,5.411,1046,4.076,1047,4.076,1048,4.645,1049,4.076,1050,4.076,1051,4.645,1052,4.645,1053,4.076,1054,5.411,1055,4.645,1056,4.645,1057,4.645,1058,4.645]],["title/injectables/JwtRefreshGuard.html",[272,3.128,347,1.053]],["body/injectables/JwtRefreshGuard.html",[0,0.254,3,0.244,4,0.153,5,0.111,10,0.421,15,1.806,17,0.303,18,0.011,21,2.281,23,0.613,26,5.232,30,1.286,31,1.25,32,0.766,34,1.25,36,0.252,39,1.056,43,2.299,45,0.153,47,3.472,72,3.106,75,1.15,78,0.008,79,0.008,86,0.417,87,0.874,111,2.054,116,2.378,223,2.44,264,3.096,272,4.793,329,3.269,347,1.614,348,2.071,414,2.478,432,2.579,445,2.863,546,0.97,740,2.579,1038,5.711,1042,5.711,1045,5.711,1046,4.425,1047,4.425,1050,4.425,1053,4.425,1059,6.323,1060,4.425,1061,5.043,1062,5.043,1063,3.269,1064,5.043]],["title/classes/JwtRefreshTokenDto.html",[0,0.214,226,2.608]],["body/classes/JwtRefreshTokenDto.html",[0,0.392,2,0.923,3,0.163,4,0.163,5,0.119,13,1.077,18,0.011,36,0.178,45,0.236,78,0.008,79,0.008,86,0.438,87,0.976,96,1.229,226,4.169,268,3.147,284,4.169,288,1.583,374,1.259,415,3.965,416,3.147,426,3.309,431,3.147,432,2.757,541,2.382,542,2.457,546,1.306,1032,3.71,1033,3.309,1036,3.97]],["title/classes/JwtRefreshTokenPayloadDto.html",[0,0.214,416,2.48]],["body/classes/JwtRefreshTokenPayloadDto.html",[0,0.378,2,0.835,3,0.148,4,0.148,5,0.107,10,0.407,11,1.123,13,1.137,17,0.426,18,0.011,23,0.668,36,0.161,45,0.228,78,0.008,79,0.008,86,0.438,87,1.03,96,1.111,226,2.994,268,2.847,284,3.909,288,2.083,374,1.294,415,4.554,416,3.718,426,4.353,431,4.14,432,2.494,541,2.272,542,2.223,546,1.364,664,3.129,1032,4.383,1033,2.994,1036,3.591,1065,4.876,1066,4.876,1067,4.876]],["title/injectables/JwtRefreshTokenStrategy.html",[318,2.924,347,1.053]],["body/injectables/JwtRefreshTokenStrategy.html",[0,0.222,3,0.134,4,0.134,5,0.097,10,0.369,12,2.718,13,0.799,15,1.655,17,0.358,18,0.011,21,1.548,23,0.562,30,1.521,31,1.479,32,0.906,34,1.095,36,0.271,39,0.925,43,2.014,45,0.134,46,2.028,72,2.295,75,1.007,78,0.007,79,0.007,86,0.404,87,0.819,91,1.911,105,3.265,111,1.821,116,1.968,183,2.366,202,4.105,223,1.336,264,2.712,269,2.09,270,4.721,271,3.254,284,2.712,285,3.877,286,2.821,288,2.123,318,4.105,329,2.864,332,2.462,347,1.479,348,1.815,408,3.877,412,3.254,413,2.864,414,2.171,416,4.221,426,3.661,431,2.58,432,2.26,445,1.943,446,3.877,451,2.014,546,0.85,740,2.26,749,3.041,977,2.171,1063,2.864,1068,5.924,1069,3.877,1070,5.924,1071,4.418,1072,3.877,1073,4.418,1074,3.877,1075,3.877,1076,3.52,1077,4.752,1078,3.877,1079,3.877,1080,3.877,1081,4.418,1082,3.877,1083,4.418,1084,3.877,1085,4.418,1086,4.418]],["title/injectables/JwtStrategy.html",[319,2.924,347,1.053]],["body/injectables/JwtStrategy.html",[0,0.241,3,0.145,4,0.145,5,0.106,10,0.4,12,2.871,13,0.844,15,1.748,17,0.379,18,0.011,23,0.593,30,1.606,31,1.562,32,0.957,34,1.189,36,0.269,39,1.005,45,0.145,75,1.093,78,0.008,79,0.008,86,0.412,87,0.853,91,2.018,105,3.333,111,1.897,116,2.079,183,2.465,202,3.302,223,1.45,264,2.945,269,2.269,270,4.808,271,3.532,288,2.194,319,4.336,329,3.109,332,2.673,347,1.562,348,1.97,415,4.361,426,3.867,546,0.923,740,2.453,749,3.302,1070,6.172,1072,4.209,1074,4.209,1075,4.209,1076,3.822,1077,3.822,1078,4.209,1079,4.209,1080,4.209,1082,4.209,1084,4.209,1087,4.209,1088,4.796,1089,4.796,1090,4.796,1091,4.796]],["title/classes/JwtTokensDto.html",[0,0.214,268,2.48]],["body/classes/JwtTokensDto.html",[0,0.381,2,0.854,3,0.151,4,0.151,5,0.11,10,0.416,11,1.14,13,1.124,17,0.388,18,0.011,23,0.609,36,0.165,45,0.23,78,0.008,79,0.008,86,0.437,87,1.018,88,1.433,96,1.137,226,3.064,268,3.774,284,4.656,288,1.466,374,1.282,415,3.774,416,2.914,426,3.064,431,2.914,432,3.667,541,2.517,542,2.275,546,1.243,1032,4.935,1033,3.064,1036,3.675,1092,4.99,1093,4.99]],["title/modules/MultipartModule.html",[142,1.688,152,2.924]],["body/modules/MultipartModule.html",[0,0.184,3,0.111,4,0.111,5,0.081,12,3.04,15,1.018,17,0.401,18,0.011,19,1.109,20,1.285,23,0.628,30,1.701,31,1.654,32,1.013,34,1.654,36,0.233,39,0.768,45,0.111,75,1.722,78,0.006,79,0.006,86,0.439,87,0.445,111,1.799,131,3.025,142,2.65,144,1.802,152,4.591,159,2.141,176,2.478,177,2.794,183,1.285,192,3.06,193,6.153,194,3.57,321,3.217,374,0.574,482,4.175,564,1.802,831,5.199,1094,3.667,1095,6.777,1096,3.218,1097,4.597,1098,5.49,1099,3.667,1100,6.19,1101,3.218,1102,4.597,1103,3.667,1104,3.218,1105,4.597,1106,4.912,1107,3.667,1108,6.19,1109,3.218,1110,4.597,1111,3.667,1112,5.364,1113,3.218,1114,3.218,1115,5.403,1116,5.621,1117,3.218,1118,3.667,1119,3.607,1120,5.364,1121,3.218,1122,3.218,1123,4.597,1124,5.364,1125,4.597,1126,5.364,1127,3.218,1128,3.218,1129,3.667]],["title/interfaces/MultipartModuleAsyncOptions.html",[562,1.688,1098,2.924]],["body/interfaces/MultipartModuleAsyncOptions.html",[3,0.151,4,0.151,5,0.11,10,0.416,11,1.14,17,0.515,18,0.011,32,1.261,36,0.237,39,1.045,42,2.36,45,0.217,78,0.008,79,0.008,86,0.439,91,2.071,168,2.452,176,3.587,177,4.044,194,4.428,501,4.449,546,1.243,562,2.569,564,2.452,1098,4.449,1106,5.28,1119,3.435,1130,3.675,1131,3.064,1132,4.449,1133,5.22,1134,5.15,1135,3.435,1136,3.435,1137,4.378,1138,3.435]],["title/interfaces/MultipartOptionsFactory.html",[562,1.688,1119,2.924]],["body/interfaces/MultipartOptionsFactory.html",[3,0.161,4,0.161,5,0.117,10,0.443,15,1.865,17,0.466,18,0.011,23,0.5,34,1.315,36,0.244,39,1.111,42,2.509,45,0.223,78,0.008,79,0.008,86,0.437,91,2.365,168,2.607,176,2.509,177,2.829,194,3.098,546,1.02,562,2.671,564,2.607,1098,3.652,1106,5.714,1119,4.627,1130,4.951,1131,3.257,1132,3.652,1133,3.652,1134,5.356,1135,3.652,1136,3.652,1137,6.808,1138,3.652,1139,5.305]],["title/classes/NotificationEntity.html",[0,0.214,1140,2.48]],["body/classes/NotificationEntity.html",[0,0.18,2,0.612,3,0.108,4,0.108,5,0.079,10,0.298,11,0.907,13,1.158,17,0.505,18,0.011,19,2.319,23,0.706,36,0.218,44,1.991,45,0.108,78,0.006,79,0.006,85,3.699,86,0.419,87,1.035,88,1.661,96,0.814,112,1.291,141,2.432,190,2.246,223,1.555,288,1.77,290,2.849,374,1.032,390,1.802,451,3.416,520,5.84,537,1.571,541,2.401,544,2.742,588,3.213,591,5.794,675,1.215,679,3.906,682,3.906,685,3.848,686,4.147,687,3.135,688,4.272,691,3.333,693,3.54,696,4.437,703,2.459,706,2.846,707,3.333,708,3.333,711,3.135,717,3.333,720,4.272,721,3.333,722,3.54,723,3.333,724,3.333,725,2.316,726,2.086,728,2.316,1140,3.003,1141,3.135,1142,3.572,1143,3.572,1144,3.572,1145,5.159,1146,4.512,1147,3.135,1148,3.572,1149,2.846,1150,3.135,1151,3.572,1152,3.572,1153,3.572,1154,5.142,1155,4.853,1156,3.572,1157,3.572,1158,4.512]],["title/controllers/NotificationsController.html",[80,2.009,1159,3.128]],["body/controllers/NotificationsController.html",[0,0.157,3,0.095,4,0.095,5,0.069,10,0.261,13,0.419,15,1.294,17,0.397,18,0.011,23,0.623,30,1.687,31,1.64,32,1.004,34,1.64,36,0.25,39,0.655,45,0.095,68,3.615,70,3.615,72,2.669,75,1.508,78,0.006,79,0.006,80,1.479,82,1.536,84,1.825,86,0.375,87,0.985,88,1.466,91,2.463,95,2.027,96,0.713,111,2.208,131,2.842,183,2.847,213,3.101,223,2.474,256,3.21,258,3.839,259,2.152,260,2.152,261,2.152,262,2.152,263,2.152,264,1.919,269,1.479,273,1.825,277,2.152,288,2.387,290,4.038,305,2.152,403,4.212,404,1.599,455,1.667,585,4.256,618,1.242,656,1.002,755,1.919,764,2.852,766,3.108,767,2.974,768,3.108,773,1.742,780,1.742,793,2.302,796,2.743,807,5.27,811,3.434,813,3.434,815,3.434,940,2.924,1140,1.825,1159,3.434,1160,2.743,1161,2.743,1162,5.577,1163,3.126,1164,4.256,1165,3.126,1166,3.126,1167,3.126,1168,3.126,1169,1.919,1170,5.108,1171,3.126,1172,3.615,1173,2.152,1174,2.152,1175,3.126,1176,3.126,1177,3.126,1178,3.126,1179,3.126,1180,3.126,1181,3.126]],["title/modules/NotificationsModule.html",[142,1.688,153,2.924]],["body/modules/NotificationsModule.html",[0,0.276,3,0.166,4,0.166,5,0.121,18,0.011,36,0.273,39,1.15,45,0.166,78,0.009,79,0.009,82,3.376,142,2.73,144,2.698,145,3.828,153,5.876,154,5.065,155,4.218,156,3.371,157,3.206,159,4.011,192,4.011,321,4.218,333,4.044,630,4.044,632,2.928,656,1.759,1140,3.206,1159,5.521,1172,5.632,1173,3.78,1182,4.818,1183,5.491,1184,4.818,1185,4.818,1186,5.491,1187,5.491,1188,5.491]],["title/injectables/NotificationsService.html",[347,1.053,1172,2.753]],["body/injectables/NotificationsService.html",[0,0.138,3,0.049,4,0.049,5,0.035,10,0.228,11,0.483,13,0.807,15,0.759,16,0.822,17,0.426,18,0.011,19,1.555,20,1.802,21,2.024,23,0.668,30,1.718,31,1.67,32,1.023,34,1.634,36,0.218,39,0.337,43,0.733,44,0.896,45,0.049,46,2.57,57,1.184,75,1.638,78,0.003,79,0.003,85,2.588,86,0.389,87,1.007,88,0.356,91,2.38,111,2.054,112,0.581,116,0.903,131,2.93,141,3.039,183,2.779,213,3.05,223,0.486,266,3.476,269,0.761,286,3.039,288,1.51,290,2.732,291,2.18,292,3.359,333,2.015,347,0.679,348,0.661,390,2.688,400,4.899,401,2.349,403,4.142,404,1.4,414,0.79,432,0.822,445,2.413,450,2.015,451,2.154,453,2.193,454,2.401,455,0.858,549,0.564,588,0.858,617,0.761,622,2.072,632,0.858,656,1.145,675,1.748,726,0.939,763,1.905,764,1.827,766,2.349,767,1.905,768,1.991,773,0.896,780,0.896,828,3.064,830,3.064,835,4.294,837,3.976,838,2.902,841,1.107,842,2.588,844,2.459,845,2.316,851,0.987,852,1.107,853,0.987,854,1.107,858,1.107,860,4.536,864,2.902,867,1.774,869,1.774,871,1.107,872,1.107,873,1.281,874,1.281,875,1.411,876,1.411,877,1.281,878,1.281,879,0.939,882,1.281,885,1.281,888,1.107,889,1.107,893,1.281,898,1.884,977,1.345,1140,0.939,1145,1.107,1158,2.401,1164,2.902,1169,0.987,1172,1.774,1174,1.107,1189,1.411,1190,4.215,1191,3.83,1192,3.572,1193,2.737,1194,3.572,1195,3.572,1196,3.572,1197,3.572,1198,1.608,1199,1.608,1200,1.608,1201,1.608,1202,3.572,1203,1.184,1204,1.608,1205,1.608,1206,1.608,1207,2.737,1208,1.608,1209,3.572,1210,1.608,1211,1.608,1212,1.608,1213,1.608,1214,1.608,1215,1.608,1216,1.608,1217,1.608,1218,1.608,1219,4.215,1220,1.608,1221,2.737,1222,1.608,1223,2.737,1224,1.608,1225,1.608,1226,1.608,1227,2.401,1228,1.608,1229,1.608,1230,1.281,1231,1.608,1232,1.608,1233,0.822,1234,4.215,1235,1.608,1236,1.608,1237,1.608,1238,1.608,1239,2.737,1240,1.608,1241,1.608,1242,1.608,1243,1.608,1244,1.608,1245,1.281,1246,1.608,1247,2.737,1248,1.608,1249,1.608,1250,1.184,1251,3.572,1252,1.608,1253,1.608,1254,1.608,1255,1.608,1256,1.411,1257,1.608,1258,1.608,1259,1.608,1260,1.608,1261,2.18,1262,2.737,1263,1.608,1264,1.608,1265,3.134,1266,2.737,1267,1.608,1268,3.572,1269,2.737,1270,1.608,1271,1.608,1272,1.608,1273,2.737,1274,1.608,1275,1.608,1276,1.608,1277,2.737,1278,1.608,1279,1.608,1280,1.608,1281,1.608,1282,1.608,1283,1.608]],["title/classes/PaginationFilesDto.html",[0,0.214,797,2.924]],["body/classes/PaginationFilesDto.html",[0,0.291,2,0.991,3,0.175,4,0.175,5,0.127,17,0.348,18,0.011,23,0.545,30,1.476,31,1.435,32,0.879,36,0.235,45,0.175,78,0.009,79,0.009,86,0.417,111,1.915,116,1.91,376,3.376,546,1.113,618,2.3,656,1.855,677,4.093,740,2.96,741,3.554,742,3.984,797,4.886,1284,6.228,1285,5.079,1286,5.788,1287,3.752,1288,5.788,1289,4.886,1290,7.676,1291,4.263]],["title/classes/PaginationNotificationsDto.html",[0,0.214,1174,2.924]],["body/classes/PaginationNotificationsDto.html",[0,0.304,2,1.034,3,0.183,4,0.183,5,0.133,17,0.363,18,0.011,23,0.569,30,1.54,31,1.498,32,0.917,36,0.241,45,0.183,78,0.009,79,0.009,116,1.994,376,3.44,546,1.162,618,2.401,656,1.936,740,3.09,741,3.709,742,4.158,1140,4.742,1174,5.014,1287,3.916,1289,4.158,1291,4.449,1292,6.392,1293,4.813,1294,6.041,1295,6.041,1296,5.804]],["title/classes/PaginationUserNotificationTokensDto.html",[0,0.214,1297,3.384]],["body/classes/PaginationUserNotificationTokensDto.html",[0,0.287,2,0.977,3,0.173,4,0.173,5,0.125,17,0.343,18,0.011,23,0.537,30,1.454,31,1.414,32,0.866,36,0.233,45,0.173,72,2.706,78,0.009,79,0.009,86,0.415,111,1.897,116,1.882,376,3.355,546,1.097,618,2.267,622,3.457,656,1.828,740,2.917,741,3.502,742,3.926,1033,3.502,1233,4.182,1287,4.56,1289,4.842,1291,4.201,1296,6.076,1297,5.604,1298,5.604,1299,5.704]],["title/classes/PaginationUsersDto.html",[0,0.214,1300,2.753]],["body/classes/PaginationUsersDto.html",[0,0.291,2,0.991,3,0.175,4,0.175,5,0.127,17,0.348,18,0.011,23,0.545,30,1.476,31,1.435,32,0.879,36,0.235,45,0.175,78,0.009,79,0.009,86,0.417,111,1.915,116,1.91,223,2.419,376,3.376,546,1.113,618,2.3,656,1.855,740,2.96,741,3.554,742,3.984,1287,3.752,1289,4.886,1291,4.263,1296,6.116,1298,5.655,1300,4.601,1301,4.612,1302,5.788,1303,5.788]],["title/classes/ResetPasswordDto.html",[0,0.214,233,2.753]],["body/classes/ResetPasswordDto.html",[0,0.377,2,0.94,3,0.166,4,0.166,5,0.121,10,0.458,11,1.211,13,1.004,17,0.33,18,0.011,23,0.517,36,0.248,45,0.208,78,0.009,79,0.009,86,0.419,87,0.909,88,1.217,96,1.252,187,2.333,233,4.453,241,3.56,374,1.075,380,4.729,441,3.249,460,5.16,536,5.473,537,3.021,539,2.928,540,3.206,541,2.201,542,2.503,543,4.729,544,2.928,545,2.182,546,1.321,547,4.729,548,4.375,549,1.924,1304,5.473,1305,4.375,1306,5.491,1307,5.491]],["title/interfaces/Response.html",[51,2.608,562,1.688]],["body/interfaces/Response.html",[0,0.277,3,0.167,4,0.167,5,0.121,8,2.815,10,0.459,11,1.213,17,0.331,18,0.011,36,0.248,39,1.153,45,0.208,51,4.224,75,1.255,78,0.009,79,0.009,86,0.411,111,1.856,213,3.324,347,1.706,374,1.175,493,5.98,562,2.187,564,2.705,1043,5.067,1308,4.385,1309,4.829,1310,4.829,1311,6.036,1312,4.385,1313,6.036,1314,6.036,1315,4.053,1316,4.829,1317,6.036,1318,4.829,1319,4.829]],["title/classes/SelectFileDto.html",[0,0.214,784,3.128]],["body/classes/SelectFileDto.html",[0,0.272,2,0.927,3,0.164,4,0.164,5,0.119,10,0.452,11,1.201,13,1.047,17,0.409,18,0.011,23,0.641,32,1.187,36,0.225,45,0.164,78,0.008,79,0.008,86,0.409,87,0.948,88,1.509,190,2.539,374,0.848,521,2.661,522,2.382,546,1.31,549,1.898,618,2.152,656,1.735,664,3.347,675,2.316,677,2.769,784,5.015,940,3.81,945,3.483,946,3.631,949,2.888,950,2.888,951,2.888,975,2.888,976,3.631,977,3.347,978,3.631,979,3.018,980,2.888,981,2.561,982,2.888,983,3.631,984,3.631,985,3.631,986,3.018,1320,4.751]],["title/classes/SelectFilesDto.html",[0,0.214,781,3.128]],["body/classes/SelectFilesDto.html",[0,0.25,2,0.583,3,0.103,4,0.103,5,0.075,10,0.284,11,0.876,13,1.104,17,0.444,18,0.011,19,1.773,20,1.741,21,1.194,23,0.713,32,1.243,36,0.227,45,0.103,46,1.689,75,1.132,78,0.006,79,0.006,86,0.415,87,1.012,88,1.637,96,0.777,112,1.231,122,2.541,132,2.209,180,3.221,190,2.403,374,1.156,376,2.835,401,1.898,521,1.674,522,1.498,537,1.498,541,1.592,545,1.354,546,0.956,549,2.259,557,1.989,588,4.117,594,2.209,596,2.989,597,2.989,615,3.05,618,1.354,656,2.367,664,3.516,675,1.689,677,1.742,683,3.221,781,3.659,879,1.989,893,2.714,934,2.989,935,2.714,936,4.535,940,2.35,941,3.221,942,4.178,943,3.42,944,3.42,945,2.541,946,2.649,947,3.6,949,3.127,950,3.127,951,3.127,952,3.42,953,2.345,954,2.345,956,3.42,957,3.42,958,3.42,959,3.42,960,3.42,961,3.42,962,3.42,963,3.42,965,2.345,966,3.42,967,4.437,968,4.437,970,3.221,971,2.345,972,2.345,973,3.42,975,1.817,976,2.649,977,2.442,978,2.649,979,1.898,980,1.817,981,1.611,982,1.817,983,2.649,984,2.649,985,2.649,986,1.898,1321,2.989,1322,3.407,1323,4.968,1324,3.407,1325,2.509,1326,2.509,1327,2.509,1328,2.509,1329,2.714,1330,3.407,1331,3.407,1332,2.989,1333,4.968,1334,3.407]],["title/classes/SelectNotificationsDto.html",[0,0.214,1164,2.924]],["body/classes/SelectNotificationsDto.html",[0,0.257,2,0.608,3,0.107,4,0.107,5,0.078,10,0.296,11,0.903,13,1.111,17,0.45,18,0.011,19,1.815,20,1.794,23,0.721,32,1.251,36,0.24,44,1.979,45,0.107,46,2.042,78,0.006,79,0.006,85,4.456,86,0.368,87,1.012,88,1.658,96,0.809,112,1.283,122,2.618,180,3.319,190,2.45,374,1.091,376,2.89,497,2.444,520,2.615,521,1.745,522,1.562,541,1.641,545,1.411,546,0.985,549,2.104,557,2.073,595,2.829,615,3.143,618,1.411,656,2.397,664,3.567,675,1.741,683,3.319,879,2.073,935,4.079,936,4.593,940,2.422,941,3.319,942,4.26,943,3.524,944,3.524,945,2.618,946,2.73,947,3.686,949,3.202,950,3.202,951,3.202,952,3.524,953,2.444,954,2.444,956,3.524,957,3.524,958,3.524,959,3.524,960,3.524,961,3.524,962,3.524,963,3.524,965,2.444,966,3.524,967,4.523,968,4.523,970,3.319,971,2.444,972,2.444,973,3.524,975,1.893,976,2.73,977,2.516,978,2.73,979,1.979,980,1.893,981,1.679,982,1.893,983,2.73,984,2.73,985,2.73,986,1.979,1140,2.073,1145,4.795,1164,3.524,1293,2.829,1325,2.615,1326,2.615,1327,2.615,1328,2.615,1329,2.829,1335,5.268,1336,3.551,1337,3.551,1338,3.551,1339,3.551,1340,3.116,1341,3.551,1342,3.551,1343,3.551,1344,3.551,1345,3.551,1346,3.551]],["title/classes/SelectProfileDto.html",[0,0.214,237,3.128]],["body/classes/SelectProfileDto.html",[0,0.272,2,0.925,3,0.164,4,0.164,5,0.119,10,0.451,11,1.199,13,1.046,17,0.409,18,0.011,23,0.64,32,1.186,36,0.225,45,0.164,78,0.008,79,0.008,86,0.409,87,0.947,88,1.507,190,2.535,223,1.633,237,5.008,374,0.846,521,2.655,522,2.376,546,1.308,549,1.893,600,3.502,618,2.147,664,3.342,675,2.312,726,3.155,940,3.807,945,3.478,946,3.626,949,2.881,950,2.881,951,2.881,975,2.881,976,3.626,977,3.342,978,3.626,979,3.011,980,2.881,981,2.555,982,2.881,983,3.626,984,3.626,985,3.626,986,3.011,1347,4.74]],["title/classes/SelectUserDto.html",[0,0.214,1348,3.128]],["body/classes/SelectUserDto.html",[0,0.272,2,0.925,3,0.164,4,0.164,5,0.119,10,0.451,11,1.199,13,1.046,17,0.409,18,0.011,23,0.64,32,1.186,36,0.225,45,0.164,78,0.008,79,0.008,86,0.409,87,0.947,88,1.507,190,2.535,223,1.633,374,0.846,521,2.655,522,2.376,546,1.308,549,1.893,602,3.979,618,2.147,656,1.731,664,3.342,675,2.312,940,3.807,945,3.478,946,3.626,949,2.881,950,2.881,951,2.881,975,2.881,976,3.626,977,3.342,978,3.626,979,3.011,980,2.881,981,2.555,982,2.881,983,3.626,984,3.626,985,3.626,986,3.011,1348,5.008,1349,3.719]],["title/classes/SelectUserNotificationTokenDto.html",[0,0.214,1350,3.128]],["body/classes/SelectUserNotificationTokenDto.html",[0,0.27,2,0.921,3,0.163,4,0.163,5,0.118,10,0.449,11,1.196,13,1.044,17,0.407,18,0.011,23,0.639,32,1.184,36,0.224,45,0.163,72,2.069,78,0.008,79,0.008,86,0.408,87,0.946,88,1.503,190,2.528,374,0.842,521,2.643,522,2.365,546,1.304,549,1.885,618,2.137,622,2.643,623,3.702,656,1.723,664,3.332,675,2.306,940,3.802,945,3.468,946,3.616,949,2.868,950,2.868,951,2.868,975,2.868,976,3.616,977,3.332,978,3.616,979,2.997,980,2.868,981,2.544,982,2.868,983,3.616,984,3.616,985,3.616,986,2.997,1233,2.75,1349,3.702,1350,4.994]],["title/classes/SelectUserNotificationTokensDto.html",[0,0.214,1351,3.384]],["body/classes/SelectUserNotificationTokensDto.html",[0,0.202,2,0.689,3,0.122,4,0.122,5,0.089,10,0.336,11,0.987,13,1.11,17,0.454,18,0.011,19,1.944,20,1.961,23,0.712,32,1.259,36,0.185,45,0.122,72,1.549,78,0.007,79,0.007,86,0.408,87,1.005,88,1.676,122,2.861,180,3.627,190,2.591,374,1.144,376,3.057,521,1.978,522,1.77,546,1.076,549,2.254,557,2.35,618,1.599,622,1.978,656,2.485,664,3.716,675,1.902,879,2.35,936,4.762,940,2.646,941,3.627,942,4.506,943,3.851,944,3.851,945,2.861,946,2.983,947,3.948,949,3.429,950,3.429,951,3.429,952,3.851,953,2.77,954,2.77,956,3.851,957,3.851,958,3.851,959,3.851,960,3.851,961,3.851,962,3.851,963,3.851,965,2.77,966,3.851,967,4.784,968,4.784,970,3.627,971,2.77,972,2.77,973,3.851,975,2.146,976,2.983,977,2.749,978,2.983,979,2.243,980,2.146,981,1.904,982,2.146,983,2.983,984,2.983,985,2.983,986,2.243,1033,2.471,1233,2.058,1325,2.964,1326,2.964,1327,2.964,1328,2.964,1349,2.77,1351,4.458]],["title/classes/SelectUsersDto.html",[0,0.214,1352,2.924]],["body/classes/SelectUsersDto.html",[0,0.193,2,0.657,3,0.116,4,0.116,5,0.084,10,0.32,11,0.954,13,1.101,17,0.447,18,0.011,19,1.894,20,1.895,23,0.721,32,1.248,36,0.225,44,2.137,45,0.116,75,0.874,78,0.007,79,0.007,85,2.354,86,0.413,87,1.005,88,1.65,112,1.386,122,2.766,180,3.506,190,2.537,223,1.159,374,1.123,376,2.993,401,2.137,521,1.884,522,1.687,546,1.04,549,2.196,557,2.239,618,1.524,656,2.452,664,3.659,675,1.839,683,3.506,879,2.239,936,4.697,940,2.558,941,3.506,942,4.411,943,3.723,944,3.723,945,2.766,946,2.884,947,3.847,949,3.341,950,3.341,951,3.341,952,3.723,953,2.639,954,2.639,956,3.723,957,3.723,958,3.723,959,3.723,960,3.723,961,3.723,962,3.723,963,3.723,965,2.639,966,3.723,967,4.684,968,4.684,970,3.506,971,2.639,972,2.639,973,3.723,975,2.045,976,2.884,977,2.658,978,2.884,979,2.137,980,2.045,981,1.814,982,2.045,983,2.884,984,2.884,985,2.884,986,2.137,1301,3.055,1325,2.824,1326,2.824,1327,2.824,1328,2.824,1329,3.055,1332,3.365,1349,3.723,1352,3.723,1353,3.834,1354,3.055,1355,3.365]],["title/modules/SendGridModule.html",[142,1.688,317,2.924]],["body/modules/SendGridModule.html",[0,0.182,3,0.109,4,0.109,5,0.079,12,3.019,15,1.002,17,0.398,18,0.011,23,0.624,30,1.689,31,1.642,32,1.006,34,1.642,36,0.232,39,0.756,45,0.109,75,1.812,78,0.006,79,0.006,86,0.441,87,0.438,111,1.786,131,3.014,142,2.632,144,1.774,159,2.108,176,2.451,177,2.763,183,1.265,192,3.026,193,6.128,194,3.539,317,4.558,321,3.181,364,5.175,374,0.565,404,1.847,482,4.129,564,1.774,1095,6.749,1096,5.318,1097,4.547,1100,6.153,1101,5.318,1102,4.547,1104,5.318,1105,4.547,1108,6.153,1109,5.318,1110,4.547,1112,5.318,1113,3.168,1114,3.168,1120,5.318,1121,3.168,1122,3.168,1123,4.547,1124,5.318,1125,4.547,1126,5.318,1127,3.168,1128,3.168,1356,3.611,1357,5.153,1358,3.611,1359,3.611,1360,4.066,1361,3.611,1362,3.611,1363,5.375,1364,5.587,1365,3.168,1366,3.611,1367,3.359,1368,3.611]],["title/interfaces/SendGridModuleAsyncOptions.html",[562,1.688,1357,2.753]],["body/interfaces/SendGridModuleAsyncOptions.html",[3,0.16,4,0.16,5,0.116,10,0.441,11,1.182,17,0.517,18,0.011,19,1.597,32,1.275,36,0.244,39,1.106,45,0.223,78,0.008,79,0.008,91,2.148,176,3.664,177,4.13,194,4.523,344,3.889,374,1.153,376,2.323,390,1.851,501,4.614,546,1.289,562,2.926,564,2.595,981,2.498,1131,3.242,1132,4.614,1133,5.332,1135,3.635,1136,3.635,1138,3.635,1357,4.345,1360,4.521,1367,3.424,1369,3.889,1370,3.889,1371,3.889,1372,4.208,1373,4.208,1374,4.208,1375,4.208]],["title/interfaces/SendGridModuleOptions.html",[562,1.688,1360,2.608]],["body/interfaces/SendGridModuleOptions.html",[3,0.16,4,0.16,5,0.116,10,0.441,11,1.182,17,0.51,18,0.011,19,2.342,32,1.241,36,0.244,39,1.106,45,0.223,78,0.008,79,0.008,91,2.148,176,2.498,177,2.816,194,3.084,344,5.705,374,1.252,376,3.239,390,2.581,546,1.016,562,2.926,564,2.595,981,2.498,1131,3.242,1132,3.635,1133,3.635,1135,3.635,1136,3.635,1138,3.635,1357,3.424,1360,4.756,1367,3.424,1369,3.889,1370,3.889,1371,3.889,1372,6.171,1373,6.171,1374,4.208,1375,4.208,1376,5.882]],["title/interfaces/SendGridOptionsFactory.html",[562,1.688,1367,2.753]],["body/interfaces/SendGridOptionsFactory.html",[3,0.169,4,0.169,5,0.123,10,0.467,15,1.929,17,0.454,18,0.011,19,1.692,23,0.527,34,1.387,36,0.25,39,1.172,45,0.229,78,0.009,79,0.009,91,2.423,176,2.646,177,2.984,194,3.267,344,4.121,374,1.184,376,2.461,390,1.961,546,1.076,562,3.005,564,2.75,981,2.646,1131,3.435,1132,3.851,1133,3.851,1135,3.851,1136,3.851,1138,3.851,1357,3.627,1360,4.855,1367,4.506,1369,5.119,1370,4.121,1371,4.121,1372,4.458,1373,4.458,1374,4.458,1375,6.301,1377,5.595]],["title/injectables/SendGridService.html",[347,1.053,364,2.924]],["body/injectables/SendGridService.html",[0,0.207,3,0.124,4,0.124,5,0.09,10,0.343,11,1.001,12,3.555,13,0.939,14,6.153,15,1.575,17,0.421,18,0.011,19,1.242,20,1.44,21,2.579,23,0.693,26,3.679,30,1.788,31,1.739,32,1.065,34,1.612,36,0.258,39,0.861,45,0.124,46,1.93,51,3.485,75,1.598,78,0.007,79,0.007,87,0.923,91,2.247,116,1.873,131,2.184,176,1.944,183,2.667,213,3.204,347,1.407,348,1.688,364,3.907,390,2.828,445,2.86,497,2.829,546,1.092,564,2.019,740,2.102,1360,4.305,1363,3.026,1365,3.606,1370,5.164,1371,3.026,1378,3.606,1379,6.502,1380,5.676,1381,6.502,1382,6.502,1383,4.109,1384,4.109,1385,5.676,1386,4.109,1387,4.109,1388,4.109,1389,4.109,1390,4.109,1391,5.676,1392,4.109,1393,6.502,1394,4.109,1395,4.109,1396,3.606,1397,5.676,1398,4.109,1399,4.109,1400,4.109,1401,4.109,1402,4.109,1403,4.109,1404,4.109,1405,4.109,1406,4.109,1407,4.109,1408,4.109,1409,4.109,1410,4.109,1411,4.109,1412,4.109,1413,5.676,1414,5.676,1415,4.109]],["title/classes/SendResetPasswordDto.html",[0,0.214,241,2.753]],["body/classes/SendResetPasswordDto.html",[0,0.386,2,0.991,3,0.175,4,0.175,5,0.127,13,0.775,18,0.011,36,0.254,45,0.215,78,0.009,79,0.009,86,0.417,87,0.702,96,1.319,187,2.459,233,3.752,241,4.601,374,0.906,380,3.984,441,3.357,460,3.984,536,4.612,537,2.546,539,3.087,540,3.38,541,2.274,542,2.638,543,4.886,544,3.087,545,2.3,546,1.365,547,4.886,548,4.612,549,2.028,1304,4.612,1305,4.612]],["title/injectables/StorageS3Service.html",[347,1.053,1416,3.384]],["body/injectables/StorageS3Service.html",[0,0.154,3,0.093,4,0.093,5,0.121,10,0.255,11,0.809,12,3.137,13,0.956,15,1.274,16,2.348,17,0.451,18,0.011,21,2.144,23,0.691,30,1.671,31,1.625,32,0.995,34,1.625,36,0.253,39,0.641,42,1.448,43,1.395,45,0.093,46,2.553,70,1.984,75,1.494,78,0.006,79,0.006,86,0.411,87,0.982,91,2.488,105,2.931,111,1.768,116,1.01,131,2.746,168,3.607,183,2.756,269,1.448,286,2.171,332,1.706,347,1.138,348,1.257,374,0.719,377,2.439,410,2.254,414,1.504,440,2.254,445,1.346,497,4.913,505,3.41,531,2.439,553,2.976,567,2.976,569,3.216,588,1.632,680,4.512,681,1.879,685,1.787,715,5.686,719,2.439,737,2.254,749,2.107,755,1.879,763,2.448,764,2.817,834,3.657,851,1.879,897,2.439,1416,3.657,1417,5.981,1418,2.439,1419,6.882,1420,5.369,1421,5.507,1422,4.59,1423,4.59,1424,3.061,1425,3.061,1426,5.507,1427,3.061,1428,3.061,1429,3.061,1430,5.369,1431,3.061,1432,4.59,1433,5.369,1434,3.061,1435,4.59,1436,3.061,1437,3.061,1438,4.832,1439,3.061,1440,3.061,1441,3.061,1442,3.061,1443,3.061,1444,3.657,1445,4.59,1446,6.118,1447,3.061,1448,2.439,1449,2.686,1450,2.686,1451,2.439,1452,2.686,1453,2.686,1454,3.061,1455,3.061,1456,3.061,1457,2.686,1458,2.686,1459,3.061,1460,3.061,1461,3.061,1462,3.061,1463,2.686,1464,2.686,1465,2.686,1466,3.061]],["title/injectables/StorageService.html",[347,1.053,831,2.924]],["body/injectables/StorageService.html",[0,0.138,3,0.083,4,0.083,5,0.127,8,1.403,10,0.229,11,0.745,12,3.132,13,0.995,15,1.172,16,2.16,17,0.426,18,0.011,19,1.277,20,1.48,21,2.027,23,0.685,30,1.475,31,1.434,32,1.002,34,1.548,36,0.254,39,0.575,42,1.297,43,1.25,45,0.083,46,2.609,75,1.424,78,0.005,79,0.005,84,3.647,86,0.43,87,0.984,88,0.608,91,2.273,105,2.822,109,2.02,110,2.407,111,1.779,116,1.394,131,2.73,141,1.297,168,3.486,176,1.297,183,2.689,269,1.297,286,3.12,332,1.529,347,1.047,348,1.127,374,1.111,377,2.186,390,1.805,404,1.403,410,2.02,411,2.02,414,1.348,440,2.02,445,1.858,451,1.25,498,2.02,505,4.055,518,3.365,522,1.207,531,3.365,553,2.738,567,2.738,568,2.407,569,2.466,572,2.407,588,1.463,611,2.738,680,2.907,681,1.684,685,1.602,737,2.02,749,1.888,763,2.252,764,2.16,767,2.252,831,2.907,834,3.365,851,1.684,897,3.365,1115,2.02,1117,2.407,1376,2.407,1420,5.075,1448,2.186,1449,2.407,1450,2.407,1451,2.186,1452,2.407,1453,2.407,1457,2.407,1458,2.407,1463,2.407,1464,2.407,1465,2.407,1467,2.407,1468,7.561,1469,5.149,1470,6.596,1471,4.223,1472,2.743,1473,4.223,1474,2.743,1475,2.743,1476,2.743,1477,4.223,1478,2.743,1479,4.223,1480,2.743,1481,4.223,1482,2.743,1483,2.743,1484,2.743,1485,2.743,1486,2.743,1487,2.743,1488,2.743,1489,2.743,1490,2.743,1491,2.743,1492,2.743,1493,2.743,1494,2.743,1495,2.743,1496,4.223,1497,2.743,1498,2.743,1499,5.149,1500,4.223,1501,2.743,1502,2.743,1503,2.743,1504,2.743,1505,2.743,1506,4.223,1507,2.743,1508,2.743,1509,2.743,1510,2.743,1511,2.407,1512,2.743]],["title/injectables/TransformInterceptor.html",[347,1.053,1315,3.128]],["body/injectables/TransformInterceptor.html",[0,0.27,3,0.163,4,0.163,5,0.118,8,2.75,10,0.449,15,1.882,17,0.323,18,0.011,23,0.506,30,1.371,31,1.333,32,0.817,34,1.333,36,0.246,39,1.127,45,0.205,51,3.302,75,1.226,78,0.008,79,0.008,86,0.417,111,1.829,213,2.785,347,1.681,348,2.209,374,0.842,493,4.285,562,2.137,1043,5.742,1308,4.285,1309,4.719,1310,4.719,1311,6.516,1312,4.285,1313,6.842,1314,5.949,1315,4.994,1316,5.949,1317,6.842,1318,5.949,1319,4.719,1513,6.78,1514,5.378]],["title/classes/UpdateEmailDto.html",[0,0.214,249,2.608]],["body/classes/UpdateEmailDto.html",[0,0.397,2,0.956,3,0.169,4,0.169,5,0.123,13,0.747,18,0.011,36,0.25,45,0.229,78,0.009,79,0.009,86,0.42,87,0.677,96,1.272,187,3.357,245,3.619,249,4.261,253,3.427,374,0.874,441,3.283,537,3.053,540,3.26,541,2.224,542,2.545,545,2.218,546,1.453,549,1.956,594,4.499,600,3.619,611,3.619,612,3.842,619,4.111,620,4.111,1515,4.111,1516,4.447,1517,3.427,1518,4.447,1519,5.53,1520,4.447]],["title/classes/UpdateNotificationDto.html",[0,0.214,1170,3.128]],["body/classes/UpdateNotificationDto.html",[0,0.359,2,1.001,3,0.177,4,0.177,5,0.129,10,0.488,11,1.259,13,1.032,17,0.351,18,0.011,23,0.551,32,1.084,36,0.266,44,3.258,45,0.177,78,0.009,79,0.009,85,4.734,87,0.935,88,1.296,96,1.332,545,2.323,546,1.124,585,4.024,587,4.658,590,5.129,595,4.658,615,4.384,666,4.305,1145,5.307,1170,5.259,1340,5.129,1521,6.266,1522,5.845,1523,4.658,1524,5.845,1525,5.845]],["title/classes/UpdatePasswordDto.html",[0,0.214,253,2.608]],["body/classes/UpdatePasswordDto.html",[0,0.389,2,0.904,3,0.16,4,0.16,5,0.116,10,0.441,11,1.182,13,0.986,17,0.317,18,0.011,23,0.497,36,0.244,45,0.223,78,0.008,79,0.008,86,0.421,87,0.893,88,1.17,96,1.204,187,3.396,245,3.424,249,3.242,253,4.115,374,1.049,441,3.17,537,3.239,540,3.084,541,2.148,542,2.407,545,2.099,546,1.416,549,2.349,594,4.345,600,3.424,610,4.634,611,4.345,612,4.614,619,3.889,620,3.889,1515,4.937,1516,4.208,1517,3.242,1518,4.208,1519,5.341,1520,5.867,1526,5.281]],["title/classes/UpdateProfileDto.html",[0,0.214,245,2.753]],["body/classes/UpdateProfileDto.html",[0,0.397,2,0.956,3,0.169,4,0.169,5,0.123,13,0.747,18,0.011,36,0.25,45,0.229,78,0.009,79,0.009,86,0.42,87,0.677,96,1.272,187,3.357,245,4.499,249,3.427,253,3.427,374,0.874,441,3.283,537,3.053,540,3.26,541,2.224,542,2.545,545,2.218,546,1.453,549,1.956,594,4.499,600,3.619,611,3.619,612,3.842,619,4.111,620,4.111,1515,4.111,1516,4.447,1517,3.427,1518,4.447,1519,5.53,1520,4.447]],["title/classes/UpdateUserDto.html",[0,0.214,1517,2.608]],["body/classes/UpdateUserDto.html",[0,0.32,2,1.09,3,0.193,4,0.193,5,0.14,18,0.011,36,0.249,45,0.193,78,0.009,79,0.009,86,0.406,96,1.452,539,3.396,546,1.225,602,4.69,666,4.69,1517,4.615,1523,5.074,1527,5.074,1528,6.368,1529,6.368]],["title/classes/UpdateUserNotificationTokenDto.html",[0,0.214,1530,3.128]],["body/classes/UpdateUserNotificationTokenDto.html",[0,0.317,2,1.079,3,0.191,4,0.191,5,0.139,18,0.011,36,0.247,45,0.191,72,2.874,78,0.009,79,0.009,86,0.404,96,1.436,546,1.212,621,4.084,622,3.671,623,4.336,666,4.64,667,5.528,1523,5.019,1527,5.019,1530,5.501,1531,6.3]],["title/classes/UploadedFile.html",[0,0.214,553,2.753]],["body/classes/UploadedFile.html",[0,0.231,2,0.786,3,0.139,4,0.139,5,0.101,10,0.383,11,1.079,13,1.164,17,0.482,18,0.011,23,0.756,30,1.171,31,1.138,32,0.697,45,0.139,78,0.008,79,0.008,86,0.442,87,1.054,111,1.238,116,1.515,213,2.827,374,1.326,390,2.412,505,3.835,552,3.381,553,3.967,567,4.462,569,4.019,588,3.67,680,4.738,681,4.226,741,2.818,1532,7.156,1533,6.119,1534,4.59,1535,4.59,1536,4.59,1537,4.59,1538,4.59,1539,4.59,1540,4.59]],["title/classes/UserEntity.html",[0,0.214,223,1.284]],["body/classes/UserEntity.html",[0,0.204,2,0.446,3,0.079,4,0.079,5,0.057,10,0.217,11,0.715,13,1.143,15,1.125,17,0.483,18,0.011,19,2.322,20,1.746,21,1.746,23,0.714,34,0.645,36,0.231,44,1.451,45,0.079,72,1.561,75,0.593,78,0.005,79,0.005,85,3.059,86,0.426,87,1.04,88,1.68,91,1.3,96,0.593,112,0.941,141,1.918,183,1.746,187,2.117,190,2.407,202,3.429,223,1.226,286,1.231,288,1.464,290,2.883,372,3.453,374,1.011,390,1.421,413,1.688,441,2.356,450,2.987,451,3.455,452,3.669,520,5.394,537,1.145,541,2.296,544,2.999,603,4.372,608,4.935,617,1.231,622,1.279,675,0.885,677,3.118,679,3.23,682,3.23,685,3.771,686,3.872,688,3.646,691,3.646,693,2.792,703,1.792,707,2.629,708,1.688,717,3.646,720,3.952,721,2.629,722,2.792,723,2.629,724,2.629,725,1.688,728,1.688,731,3.231,738,2.792,748,2.792,800,4.139,945,2.074,996,1.917,1063,1.688,1146,3.559,1147,3.559,1149,2.074,1155,2.987,1233,2.877,1261,3.97,1354,5.372,1355,3.559,1541,2.284,1542,4.982,1543,5.624,1544,2.603,1545,2.603,1546,3.559,1547,2.603,1548,2.074,1549,2.603,1550,2.603,1551,2.603,1552,4.056,1553,2.603,1554,3.559,1555,2.603,1556,2.603,1557,4.056,1558,2.603,1559,2.603,1560,3.559,1561,2.603,1562,2.603,1563,2.603,1564,2.603,1565,2.074,1566,2.603,1567,2.603,1568,2.603,1569,2.603,1570,1.917,1571,4.982,1572,4.056,1573,4.056,1574,4.056,1575,4.056,1576,2.603,1577,4.056,1578,4.056,1579,2.603,1580,2.603,1581,2.603,1582,2.603,1583,2.603,1584,2.603,1585,2.603]],["title/classes/UserNotificationTokenEntity.html",[0,0.214,1233,2.172]],["body/classes/UserNotificationTokenEntity.html",[0,0.202,2,0.689,3,0.122,4,0.122,5,0.089,10,0.336,11,0.987,13,1.147,17,0.475,18,0.011,19,2.101,23,0.688,36,0.213,45,0.122,78,0.007,79,0.007,86,0.413,87,1.025,88,1.619,96,0.917,112,1.454,141,3.287,190,2.397,223,1.691,288,1.889,290,3.042,374,1.088,390,1.961,432,3.289,451,3.33,537,1.77,541,2.341,544,2.983,622,3.716,675,1.369,679,4.169,682,4.169,685,4.058,686,4.427,688,4.506,691,3.627,693,4.784,696,4.736,703,2.77,706,3.207,707,3.627,708,3.627,717,3.627,720,3.627,721,3.627,722,3.851,723,3.627,724,3.627,725,2.609,726,2.35,728,2.609,1149,3.207,1150,3.532,1155,4.12,1233,2.861,1261,4.458,1548,3.207,1554,4.909,1565,3.207,1586,6.024,1587,3.207,1588,4.025,1589,3.532,1590,4.025,1591,4.025,1592,4.025,1593,4.025]],["title/controllers/UserNotificationTokensController.html",[80,2.009,1594,3.128]],["body/controllers/UserNotificationTokensController.html",[0,0.146,3,0.088,4,0.088,5,0.064,10,0.243,13,0.39,15,1.227,17,0.406,18,0.011,23,0.636,30,1.722,31,1.675,32,1.026,34,1.675,36,0.239,39,0.61,45,0.088,68,3.465,70,3.465,72,2.599,75,1.539,78,0.005,79,0.005,80,1.378,82,1.432,84,1.701,86,0.41,87,0.994,88,1.497,91,2.493,95,1.888,96,0.664,111,2.123,131,2.782,183,2.872,213,3.041,223,2.445,256,3.044,258,3.679,259,2.005,260,2.005,261,2.005,262,2.005,263,2.005,269,1.378,273,1.701,277,2.005,288,2.357,290,3.918,292,4.258,305,2.005,403,4.312,455,1.553,618,1.158,621,3.868,622,3.449,656,0.933,662,4.395,755,1.788,763,2.85,764,2.733,766,2.464,767,2.85,768,2.978,773,1.623,780,1.623,793,3.936,807,5.112,809,2.321,811,3.257,813,3.257,815,3.257,1169,1.788,1173,2.005,1191,3.664,1233,1.49,1300,1.888,1350,4.395,1352,4.107,1530,4.395,1594,3.257,1595,6.158,1596,2.556,1597,2.913,1598,5.344,1599,2.556,1600,2.913,1601,2.913,1602,2.913,1603,2.913,1604,2.913,1605,2.913,1606,2.913,1607,2.556,1608,2.913,1609,2.913,1610,2.913,1611,2.913,1612,2.913,1613,2.913,1614,4.422]],["title/injectables/UserNotificationTokensService.html",[347,1.053,1191,2.608]],["body/injectables/UserNotificationTokensService.html",[0,0.207,3,0.081,4,0.081,5,0.059,10,0.222,11,0.728,13,0.677,15,1.145,16,1.362,17,0.422,18,0.011,19,1.862,20,2.159,21,2.159,23,0.662,30,1.733,31,1.685,32,1.032,34,1.616,36,0.216,39,0.558,43,1.214,45,0.081,46,2.216,75,1.644,78,0.005,79,0.005,86,0.407,87,0.996,88,0.59,91,2.362,111,2.056,112,0.962,116,1.362,131,3.127,141,3.486,183,2.764,286,1.952,347,1.023,348,1.094,390,2.284,400,4.778,401,3.172,403,3.93,404,1.362,414,1.308,445,2.709,453,3.495,455,1.42,617,1.259,622,3.545,632,1.42,656,0.853,675,1.718,763,2.695,764,2.585,766,2.816,767,2.695,768,2.816,773,1.484,780,1.484,828,3.276,830,3.993,835,4.679,837,4.486,838,3.918,841,1.833,842,4.174,844,3.479,845,3.276,850,1.961,851,1.635,852,1.833,853,1.635,854,1.833,858,1.833,860,4.836,864,3.479,867,1.726,869,1.726,871,1.833,872,1.833,888,1.833,889,1.833,898,2.841,1169,1.635,1191,2.534,1203,1.961,1233,1.362,1245,2.121,1250,1.961,1615,5.747,1616,2.121,1617,6.16,1618,2.662,1619,2.662,1620,2.662,1621,2.662,1622,2.662,1623,2.662,1624,2.662,1625,2.336,1626,4.127,1627,2.662,1628,5.053,1629,2.662,1630,4.127,1631,4.127,1632,2.662,1633,2.662,1634,2.336,1635,2.336,1636,2.336,1637,2.662,1638,4.127,1639,2.662,1640,2.662]],["title/classes/UserRefreshTokenEntity.html",[0,0.214,372,2.608]],["body/classes/UserRefreshTokenEntity.html",[0,0.286,2,0.706,3,0.125,4,0.125,5,0.091,10,0.344,11,1.003,13,1.136,17,0.478,18,0.011,19,2.123,23,0.694,36,0.232,45,0.125,78,0.007,79,0.007,86,0.415,87,1.029,88,1.633,96,0.94,112,1.49,190,2.428,202,3.916,223,1.72,288,1.914,290,3.081,372,3.493,374,1.099,390,1.994,431,3.804,451,2.969,541,2.25,544,3.034,617,1.95,675,1.402,679,4.223,682,4.223,685,4.101,686,4.484,688,4.553,691,3.688,703,2.838,707,3.688,708,3.688,717,4.223,720,3.688,721,3.688,723,3.688,724,3.688,725,2.673,728,2.673,1063,4.939,1155,4.19,1548,3.285,1560,4.992,1565,3.285,1586,6.07,1587,3.285,1589,3.618,1641,4.123,1642,4.123,1643,4.123,1644,4.123,1645,4.123,1646,4.123,1647,4.123,1648,5.689,1649,4.123]],["title/injectables/UserRefreshTokensService.html",[265,2.608,347,1.053]],["body/injectables/UserRefreshTokensService.html",[0,0.192,3,0.073,4,0.073,5,0.053,10,0.201,11,0.672,13,0.634,15,1.058,16,1.231,17,0.42,18,0.011,19,1.888,20,2.189,21,2.058,23,0.658,30,1.731,31,1.683,32,1.031,34,1.622,36,0.225,39,0.504,43,1.097,45,0.073,46,2.376,75,1.632,78,0.005,79,0.005,86,0.406,87,0.996,88,0.533,91,2.381,111,2.061,112,0.87,116,1.258,131,3.173,141,3.515,183,2.78,265,2.341,286,2.548,347,0.945,348,0.988,372,1.477,390,2.449,400,4.641,401,3.002,403,3.818,404,1.231,410,1.772,411,1.772,413,1.56,414,1.183,431,2.226,445,2.582,453,3.307,455,1.283,617,1.138,632,1.283,656,0.771,675,1.996,763,2.525,764,2.422,766,2.638,767,2.525,768,2.638,773,1.341,780,1.341,828,3.069,830,3.806,835,4.928,837,4.672,838,3.708,841,1.656,842,4.018,844,3.259,845,3.069,850,1.772,851,1.477,852,1.656,853,1.477,854,1.656,858,1.656,860,5.115,864,2.624,867,1.56,869,1.56,871,1.656,872,1.656,888,1.656,889,1.656,898,2.624,1063,4.641,1169,1.477,1203,1.772,1245,1.917,1250,1.772,1448,1.917,1570,1.772,1615,5.704,1616,1.917,1625,2.111,1634,2.111,1635,2.111,1636,2.111,1650,5.871,1651,4.735,1652,2.406,1653,2.406,1654,2.406,1655,2.406,1656,2.406,1657,2.406,1658,2.406,1659,2.406,1660,2.406,1661,3.812,1662,2.406,1663,3.812,1664,3.812,1665,2.406,1666,2.406,1667,4.735,1668,2.406,1669,3.812,1670,3.812,1671,2.406,1672,2.406,1673,2.406,1674,3.812,1675,2.406,1676,2.406]],["title/controllers/UsersController.html",[80,2.009,1677,3.128]],["body/controllers/UsersController.html",[0,0.175,3,0.105,4,0.105,5,0.076,10,0.29,13,0.466,15,1.399,17,0.415,18,0.011,23,0.651,30,1.762,31,1.713,32,1.049,34,1.713,36,0.257,39,0.728,44,1.938,45,0.105,68,3.269,70,3.269,75,1.575,78,0.006,79,0.006,80,1.645,82,1.709,84,2.031,86,0.417,87,1.003,88,1.531,91,2.526,95,2.254,96,0.793,111,2.154,131,2.93,183,2.898,213,3.127,223,1.051,256,3.471,258,3.471,259,2.394,260,2.394,261,2.394,262,2.394,263,2.394,266,3.627,269,1.645,273,2.031,277,2.394,288,2.315,305,2.394,333,2.561,403,4.138,448,3.051,455,1.854,539,3.47,618,1.382,656,1.114,755,2.135,763,2.689,764,2.579,766,2.81,767,3.164,768,3.306,773,1.938,780,1.938,793,2.561,794,2.561,800,2.135,808,5.71,809,2.771,811,3.714,813,2.561,815,2.561,816,3.051,1169,2.135,1173,2.394,1300,2.254,1348,4.793,1352,4.48,1517,3.996,1599,3.051,1607,3.051,1677,3.714,1678,3.051,1679,3.477,1680,3.477,1681,3.477,1682,3.477,1683,3.477,1684,3.477,1685,3.477,1686,3.477,1687,3.477,1688,3.477,1689,3.477,1690,3.477,1691,3.477,1692,3.477,1693,3.477,1694,3.477]],["title/modules/UsersModule.html",[142,1.688,154,2.608]],["body/modules/UsersModule.html",[0,0.256,3,0.154,4,0.154,5,0.112,18,0.011,36,0.262,39,1.066,45,0.154,78,0.008,79,0.008,82,3.556,86,0.367,142,2.601,144,2.5,145,3.647,154,5.304,155,4.018,156,3.123,157,2.97,159,2.97,192,3.822,223,1.538,265,5.278,266,4.791,321,4.018,372,4.018,630,3.746,632,2.713,656,1.63,1173,3.502,1191,5.278,1233,3.347,1594,5.329,1677,5.329,1695,4.464,1696,4.464,1697,4.464,1698,5.087,1699,5.087]],["title/injectables/UsersService.html",[266,2.367,347,1.053]],["body/injectables/UsersService.html",[0,0.197,3,0.076,4,0.076,5,0.055,10,0.208,11,0.692,13,0.649,15,1.089,16,2.007,17,0.413,18,0.011,19,1.807,20,2.094,21,2.223,23,0.647,30,1.692,31,1.645,32,1.008,34,1.573,36,0.22,39,0.523,43,1.138,45,0.076,46,2.337,75,1.612,78,0.005,79,0.005,86,0.402,87,0.987,88,0.553,91,2.319,111,2.023,112,0.902,116,1.295,131,3.113,141,3.49,183,2.728,223,0.755,266,2.187,269,1.18,286,2.6,288,1.615,347,0.973,348,1.025,390,2.223,400,4.691,401,3.063,403,3.859,404,1.276,414,1.226,445,2.628,451,1.789,453,3.895,455,1.331,549,1.375,617,1.18,632,1.331,656,0.8,675,1.649,763,2.586,764,2.48,766,2.702,767,2.586,768,2.702,773,1.391,780,1.391,828,2.544,830,3.874,835,4.568,837,4.367,838,3.783,841,2.701,842,4.074,844,2.701,845,3.143,850,1.838,851,1.532,852,1.718,853,1.532,854,1.718,858,1.718,860,4.732,864,3.338,867,1.618,869,1.618,871,1.718,872,1.718,873,1.988,874,1.988,877,3.126,878,1.988,879,1.457,882,1.988,883,2.19,884,2.19,885,1.988,888,1.718,889,1.718,898,2.701,947,2.977,1018,2.19,1169,1.532,1203,1.838,1250,1.838,1256,3.443,1300,1.618,1700,2.19,1701,5.975,1702,2.496,1703,2.496,1704,2.496,1705,2.496,1706,2.496,1707,2.496,1708,2.496,1709,2.496,1710,3.924,1711,2.496,1712,4.848,1713,2.496,1714,3.924,1715,3.924,1716,2.496,1717,2.496,1718,2.496,1719,2.496,1720,2.496,1721,4.848,1722,2.496,1723,2.496,1724,2.496,1725,2.496,1726,2.496,1727,3.924,1728,2.496,1729,2.496]],["title/changelog.html",[494,2.822,1730,3.108,1731,3.542]],["body/changelog.html",[18,0.01,78,0.01,79,0.01,1161,6.769,1732,6.656,1733,7.714,1734,7.714,1735,6.656,1736,6.656,1737,6.656,1738,6.656,1739,6.656,1740,6.656,1741,6.656]],["title/coverage.html",[1742,4.276]],["body/coverage.html",[0,0.432,1,1.779,5,0.079,6,1.959,7,2.861,17,0.134,18,0.011,21,0.782,51,1.371,72,2.444,78,0.004,79,0.004,80,2.858,81,1.644,83,1.959,105,1.475,187,0.949,195,1.644,196,1.959,210,1.537,213,0.917,215,1.537,219,1.537,223,0.675,226,1.371,233,1.447,237,1.644,241,1.447,245,1.447,249,1.371,253,1.371,265,1.371,266,1.244,268,1.304,270,1.304,272,1.644,273,1.304,288,0.656,318,1.537,319,1.537,335,1.779,347,1.904,349,1.959,364,1.537,372,1.371,412,1.644,415,1.304,416,1.304,440,5.981,484,1.959,495,7.011,501,4.159,533,1.959,534,1.959,539,1.191,550,1.644,551,1.959,552,3.318,553,1.447,562,2.625,563,1.644,565,4.166,566,3.801,582,1.779,585,1.537,586,1.959,587,2.861,599,1.959,600,3.667,601,2.861,602,3.318,621,1.447,622,3.351,623,3.553,628,1.959,662,1.644,663,1.959,668,1.537,669,1.959,677,1.142,678,2.861,738,1.537,744,1.644,745,1.959,746,1.959,760,1.644,761,1.959,781,1.644,784,1.644,794,1.644,797,1.537,798,1.447,827,1.959,831,1.537,846,1.537,931,1.779,932,3.589,933,1.959,936,1.371,937,2.861,938,2.861,939,2.861,940,1.056,970,1.447,996,2.645,997,1.644,1025,1.779,1026,1.959,1029,1.959,1032,3.553,1033,3.71,1037,1.959,1059,1.959,1060,1.959,1063,2.328,1068,1.959,1069,1.959,1087,1.959,1098,1.537,1115,1.644,1116,1.779,1119,1.537,1130,2.645,1131,3.473,1140,1.304,1141,1.959,1159,1.644,1160,1.959,1164,1.537,1170,1.644,1172,1.447,1174,1.537,1189,1.959,1191,1.371,1233,1.142,1284,1.959,1285,1.959,1287,1.447,1292,1.959,1293,2.861,1297,1.779,1298,2.861,1300,1.447,1301,2.861,1304,2.861,1305,2.861,1308,2.861,1315,1.644,1320,1.959,1321,1.959,1335,1.959,1347,1.959,1348,1.644,1349,3.553,1350,1.644,1351,1.779,1352,1.537,1357,1.447,1360,1.371,1363,1.644,1364,1.779,1367,1.447,1369,3.318,1378,1.959,1416,1.779,1417,1.779,1418,1.779,1467,1.959,1515,3.318,1517,1.371,1521,1.959,1527,2.861,1530,1.644,1532,1.959,1541,1.959,1570,1.644,1586,2.861,1587,2.861,1594,1.644,1595,1.959,1596,1.959,1615,2.861,1616,2.861,1677,1.644,1678,1.959,1700,1.959,1742,1.644,1743,2.233,1744,2.233,1745,1.959,1746,7.687,1747,7.68,1748,1.959,1749,7.99,1750,1.959,1751,5.656,1752,7.285,1753,1.959,1754,4.505,1755,4.963,1756,1.959,1757,7.506,1758,1.959,1759,1.959,1760,1.959,1761,1.959,1762,1.959,1763,1.959,1764,2.861,1765,1.959,1766,1.959,1767,1.959,1768,1.959,1769,2.233,1770,3.591,1771,3.589,1772,3.589,1773,1.779,1774,1.959,1775,1.959,1776,1.959,1777,1.959,1778,1.959,1779,1.959,1780,1.959,1781,2.233,1782,2.233,1783,2.233,1784,4.505,1785,3.591,1786,2.233,1787,2.233,1788,4.505,1789,2.233,1790,2.233,1791,2.233,1792,2.233,1793,4.505,1794,4.505,1795,2.233,1796,2.233,1797,2.233,1798,2.233,1799,3.591,1800,3.591,1801,3.591,1802,3.591,1803,3.151,1804,1.959,1805,3.151,1806,2.233,1807,2.233,1808,3.591,1809,3.151,1810,2.233,1811,1.959,1812,1.959,1813,2.233,1814,1.959,1815,1.959,1816,1.959]],["title/dependencies.html",[145,2.848,1817,3.542]],["body/dependencies.html",[0,0.335,18,0.011,39,1.096,42,3.771,78,0.008,79,0.008,94,4.593,96,1.193,104,4.17,112,1.891,145,2.917,162,4.593,165,4.593,167,4.17,168,2.572,184,4.17,325,4.909,326,5.31,327,4.593,329,3.393,331,4.17,490,4.593,545,2.08,617,2.476,632,2.791,867,3.393,1076,5.31,1077,4.17,1227,4.593,1230,4.17,1312,4.17,1396,4.593,1438,4.593,1818,5.234,1819,7.333,1820,5.234,1821,5.234,1822,6.665,1823,5.234,1824,6.665,1825,6.665,1826,5.234,1827,5.234,1828,5.234,1829,5.234,1830,5.234,1831,5.234,1832,5.234,1833,5.234,1834,5.234,1835,5.234,1836,4.593,1837,5.234,1838,5.234,1839,5.234,1840,5.234,1841,5.234,1842,5.234,1843,5.234,1844,5.234,1845,5.234,1846,5.234,1847,5.234,1848,5.234,1849,5.234,1850,5.234,1851,5.234,1852,5.234,1853,5.234]],["title/miscellaneous/enumerations.html",[1854,2.068,1855,4.484]],["body/miscellaneous/enumerations.html",[10,0.274,12,1.497,17,0.197,18,0.011,20,3.128,23,0.309,43,2.204,49,2.616,72,1.861,78,0.006,79,0.006,86,0.245,122,2.936,512,4.243,515,2.881,516,2.881,517,2.881,522,1.444,591,3.853,800,2.969,924,3.853,1145,3.328,1230,3.853,1354,3.853,1451,2.616,1854,1.917,1855,2.881,1856,3.283,1857,3.283,1858,6.332,1859,5.74,1860,6.332,1861,4.835,1862,4.835,1863,4.835,1864,4.835,1865,3.283,1866,3.283,1867,5.037,1868,4.228,1869,4.243,1870,3.283,1871,4.835,1872,4.835,1873,4.835,1874,4.835,1875,4.835,1876,4.835,1877,4.835,1878,4.835,1879,4.835,1880,4.835,1881,4.835,1882,4.835,1883,4.835,1884,4.835,1885,3.283,1886,3.283,1887,4.835,1888,4.835,1889,4.835,1890,4.835,1891,4.835,1892,4.835,1893,4.835,1894,4.835,1895,4.835,1896,4.835,1897,4.835,1898,4.835,1899,5.74,1900,4.835,1901,4.835,1902,5.74,1903,3.283,1904,3.283,1905,7.492,1906,3.283,1907,3.283,1908,3.283,1909,5.74,1910,5.74,1911,6.75,1912,5.74,1913,3.283,1914,5.74,1915,4.835,1916,5.74,1917,3.283,1918,3.283,1919,3.283,1920,3.283,1921,2.881,1922,3.283,1923,5.74,1924,6.332,1925,3.283,1926,5.74,1927,3.283,1928,3.283,1929,4.835,1930,4.835,1931,4.835,1932,4.835,1933,4.835,1934,4.835,1935,4.835,1936,4.835,1937,4.835,1938,5.74,1939,4.835,1940,3.283,1941,3.283,1942,5.74,1943,3.283,1944,3.283,1945,5.74,1946,3.283,1947,3.283,1948,5.74,1949,3.283,1950,5.74,1951,3.283,1952,3.283,1953,3.283,1954,4.835,1955,4.835,1956,4.835,1957,4.835,1958,4.835,1959,4.835,1960,4.835,1961,4.835]],["title/miscellaneous/functions.html",[1854,2.068,1962,4.072]],["body/miscellaneous/functions.html",[10,0.435,17,0.497,18,0.011,19,1.575,20,1.826,30,2.03,31,1.974,32,1.209,34,1.974,78,0.008,79,0.008,86,0.337,213,2.73,374,1.295,376,2.923,390,2.701,404,4.072,460,3.587,557,3.043,563,4.895,565,4.895,566,5.39,569,3.881,573,4.572,581,4.572,582,5.295,909,5.832,1287,4.309,1753,4.572,1764,4.152,1767,5.832,1768,5.832,1778,4.572,1779,6.421,1811,5.832,1812,5.832,1814,5.832,1854,3.043,1962,4.152,1963,5.211,1964,6.421,1965,5.211,1966,4.572,1967,5.211,1968,5.211,1969,5.211,1970,5.211,1971,6.646,1972,5.211]],["title/index.html",[10,0.296,494,2.822,1730,3.108]],["body/index.html",[18,0.011,57,5.251,78,0.009,79,0.009,518,5.681,762,5.117,924,4.646,1546,5.117,1742,4.294,1836,5.117,1867,5.117,1868,5.251,1869,5.117,1973,7.13,1974,7.13,1975,5.831,1976,5.831,1977,5.831,1978,8.478,1979,5.831,1980,5.117,1981,5.831,1982,5.831,1983,5.831,1984,5.831,1985,5.831,1986,5.831,1987,5.831,1988,8.373,1989,5.831,1990,5.831,1991,5.831,1992,4.646,1993,7.13,1994,5.831,1995,5.831,1996,5.831]],["title/modules.html",[144,2.853]],["body/modules.html",[18,0.009,78,0.009,79,0.009,143,4.53,144,3.023,148,4.234,149,4.234,150,4.234,151,4.234,152,4.234,153,4.234,154,3.777,317,4.234,990,6.28,1921,7.44,1997,8.478,1998,8.478,1999,8.698,2000,7.882]],["title/overview.html",[2001,5.094]],["body/overview.html",[2,0.762,18,0.011,78,0.007,79,0.007,82,2.188,105,3.272,143,6.335,144,2.188,145,3.34,146,3.906,147,3.906,148,5.869,149,5.365,150,4.665,151,5.365,152,4.665,153,5.575,154,5.235,155,3.68,156,2.733,157,2.599,265,4.891,266,4.439,270,4.651,313,3.906,314,3.906,315,3.906,316,3.906,317,4.665,318,4.665,319,4.665,348,1.828,380,3.064,478,3.906,479,3.906,480,3.906,564,2.188,611,2.886,798,5.164,821,3.906,822,3.906,823,3.906,1172,5.164,1182,3.906,1184,3.906,1185,3.906,1191,4.891,1695,3.906,1696,3.906,1697,3.906,2001,3.906,2002,4.451,2003,4.451,2004,4.451]],["title/miscellaneous/typealiases.html",[1854,2.068,2005,5.111]],["body/miscellaneous/typealiases.html",[10,0.54,17,0.389,18,0.009,78,0.009,79,0.009,86,0.329,1106,5.59,1130,4.767,1131,4.66,1134,5.158,1417,5.158,1418,6.416,1430,6.66,1433,6.66,1444,6.047,1854,3.78,2006,6.473,2007,7.59,2008,6.473]],["title/unit-test.html",[1868,3.361,1992,3.637]],["body/unit-test.html",[5,0.148,18,0.01,21,2.353,78,0.01,79,0.01,1742,4.944,1745,5.891,1815,5.891,1816,5.891,1868,4.944,1962,5.349,1992,5.349,2009,6.713,2010,6.713]],["title/classes/user1615673396368.html",[0,0.214,1773,3.384]],["body/classes/user1615673396368.html",[0,0.25,2,0.851,3,0.15,4,0.15,5,0.109,8,3.297,10,0.415,15,1.789,17,0.387,18,0.011,23,0.607,30,1.644,31,1.598,32,0.979,34,1.598,36,0.237,45,0.15,46,2.433,78,0.008,79,0.008,87,0.975,91,2.426,112,1.796,183,2.817,187,3.04,213,2.041,223,1.502,286,3.384,288,2.102,390,1.741,441,2.35,452,3.659,607,3.959,726,2.901,800,3.051,830,3.221,892,3.959,1049,4.36,1771,5.701,1772,3.959,1773,5.136,1980,6.278,2011,7.155,2012,7.155,2013,4.969,2014,8.183,2015,4.969,2016,4.969,2017,4.969,2018,4.36,2019,4.36,2020,4.36,2021,4.36,2022,4.36,2023,4.36,2024,6.446,2025,4.969,2026,4.969,2027,4.969,2028,4.969,2029,4.969]],["title/miscellaneous/variables.html",[1854,2.068,2030,4.484]],["body/miscellaneous/variables.html",[5,0.092,10,0.225,17,0.444,18,0.011,19,2.488,20,2.961,21,1.46,46,2.515,47,2.868,49,3.32,59,2.148,72,1.603,73,3.656,75,1.493,78,0.005,79,0.005,86,0.393,91,1.632,105,2.092,111,1.374,122,1.379,131,1.603,183,1.785,187,2.632,197,2.366,213,2.092,223,0.815,286,1.971,288,0.792,335,3.32,374,1.226,376,2.725,390,0.945,397,2.366,412,3.069,438,2.148,441,1.275,445,1.186,451,2.322,452,3.751,497,4.701,498,3.069,565,1.985,566,3.069,607,2.148,612,1.856,681,2.558,744,1.985,748,1.856,794,3.069,800,1.655,845,1.748,869,1.748,892,2.148,941,1.748,942,1.748,947,1.655,997,3.069,1043,3.069,1054,3.656,1115,3.751,1116,4.058,1265,2.366,1289,2.868,1363,3.751,1364,4.058,1444,3.32,1511,2.366,1570,3.069,1746,2.366,1748,2.366,1750,2.366,1755,2.366,1756,5.028,1758,3.656,1759,3.656,1760,2.366,1761,3.656,1762,2.366,1763,3.656,1764,2.148,1765,3.656,1766,3.656,1771,2.148,1772,4.058,1774,2.366,1775,3.656,1776,3.656,1777,3.656,1780,2.366,1803,2.366,1804,3.656,1805,2.366,1809,2.366,1854,1.574,1964,2.366,1966,2.366,2018,2.366,2019,2.366,2020,2.366,2021,2.366,2022,2.366,2023,2.366,2030,2.366,2031,2.696,2032,6.196,2033,4.167,2034,2.696,2035,4.167,2036,2.696,2037,2.696,2038,4.167,2039,4.167,2040,2.696,2041,2.696,2042,6.196,2043,2.696,2044,2.696,2045,2.696,2046,2.696,2047,5.094,2048,4.167,2049,2.696,2050,2.696,2051,2.696,2052,2.696,2053,4.167,2054,4.167,2055,4.167,2056,2.696,2057,2.696,2058,2.696,2059,2.696,2060,6.196,2061,2.696,2062,2.696,2063,2.696,2064,5.094,2065,2.696,2066,2.696,2067,2.696,2068,2.696,2069,2.696,2070,2.696,2071,2.696,2072,2.696,2073,2.696,2074,2.696,2075,4.167,2076,4.167,2077,2.696,2078,2.696,2079,4.167,2080,2.696,2081,2.696,2082,2.696,2083,2.696,2084,2.696,2085,2.696,2086,4.167,2087,2.696,2088,2.696,2089,4.167,2090,2.696,2091,2.696,2092,2.696,2093,2.696,2094,2.696,2095,2.696,2096,2.696,2097,2.696,2098,2.696,2099,2.696,2100,2.696,2101,6.196,2102,2.696,2103,2.696,2104,4.167,2105,2.696,2106,2.696,2107,2.696,2108,2.696,2109,2.696,2110,2.696,2111,4.167,2112,2.696,2113,2.696,2114,2.696,2115,2.696]]],"invertedIndex":[["",{"_index":18,"title":{},"body":{"classes/AllExceptionFilter.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"modules/ConfigModule.html":{},"injectables/ConfigService.html":{},"classes/ConfirmationEmailDto.html":{},"classes/CreateFileDto.html":{},"interfaces/CreateMockFileReturn.html":{},"classes/CreateNotificationDto.html":{},"classes/CreateProfileDto.html":{},"classes/CreateUserDto.html":{},"classes/CreateUserNotificationTokenDto.html":{},"classes/CredentialsDto.html":{},"modules/DatabaseModule.html":{},"classes/DeleteUserNotificationTokenDto.html":{},"classes/DownloadFileDto.html":{},"classes/FileEntity.html":{},"classes/FileEntityPreview.html":{},"injectables/FileValidationPipe.html":{},"controllers/FilesController.html":{},"modules/FilesModule.html":{},"injectables/FilesService.html":{},"interfaces/FindManyBracketsOptions.html":{},"classes/FindManyOptionsDto.html":{},"classes/FindOneOptionsDto.html":{},"classes/HttpExceptionFilter.html":{},"classes/ID.html":{},"classes/JwtAccessTokenPayloadDto.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtRefreshGuard.html":{},"classes/JwtRefreshTokenDto.html":{},"classes/JwtRefreshTokenPayloadDto.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"classes/JwtTokensDto.html":{},"modules/MultipartModule.html":{},"interfaces/MultipartModuleAsyncOptions.html":{},"interfaces/MultipartOptionsFactory.html":{},"classes/NotificationEntity.html":{},"controllers/NotificationsController.html":{},"modules/NotificationsModule.html":{},"injectables/NotificationsService.html":{},"classes/PaginationFilesDto.html":{},"classes/PaginationNotificationsDto.html":{},"classes/PaginationUserNotificationTokensDto.html":{},"classes/PaginationUsersDto.html":{},"classes/ResetPasswordDto.html":{},"interfaces/Response.html":{},"classes/SelectFileDto.html":{},"classes/SelectFilesDto.html":{},"classes/SelectNotificationsDto.html":{},"classes/SelectProfileDto.html":{},"classes/SelectUserDto.html":{},"classes/SelectUserNotificationTokenDto.html":{},"classes/SelectUserNotificationTokensDto.html":{},"classes/SelectUsersDto.html":{},"modules/SendGridModule.html":{},"interfaces/SendGridModuleAsyncOptions.html":{},"interfaces/SendGridModuleOptions.html":{},"interfaces/SendGridOptionsFactory.html":{},"injectables/SendGridService.html":{},"classes/SendResetPasswordDto.html":{},"injectables/StorageS3Service.html":{},"injectables/StorageService.html":{},"injectables/TransformInterceptor.html":{},"classes/UpdateEmailDto.html":{},"classes/UpdateNotificationDto.html":{},"classes/UpdatePasswordDto.html":{},"classes/UpdateProfileDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserNotificationTokenDto.html":{},"classes/UploadedFile.html":{},"classes/UserEntity.html":{},"classes/UserNotificationTokenEntity.html":{},"controllers/UserNotificationTokensController.html":{},"injectables/UserNotificationTokensService.html":{},"classes/UserRefreshTokenEntity.html":{},"injectables/UserRefreshTokensService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"changelog.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"miscellaneous/typealiases.html":{},"unit-test.html":{},"classes/user1615673396368.html":{},"miscellaneous/variables.html":{}}}],["0",{"_index":440,"title":{},"body":{"injectables/AuthService.html":{},"injectables/StorageS3Service.html":{},"injectables/StorageService.html":{},"coverage.html":{}}}],["0.0.1",{"_index":1740,"title":{},"body":{"changelog.html":{}}}],["0.1.0",{"_index":1732,"title":{},"body":{"changelog.html":{}}}],["0.1.13",{"_index":1851,"title":{},"body":{"dependencies.html":{}}}],["0.13.1",{"_index":1834,"title":{},"body":{"dependencies.html":{}}}],["0.26.1",{"_index":1831,"title":{},"body":{"dependencies.html":{}}}],["0.3.6",{"_index":1853,"title":{},"body":{"dependencies.html":{}}}],["0.4.1",{"_index":1846,"title":{},"body":{"dependencies.html":{}}}],["0.5.1",{"_index":1833,"title":{},"body":{"dependencies.html":{}}}],["0.5.3",{"_index":1818,"title":{},"body":{"dependencies.html":{}}}],["0/1",{"_index":1757,"title":{},"body":{"coverage.html":{}}}],["0/2",{"_index":1788,"title":{},"body":{"coverage.html":{}}}],["0/3",{"_index":1754,"title":{},"body":{"coverage.html":{}}}],["0/5",{"_index":1808,"title":{},"body":{"coverage.html":{}}}],["0/6",{"_index":1810,"title":{},"body":{"coverage.html":{}}}],["0/7",{"_index":1813,"title":{},"body":{"coverage.html":{}}}],["05",{"_index":1734,"title":{},"body":{"changelog.html":{}}}],["06",{"_index":1741,"title":{},"body":{"changelog.html":{}}}],["067f2f3e",{"_index":2019,"title":{},"body":{"classes/user1615673396368.html":{},"miscellaneous/variables.html":{}}}],["1",{"_index":122,"title":{},"body":{"controllers/AppController.html":{},"classes/FileEntity.html":{},"classes/FileEntityPreview.html":{},"injectables/FilesService.html":{},"classes/FindManyOptionsDto.html":{},"classes/SelectFilesDto.html":{},"classes/SelectNotificationsDto.html":{},"classes/SelectUserNotificationTokensDto.html":{},"classes/SelectUsersDto.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["1).tostring().padstart(2",{"_index":1453,"title":{},"body":{"injectables/StorageS3Service.html":{},"injectables/StorageService.html":{}}}],["1/1",{"_index":1749,"title":{},"body":{"coverage.html":{}}}],["1/2",{"_index":1769,"title":{},"body":{"coverage.html":{}}}],["10",{"_index":438,"title":{},"body":{"injectables/AuthService.html":{},"injectables/FilesService.html":{},"miscellaneous/variables.html":{}}}],["10.2.0",{"_index":1845,"title":{},"body":{"dependencies.html":{}}}],["100",{"_index":1746,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["100).tostring",{"_index":2085,"title":{},"body":{"miscellaneous/variables.html":{}}}],["1024",{"_index":625,"title":{},"body":{"classes/CreateUserNotificationTokenDto.html":{},"classes/DeleteUserNotificationTokenDto.html":{}}}],["11",{"_index":1735,"title":{},"body":{"changelog.html":{}}}],["11/11",{"_index":1786,"title":{},"body":{"coverage.html":{}}}],["12/12",{"_index":1781,"title":{},"body":{"coverage.html":{}}}],["12/17",{"_index":1796,"title":{},"body":{"coverage.html":{}}}],["123456",{"_index":536,"title":{},"body":{"classes/ConfirmationEmailDto.html":{},"classes/ResetPasswordDto.html":{},"classes/SendResetPasswordDto.html":{}}}],["13/13",{"_index":1798,"title":{},"body":{"coverage.html":{}}}],["149",{"_index":1560,"title":{},"body":{"classes/UserEntity.html":{},"classes/UserRefreshTokenEntity.html":{}}}],["15",{"_index":1943,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["15/19",{"_index":1783,"title":{},"body":{"coverage.html":{}}}],["16",{"_index":2003,"title":{},"body":{"overview.html":{}}}],["16.0.0",{"_index":1838,"title":{},"body":{"dependencies.html":{}}}],["2",{"_index":124,"title":{},"body":{"controllers/AppController.html":{}}}],["2.0.0",{"_index":1825,"title":{},"body":{"dependencies.html":{}}}],["2.1125.0",{"_index":1829,"title":{},"body":{"dependencies.html":{}}}],["2/2",{"_index":1747,"title":{},"body":{"coverage.html":{}}}],["20",{"_index":381,"title":{},"body":{"injectables/AuthService.html":{}}}],["2022",{"_index":1733,"title":{},"body":{"changelog.html":{}}}],["24",{"_index":1934,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["256",{"_index":696,"title":{},"body":{"classes/FileEntity.html":{},"classes/FileEntityPreview.html":{},"classes/NotificationEntity.html":{},"classes/UserNotificationTokenEntity.html":{}}}],["256})@column({type",{"_index":1150,"title":{},"body":{"classes/NotificationEntity.html":{},"classes/UserNotificationTokenEntity.html":{}}}],["3.6.1",{"_index":1832,"title":{},"body":{"dependencies.html":{}}}],["3/3",{"_index":1752,"title":{},"body":{"coverage.html":{}}}],["30",{"_index":125,"title":{},"body":{"controllers/AppController.html":{}}}],["31",{"_index":127,"title":{},"body":{"controllers/AppController.html":{}}}],["320",{"_index":608,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/UserEntity.html":{}}}],["357fa5484137ddfd5a5b:32e0569e0c7e1ac0fd902a3db866904098e08cf1e1a1e8cd7fa8e5941b7f7c46866a9d577ece5778a32ce4b2c812e547607d111da263d51d63f9ba5135a3a421",{"_index":2018,"title":{},"body":{"classes/user1615673396368.html":{},"miscellaneous/variables.html":{}}}],["4.0.0",{"_index":1847,"title":{},"body":{"dependencies.html":{}}}],["4.0.1",{"_index":1840,"title":{},"body":{"dependencies.html":{}}}],["4/4",{"_index":1784,"title":{},"body":{"coverage.html":{}}}],["4029",{"_index":2021,"title":{},"body":{"classes/user1615673396368.html":{},"miscellaneous/variables.html":{}}}],["46",{"_index":2004,"title":{},"body":{"overview.html":{}}}],["5",{"_index":972,"title":{},"body":{"classes/FindManyOptionsDto.html":{},"classes/SelectFilesDto.html":{},"classes/SelectNotificationsDto.html":{},"classes/SelectUserNotificationTokensDto.html":{},"classes/SelectUsersDto.html":{}}}],["5.1.0",{"_index":1824,"title":{},"body":{"dependencies.html":{}}}],["5.3.1",{"_index":1843,"title":{},"body":{"dependencies.html":{}}}],["5/5",{"_index":1770,"title":{},"body":{"coverage.html":{}}}],["5/6",{"_index":1794,"title":{},"body":{"coverage.html":{}}}],["50",{"_index":970,"title":{},"body":{"classes/FindManyOptionsDto.html":{},"classes/SelectFilesDto.html":{},"classes/SelectNotificationsDto.html":{},"classes/SelectUserNotificationTokensDto.html":{},"classes/SelectUsersDto.html":{},"coverage.html":{}}}],["5e6",{"_index":2076,"title":{},"body":{"miscellaneous/variables.html":{}}}],["6",{"_index":380,"title":{},"body":{"injectables/AuthService.html":{},"classes/ConfirmationEmailDto.html":{},"classes/ResetPasswordDto.html":{},"classes/SendResetPasswordDto.html":{},"overview.html":{}}}],["6/6",{"_index":1797,"title":{},"body":{"coverage.html":{}}}],["6/8",{"_index":1790,"title":{},"body":{"coverage.html":{}}}],["64",{"_index":612,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/UpdateEmailDto.html":{},"classes/UpdatePasswordDto.html":{},"classes/UpdateProfileDto.html":{},"miscellaneous/variables.html":{}}}],["7",{"_index":692,"title":{},"body":{"classes/FileEntity.html":{},"classes/FileEntityPreview.html":{}}}],["7.0.1",{"_index":1842,"title":{},"body":{"dependencies.html":{}}}],["7.0.3",{"_index":1837,"title":{},"body":{"dependencies.html":{}}}],["7.3.0",{"_index":1852,"title":{},"body":{"dependencies.html":{}}}],["7.6.1",{"_index":1827,"title":{},"body":{"dependencies.html":{}}}],["7/7",{"_index":1751,"title":{},"body":{"coverage.html":{}}}],["7/8",{"_index":1792,"title":{},"body":{"coverage.html":{}}}],["7/9",{"_index":1807,"title":{},"body":{"coverage.html":{}}}],["70",{"_index":1795,"title":{},"body":{"coverage.html":{}}}],["75",{"_index":1789,"title":{},"body":{"coverage.html":{}}}],["77",{"_index":1806,"title":{},"body":{"coverage.html":{}}}],["78",{"_index":1782,"title":{},"body":{"coverage.html":{}}}],["7bit",{"_index":577,"title":{},"body":{"interfaces/CreateMockFileReturn.html":{}}}],["8",{"_index":611,"title":{},"body":{"classes/CreateUserDto.html":{},"injectables/StorageService.html":{},"classes/UpdateEmailDto.html":{},"classes/UpdatePasswordDto.html":{},"classes/UpdateProfileDto.html":{},"overview.html":{}}}],["8''${title",{"_index":915,"title":{},"body":{"injectables/FilesService.html":{}}}],["8.0.0",{"_index":1820,"title":{},"body":{"dependencies.html":{}}}],["8.0.1",{"_index":1822,"title":{},"body":{"dependencies.html":{}}}],["8.0.2",{"_index":1826,"title":{},"body":{"dependencies.html":{}}}],["8.0.8",{"_index":1819,"title":{},"body":{"dependencies.html":{}}}],["8.4.1",{"_index":1821,"title":{},"body":{"dependencies.html":{}}}],["8.7.1",{"_index":1849,"title":{},"body":{"dependencies.html":{}}}],["8/8",{"_index":1785,"title":{},"body":{"coverage.html":{}}}],["8/9",{"_index":1800,"title":{},"body":{"coverage.html":{}}}],["83",{"_index":1793,"title":{},"body":{"coverage.html":{}}}],["87",{"_index":1791,"title":{},"body":{"coverage.html":{}}}],["88",{"_index":1799,"title":{},"body":{"coverage.html":{}}}],["9",{"_index":2002,"title":{},"body":{"overview.html":{}}}],["9/10",{"_index":1802,"title":{},"body":{"coverage.html":{}}}],["9/9",{"_index":1787,"title":{},"body":{"coverage.html":{}}}],["90",{"_index":1801,"title":{},"body":{"coverage.html":{}}}],["93d6",{"_index":2022,"title":{},"body":{"classes/user1615673396368.html":{},"miscellaneous/variables.html":{}}}],["__dirname",{"_index":660,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["_err",{"_index":1045,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"injectables/JwtRefreshGuard.html":{}}}],["absolute",{"_index":510,"title":{},"body":{"injectables/ConfigService.html":{}}}],["acc",{"_index":1265,"title":{},"body":{"injectables/NotificationsService.html":{},"miscellaneous/variables.html":{}}}],["acc.concat(current.notificationtokens.map((el",{"_index":1267,"title":{},"body":{"injectables/NotificationsService.html":{}}}],["acc.concat(messages",{"_index":1279,"title":{},"body":{"injectables/NotificationsService.html":{}}}],["acc[key",{"_index":2097,"title":{},"body":{"miscellaneous/variables.html":{}}}],["accept",{"_index":910,"title":{},"body":{"injectables/FilesService.html":{}}}],["accepted",{"_index":1925,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["accessors",{"_index":683,"title":{},"body":{"classes/FileEntity.html":{},"classes/FindManyOptionsDto.html":{},"classes/FindOneOptionsDto.html":{},"classes/SelectFilesDto.html":{},"classes/SelectNotificationsDto.html":{},"classes/SelectUsersDto.html":{}}}],["account",{"_index":1911,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["activated",{"_index":1961,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["add",{"_index":1718,"title":{},"body":{"injectables/UsersService.html":{}}}],["admin",{"_index":1230,"title":{},"body":{"injectables/NotificationsService.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{}}}],["admin/messaging",{"_index":1228,"title":{},"body":{"injectables/NotificationsService.html":{}}}],["admin@gmail.com",{"_index":607,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/user1615673396368.html":{},"miscellaneous/variables.html":{}}}],["again",{"_index":1919,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["agent",{"_index":1913,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["aliases",{"_index":2006,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["allexceptionfilter",{"_index":1,"title":{"classes/AllExceptionFilter.html":{}},"body":{"classes/AllExceptionFilter.html":{},"coverage.html":{}}}],["allowedtypes",{"_index":747,"title":{},"body":{"injectables/FileValidationPipe.html":{}}}],["amount",{"_index":1930,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["api",{"_index":1403,"title":{},"body":{"injectables/SendGridService.html":{}}}],["apibearerauth",{"_index":256,"title":{},"body":{"controllers/AuthController.html":{},"controllers/FilesController.html":{},"controllers/NotificationsController.html":{},"controllers/UserNotificationTokensController.html":{},"controllers/UsersController.html":{}}}],["apibearerauth()(target",{"_index":2115,"title":{},"body":{"miscellaneous/variables.html":{}}}],["apibody",{"_index":257,"title":{},"body":{"controllers/AuthController.html":{},"controllers/FilesController.html":{}}}],["apiconsumes",{"_index":790,"title":{},"body":{"controllers/FilesController.html":{}}}],["apiconsumes('multipart/form",{"_index":804,"title":{},"body":{"controllers/FilesController.html":{}}}],["apihideproperty",{"_index":717,"title":{},"body":{"classes/FileEntity.html":{},"classes/FileEntityPreview.html":{},"classes/NotificationEntity.html":{},"classes/UserEntity.html":{},"classes/UserNotificationTokenEntity.html":{},"classes/UserRefreshTokenEntity.html":{}}}],["apihideproperty()@column({type",{"_index":1559,"title":{},"body":{"classes/UserEntity.html":{}}}],["apihideproperty()@manytoone(undefined",{"_index":1642,"title":{},"body":{"classes/UserRefreshTokenEntity.html":{}}}],["apihideproperty()@onetomany(undefined",{"_index":1557,"title":{},"body":{"classes/UserEntity.html":{}}}],["apikey",{"_index":344,"title":{},"body":{"modules/AuthModule.html":{},"interfaces/SendGridModuleAsyncOptions.html":{},"interfaces/SendGridModuleOptions.html":{},"interfaces/SendGridOptionsFactory.html":{}}}],["apioperation",{"_index":2109,"title":{},"body":{"miscellaneous/variables.html":{}}}],["apiparam",{"_index":791,"title":{},"body":{"controllers/FilesController.html":{}}}],["apiproperty",{"_index":541,"title":{},"body":{"classes/ConfirmationEmailDto.html":{},"classes/CreateFileDto.html":{},"classes/CreateNotificationDto.html":{},"classes/CreateUserDto.html":{},"classes/CreateUserNotificationTokenDto.html":{},"classes/FileEntity.html":{},"classes/FileEntityPreview.html":{},"classes/FindManyOptionsDto.html":{},"classes/FindOneOptionsDto.html":{},"classes/ID.html":{},"classes/JwtAccessTokenPayloadDto.html":{},"classes/JwtRefreshTokenDto.html":{},"classes/JwtRefreshTokenPayloadDto.html":{},"classes/JwtTokensDto.html":{},"classes/NotificationEntity.html":{},"classes/ResetPasswordDto.html":{},"classes/SelectFilesDto.html":{},"classes/SelectNotificationsDto.html":{},"classes/SendResetPasswordDto.html":{},"classes/UpdateEmailDto.html":{},"classes/UpdatePasswordDto.html":{},"classes/UpdateProfileDto.html":{},"classes/UserEntity.html":{},"classes/UserNotificationTokenEntity.html":{},"classes/UserRefreshTokenEntity.html":{}}}],["apiproperty({enum",{"_index":1146,"title":{},"body":{"classes/NotificationEntity.html":{},"classes/UserEntity.html":{}}}],["apiproperty({maxlength",{"_index":1149,"title":{},"body":{"classes/NotificationEntity.html":{},"classes/UserEntity.html":{},"classes/UserNotificationTokenEntity.html":{}}}],["apiproperty({readonly",{"_index":686,"title":{},"body":{"classes/FileEntity.html":{},"classes/NotificationEntity.html":{},"classes/UserEntity.html":{},"classes/UserNotificationTokenEntity.html":{},"classes/UserRefreshTokenEntity.html":{}}}],["apitags",{"_index":95,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/FilesController.html":{},"controllers/NotificationsController.html":{},"controllers/UserNotificationTokensController.html":{},"controllers/UsersController.html":{}}}],["apitags('auth",{"_index":275,"title":{},"body":{"controllers/AuthController.html":{}}}],["apitags('files",{"_index":802,"title":{},"body":{"controllers/FilesController.html":{}}}],["apitags('notifications",{"_index":1175,"title":{},"body":{"controllers/NotificationsController.html":{}}}],["apitags('status",{"_index":107,"title":{},"body":{"controllers/AppController.html":{}}}],["apitags('users",{"_index":1688,"title":{},"body":{"controllers/UsersController.html":{}}}],["apitags('users/notification",{"_index":1608,"title":{},"body":{"controllers/UserNotificationTokensController.html":{}}}],["app",{"_index":1987,"title":{},"body":{"index.html":{}}}],["app.controller",{"_index":174,"title":{},"body":{"modules/AppModule.html":{}}}],["app_guard",{"_index":166,"title":{},"body":{"modules/AppModule.html":{}}}],["appcontroller",{"_index":81,"title":{"controllers/AppController.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"coverage.html":{}}}],["application",{"_index":515,"title":{},"body":{"injectables/ConfigService.html":{},"miscellaneous/enumerations.html":{}}}],["appmodule",{"_index":143,"title":{"modules/AppModule.html":{}},"body":{"modules/AppModule.html":{},"modules.html":{},"overview.html":{}}}],["args",{"_index":1138,"title":{},"body":{"interfaces/MultipartModuleAsyncOptions.html":{},"interfaces/MultipartOptionsFactory.html":{},"interfaces/SendGridModuleAsyncOptions.html":{},"interfaces/SendGridModuleOptions.html":{},"interfaces/SendGridOptionsFactory.html":{}}}],["argumentshost",{"_index":28,"title":{},"body":{"classes/AllExceptionFilter.html":{},"classes/HttpExceptionFilter.html":{}}}],["array",{"_index":2053,"title":{},"body":{"miscellaneous/variables.html":{}}}],["array.reduce((result",{"_index":2056,"title":{},"body":{"miscellaneous/variables.html":{}}}],["artist",{"_index":1928,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["asc",{"_index":941,"title":{},"body":{"classes/FindManyOptionsDto.html":{},"classes/SelectFilesDto.html":{},"classes/SelectNotificationsDto.html":{},"classes/SelectUserNotificationTokensDto.html":{},"classes/SelectUsersDto.html":{},"miscellaneous/variables.html":{}}}],["async",{"_index":183,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/FilesController.html":{},"injectables/FilesService.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"modules/MultipartModule.html":{},"controllers/NotificationsController.html":{},"injectables/NotificationsService.html":{},"modules/SendGridModule.html":{},"injectables/SendGridService.html":{},"injectables/StorageS3Service.html":{},"injectables/StorageService.html":{},"classes/UserEntity.html":{},"controllers/UserNotificationTokensController.html":{},"injectables/UserNotificationTokensService.html":{},"injectables/UserRefreshTokensService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"classes/user1615673396368.html":{},"miscellaneous/variables.html":{}}}],["attachment",{"_index":904,"title":{},"body":{"injectables/FilesService.html":{}}}],["auth",{"_index":197,"title":{},"body":{"controllers/AuthController.html":{},"miscellaneous/variables.html":{}}}],["auth.constants",{"_index":336,"title":{},"body":{"modules/AuthModule.html":{}}}],["auth.controller",{"_index":337,"title":{},"body":{"modules/AuthModule.html":{}}}],["auth.service",{"_index":271,"title":{},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{}}}],["auth/guards",{"_index":796,"title":{},"body":{"controllers/FilesController.html":{},"controllers/NotificationsController.html":{}}}],["auth_forbidden",{"_index":1881,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["auth_incorrect_confirmation_email_code",{"_index":1883,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["auth_incorrect_credentials",{"_index":1877,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["auth_invalid_refresh_token",{"_index":1878,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["auth_invalid_token",{"_index":1879,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["auth_pass",{"_index":137,"title":{},"body":{"controllers/AppController.html":{},"modules/AuthModule.html":{}}}],["auth_passwords_do_not_match",{"_index":1884,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["auth_unauthorized",{"_index":1880,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["authcontroller",{"_index":195,"title":{"controllers/AuthController.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"coverage.html":{}}}],["authguard",{"_index":1046,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"injectables/JwtRefreshGuard.html":{}}}],["authguard('jwt",{"_index":1050,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"injectables/JwtRefreshGuard.html":{}}}],["authmodule",{"_index":148,"title":{"modules/AuthModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules.html":{},"overview.html":{}}}],["authservice",{"_index":270,"title":{"injectables/AuthService.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"coverage.html":{},"overview.html":{}}}],["available",{"_index":990,"title":{},"body":{"classes/FindManyOptionsDto.html":{},"classes/FindOneOptionsDto.html":{},"modules.html":{}}}],["await",{"_index":286,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/FilesService.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/NotificationsService.html":{},"injectables/StorageS3Service.html":{},"injectables/StorageService.html":{},"classes/UserEntity.html":{},"injectables/UserNotificationTokensService.html":{},"injectables/UserRefreshTokensService.html":{},"injectables/UsersService.html":{},"classes/user1615673396368.html":{},"miscellaneous/variables.html":{}}}],["aws",{"_index":1438,"title":{},"body":{"injectables/StorageS3Service.html":{},"dependencies.html":{}}}],["awserror",{"_index":1440,"title":{},"body":{"injectables/StorageS3Service.html":{}}}],["axios",{"_index":1830,"title":{},"body":{"dependencies.html":{}}}],["b2f58ae4f489",{"_index":2023,"title":{},"body":{"classes/user1615673396368.html":{},"miscellaneous/variables.html":{}}}],["b936",{"_index":2020,"title":{},"body":{"classes/user1615673396368.html":{},"miscellaneous/variables.html":{}}}],["badgatewayexception",{"_index":1393,"title":{},"body":{"injectables/SendGridService.html":{}}}],["badrequestexception",{"_index":408,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtRefreshTokenStrategy.html":{}}}],["badrequestexception(errortypeenum.auth_incorrect_confirmation_email_code",{"_index":463,"title":{},"body":{"injectables/AuthService.html":{}}}],["badrequestexception(errortypeenum.auth_incorrect_credentials",{"_index":446,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtRefreshTokenStrategy.html":{}}}],["badrequestexception(errortypeenum.auth_passwords_do_not_match",{"_index":459,"title":{},"body":{"injectables/AuthService.html":{}}}],["badrequestexception(errortypeenum.new_password_and_old_password_cannot_be_same",{"_index":474,"title":{},"body":{"injectables/AuthService.html":{}}}],["bar",{"_index":2073,"title":{},"body":{"miscellaneous/variables.html":{}}}],["based",{"_index":508,"title":{},"body":{"injectables/ConfigService.html":{}}}],["basemessage",{"_index":1209,"title":{},"body":{"injectables/NotificationsService.html":{}}}],["beforeinsert",{"_index":1572,"title":{},"body":{"classes/UserEntity.html":{}}}],["beforeinsert()@beforeupdate",{"_index":1567,"title":{},"body":{"classes/UserEntity.html":{}}}],["beforeupdate",{"_index":1573,"title":{},"body":{"classes/UserEntity.html":{}}}],["bigint",{"_index":699,"title":{},"body":{"classes/FileEntity.html":{},"classes/FileEntityPreview.html":{}}}],["binary",{"_index":556,"title":{},"body":{"classes/CreateFileDto.html":{}}}],["body",{"_index":70,"title":{},"body":{"classes/AllExceptionFilter.html":{},"controllers/AuthController.html":{},"controllers/NotificationsController.html":{},"injectables/StorageS3Service.html":{},"controllers/UserNotificationTokensController.html":{},"controllers/UsersController.html":{}}}],["boolean",{"_index":521,"title":{},"body":{"injectables/ConfigService.html":{},"classes/DownloadFileDto.html":{},"classes/FindManyOptionsDto.html":{},"classes/FindOneOptionsDto.html":{},"classes/SelectFileDto.html":{},"classes/SelectFilesDto.html":{},"classes/SelectNotificationsDto.html":{},"classes/SelectProfileDto.html":{},"classes/SelectUserDto.html":{},"classes/SelectUserNotificationTokenDto.html":{},"classes/SelectUserNotificationTokensDto.html":{},"classes/SelectUsersDto.html":{}}}],["bootstrap",{"_index":1779,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["brackets",{"_index":935,"title":{},"body":{"interfaces/FindManyBracketsOptions.html":{},"classes/SelectFilesDto.html":{},"classes/SelectNotificationsDto.html":{}}}],["brackets((qb",{"_index":1334,"title":{},"body":{"classes/SelectFilesDto.html":{}}}],["brackets.interface",{"_index":998,"title":{},"body":{"classes/FindManyOptionsDto.html":{}}}],["brackets.interface.ts",{"_index":933,"title":{},"body":{"interfaces/FindManyBracketsOptions.html":{},"coverage.html":{}}}],["branches",{"_index":2009,"title":{},"body":{"unit-test.html":{}}}],["browse",{"_index":1999,"title":{},"body":{"modules.html":{}}}],["browser",{"_index":1997,"title":{},"body":{"modules.html":{}}}],["bucket",{"_index":1419,"title":{},"body":{"injectables/StorageS3Service.html":{}}}],["buffer",{"_index":435,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/CreateMockFileReturn.html":{}}}],["buffer.from(key",{"_index":2045,"title":{},"body":{"miscellaneous/variables.html":{}}}],["buffer.readuint32be(0x0f",{"_index":437,"title":{},"body":{"injectables/AuthService.html":{}}}],["bullmodule",{"_index":164,"title":{},"body":{"modules/AppModule.html":{}}}],["bullmodule.forrootasync",{"_index":182,"title":{},"body":{"modules/AppModule.html":{}}}],["busboy",{"_index":1492,"title":{},"body":{"injectables/StorageService.html":{}}}],["busboyconfig",{"_index":1468,"title":{},"body":{"injectables/StorageService.html":{}}}],["bytes",{"_index":912,"title":{},"body":{"injectables/FilesService.html":{}}}],["c6f5ec4",{"_index":1739,"title":{},"body":{"changelog.html":{}}}],["cache",{"_index":325,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"modules/DatabaseModule.html":{},"dependencies.html":{}}}],["cache_auth_prefix",{"_index":335,"title":{},"body":{"modules/AuthModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["cache_manager",{"_index":409,"title":{},"body":{"injectables/AuthService.html":{}}}],["cachecode",{"_index":461,"title":{},"body":{"injectables/AuthService.html":{}}}],["cachemanager",{"_index":366,"title":{},"body":{"injectables/AuthService.html":{}}}],["cachemodule",{"_index":322,"title":{},"body":{"modules/AuthModule.html":{}}}],["cachemodule.registerasync",{"_index":340,"title":{},"body":{"modules/AuthModule.html":{}}}],["cachemoduleoptions",{"_index":323,"title":{},"body":{"modules/AuthModule.html":{}}}],["callback",{"_index":1341,"title":{},"body":{"classes/SelectNotificationsDto.html":{}}}],["callhandler",{"_index":1313,"title":{},"body":{"interfaces/Response.html":{},"injectables/TransformInterceptor.html":{}}}],["calling",{"_index":991,"title":{},"body":{"classes/FindManyOptionsDto.html":{},"classes/FindOneOptionsDto.html":{}}}],["canceled",{"_index":1927,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["cascade",{"_index":708,"title":{},"body":{"classes/FileEntity.html":{},"classes/FileEntityPreview.html":{},"classes/NotificationEntity.html":{},"classes/UserEntity.html":{},"classes/UserNotificationTokenEntity.html":{},"classes/UserRefreshTokenEntity.html":{}}}],["catch",{"_index":16,"title":{},"body":{"classes/AllExceptionFilter.html":{},"injectables/AuthService.html":{},"injectables/ConfigService.html":{},"injectables/FilesService.html":{},"classes/HttpExceptionFilter.html":{},"injectables/NotificationsService.html":{},"injectables/StorageS3Service.html":{},"injectables/StorageService.html":{},"injectables/UserNotificationTokensService.html":{},"injectables/UserRefreshTokensService.html":{},"injectables/UsersService.html":{}}}],["catch(exception",{"_index":25,"title":{},"body":{"classes/AllExceptionFilter.html":{},"classes/HttpExceptionFilter.html":{}}}],["catch(httpexception",{"_index":1028,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["cause",{"_index":1582,"title":{},"body":{"classes/UserEntity.html":{}}}],["changelog",{"_index":1731,"title":{"changelog.html":{}},"body":{}}],["check",{"_index":890,"title":{},"body":{"injectables/FilesService.html":{}}}],["checked",{"_index":519,"title":{},"body":{"injectables/ConfigService.html":{}}}],["checking",{"_index":514,"title":{},"body":{"injectables/ConfigService.html":{}}}],["choose",{"_index":1585,"title":{},"body":{"classes/UserEntity.html":{}}}],["class",{"_index":0,"title":{"classes/AllExceptionFilter.html":{},"classes/ConfirmationEmailDto.html":{},"classes/CreateFileDto.html":{},"classes/CreateNotificationDto.html":{},"classes/CreateProfileDto.html":{},"classes/CreateUserDto.html":{},"classes/CreateUserNotificationTokenDto.html":{},"classes/CredentialsDto.html":{},"classes/DeleteUserNotificationTokenDto.html":{},"classes/DownloadFileDto.html":{},"classes/FileEntity.html":{},"classes/FileEntityPreview.html":{},"classes/FindManyOptionsDto.html":{},"classes/FindOneOptionsDto.html":{},"classes/HttpExceptionFilter.html":{},"classes/ID.html":{},"classes/JwtAccessTokenPayloadDto.html":{},"classes/JwtRefreshTokenDto.html":{},"classes/JwtRefreshTokenPayloadDto.html":{},"classes/JwtTokensDto.html":{},"classes/NotificationEntity.html":{},"classes/PaginationFilesDto.html":{},"classes/PaginationNotificationsDto.html":{},"classes/PaginationUserNotificationTokensDto.html":{},"classes/PaginationUsersDto.html":{},"classes/ResetPasswordDto.html":{},"classes/SelectFileDto.html":{},"classes/SelectFilesDto.html":{},"classes/SelectNotificationsDto.html":{},"classes/SelectProfileDto.html":{},"classes/SelectUserDto.html":{},"classes/SelectUserNotificationTokenDto.html":{},"classes/SelectUserNotificationTokensDto.html":{},"classes/SelectUsersDto.html":{},"classes/SendResetPasswordDto.html":{},"classes/UpdateEmailDto.html":{},"classes/UpdateNotificationDto.html":{},"classes/UpdatePasswordDto.html":{},"classes/UpdateProfileDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserNotificationTokenDto.html":{},"classes/UploadedFile.html":{},"classes/UserEntity.html":{},"classes/UserNotificationTokenEntity.html":{},"classes/UserRefreshTokenEntity.html":{},"classes/user1615673396368.html":{}},"body":{"classes/AllExceptionFilter.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"modules/ConfigModule.html":{},"injectables/ConfigService.html":{},"classes/ConfirmationEmailDto.html":{},"classes/CreateFileDto.html":{},"classes/CreateNotificationDto.html":{},"classes/CreateProfileDto.html":{},"classes/CreateUserDto.html":{},"classes/CreateUserNotificationTokenDto.html":{},"classes/CredentialsDto.html":{},"modules/DatabaseModule.html":{},"classes/DeleteUserNotificationTokenDto.html":{},"classes/DownloadFileDto.html":{},"classes/FileEntity.html":{},"classes/FileEntityPreview.html":{},"injectables/FileValidationPipe.html":{},"controllers/FilesController.html":{},"modules/FilesModule.html":{},"injectables/FilesService.html":{},"classes/FindManyOptionsDto.html":{},"classes/FindOneOptionsDto.html":{},"classes/HttpExceptionFilter.html":{},"classes/ID.html":{},"classes/JwtAccessTokenPayloadDto.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtRefreshGuard.html":{},"classes/JwtRefreshTokenDto.html":{},"classes/JwtRefreshTokenPayloadDto.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"classes/JwtTokensDto.html":{},"modules/MultipartModule.html":{},"classes/NotificationEntity.html":{},"controllers/NotificationsController.html":{},"modules/NotificationsModule.html":{},"injectables/NotificationsService.html":{},"classes/PaginationFilesDto.html":{},"classes/PaginationNotificationsDto.html":{},"classes/PaginationUserNotificationTokensDto.html":{},"classes/PaginationUsersDto.html":{},"classes/ResetPasswordDto.html":{},"interfaces/Response.html":{},"classes/SelectFileDto.html":{},"classes/SelectFilesDto.html":{},"classes/SelectNotificationsDto.html":{},"classes/SelectProfileDto.html":{},"classes/SelectUserDto.html":{},"classes/SelectUserNotificationTokenDto.html":{},"classes/SelectUserNotificationTokensDto.html":{},"classes/SelectUsersDto.html":{},"modules/SendGridModule.html":{},"injectables/SendGridService.html":{},"classes/SendResetPasswordDto.html":{},"injectables/StorageS3Service.html":{},"injectables/StorageService.html":{},"injectables/TransformInterceptor.html":{},"classes/UpdateEmailDto.html":{},"classes/UpdateNotificationDto.html":{},"classes/UpdatePasswordDto.html":{},"classes/UpdateProfileDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserNotificationTokenDto.html":{},"classes/UploadedFile.html":{},"classes/UserEntity.html":{},"classes/UserNotificationTokenEntity.html":{},"controllers/UserNotificationTokensController.html":{},"injectables/UserNotificationTokensService.html":{},"classes/UserRefreshTokenEntity.html":{},"injectables/UserRefreshTokensService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"dependencies.html":{},"classes/user1615673396368.html":{}}}],["classes",{"_index":2,"title":{},"body":{"classes/AllExceptionFilter.html":{},"classes/ConfirmationEmailDto.html":{},"classes/CreateFileDto.html":{},"classes/CreateNotificationDto.html":{},"classes/CreateProfileDto.html":{},"classes/CreateUserDto.html":{},"classes/CreateUserNotificationTokenDto.html":{},"classes/CredentialsDto.html":{},"classes/DeleteUserNotificationTokenDto.html":{},"classes/DownloadFileDto.html":{},"classes/FileEntity.html":{},"classes/FileEntityPreview.html":{},"classes/FindManyOptionsDto.html":{},"classes/FindOneOptionsDto.html":{},"classes/HttpExceptionFilter.html":{},"classes/ID.html":{},"classes/JwtAccessTokenPayloadDto.html":{},"classes/JwtRefreshTokenDto.html":{},"classes/JwtRefreshTokenPayloadDto.html":{},"classes/JwtTokensDto.html":{},"classes/NotificationEntity.html":{},"classes/PaginationFilesDto.html":{},"classes/PaginationNotificationsDto.html":{},"classes/PaginationUserNotificationTokensDto.html":{},"classes/PaginationUsersDto.html":{},"classes/ResetPasswordDto.html":{},"classes/SelectFileDto.html":{},"classes/SelectFilesDto.html":{},"classes/SelectNotificationsDto.html":{},"classes/SelectProfileDto.html":{},"classes/SelectUserDto.html":{},"classes/SelectUserNotificationTokenDto.html":{},"classes/SelectUserNotificationTokensDto.html":{},"classes/SelectUsersDto.html":{},"classes/SendResetPasswordDto.html":{},"classes/UpdateEmailDto.html":{},"classes/UpdateNotificationDto.html":{},"classes/UpdatePasswordDto.html":{},"classes/UpdateProfileDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserNotificationTokenDto.html":{},"classes/UploadedFile.html":{},"classes/UserEntity.html":{},"classes/UserNotificationTokenEntity.html":{},"classes/UserRefreshTokenEntity.html":{},"overview.html":{},"classes/user1615673396368.html":{}}}],["classref",{"_index":1969,"title":{},"body":{"miscellaneous/functions.html":{}}}],["classserializerinterceptor",{"_index":262,"title":{},"body":{"controllers/AuthController.html":{},"controllers/FilesController.html":{},"controllers/NotificationsController.html":{},"controllers/UserNotificationTokensController.html":{},"controllers/UsersController.html":{}}}],["clientresponse",{"_index":1394,"title":{},"body":{"injectables/SendGridService.html":{}}}],["cluster_appmodule",{"_index":146,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_imports",{"_index":147,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_authmodule",{"_index":313,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_exports",{"_index":316,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_imports",{"_index":315,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_providers",{"_index":314,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_configmodule",{"_index":478,"title":{},"body":{"modules/ConfigModule.html":{},"overview.html":{}}}],["cluster_configmodule_exports",{"_index":480,"title":{},"body":{"modules/ConfigModule.html":{},"overview.html":{}}}],["cluster_configmodule_providers",{"_index":479,"title":{},"body":{"modules/ConfigModule.html":{},"overview.html":{}}}],["cluster_filesmodule",{"_index":821,"title":{},"body":{"modules/FilesModule.html":{},"overview.html":{}}}],["cluster_filesmodule_exports",{"_index":822,"title":{},"body":{"modules/FilesModule.html":{},"overview.html":{}}}],["cluster_filesmodule_providers",{"_index":823,"title":{},"body":{"modules/FilesModule.html":{},"overview.html":{}}}],["cluster_notificationsmodule",{"_index":1182,"title":{},"body":{"modules/NotificationsModule.html":{},"overview.html":{}}}],["cluster_notificationsmodule_exports",{"_index":1184,"title":{},"body":{"modules/NotificationsModule.html":{},"overview.html":{}}}],["cluster_notificationsmodule_imports",{"_index":1183,"title":{},"body":{"modules/NotificationsModule.html":{}}}],["cluster_notificationsmodule_providers",{"_index":1185,"title":{},"body":{"modules/NotificationsModule.html":{},"overview.html":{}}}],["cluster_usersmodule",{"_index":1695,"title":{},"body":{"modules/UsersModule.html":{},"overview.html":{}}}],["cluster_usersmodule_exports",{"_index":1696,"title":{},"body":{"modules/UsersModule.html":{},"overview.html":{}}}],["cluster_usersmodule_providers",{"_index":1697,"title":{},"body":{"modules/UsersModule.html":{},"overview.html":{}}}],["code",{"_index":460,"title":{},"body":{"injectables/AuthService.html":{},"classes/ConfirmationEmailDto.html":{},"classes/ResetPasswordDto.html":{},"classes/SendResetPasswordDto.html":{},"miscellaneous/functions.html":{}}}],["collaboration_agent_deactivated",{"_index":1912,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["collaboration_artist_deactivated",{"_index":1909,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["collaboration_feedback",{"_index":1902,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["column",{"_index":720,"title":{},"body":{"classes/FileEntity.html":{},"classes/FileEntityPreview.html":{},"classes/NotificationEntity.html":{},"classes/UserEntity.html":{},"classes/UserNotificationTokenEntity.html":{},"classes/UserRefreshTokenEntity.html":{}}}],["column({type",{"_index":690,"title":{},"body":{"classes/FileEntity.html":{}}}],["column.transformer.ts",{"_index":1776,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["columns",{"_index":984,"title":{},"body":{"classes/FindManyOptionsDto.html":{},"classes/FindOneOptionsDto.html":{},"classes/SelectFileDto.html":{},"classes/SelectFilesDto.html":{},"classes/SelectNotificationsDto.html":{},"classes/SelectProfileDto.html":{},"classes/SelectUserDto.html":{},"classes/SelectUserNotificationTokenDto.html":{},"classes/SelectUserNotificationTokensDto.html":{},"classes/SelectUsersDto.html":{}}}],["commit",{"_index":1973,"title":{},"body":{"index.html":{}}}],["common",{"_index":878,"title":{},"body":{"injectables/FilesService.html":{},"injectables/NotificationsService.html":{},"injectables/UsersService.html":{}}}],["compare",{"_index":412,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["compare(data",{"_index":457,"title":{},"body":{"injectables/AuthService.html":{}}}],["compare(ppid",{"_index":1085,"title":{},"body":{"injectables/JwtRefreshTokenStrategy.html":{}}}],["compress",{"_index":1839,"title":{},"body":{"dependencies.html":{}}}],["concat(message",{"_index":77,"title":{},"body":{"classes/AllExceptionFilter.html":{},"classes/HttpExceptionFilter.html":{}}}],["concat(value",{"_index":1000,"title":{},"body":{"classes/FindManyOptionsDto.html":{},"classes/FindOneOptionsDto.html":{}}}],["conditions",{"_index":403,"title":{},"body":{"injectables/AuthService.html":{},"controllers/FilesController.html":{},"injectables/FilesService.html":{},"controllers/NotificationsController.html":{},"injectables/NotificationsService.html":{},"controllers/UserNotificationTokensController.html":{},"injectables/UserNotificationTokensService.html":{},"injectables/UserRefreshTokensService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["config",{"_index":106,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/ConfigService.html":{}}}],["config.service",{"_index":483,"title":{},"body":{"modules/ConfigModule.html":{}}}],["configmode",{"_index":512,"title":{},"body":{"injectables/ConfigService.html":{},"miscellaneous/enumerations.html":{}}}],["configmodule",{"_index":149,"title":{"modules/ConfigModule.html":{}},"body":{"modules/AppModule.html":{},"modules/ConfigModule.html":{},"modules.html":{},"overview.html":{}}}],["configservice",{"_index":105,"title":{"injectables/ConfigService.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"modules/ConfigModule.html":{},"injectables/ConfigService.html":{},"interfaces/CreateMockFileReturn.html":{},"modules/DatabaseModule.html":{},"injectables/FileValidationPipe.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/StorageS3Service.html":{},"injectables/StorageService.html":{},"coverage.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["configservice.get('cache_auth_ttl",{"_index":341,"title":{},"body":{"modules/AuthModule.html":{}}}],["configservice.get('jwt_secret_access_token",{"_index":1091,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["configservice.get('jwt_secret_refresh_token",{"_index":1083,"title":{},"body":{"injectables/JwtRefreshTokenStrategy.html":{}}}],["configservice.get('redis_has_password",{"_index":188,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{}}}],["configservice.get('redis_host",{"_index":185,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{}}}],["configservice.get('redis_password",{"_index":189,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{}}}],["configservice.get('redis_port",{"_index":186,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{}}}],["configservice.get('redis_tls",{"_index":342,"title":{},"body":{"modules/AuthModule.html":{}}}],["configservice.get('sendgrid_api_key",{"_index":345,"title":{},"body":{"modules/AuthModule.html":{}}}],["configservice.get('sendgrid_api_sender",{"_index":346,"title":{},"body":{"modules/AuthModule.html":{}}}],["configservice.get('throttle_limit",{"_index":181,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice.get('throttle_ttl",{"_index":179,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice.get('typeorm_cache",{"_index":647,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["configservice.get('typeorm_database",{"_index":643,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["configservice.get('typeorm_drop_schema",{"_index":651,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["configservice.get('typeorm_host",{"_index":641,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["configservice.get('typeorm_logging",{"_index":649,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["configservice.get('typeorm_migrations_run",{"_index":655,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["configservice.get('typeorm_name",{"_index":639,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["configservice.get('typeorm_password",{"_index":646,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["configservice.get('typeorm_port",{"_index":642,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["configservice.get('typeorm_ssl",{"_index":638,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["configservice.get('typeorm_synchronize",{"_index":653,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["configservice.get('typeorm_type",{"_index":640,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["configservice.get('typeorm_username",{"_index":645,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["configservice.getdest('store_dest",{"_index":576,"title":{},"body":{"interfaces/CreateMockFileReturn.html":{}}}],["configuration",{"_index":485,"title":{},"body":{"injectables/ConfigService.html":{}}}],["confirmationemail",{"_index":198,"title":{},"body":{"controllers/AuthController.html":{}}}],["confirmationemail(@body",{"_index":302,"title":{},"body":{"controllers/AuthController.html":{}}}],["confirmationemail(data",{"_index":209,"title":{},"body":{"controllers/AuthController.html":{}}}],["confirmationemaildto",{"_index":210,"title":{"classes/ConfirmationEmailDto.html":{}},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/ConfirmationEmailDto.html":{},"coverage.html":{}}}],["conflictexception",{"_index":850,"title":{},"body":{"injectables/FilesService.html":{},"injectables/UserNotificationTokensService.html":{},"injectables/UserRefreshTokensService.html":{},"injectables/UsersService.html":{}}}],["conflictexception(errortypeenum.file_already_exist",{"_index":866,"title":{},"body":{"injectables/FilesService.html":{}}}],["conflictexception(errortypeenum.user_already_exist",{"_index":1715,"title":{},"body":{"injectables/UsersService.html":{}}}],["conflictexception(errortypeenum.user_notification_token_already_exist",{"_index":1631,"title":{},"body":{"injectables/UserNotificationTokensService.html":{}}}],["conflictexception(errortypeenum.user_refresh_token_already_exist",{"_index":1670,"title":{},"body":{"injectables/UserRefreshTokensService.html":{}}}],["connection",{"_index":2024,"title":{},"body":{"classes/user1615673396368.html":{}}}],["connection.getrepository(userentity",{"_index":2026,"title":{},"body":{"classes/user1615673396368.html":{}}}],["connection.getrepository(userentity).delete(data.map",{"_index":2029,"title":{},"body":{"classes/user1615673396368.html":{}}}],["connection.synchronize",{"_index":2025,"title":{},"body":{"classes/user1615673396368.html":{}}}],["console.error(e",{"_index":2028,"title":{},"body":{"classes/user1615673396368.html":{}}}],["const",{"_index":46,"title":{},"body":{"classes/AllExceptionFilter.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/ConfigService.html":{},"interfaces/CreateMockFileReturn.html":{},"modules/DatabaseModule.html":{},"classes/FileEntity.html":{},"classes/FileEntityPreview.html":{},"injectables/FilesService.html":{},"classes/HttpExceptionFilter.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/NotificationsService.html":{},"classes/SelectFilesDto.html":{},"classes/SelectNotificationsDto.html":{},"injectables/SendGridService.html":{},"injectables/StorageS3Service.html":{},"injectables/StorageService.html":{},"injectables/UserNotificationTokensService.html":{},"injectables/UserRefreshTokensService.html":{},"injectables/UsersService.html":{},"classes/user1615673396368.html":{},"miscellaneous/variables.html":{}}}],["constructor",{"_index":116,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/ConfigService.html":{},"classes/FileEntity.html":{},"classes/FileEntityPreview.html":{},"injectables/FileValidationPipe.html":{},"injectables/FilesService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtRefreshGuard.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/NotificationsService.html":{},"classes/PaginationFilesDto.html":{},"classes/PaginationNotificationsDto.html":{},"classes/PaginationUserNotificationTokensDto.html":{},"classes/PaginationUsersDto.html":{},"injectables/SendGridService.html":{},"injectables/StorageS3Service.html":{},"injectables/StorageService.html":{},"classes/UploadedFile.html":{},"injectables/UserNotificationTokensService.html":{},"injectables/UserRefreshTokensService.html":{},"injectables/UsersService.html":{}}}],["constructor([result",{"_index":1291,"title":{},"body":{"classes/PaginationFilesDto.html":{},"classes/PaginationNotificationsDto.html":{},"classes/PaginationUserNotificationTokensDto.html":{},"classes/PaginationUsersDto.html":{}}}],["constructor(configservice",{"_index":749,"title":{},"body":{"injectables/FileValidationPipe.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/StorageS3Service.html":{},"injectables/StorageService.html":{}}}],["constructor(data",{"_index":1533,"title":{},"body":{"classes/UploadedFile.html":{}}}],["constructor(fileentityrepository",{"_index":829,"title":{},"body":{"injectables/FilesService.html":{}}}],["constructor(notificationentityrepository",{"_index":1198,"title":{},"body":{"injectables/NotificationsService.html":{}}}],["constructor(options",{"_index":1383,"title":{},"body":{"injectables/SendGridService.html":{}}}],["constructor(private",{"_index":755,"title":{},"body":{"injectables/FileValidationPipe.html":{},"controllers/FilesController.html":{},"injectables/JwtAuthGuard.html":{},"controllers/NotificationsController.html":{},"injectables/StorageS3Service.html":{},"controllers/UserNotificationTokensController.html":{},"controllers/UsersController.html":{}}}],["constructor(reflector",{"_index":1039,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["constructor(undefined",{"_index":742,"title":{},"body":{"classes/FileEntityPreview.html":{},"classes/PaginationFilesDto.html":{},"classes/PaginationNotificationsDto.html":{},"classes/PaginationUserNotificationTokensDto.html":{},"classes/PaginationUsersDto.html":{}}}],["constructor(userentityrepository",{"_index":1702,"title":{},"body":{"injectables/UsersService.html":{}}}],["constructor(usernotificationtokenentityrepository",{"_index":1618,"title":{},"body":{"injectables/UserNotificationTokensService.html":{}}}],["constructor(userrefreshtokenentityrepository",{"_index":1652,"title":{},"body":{"injectables/UserRefreshTokensService.html":{}}}],["constructor(userrefreshtokensservice",{"_index":363,"title":{},"body":{"injectables/AuthService.html":{}}}],["contact",{"_index":1920,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["content",{"_index":913,"title":{},"body":{"injectables/FilesService.html":{}}}],["contentlength",{"_index":1461,"title":{},"body":{"injectables/StorageS3Service.html":{}}}],["contenttype",{"_index":1460,"title":{},"body":{"injectables/StorageS3Service.html":{}}}],["context",{"_index":1316,"title":{},"body":{"interfaces/Response.html":{},"injectables/TransformInterceptor.html":{}}}],["controller",{"_index":80,"title":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/FilesController.html":{},"controllers/NotificationsController.html":{},"controllers/UserNotificationTokensController.html":{},"controllers/UsersController.html":{}},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/FilesController.html":{},"controllers/NotificationsController.html":{},"controllers/UserNotificationTokensController.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["controller('auth",{"_index":276,"title":{},"body":{"controllers/AuthController.html":{}}}],["controller('files",{"_index":803,"title":{},"body":{"controllers/FilesController.html":{}}}],["controller('notifications",{"_index":1176,"title":{},"body":{"controllers/NotificationsController.html":{}}}],["controller('status",{"_index":108,"title":{},"body":{"controllers/AppController.html":{}}}],["controller('users",{"_index":1689,"title":{},"body":{"controllers/UsersController.html":{}}}],["controller('users/notification",{"_index":1609,"title":{},"body":{"controllers/UserNotificationTokensController.html":{}}}],["controllers",{"_index":82,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"controllers/FilesController.html":{},"modules/FilesModule.html":{},"controllers/NotificationsController.html":{},"modules/NotificationsModule.html":{},"controllers/UserNotificationTokensController.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["count",{"_index":1296,"title":{},"body":{"classes/PaginationNotificationsDto.html":{},"classes/PaginationUserNotificationTokensDto.html":{},"classes/PaginationUsersDto.html":{}}}],["cover",{"_index":603,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/UserEntity.html":{}}}],["coverage",{"_index":1742,"title":{"coverage.html":{}},"body":{"coverage.html":{},"index.html":{},"unit-test.html":{}}}],["create",{"_index":666,"title":{},"body":{"classes/DeleteUserNotificationTokenDto.html":{},"classes/UpdateNotificationDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserNotificationTokenDto.html":{}}}],["createasyncoptionsprovider",{"_index":1096,"title":{},"body":{"modules/MultipartModule.html":{},"modules/SendGridModule.html":{}}}],["createasyncoptionsprovider(options",{"_index":1097,"title":{},"body":{"modules/MultipartModule.html":{},"modules/SendGridModule.html":{}}}],["createasyncproviders",{"_index":1101,"title":{},"body":{"modules/MultipartModule.html":{},"modules/SendGridModule.html":{}}}],["createasyncproviders(options",{"_index":1102,"title":{},"body":{"modules/MultipartModule.html":{},"modules/SendGridModule.html":{}}}],["createdat",{"_index":679,"title":{},"body":{"classes/FileEntity.html":{},"classes/FileEntityPreview.html":{},"classes/NotificationEntity.html":{},"classes/UserEntity.html":{},"classes/UserNotificationTokenEntity.html":{},"classes/UserRefreshTokenEntity.html":{}}}],["createdatecolumn",{"_index":723,"title":{},"body":{"classes/FileEntity.html":{},"classes/FileEntityPreview.html":{},"classes/NotificationEntity.html":{},"classes/UserEntity.html":{},"classes/UserNotificationTokenEntity.html":{},"classes/UserRefreshTokenEntity.html":{}}}],["createfiledto",{"_index":550,"title":{"classes/CreateFileDto.html":{}},"body":{"classes/CreateFileDto.html":{},"controllers/FilesController.html":{},"coverage.html":{}}}],["createfiledto})@apiconsumes('multipart/form",{"_index":771,"title":{},"body":{"controllers/FilesController.html":{}}}],["createmany",{"_index":1192,"title":{},"body":{"injectables/NotificationsService.html":{}}}],["createmany(entitieslike",{"_index":1200,"title":{},"body":{"injectables/NotificationsService.html":{}}}],["createmockfile",{"_index":1814,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["createmockfile(data",{"_index":581,"title":{},"body":{"interfaces/CreateMockFileReturn.html":{},"miscellaneous/functions.html":{}}}],["createmockfilemeta",{"_index":582,"title":{},"body":{"interfaces/CreateMockFileReturn.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["createmockfilemeta(data",{"_index":573,"title":{},"body":{"interfaces/CreateMockFileReturn.html":{},"miscellaneous/functions.html":{}}}],["createmockfilereturn",{"_index":563,"title":{"interfaces/CreateMockFileReturn.html":{}},"body":{"interfaces/CreateMockFileReturn.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["createmultipartoptions",{"_index":1137,"title":{},"body":{"interfaces/MultipartModuleAsyncOptions.html":{},"interfaces/MultipartOptionsFactory.html":{}}}],["createnotificationdto",{"_index":585,"title":{"classes/CreateNotificationDto.html":{}},"body":{"classes/CreateNotificationDto.html":{},"controllers/NotificationsController.html":{},"classes/UpdateNotificationDto.html":{},"coverage.html":{}}}],["createone",{"_index":763,"title":{},"body":{"controllers/FilesController.html":{},"injectables/FilesService.html":{},"injectables/NotificationsService.html":{},"injectables/StorageS3Service.html":{},"injectables/StorageService.html":{},"controllers/UserNotificationTokensController.html":{},"injectables/UserNotificationTokensService.html":{},"injectables/UserRefreshTokensService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["createone(@body",{"_index":1690,"title":{},"body":{"controllers/UsersController.html":{}}}],["createone(@file",{"_index":805,"title":{},"body":{"controllers/FilesController.html":{}}}],["createone(data",{"_index":1599,"title":{},"body":{"controllers/UserNotificationTokensController.html":{},"controllers/UsersController.html":{}}}],["createone(entitylike",{"_index":1203,"title":{},"body":{"injectables/NotificationsService.html":{},"injectables/UserNotificationTokensService.html":{},"injectables/UserRefreshTokensService.html":{},"injectables/UsersService.html":{}}}],["createone(file",{"_index":769,"title":{},"body":{"controllers/FilesController.html":{}}}],["createone(multipart",{"_index":834,"title":{},"body":{"injectables/FilesService.html":{},"injectables/StorageS3Service.html":{},"injectables/StorageService.html":{}}}],["createparamdecorator",{"_index":2078,"title":{},"body":{"miscellaneous/variables.html":{}}}],["createparamdecorator((data",{"_index":2099,"title":{},"body":{"miscellaneous/variables.html":{}}}],["createprofiledto",{"_index":219,"title":{"classes/CreateProfileDto.html":{}},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/CreateProfileDto.html":{},"coverage.html":{}}}],["createquerybuilder",{"_index":1634,"title":{},"body":{"injectables/UserNotificationTokensService.html":{},"injectables/UserRefreshTokensService.html":{}}}],["createreadstream",{"_index":1485,"title":{},"body":{"injectables/StorageService.html":{}}}],["createreadstream(filedest",{"_index":1509,"title":{},"body":{"injectables/StorageService.html":{}}}],["createrepmock",{"_index":1812,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["createrepmock(code",{"_index":1967,"title":{},"body":{"miscellaneous/functions.html":{}}}],["createsendgridoptions",{"_index":1375,"title":{},"body":{"interfaces/SendGridModuleAsyncOptions.html":{},"interfaces/SendGridModuleOptions.html":{},"interfaces/SendGridOptionsFactory.html":{}}}],["createtoken",{"_index":199,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["createtoken(@body",{"_index":278,"title":{},"body":{"controllers/AuthController.html":{}}}],["createtoken(data",{"_index":214,"title":{},"body":{"controllers/AuthController.html":{}}}],["createtoken(undefined",{"_index":368,"title":{},"body":{"injectables/AuthService.html":{}}}],["createuser",{"_index":200,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["createuser(@body",{"_index":280,"title":{},"body":{"controllers/AuthController.html":{}}}],["createuser(data",{"_index":218,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["createuserdto",{"_index":539,"title":{"classes/CreateUserDto.html":{}},"body":{"classes/ConfirmationEmailDto.html":{},"classes/CreateProfileDto.html":{},"classes/CreateUserDto.html":{},"classes/CredentialsDto.html":{},"classes/ResetPasswordDto.html":{},"classes/SendResetPasswordDto.html":{},"classes/UpdateUserDto.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["createusernotificationtokendto",{"_index":621,"title":{"classes/CreateUserNotificationTokenDto.html":{}},"body":{"classes/CreateUserNotificationTokenDto.html":{},"classes/DeleteUserNotificationTokenDto.html":{},"classes/UpdateUserNotificationTokenDto.html":{},"controllers/UserNotificationTokensController.html":{},"coverage.html":{}}}],["createusernotificationtokendto:13",{"_index":665,"title":{},"body":{"classes/DeleteUserNotificationTokenDto.html":{}}}],["createwritestream",{"_index":1484,"title":{},"body":{"injectables/StorageService.html":{}}}],["createwritestream(filepath",{"_index":1504,"title":{},"body":{"injectables/StorageService.html":{}}}],["credentialsdto",{"_index":215,"title":{"classes/CredentialsDto.html":{}},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/CredentialsDto.html":{},"coverage.html":{}}}],["cross",{"_index":1835,"title":{},"body":{"dependencies.html":{}}}],["crypto",{"_index":411,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/CreateMockFileReturn.html":{},"injectables/StorageService.html":{},"injectables/UserRefreshTokensService.html":{}}}],["crypto.randombytes(64",{"_index":579,"title":{},"body":{"interfaces/CreateMockFileReturn.html":{}}}],["crypto.randombytes(8).tostring('hex",{"_index":574,"title":{},"body":{"interfaces/CreateMockFileReturn.html":{}}}],["ctx",{"_index":47,"title":{},"body":{"classes/AllExceptionFilter.html":{},"classes/HttpExceptionFilter.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtRefreshGuard.html":{},"miscellaneous/variables.html":{}}}],["ctx.gethandler",{"_index":1056,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["ctx.getrequest",{"_index":50,"title":{},"body":{"classes/AllExceptionFilter.html":{}}}],["ctx.getresponse",{"_index":52,"title":{},"body":{"classes/AllExceptionFilter.html":{},"classes/HttpExceptionFilter.html":{}}}],["ctx.switchtohttp().getrequest",{"_index":2079,"title":{},"body":{"miscellaneous/variables.html":{}}}],["current",{"_index":1266,"title":{},"body":{"injectables/NotificationsService.html":{}}}],["current.notificationtokens.length",{"_index":1275,"title":{},"body":{"injectables/NotificationsService.html":{}}}],["current.notificationtokens.map((el",{"_index":1278,"title":{},"body":{"injectables/NotificationsService.html":{}}}],["current_timestamp",{"_index":1155,"title":{},"body":{"classes/NotificationEntity.html":{},"classes/UserEntity.html":{},"classes/UserNotificationTokenEntity.html":{},"classes/UserRefreshTokenEntity.html":{}}}],["custom",{"_index":1719,"title":{},"body":{"injectables/UsersService.html":{}}}],["cyclic",{"_index":1583,"title":{},"body":{"classes/UserEntity.html":{}}}],["data",{"_index":213,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"interfaces/CreateMockFileReturn.html":{},"controllers/FilesController.html":{},"injectables/FilesService.html":{},"controllers/NotificationsController.html":{},"injectables/NotificationsService.html":{},"interfaces/Response.html":{},"injectables/SendGridService.html":{},"injectables/TransformInterceptor.html":{},"classes/UploadedFile.html":{},"controllers/UserNotificationTokensController.html":{},"controllers/UsersController.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"classes/user1615673396368.html":{},"miscellaneous/variables.html":{}}}],["data.email",{"_index":468,"title":{},"body":{"injectables/AuthService.html":{}}}],["data.map((el",{"_index":1283,"title":{},"body":{"injectables/NotificationsService.html":{}}}],["data.password",{"_index":476,"title":{},"body":{"injectables/AuthService.html":{}}}],["database",{"_index":169,"title":{},"body":{"modules/AppModule.html":{},"modules/DatabaseModule.html":{}}}],["databasemodule",{"_index":150,"title":{"modules/DatabaseModule.html":{}},"body":{"modules/AppModule.html":{},"modules/DatabaseModule.html":{},"modules.html":{},"overview.html":{}}}],["date",{"_index":685,"title":{},"body":{"classes/FileEntity.html":{},"classes/FileEntityPreview.html":{},"classes/NotificationEntity.html":{},"injectables/StorageS3Service.html":{},"injectables/StorageService.html":{},"classes/UserEntity.html":{},"classes/UserNotificationTokenEntity.html":{},"classes/UserRefreshTokenEntity.html":{}}}],["deacivated",{"_index":1960,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["deactivated",{"_index":1910,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["decorators",{"_index":88,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"classes/ConfirmationEmailDto.html":{},"classes/CreateFileDto.html":{},"classes/CreateNotificationDto.html":{},"classes/CreateUserDto.html":{},"classes/CreateUserNotificationTokenDto.html":{},"classes/DeleteUserNotificationTokenDto.html":{},"classes/DownloadFileDto.html":{},"classes/FileEntity.html":{},"controllers/FilesController.html":{},"classes/FindManyOptionsDto.html":{},"classes/FindOneOptionsDto.html":{},"classes/ID.html":{},"classes/JwtTokensDto.html":{},"classes/NotificationEntity.html":{},"controllers/NotificationsController.html":{},"injectables/NotificationsService.html":{},"classes/ResetPasswordDto.html":{},"classes/SelectFileDto.html":{},"classes/SelectFilesDto.html":{},"classes/SelectNotificationsDto.html":{},"classes/SelectProfileDto.html":{},"classes/SelectUserDto.html":{},"classes/SelectUserNotificationTokenDto.html":{},"classes/SelectUserNotificationTokensDto.html":{},"classes/SelectUsersDto.html":{},"injectables/StorageService.html":{},"classes/UpdateNotificationDto.html":{},"classes/UpdatePasswordDto.html":{},"classes/UserEntity.html":{},"classes/UserNotificationTokenEntity.html":{},"controllers/UserNotificationTokensController.html":{},"injectables/UserNotificationTokensService.html":{},"classes/UserRefreshTokenEntity.html":{},"injectables/UserRefreshTokensService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["decorators.api_operation",{"_index":2107,"title":{},"body":{"miscellaneous/variables.html":{}}}],["deepmerge",{"_index":1397,"title":{},"body":{"injectables/SendGridService.html":{}}}],["deepmerge(this.options.default",{"_index":1399,"title":{},"body":{"injectables/SendGridService.html":{}}}],["deeppartial",{"_index":1219,"title":{},"body":{"injectables/NotificationsService.html":{}}}],["default",{"_index":19,"title":{},"body":{"classes/AllExceptionFilter.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/FileEntity.html":{},"classes/FileEntityPreview.html":{},"injectables/FilesService.html":{},"classes/FindManyOptionsDto.html":{},"modules/MultipartModule.html":{},"classes/NotificationEntity.html":{},"injectables/NotificationsService.html":{},"classes/SelectFilesDto.html":{},"classes/SelectNotificationsDto.html":{},"classes/SelectUserNotificationTokensDto.html":{},"classes/SelectUsersDto.html":{},"interfaces/SendGridModuleAsyncOptions.html":{},"interfaces/SendGridModuleOptions.html":{},"interfaces/SendGridOptionsFactory.html":{},"injectables/SendGridService.html":{},"injectables/StorageService.html":{},"classes/UserEntity.html":{},"classes/UserNotificationTokenEntity.html":{},"injectables/UserNotificationTokensService.html":{},"classes/UserRefreshTokenEntity.html":{},"injectables/UserRefreshTokensService.html":{},"injectables/UsersService.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["defined",{"_index":23,"title":{},"body":{"classes/AllExceptionFilter.html":{},"controllers/AppController.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/ConfigService.html":{},"classes/ConfirmationEmailDto.html":{},"classes/CreateFileDto.html":{},"classes/CreateNotificationDto.html":{},"classes/CreateUserDto.html":{},"classes/CreateUserNotificationTokenDto.html":{},"classes/DeleteUserNotificationTokenDto.html":{},"classes/DownloadFileDto.html":{},"classes/FileEntity.html":{},"classes/FileEntityPreview.html":{},"injectables/FileValidationPipe.html":{},"controllers/FilesController.html":{},"injectables/FilesService.html":{},"classes/FindManyOptionsDto.html":{},"classes/FindOneOptionsDto.html":{},"classes/HttpExceptionFilter.html":{},"classes/ID.html":{},"classes/JwtAccessTokenPayloadDto.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtRefreshGuard.html":{},"classes/JwtRefreshTokenPayloadDto.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"classes/JwtTokensDto.html":{},"modules/MultipartModule.html":{},"interfaces/MultipartOptionsFactory.html":{},"classes/NotificationEntity.html":{},"controllers/NotificationsController.html":{},"injectables/NotificationsService.html":{},"classes/PaginationFilesDto.html":{},"classes/PaginationNotificationsDto.html":{},"classes/PaginationUserNotificationTokensDto.html":{},"classes/PaginationUsersDto.html":{},"classes/ResetPasswordDto.html":{},"classes/SelectFileDto.html":{},"classes/SelectFilesDto.html":{},"classes/SelectNotificationsDto.html":{},"classes/SelectProfileDto.html":{},"classes/SelectUserDto.html":{},"classes/SelectUserNotificationTokenDto.html":{},"classes/SelectUserNotificationTokensDto.html":{},"classes/SelectUsersDto.html":{},"modules/SendGridModule.html":{},"interfaces/SendGridOptionsFactory.html":{},"injectables/SendGridService.html":{},"injectables/StorageS3Service.html":{},"injectables/StorageService.html":{},"injectables/TransformInterceptor.html":{},"classes/UpdateNotificationDto.html":{},"classes/UpdatePasswordDto.html":{},"classes/UploadedFile.html":{},"classes/UserEntity.html":{},"classes/UserNotificationTokenEntity.html":{},"controllers/UserNotificationTokensController.html":{},"injectables/UserNotificationTokensService.html":{},"classes/UserRefreshTokenEntity.html":{},"injectables/UserRefreshTokensService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"miscellaneous/enumerations.html":{},"classes/user1615673396368.html":{}}}],["delete",{"_index":793,"title":{},"body":{"controllers/FilesController.html":{},"controllers/NotificationsController.html":{},"controllers/UserNotificationTokensController.html":{},"controllers/UsersController.html":{}}}],["delete(':id",{"_index":815,"title":{},"body":{"controllers/FilesController.html":{},"controllers/NotificationsController.html":{},"controllers/UserNotificationTokensController.html":{},"controllers/UsersController.html":{}}}],["delete(':id')@apibearerauth()@useguards(jwtauthguard)@userole(userroleenum.admin",{"_index":774,"title":{},"body":{"controllers/FilesController.html":{}}}],["delete(':id')@userole(userroleenum.admin",{"_index":1681,"title":{},"body":{"controllers/UsersController.html":{}}}],["deletedat",{"_index":1542,"title":{},"body":{"classes/UserEntity.html":{}}}],["deletedatecolumn",{"_index":1574,"title":{},"body":{"classes/UserEntity.html":{}}}],["deleteobject",{"_index":1466,"title":{},"body":{"injectables/StorageS3Service.html":{}}}],["deleteone",{"_index":764,"title":{},"body":{"controllers/FilesController.html":{},"injectables/FilesService.html":{},"controllers/NotificationsController.html":{},"injectables/NotificationsService.html":{},"injectables/StorageS3Service.html":{},"injectables/StorageService.html":{},"controllers/UserNotificationTokensController.html":{},"injectables/UserNotificationTokensService.html":{},"injectables/UserRefreshTokensService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["deleteone(@param",{"_index":816,"title":{},"body":{"controllers/FilesController.html":{},"controllers/UsersController.html":{}}}],["deleteone(conditions",{"_index":773,"title":{},"body":{"controllers/FilesController.html":{},"injectables/FilesService.html":{},"controllers/NotificationsController.html":{},"injectables/NotificationsService.html":{},"controllers/UserNotificationTokensController.html":{},"injectables/UserNotificationTokensService.html":{},"injectables/UserRefreshTokensService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["deleteone(filename",{"_index":1473,"title":{},"body":{"injectables/StorageService.html":{}}}],["deleteone(key",{"_index":1425,"title":{},"body":{"injectables/StorageS3Service.html":{}}}],["deleteonebytoken",{"_index":1598,"title":{},"body":{"controllers/UserNotificationTokensController.html":{}}}],["deleteonebytoken(conditions",{"_index":1602,"title":{},"body":{"controllers/UserNotificationTokensController.html":{}}}],["deleteusernotificationtokendto",{"_index":662,"title":{"classes/DeleteUserNotificationTokenDto.html":{}},"body":{"classes/DeleteUserNotificationTokenDto.html":{},"controllers/UserNotificationTokensController.html":{},"coverage.html":{}}}],["dependencies",{"_index":145,"title":{"dependencies.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/ConfigModule.html":{},"modules/FilesModule.html":{},"modules/NotificationsModule.html":{},"modules/UsersModule.html":{},"dependencies.html":{},"overview.html":{}}}],["dependency",{"_index":1584,"title":{},"body":{"classes/UserEntity.html":{}}}],["derivedkey",{"_index":2047,"title":{},"body":{"miscellaneous/variables.html":{}}}],["derivedkey.tostring('hex",{"_index":2051,"title":{},"body":{"miscellaneous/variables.html":{}}}],["desc",{"_index":942,"title":{},"body":{"classes/FindManyOptionsDto.html":{},"classes/SelectFilesDto.html":{},"classes/SelectNotificationsDto.html":{},"classes/SelectUserNotificationTokensDto.html":{},"classes/SelectUsersDto.html":{},"miscellaneous/variables.html":{}}}],["description",{"_index":86,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"modules/ConfigModule.html":{},"injectables/ConfigService.html":{},"classes/ConfirmationEmailDto.html":{},"classes/CreateFileDto.html":{},"classes/CreateProfileDto.html":{},"classes/CreateUserDto.html":{},"classes/CreateUserNotificationTokenDto.html":{},"classes/CredentialsDto.html":{},"modules/DatabaseModule.html":{},"classes/DeleteUserNotificationTokenDto.html":{},"classes/DownloadFileDto.html":{},"classes/FileEntity.html":{},"classes/FileEntityPreview.html":{},"injectables/FileValidationPipe.html":{},"controllers/FilesController.html":{},"modules/FilesModule.html":{},"injectables/FilesService.html":{},"interfaces/FindManyBracketsOptions.html":{},"classes/FindManyOptionsDto.html":{},"classes/FindOneOptionsDto.html":{},"classes/HttpExceptionFilter.html":{},"classes/ID.html":{},"classes/JwtAccessTokenPayloadDto.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtRefreshGuard.html":{},"classes/JwtRefreshTokenDto.html":{},"classes/JwtRefreshTokenPayloadDto.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"classes/JwtTokensDto.html":{},"modules/MultipartModule.html":{},"interfaces/MultipartModuleAsyncOptions.html":{},"interfaces/MultipartOptionsFactory.html":{},"classes/NotificationEntity.html":{},"controllers/NotificationsController.html":{},"injectables/NotificationsService.html":{},"classes/PaginationFilesDto.html":{},"classes/PaginationUserNotificationTokensDto.html":{},"classes/PaginationUsersDto.html":{},"classes/ResetPasswordDto.html":{},"interfaces/Response.html":{},"classes/SelectFileDto.html":{},"classes/SelectFilesDto.html":{},"classes/SelectNotificationsDto.html":{},"classes/SelectProfileDto.html":{},"classes/SelectUserDto.html":{},"classes/SelectUserNotificationTokenDto.html":{},"classes/SelectUserNotificationTokensDto.html":{},"classes/SelectUsersDto.html":{},"modules/SendGridModule.html":{},"classes/SendResetPasswordDto.html":{},"injectables/StorageS3Service.html":{},"injectables/StorageService.html":{},"injectables/TransformInterceptor.html":{},"classes/UpdateEmailDto.html":{},"classes/UpdatePasswordDto.html":{},"classes/UpdateProfileDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserNotificationTokenDto.html":{},"classes/UploadedFile.html":{},"classes/UserEntity.html":{},"classes/UserNotificationTokenEntity.html":{},"controllers/UserNotificationTokensController.html":{},"injectables/UserNotificationTokensService.html":{},"classes/UserRefreshTokenEntity.html":{},"injectables/UserRefreshTokensService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["descriptor",{"_index":2101,"title":{},"body":{"miscellaneous/variables.html":{}}}],["descriptor.value",{"_index":2108,"title":{},"body":{"miscellaneous/variables.html":{}}}],["destination",{"_index":1469,"title":{},"body":{"injectables/StorageService.html":{}}}],["development",{"_index":1867,"title":{},"body":{"miscellaneous/enumerations.html":{},"index.html":{}}}],["digits",{"_index":379,"title":{},"body":{"injectables/AuthService.html":{}}}],["directions",{"_index":961,"title":{},"body":{"classes/FindManyOptionsDto.html":{},"classes/SelectFilesDto.html":{},"classes/SelectNotificationsDto.html":{},"classes/SelectUserNotificationTokensDto.html":{},"classes/SelectUsersDto.html":{}}}],["directory",{"_index":507,"title":{},"body":{"injectables/ConfigService.html":{}}}],["dirname",{"_index":633,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["dirname(__dirname",{"_index":657,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["disk",{"_index":115,"title":{},"body":{"controllers/AppController.html":{}}}],["diskhealthindicator",{"_index":100,"title":{},"body":{"controllers/AppController.html":{}}}],["disposition",{"_index":903,"title":{},"body":{"injectables/FilesService.html":{}}}],["documentation",{"_index":1743,"title":{},"body":{"coverage.html":{}}}],["don't",{"_index":1940,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["dot",{"_index":2067,"title":{},"body":{"miscellaneous/variables.html":{}}}],["dotenv",{"_index":490,"title":{},"body":{"injectables/ConfigService.html":{},"dependencies.html":{}}}],["dotnotation",{"_index":997,"title":{},"body":{"classes/FindManyOptionsDto.html":{},"classes/FindOneOptionsDto.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["dotnotation(this.asc",{"_index":1004,"title":{},"body":{"classes/FindManyOptionsDto.html":{}}}],["dotnotation(this.desc",{"_index":1006,"title":{},"body":{"classes/FindManyOptionsDto.html":{}}}],["dotnotation(this.selection",{"_index":1022,"title":{},"body":{"classes/FindOneOptionsDto.html":{}}}],["down",{"_index":2012,"title":{},"body":{"classes/user1615673396368.html":{}}}],["down(undefined",{"_index":2013,"title":{},"body":{"classes/user1615673396368.html":{}}}],["download",{"_index":670,"title":{},"body":{"classes/DownloadFileDto.html":{},"injectables/FilesService.html":{}}}],["downloadfiledto",{"_index":668,"title":{"classes/DownloadFileDto.html":{}},"body":{"classes/DownloadFileDto.html":{},"controllers/FilesController.html":{},"injectables/FilesService.html":{},"coverage.html":{}}}],["downloadone",{"_index":765,"title":{},"body":{"controllers/FilesController.html":{},"injectables/FilesService.html":{}}}],["downloadone(rep",{"_index":776,"title":{},"body":{"controllers/FilesController.html":{},"injectables/FilesService.html":{}}}],["dropschema",{"_index":650,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["dto",{"_index":269,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/FilesController.html":{},"injectables/FilesService.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"controllers/NotificationsController.html":{},"injectables/NotificationsService.html":{},"injectables/StorageS3Service.html":{},"injectables/StorageService.html":{},"controllers/UserNotificationTokensController.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["dynamicmodule",{"_index":1108,"title":{},"body":{"modules/MultipartModule.html":{},"modules/SendGridModule.html":{}}}],["e2e",{"_index":1994,"title":{},"body":{"index.html":{}}}],["each",{"_index":999,"title":{},"body":{"classes/FindManyOptionsDto.html":{},"classes/FindOneOptionsDto.html":{}}}],["eager",{"_index":945,"title":{},"body":{"classes/FindManyOptionsDto.html":{},"classes/FindOneOptionsDto.html":{},"classes/SelectFileDto.html":{},"classes/SelectFilesDto.html":{},"classes/SelectNotificationsDto.html":{},"classes/SelectProfileDto.html":{},"classes/SelectUserDto.html":{},"classes/SelectUserNotificationTokenDto.html":{},"classes/SelectUserNotificationTokensDto.html":{},"classes/SelectUsersDto.html":{},"classes/UserEntity.html":{}}}],["el.token",{"_index":1268,"title":{},"body":{"injectables/NotificationsService.html":{}}}],["elation.field",{"_index":954,"title":{},"body":{"classes/FindManyOptionsDto.html":{},"classes/SelectFilesDto.html":{},"classes/SelectNotificationsDto.html":{},"classes/SelectUserNotificationTokensDto.html":{},"classes/SelectUsersDto.html":{}}}],["email",{"_index":441,"title":{},"body":{"injectables/AuthService.html":{},"classes/ConfirmationEmailDto.html":{},"classes/CreateProfileDto.html":{},"classes/CreateUserDto.html":{},"classes/CredentialsDto.html":{},"classes/ResetPasswordDto.html":{},"classes/SendResetPasswordDto.html":{},"classes/UpdateEmailDto.html":{},"classes/UpdatePasswordDto.html":{},"classes/UpdateProfileDto.html":{},"classes/UserEntity.html":{},"classes/user1615673396368.html":{},"miscellaneous/variables.html":{}}}],["email.dto.ts",{"_index":534,"title":{},"body":{"classes/ConfirmationEmailDto.html":{},"coverage.html":{}}}],["email.dto.ts:15",{"_index":538,"title":{},"body":{"classes/ConfirmationEmailDto.html":{}}}],["emitclose",{"_index":1510,"title":{},"body":{"injectables/StorageService.html":{}}}],["encoding",{"_index":567,"title":{},"body":{"interfaces/CreateMockFileReturn.html":{},"classes/FileEntity.html":{},"classes/FileEntityPreview.html":{},"injectables/StorageS3Service.html":{},"injectables/StorageService.html":{},"classes/UploadedFile.html":{}}}],["encrypted",{"_index":397,"title":{},"body":{"injectables/AuthService.html":{},"miscellaneous/variables.html":{}}}],["encrypted).catch",{"_index":458,"title":{},"body":{"injectables/AuthService.html":{}}}],["encrypted.split",{"_index":2043,"title":{},"body":{"miscellaneous/variables.html":{}}}],["end",{"_index":921,"title":{},"body":{"injectables/FilesService.html":{}}}],["end}/${+filesize",{"_index":930,"title":{},"body":{"injectables/FilesService.html":{}}}],["entire",{"_index":1929,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["entities",{"_index":656,"title":{},"body":{"modules/DatabaseModule.html":{},"controllers/FilesController.html":{},"modules/FilesModule.html":{},"injectables/FilesService.html":{},"classes/FindManyOptionsDto.html":{},"controllers/NotificationsController.html":{},"modules/NotificationsModule.html":{},"injectables/NotificationsService.html":{},"classes/PaginationFilesDto.html":{},"classes/PaginationNotificationsDto.html":{},"classes/PaginationUserNotificationTokensDto.html":{},"classes/PaginationUsersDto.html":{},"classes/SelectFileDto.html":{},"classes/SelectFilesDto.html":{},"classes/SelectNotificationsDto.html":{},"classes/SelectUserDto.html":{},"classes/SelectUserNotificationTokenDto.html":{},"classes/SelectUserNotificationTokensDto.html":{},"classes/SelectUsersDto.html":{},"controllers/UserNotificationTokensController.html":{},"injectables/UserNotificationTokensService.html":{},"injectables/UserRefreshTokensService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["entities[index",{"_index":1276,"title":{},"body":{"injectables/NotificationsService.html":{}}}],["entitieslike",{"_index":1202,"title":{},"body":{"injectables/NotificationsService.html":{}}}],["entity",{"_index":675,"title":{},"body":{"classes/DownloadFileDto.html":{},"classes/FileEntity.html":{},"classes/FileEntityPreview.html":{},"injectables/FilesService.html":{},"classes/FindManyOptionsDto.html":{},"classes/FindOneOptionsDto.html":{},"classes/ID.html":{},"classes/NotificationEntity.html":{},"injectables/NotificationsService.html":{},"classes/SelectFileDto.html":{},"classes/SelectFilesDto.html":{},"classes/SelectNotificationsDto.html":{},"classes/SelectProfileDto.html":{},"classes/SelectUserDto.html":{},"classes/SelectUserNotificationTokenDto.html":{},"classes/SelectUserNotificationTokensDto.html":{},"classes/SelectUsersDto.html":{},"classes/UserEntity.html":{},"classes/UserNotificationTokenEntity.html":{},"injectables/UserNotificationTokensService.html":{},"classes/UserRefreshTokenEntity.html":{},"injectables/UserRefreshTokensService.html":{},"injectables/UsersService.html":{}}}],["entity('files",{"_index":727,"title":{},"body":{"classes/FileEntity.html":{},"classes/FileEntityPreview.html":{}}}],["entity('notifications",{"_index":1157,"title":{},"body":{"classes/NotificationEntity.html":{}}}],["entity('user_notification_tokens",{"_index":1593,"title":{},"body":{"classes/UserNotificationTokenEntity.html":{}}}],["entity('user_refresh_tokens",{"_index":1649,"title":{},"body":{"classes/UserRefreshTokenEntity.html":{}}}],["entity('users",{"_index":1576,"title":{},"body":{"classes/UserEntity.html":{}}}],["entity.title",{"_index":1258,"title":{},"body":{"injectables/NotificationsService.html":{}}}],["entity_relation_field",{"_index":1724,"title":{},"body":{"injectables/UsersService.html":{}}}],["entitylike",{"_index":860,"title":{},"body":{"injectables/FilesService.html":{},"injectables/NotificationsService.html":{},"injectables/UserNotificationTokensService.html":{},"injectables/UserRefreshTokensService.html":{},"injectables/UsersService.html":{}}}],["entitylike).catch",{"_index":1254,"title":{},"body":{"injectables/NotificationsService.html":{}}}],["enum",{"_index":520,"title":{},"body":{"injectables/ConfigService.html":{},"classes/NotificationEntity.html":{},"classes/SelectNotificationsDto.html":{},"classes/UserEntity.html":{}}}],["enumerations",{"_index":1855,"title":{"miscellaneous/enumerations.html":{}},"body":{"miscellaneous/enumerations.html":{}}}],["enums",{"_index":44,"title":{},"body":{"classes/AllExceptionFilter.html":{},"classes/CreateNotificationDto.html":{},"classes/NotificationEntity.html":{},"injectables/NotificationsService.html":{},"classes/SelectNotificationsDto.html":{},"classes/SelectUsersDto.html":{},"classes/UpdateNotificationDto.html":{},"classes/UserEntity.html":{},"controllers/UsersController.html":{}}}],["env",{"_index":1836,"title":{},"body":{"dependencies.html":{},"index.html":{}}}],["env.development",{"_index":1981,"title":{},"body":{"index.html":{}}}],["env.example",{"_index":1985,"title":{},"body":{"index.html":{}}}],["env.production",{"_index":1982,"title":{},"body":{"index.html":{}}}],["env.test",{"_index":1983,"title":{},"body":{"index.html":{}}}],["env/.env.${process.env.node_env",{"_index":524,"title":{},"body":{"injectables/ConfigService.html":{}}}],["environment",{"_index":496,"title":{},"body":{"injectables/ConfigService.html":{}}}],["equal",{"_index":1339,"title":{},"body":{"classes/SelectNotificationsDto.html":{}}}],["equal(status",{"_index":1346,"title":{},"body":{"classes/SelectNotificationsDto.html":{}}}],["err",{"_index":1051,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["error",{"_index":26,"title":{},"body":{"classes/AllExceptionFilter.html":{},"injectables/ConfigService.html":{},"classes/HttpExceptionFilter.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtRefreshGuard.html":{},"injectables/SendGridService.html":{}}}],["error('sendgrid",{"_index":1402,"title":{},"body":{"injectables/SendGridService.html":{}}}],["errortypeenum",{"_index":43,"title":{},"body":{"classes/AllExceptionFilter.html":{},"injectables/AuthService.html":{},"injectables/FileValidationPipe.html":{},"injectables/FilesService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtRefreshGuard.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/NotificationsService.html":{},"injectables/StorageS3Service.html":{},"injectables/StorageService.html":{},"injectables/UserNotificationTokensService.html":{},"injectables/UserRefreshTokensService.html":{},"injectables/UsersService.html":{},"miscellaneous/enumerations.html":{}}}],["errortypeenum.internal_server_error",{"_index":60,"title":{},"body":{"classes/AllExceptionFilter.html":{}}}],["event",{"_index":1924,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["event_booking_accepted",{"_index":1923,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["event_cancelled_after_15_min",{"_index":1954,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["event_cancelled_by_artist",{"_index":1926,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["event_ended",{"_index":1957,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["event_reminder",{"_index":1956,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["event_reminder_15_minutes",{"_index":1942,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["event_reminder_1_hour",{"_index":1938,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["event_was_prolong",{"_index":1955,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["events",{"_index":1949,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["example",{"_index":549,"title":{},"body":{"classes/ConfirmationEmailDto.html":{},"classes/CreateUserDto.html":{},"classes/FileEntity.html":{},"classes/FileEntityPreview.html":{},"injectables/FilesService.html":{},"classes/FindManyOptionsDto.html":{},"classes/FindOneOptionsDto.html":{},"injectables/NotificationsService.html":{},"classes/ResetPasswordDto.html":{},"classes/SelectFileDto.html":{},"classes/SelectFilesDto.html":{},"classes/SelectNotificationsDto.html":{},"classes/SelectProfileDto.html":{},"classes/SelectUserDto.html":{},"classes/SelectUserNotificationTokenDto.html":{},"classes/SelectUserNotificationTokensDto.html":{},"classes/SelectUsersDto.html":{},"classes/SendResetPasswordDto.html":{},"classes/UpdateEmailDto.html":{},"classes/UpdatePasswordDto.html":{},"classes/UpdateProfileDto.html":{},"injectables/UsersService.html":{}}}],["example.md",{"_index":1323,"title":{},"body":{"classes/SelectFilesDto.html":{}}}],["exception",{"_index":33,"title":{},"body":{"classes/AllExceptionFilter.html":{},"classes/HttpExceptionFilter.html":{}}}],["exception.filter.ts",{"_index":7,"title":{},"body":{"classes/AllExceptionFilter.html":{},"classes/HttpExceptionFilter.html":{},"coverage.html":{}}}],["exception.filter.ts:12",{"_index":1027,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["exception.filter.ts:16",{"_index":24,"title":{},"body":{"classes/AllExceptionFilter.html":{}}}],["exception.filter.ts:18",{"_index":29,"title":{},"body":{"classes/AllExceptionFilter.html":{}}}],["exception.getresponse",{"_index":58,"title":{},"body":{"classes/AllExceptionFilter.html":{},"classes/HttpExceptionFilter.html":{}}}],["exception.getstatus",{"_index":55,"title":{},"body":{"classes/AllExceptionFilter.html":{},"classes/HttpExceptionFilter.html":{}}}],["exception.stack",{"_index":74,"title":{},"body":{"classes/AllExceptionFilter.html":{}}}],["exceptionfilter",{"_index":9,"title":{},"body":{"classes/AllExceptionFilter.html":{},"classes/HttpExceptionFilter.html":{}}}],["exclude",{"_index":1648,"title":{},"body":{"classes/UserRefreshTokenEntity.html":{}}}],["exclude()@apihideproperty()@column({type",{"_index":1644,"title":{},"body":{"classes/UserRefreshTokenEntity.html":{}}}],["executioncontext",{"_index":1043,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"interfaces/Response.html":{},"injectables/TransformInterceptor.html":{},"miscellaneous/variables.html":{}}}],["expect(fs.existssync(filepath)).toequal(true",{"_index":584,"title":{},"body":{"interfaces/CreateMockFileReturn.html":{}}}],["expire",{"_index":1953,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["expiresin",{"_index":429,"title":{},"body":{"injectables/AuthService.html":{}}}],["expiresinaccesstoken",{"_index":350,"title":{},"body":{"injectables/AuthService.html":{}}}],["expiresinrefreshtoken",{"_index":351,"title":{},"body":{"injectables/AuthService.html":{}}}],["export",{"_index":45,"title":{},"body":{"classes/AllExceptionFilter.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"modules/ConfigModule.html":{},"injectables/ConfigService.html":{},"classes/ConfirmationEmailDto.html":{},"classes/CreateFileDto.html":{},"interfaces/CreateMockFileReturn.html":{},"classes/CreateNotificationDto.html":{},"classes/CreateProfileDto.html":{},"classes/CreateUserDto.html":{},"classes/CreateUserNotificationTokenDto.html":{},"classes/CredentialsDto.html":{},"modules/DatabaseModule.html":{},"classes/DeleteUserNotificationTokenDto.html":{},"classes/DownloadFileDto.html":{},"classes/FileEntity.html":{},"classes/FileEntityPreview.html":{},"injectables/FileValidationPipe.html":{},"controllers/FilesController.html":{},"modules/FilesModule.html":{},"injectables/FilesService.html":{},"interfaces/FindManyBracketsOptions.html":{},"classes/FindManyOptionsDto.html":{},"classes/FindOneOptionsDto.html":{},"classes/HttpExceptionFilter.html":{},"classes/ID.html":{},"classes/JwtAccessTokenPayloadDto.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtRefreshGuard.html":{},"classes/JwtRefreshTokenDto.html":{},"classes/JwtRefreshTokenPayloadDto.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"classes/JwtTokensDto.html":{},"modules/MultipartModule.html":{},"interfaces/MultipartModuleAsyncOptions.html":{},"interfaces/MultipartOptionsFactory.html":{},"classes/NotificationEntity.html":{},"controllers/NotificationsController.html":{},"modules/NotificationsModule.html":{},"injectables/NotificationsService.html":{},"classes/PaginationFilesDto.html":{},"classes/PaginationNotificationsDto.html":{},"classes/PaginationUserNotificationTokensDto.html":{},"classes/PaginationUsersDto.html":{},"classes/ResetPasswordDto.html":{},"interfaces/Response.html":{},"classes/SelectFileDto.html":{},"classes/SelectFilesDto.html":{},"classes/SelectNotificationsDto.html":{},"classes/SelectProfileDto.html":{},"classes/SelectUserDto.html":{},"classes/SelectUserNotificationTokenDto.html":{},"classes/SelectUserNotificationTokensDto.html":{},"classes/SelectUsersDto.html":{},"modules/SendGridModule.html":{},"interfaces/SendGridModuleAsyncOptions.html":{},"interfaces/SendGridModuleOptions.html":{},"interfaces/SendGridOptionsFactory.html":{},"injectables/SendGridService.html":{},"classes/SendResetPasswordDto.html":{},"injectables/StorageS3Service.html":{},"injectables/StorageService.html":{},"injectables/TransformInterceptor.html":{},"classes/UpdateEmailDto.html":{},"classes/UpdateNotificationDto.html":{},"classes/UpdatePasswordDto.html":{},"classes/UpdateProfileDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserNotificationTokenDto.html":{},"classes/UploadedFile.html":{},"classes/UserEntity.html":{},"classes/UserNotificationTokenEntity.html":{},"controllers/UserNotificationTokensController.html":{},"injectables/UserNotificationTokensService.html":{},"classes/UserRefreshTokenEntity.html":{},"injectables/UserRefreshTokensService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"classes/user1615673396368.html":{}}}],["exports",{"_index":321,"title":{},"body":{"modules/AuthModule.html":{},"modules/ConfigModule.html":{},"modules/FilesModule.html":{},"modules/MultipartModule.html":{},"modules/NotificationsModule.html":{},"modules/SendGridModule.html":{},"modules/UsersModule.html":{}}}],["expose",{"_index":718,"title":{},"body":{"classes/FileEntity.html":{},"classes/FileEntityPreview.html":{},"classes/FindManyOptionsDto.html":{},"classes/FindOneOptionsDto.html":{}}}],["ext",{"_index":1500,"title":{},"body":{"injectables/StorageService.html":{}}}],["extends",{"_index":546,"title":{},"body":{"classes/ConfirmationEmailDto.html":{},"classes/CreateProfileDto.html":{},"classes/CredentialsDto.html":{},"classes/DeleteUserNotificationTokenDto.html":{},"classes/DownloadFileDto.html":{},"classes/FileEntity.html":{},"classes/FileEntityPreview.html":{},"interfaces/FindManyBracketsOptions.html":{},"classes/FindManyOptionsDto.html":{},"classes/JwtAccessTokenPayloadDto.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtRefreshGuard.html":{},"classes/JwtRefreshTokenDto.html":{},"classes/JwtRefreshTokenPayloadDto.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"classes/JwtTokensDto.html":{},"interfaces/MultipartModuleAsyncOptions.html":{},"interfaces/MultipartOptionsFactory.html":{},"classes/PaginationFilesDto.html":{},"classes/PaginationNotificationsDto.html":{},"classes/PaginationUserNotificationTokensDto.html":{},"classes/PaginationUsersDto.html":{},"classes/ResetPasswordDto.html":{},"classes/SelectFileDto.html":{},"classes/SelectFilesDto.html":{},"classes/SelectNotificationsDto.html":{},"classes/SelectProfileDto.html":{},"classes/SelectUserDto.html":{},"classes/SelectUserNotificationTokenDto.html":{},"classes/SelectUserNotificationTokensDto.html":{},"classes/SelectUsersDto.html":{},"interfaces/SendGridModuleAsyncOptions.html":{},"interfaces/SendGridModuleOptions.html":{},"interfaces/SendGridOptionsFactory.html":{},"injectables/SendGridService.html":{},"classes/SendResetPasswordDto.html":{},"classes/UpdateEmailDto.html":{},"classes/UpdateNotificationDto.html":{},"classes/UpdatePasswordDto.html":{},"classes/UpdateProfileDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserNotificationTokenDto.html":{}}}],["extname",{"_index":680,"title":{},"body":{"classes/FileEntity.html":{},"classes/FileEntityPreview.html":{},"injectables/StorageS3Service.html":{},"injectables/StorageService.html":{},"classes/UploadedFile.html":{}}}],["extname(multipart.filename",{"_index":1457,"title":{},"body":{"injectables/StorageS3Service.html":{},"injectables/StorageService.html":{}}}],["extractjwt",{"_index":1074,"title":{},"body":{"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{}}}],["extractjwt.fromauthheaderasbearertoken",{"_index":1090,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["extractjwt.frombodyfield('refreshtoken",{"_index":1081,"title":{},"body":{"injectables/JwtRefreshTokenStrategy.html":{}}}],["false",{"_index":141,"title":{},"body":{"controllers/AppController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"modules/DatabaseModule.html":{},"injectables/FilesService.html":{},"classes/NotificationEntity.html":{},"injectables/NotificationsService.html":{},"injectables/StorageService.html":{},"classes/UserEntity.html":{},"classes/UserNotificationTokenEntity.html":{},"injectables/UserNotificationTokensService.html":{},"injectables/UserRefreshTokensService.html":{},"injectables/UsersService.html":{}}}],["fastify",{"_index":42,"title":{},"body":{"classes/AllExceptionFilter.html":{},"classes/CreateFileDto.html":{},"classes/FileEntity.html":{},"classes/FileEntityPreview.html":{},"injectables/FileValidationPipe.html":{},"controllers/FilesController.html":{},"injectables/FilesService.html":{},"classes/HttpExceptionFilter.html":{},"interfaces/MultipartModuleAsyncOptions.html":{},"interfaces/MultipartOptionsFactory.html":{},"injectables/StorageS3Service.html":{},"injectables/StorageService.html":{},"dependencies.html":{}}}],["fastify.util.ts",{"_index":1811,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["fastifymultipartoptions",{"_index":1134,"title":{},"body":{"interfaces/MultipartModuleAsyncOptions.html":{},"interfaces/MultipartOptionsFactory.html":{},"miscellaneous/typealiases.html":{}}}],["fastifyreply",{"_index":35,"title":{},"body":{"classes/AllExceptionFilter.html":{},"controllers/FilesController.html":{},"injectables/FilesService.html":{},"classes/HttpExceptionFilter.html":{}}}],["features",{"_index":1736,"title":{},"body":{"changelog.html":{}}}],["feedback",{"_index":1908,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["field",{"_index":557,"title":{},"body":{"classes/CreateFileDto.html":{},"classes/FindManyOptionsDto.html":{},"classes/FindOneOptionsDto.html":{},"classes/SelectFilesDto.html":{},"classes/SelectNotificationsDto.html":{},"classes/SelectUserNotificationTokensDto.html":{},"classes/SelectUsersDto.html":{},"miscellaneous/functions.html":{}}}],["fields",{"_index":957,"title":{},"body":{"classes/FindManyOptionsDto.html":{},"classes/SelectFilesDto.html":{},"classes/SelectNotificationsDto.html":{},"classes/SelectUserNotificationTokensDto.html":{},"classes/SelectUsersDto.html":{}}}],["file",{"_index":5,"title":{},"body":{"classes/AllExceptionFilter.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"modules/ConfigModule.html":{},"injectables/ConfigService.html":{},"classes/ConfirmationEmailDto.html":{},"classes/CreateFileDto.html":{},"interfaces/CreateMockFileReturn.html":{},"classes/CreateNotificationDto.html":{},"classes/CreateProfileDto.html":{},"classes/CreateUserDto.html":{},"classes/CreateUserNotificationTokenDto.html":{},"classes/CredentialsDto.html":{},"modules/DatabaseModule.html":{},"classes/DeleteUserNotificationTokenDto.html":{},"classes/DownloadFileDto.html":{},"classes/FileEntity.html":{},"classes/FileEntityPreview.html":{},"injectables/FileValidationPipe.html":{},"controllers/FilesController.html":{},"modules/FilesModule.html":{},"injectables/FilesService.html":{},"interfaces/FindManyBracketsOptions.html":{},"classes/FindManyOptionsDto.html":{},"classes/FindOneOptionsDto.html":{},"classes/HttpExceptionFilter.html":{},"classes/ID.html":{},"classes/JwtAccessTokenPayloadDto.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtRefreshGuard.html":{},"classes/JwtRefreshTokenDto.html":{},"classes/JwtRefreshTokenPayloadDto.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"classes/JwtTokensDto.html":{},"modules/MultipartModule.html":{},"interfaces/MultipartModuleAsyncOptions.html":{},"interfaces/MultipartOptionsFactory.html":{},"classes/NotificationEntity.html":{},"controllers/NotificationsController.html":{},"modules/NotificationsModule.html":{},"injectables/NotificationsService.html":{},"classes/PaginationFilesDto.html":{},"classes/PaginationNotificationsDto.html":{},"classes/PaginationUserNotificationTokensDto.html":{},"classes/PaginationUsersDto.html":{},"classes/ResetPasswordDto.html":{},"interfaces/Response.html":{},"classes/SelectFileDto.html":{},"classes/SelectFilesDto.html":{},"classes/SelectNotificationsDto.html":{},"classes/SelectProfileDto.html":{},"classes/SelectUserDto.html":{},"classes/SelectUserNotificationTokenDto.html":{},"classes/SelectUserNotificationTokensDto.html":{},"classes/SelectUsersDto.html":{},"modules/SendGridModule.html":{},"interfaces/SendGridModuleAsyncOptions.html":{},"interfaces/SendGridModuleOptions.html":{},"interfaces/SendGridOptionsFactory.html":{},"injectables/SendGridService.html":{},"classes/SendResetPasswordDto.html":{},"injectables/StorageS3Service.html":{},"injectables/StorageService.html":{},"injectables/TransformInterceptor.html":{},"classes/UpdateEmailDto.html":{},"classes/UpdateNotificationDto.html":{},"classes/UpdatePasswordDto.html":{},"classes/UpdateProfileDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserNotificationTokenDto.html":{},"classes/UploadedFile.html":{},"classes/UserEntity.html":{},"classes/UserNotificationTokenEntity.html":{},"controllers/UserNotificationTokensController.html":{},"injectables/UserNotificationTokensService.html":{},"classes/UserRefreshTokenEntity.html":{},"injectables/UserRefreshTokensService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"unit-test.html":{},"classes/user1615673396368.html":{},"miscellaneous/variables.html":{}}}],["file.dto.ts",{"_index":552,"title":{},"body":{"classes/CreateFileDto.html":{},"classes/DownloadFileDto.html":{},"classes/UploadedFile.html":{},"coverage.html":{}}}],["file.dto.ts:13",{"_index":672,"title":{},"body":{"classes/DownloadFileDto.html":{}}}],["file.dto.ts:16",{"_index":1540,"title":{},"body":{"classes/UploadedFile.html":{}}}],["file.dto.ts:19",{"_index":558,"title":{},"body":{"classes/CreateFileDto.html":{}}}],["file.dto.ts:21",{"_index":1537,"title":{},"body":{"classes/UploadedFile.html":{}}}],["file.dto.ts:26",{"_index":1538,"title":{},"body":{"classes/UploadedFile.html":{}}}],["file.dto.ts:31",{"_index":1539,"title":{},"body":{"classes/UploadedFile.html":{}}}],["file.dto.ts:36",{"_index":1535,"title":{},"body":{"classes/UploadedFile.html":{}}}],["file.dto.ts:4",{"_index":1534,"title":{},"body":{"classes/UploadedFile.html":{}}}],["file.dto.ts:41",{"_index":1536,"title":{},"body":{"classes/UploadedFile.html":{}}}],["file.filename",{"_index":1507,"title":{},"body":{"injectables/StorageService.html":{}}}],["file.util.ts",{"_index":566,"title":{},"body":{"interfaces/CreateMockFileReturn.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["file_already_exist",{"_index":1873,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["file_not_found",{"_index":1875,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["file_too_large",{"_index":1876,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["file_unsupported_type",{"_index":1872,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["filedecorator",{"_index":1804,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["filedecorator(options",{"_index":2077,"title":{},"body":{"miscellaneous/variables.html":{}}}],["filedest",{"_index":1506,"title":{},"body":{"injectables/StorageService.html":{}}}],["fileentity",{"_index":677,"title":{"classes/FileEntity.html":{}},"body":{"classes/FileEntity.html":{},"classes/FileEntityPreview.html":{},"controllers/FilesController.html":{},"modules/FilesModule.html":{},"injectables/FilesService.html":{},"classes/PaginationFilesDto.html":{},"classes/SelectFileDto.html":{},"classes/SelectFilesDto.html":{},"classes/UserEntity.html":{},"coverage.html":{}}}],["fileentity_relation_field",{"_index":881,"title":{},"body":{"injectables/FilesService.html":{}}}],["fileentitypreview",{"_index":738,"title":{"classes/FileEntityPreview.html":{}},"body":{"classes/FileEntity.html":{},"classes/FileEntityPreview.html":{},"classes/UserEntity.html":{},"coverage.html":{}}}],["fileentitypreview(value",{"_index":1580,"title":{},"body":{"classes/UserEntity.html":{}}}],["fileentityrepository",{"_index":833,"title":{},"body":{"injectables/FilesService.html":{}}}],["filename",{"_index":505,"title":{},"body":{"injectables/ConfigService.html":{},"interfaces/CreateMockFileReturn.html":{},"classes/FileEntity.html":{},"classes/FileEntityPreview.html":{},"controllers/FilesController.html":{},"injectables/FilesService.html":{},"injectables/StorageS3Service.html":{},"injectables/StorageService.html":{},"classes/UploadedFile.html":{}}}],["filename*=utf",{"_index":914,"title":{},"body":{"injectables/FilesService.html":{}}}],["filepath",{"_index":568,"title":{},"body":{"interfaces/CreateMockFileReturn.html":{},"injectables/StorageService.html":{}}}],["files",{"_index":762,"title":{},"body":{"controllers/FilesController.html":{},"index.html":{}}}],["files.controller",{"_index":825,"title":{},"body":{"modules/FilesModule.html":{}}}],["files.dto.ts",{"_index":1285,"title":{},"body":{"classes/PaginationFilesDto.html":{},"coverage.html":{}}}],["files.dto.ts:8",{"_index":1286,"title":{},"body":{"classes/PaginationFilesDto.html":{}}}],["files.service",{"_index":799,"title":{},"body":{"controllers/FilesController.html":{},"modules/FilesModule.html":{}}}],["files_not_found",{"_index":1874,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["filescontroller",{"_index":760,"title":{"controllers/FilesController.html":{}},"body":{"controllers/FilesController.html":{},"modules/FilesModule.html":{},"coverage.html":{}}}],["filesize",{"_index":681,"title":{},"body":{"classes/FileEntity.html":{},"classes/FileEntityPreview.html":{},"injectables/FilesService.html":{},"injectables/StorageS3Service.html":{},"injectables/StorageService.html":{},"classes/UploadedFile.html":{},"miscellaneous/variables.html":{}}}],["filesmodule",{"_index":151,"title":{"modules/FilesModule.html":{}},"body":{"modules/AppModule.html":{},"modules/FilesModule.html":{},"modules.html":{},"overview.html":{}}}],["filesservice",{"_index":798,"title":{"injectables/FilesService.html":{}},"body":{"controllers/FilesController.html":{},"modules/FilesModule.html":{},"injectables/FilesService.html":{},"coverage.html":{},"overview.html":{}}}],["filevalidationpipe",{"_index":744,"title":{"injectables/FileValidationPipe.html":{}},"body":{"injectables/FileValidationPipe.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["filter(([key",{"_index":2088,"title":{},"body":{"miscellaneous/variables.html":{}}}],["filter((key",{"_index":2095,"title":{},"body":{"miscellaneous/variables.html":{}}}],["filtersareempty",{"_index":1343,"title":{},"body":{"classes/SelectNotificationsDto.html":{}}}],["find",{"_index":828,"title":{},"body":{"injectables/FilesService.html":{},"classes/FindManyOptionsDto.html":{},"injectables/NotificationsService.html":{},"injectables/UserNotificationTokensService.html":{},"injectables/UserRefreshTokensService.html":{},"injectables/UsersService.html":{}}}],["find(optionsorconditions",{"_index":841,"title":{},"body":{"injectables/FilesService.html":{},"injectables/NotificationsService.html":{},"injectables/UserNotificationTokensService.html":{},"injectables/UserRefreshTokensService.html":{},"injectables/UsersService.html":{}}}],["findmanybracketsoptions",{"_index":846,"title":{"interfaces/FindManyBracketsOptions.html":{}},"body":{"injectables/FilesService.html":{},"interfaces/FindManyBracketsOptions.html":{},"classes/FindManyOptionsDto.html":{},"coverage.html":{}}}],["findmanyoptions",{"_index":842,"title":{},"body":{"injectables/FilesService.html":{},"interfaces/FindManyBracketsOptions.html":{},"classes/FindManyOptionsDto.html":{},"injectables/NotificationsService.html":{},"injectables/UserNotificationTokensService.html":{},"injectables/UserRefreshTokensService.html":{},"injectables/UsersService.html":{}}}],["findmanyoptions['order",{"_index":1002,"title":{},"body":{"classes/FindManyOptionsDto.html":{}}}],["findmanyoptionsdto",{"_index":936,"title":{"classes/FindManyOptionsDto.html":{}},"body":{"classes/FindManyOptionsDto.html":{},"classes/SelectFilesDto.html":{},"classes/SelectNotificationsDto.html":{},"classes/SelectUserNotificationTokensDto.html":{},"classes/SelectUsersDto.html":{},"coverage.html":{}}}],["findmanyoptionsdto:29",{"_index":1325,"title":{},"body":{"classes/SelectFilesDto.html":{},"classes/SelectNotificationsDto.html":{},"classes/SelectUserNotificationTokensDto.html":{},"classes/SelectUsersDto.html":{}}}],["findmanyoptionsdto:44",{"_index":1326,"title":{},"body":{"classes/SelectFilesDto.html":{},"classes/SelectNotificationsDto.html":{},"classes/SelectUserNotificationTokensDto.html":{},"classes/SelectUsersDto.html":{}}}],["findmanyoptionsdto:68",{"_index":1327,"title":{},"body":{"classes/SelectFilesDto.html":{},"classes/SelectNotificationsDto.html":{},"classes/SelectUserNotificationTokensDto.html":{},"classes/SelectUsersDto.html":{}}}],["findmanyoptionsdto:82",{"_index":1328,"title":{},"body":{"classes/SelectFilesDto.html":{},"classes/SelectNotificationsDto.html":{},"classes/SelectUserNotificationTokensDto.html":{},"classes/SelectUsersDto.html":{}}}],["findoneoptions",{"_index":401,"title":{},"body":{"injectables/AuthService.html":{},"injectables/FilesService.html":{},"classes/FindOneOptionsDto.html":{},"injectables/NotificationsService.html":{},"classes/SelectFilesDto.html":{},"classes/SelectUsersDto.html":{},"injectables/UserNotificationTokensService.html":{},"injectables/UserRefreshTokensService.html":{},"injectables/UsersService.html":{}}}],["findoneoptions['where",{"_index":1332,"title":{},"body":{"classes/SelectFilesDto.html":{},"classes/SelectUsersDto.html":{}}}],["findoneoptionsdto",{"_index":940,"title":{"classes/FindOneOptionsDto.html":{}},"body":{"classes/FindManyOptionsDto.html":{},"classes/FindOneOptionsDto.html":{},"controllers/NotificationsController.html":{},"classes/SelectFileDto.html":{},"classes/SelectFilesDto.html":{},"classes/SelectNotificationsDto.html":{},"classes/SelectProfileDto.html":{},"classes/SelectUserDto.html":{},"classes/SelectUserNotificationTokenDto.html":{},"classes/SelectUserNotificationTokensDto.html":{},"classes/SelectUsersDto.html":{},"coverage.html":{}}}],["findoneoptionsdto:24",{"_index":986,"title":{},"body":{"classes/FindManyOptionsDto.html":{},"classes/SelectFileDto.html":{},"classes/SelectFilesDto.html":{},"classes/SelectNotificationsDto.html":{},"classes/SelectProfileDto.html":{},"classes/SelectUserDto.html":{},"classes/SelectUserNotificationTokenDto.html":{},"classes/SelectUserNotificationTokensDto.html":{},"classes/SelectUsersDto.html":{}}}],["findoneoptionsdto:43",{"_index":979,"title":{},"body":{"classes/FindManyOptionsDto.html":{},"classes/SelectFileDto.html":{},"classes/SelectFilesDto.html":{},"classes/SelectNotificationsDto.html":{},"classes/SelectProfileDto.html":{},"classes/SelectUserDto.html":{},"classes/SelectUserNotificationTokenDto.html":{},"classes/SelectUserNotificationTokensDto.html":{},"classes/SelectUsersDto.html":{}}}],["findoptionsorder",{"_index":2086,"title":{},"body":{"miscellaneous/variables.html":{}}}],["findoptionsselect",{"_index":1015,"title":{},"body":{"classes/FindOneOptionsDto.html":{}}}],["findoptionsutils",{"_index":854,"title":{},"body":{"injectables/FilesService.html":{},"injectables/NotificationsService.html":{},"injectables/UserNotificationTokensService.html":{},"injectables/UserRefreshTokensService.html":{},"injectables/UsersService.html":{}}}],["findoptionsutils.extractfindmanyoptionsalias(optionsorconditions",{"_index":871,"title":{},"body":{"injectables/FilesService.html":{},"injectables/NotificationsService.html":{},"injectables/UserNotificationTokensService.html":{},"injectables/UserRefreshTokensService.html":{},"injectables/UsersService.html":{}}}],["findoptionsutils.isfindmanyoptions(optionsorconditions",{"_index":873,"title":{},"body":{"injectables/FilesService.html":{},"injectables/NotificationsService.html":{},"injectables/UsersService.html":{}}}],["findoptionsutils.joineagerrelations(qb",{"_index":875,"title":{},"body":{"injectables/FilesService.html":{},"injectables/NotificationsService.html":{}}}],["findoptionswhere",{"_index":400,"title":{},"body":{"injectables/AuthService.html":{},"injectables/FilesService.html":{},"injectables/NotificationsService.html":{},"injectables/UserNotificationTokensService.html":{},"injectables/UserRefreshTokensService.html":{},"injectables/UsersService.html":{}}}],["firebase",{"_index":1227,"title":{},"body":{"injectables/NotificationsService.html":{},"dependencies.html":{}}}],["floatintcolumntransformer",{"_index":1777,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["floattoint",{"_index":1763,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["floattoint(value",{"_index":2083,"title":{},"body":{"miscellaneous/variables.html":{}}}],["folder",{"_index":1984,"title":{},"body":{"index.html":{}}}],["foo",{"_index":2072,"title":{},"body":{"miscellaneous/variables.html":{}}}],["foo.bar",{"_index":2069,"title":{},"body":{"miscellaneous/variables.html":{}}}],["foo.bar.sub",{"_index":2071,"title":{},"body":{"miscellaneous/variables.html":{}}}],["foo.other",{"_index":2070,"title":{},"body":{"miscellaneous/variables.html":{}}}],["forbiddenexception",{"_index":1048,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["forbiddenexception(errortypeenum.auth_forbidden",{"_index":1058,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["foreach(([key",{"_index":2090,"title":{},"body":{"miscellaneous/variables.html":{}}}],["forget",{"_index":1941,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["form",{"_index":982,"title":{},"body":{"classes/FindManyOptionsDto.html":{},"classes/FindOneOptionsDto.html":{},"classes/SelectFileDto.html":{},"classes/SelectFilesDto.html":{},"classes/SelectNotificationsDto.html":{},"classes/SelectProfileDto.html":{},"classes/SelectUserDto.html":{},"classes/SelectUserNotificationTokenDto.html":{},"classes/SelectUserNotificationTokensDto.html":{},"classes/SelectUsersDto.html":{}}}],["format",{"_index":555,"title":{},"body":{"classes/CreateFileDto.html":{}}}],["found",{"_index":1404,"title":{},"body":{"injectables/SendGridService.html":{}}}],["fs",{"_index":572,"title":{},"body":{"interfaces/CreateMockFileReturn.html":{},"injectables/StorageService.html":{}}}],["fs.writefilesync(filepath",{"_index":583,"title":{},"body":{"interfaces/CreateMockFileReturn.html":{}}}],["fs/promises",{"_index":1489,"title":{},"body":{"injectables/StorageService.html":{}}}],["function",{"_index":501,"title":{},"body":{"injectables/ConfigService.html":{},"interfaces/CreateMockFileReturn.html":{},"interfaces/MultipartModuleAsyncOptions.html":{},"interfaces/SendGridModuleAsyncOptions.html":{},"coverage.html":{}}}],["functions",{"_index":1962,"title":{"miscellaneous/functions.html":{}},"body":{"miscellaneous/functions.html":{},"unit-test.html":{}}}],["generateaccesstoken",{"_index":354,"title":{},"body":{"injectables/AuthService.html":{}}}],["generateaccesstoken(undefined",{"_index":371,"title":{},"body":{"injectables/AuthService.html":{}}}],["generateandcreateone",{"_index":1651,"title":{},"body":{"injectables/UserRefreshTokensService.html":{}}}],["generateandcreateone(entitylike",{"_index":1657,"title":{},"body":{"injectables/UserRefreshTokensService.html":{}}}],["generatecode",{"_index":355,"title":{},"body":{"injectables/AuthService.html":{}}}],["generatecode(digits",{"_index":375,"title":{},"body":{"injectables/AuthService.html":{}}}],["generated",{"_index":499,"title":{},"body":{"injectables/ConfigService.html":{}}}],["generatename",{"_index":1420,"title":{},"body":{"injectables/StorageS3Service.html":{},"injectables/StorageService.html":{}}}],["generatenotificationprops",{"_index":1193,"title":{},"body":{"injectables/NotificationsService.html":{}}}],["generatenotificationprops(entity",{"_index":1207,"title":{},"body":{"injectables/NotificationsService.html":{}}}],["generaterefreshtoken",{"_index":356,"title":{},"body":{"injectables/AuthService.html":{}}}],["generaterefreshtoken(undefined",{"_index":382,"title":{},"body":{"injectables/AuthService.html":{}}}],["generatetokens",{"_index":357,"title":{},"body":{"injectables/AuthService.html":{}}}],["generatetokens(user",{"_index":384,"title":{},"body":{"injectables/AuthService.html":{}}}],["generator.util",{"_index":1114,"title":{},"body":{"modules/MultipartModule.html":{},"modules/SendGridModule.html":{}}}],["get(':id",{"_index":811,"title":{},"body":{"controllers/FilesController.html":{},"controllers/NotificationsController.html":{},"controllers/UserNotificationTokensController.html":{},"controllers/UsersController.html":{}}}],["get(':id')@apibearerauth()@useguards(jwtauthguard)@userole(userroleenum.admin",{"_index":785,"title":{},"body":{"controllers/FilesController.html":{}}}],["get('download/:filename",{"_index":818,"title":{},"body":{"controllers/FilesController.html":{}}}],["get('download/:filename')@apiparam({name",{"_index":777,"title":{},"body":{"controllers/FilesController.html":{}}}],["get('profile",{"_index":304,"title":{},"body":{"controllers/AuthController.html":{}}}],["get('profile')@apibearerauth()@useguards(jwtauthguard",{"_index":238,"title":{},"body":{"controllers/AuthController.html":{}}}],["get()@apibearerauth()@useguards(jwtauthguard)@userole(userroleenum.admin",{"_index":782,"title":{},"body":{"controllers/FilesController.html":{}}}],["get()@healthcheck",{"_index":89,"title":{},"body":{"controllers/AppController.html":{}}}],["get()@userole(userroleenum.admin",{"_index":1683,"title":{},"body":{"controllers/UsersController.html":{}}}],["get(key",{"_index":491,"title":{},"body":{"injectables/ConfigService.html":{}}}],["getdest",{"_index":487,"title":{},"body":{"injectables/ConfigService.html":{}}}],["getdest(key",{"_index":504,"title":{},"body":{"injectables/ConfigService.html":{}}}],["getloadeagerrelations",{"_index":1016,"title":{},"body":{"classes/FindOneOptionsDto.html":{}}}],["getmany",{"_index":1262,"title":{},"body":{"injectables/NotificationsService.html":{}}}],["getmanyandcount",{"_index":884,"title":{},"body":{"injectables/FilesService.html":{},"injectables/UsersService.html":{}}}],["getmode",{"_index":488,"title":{},"body":{"injectables/ConfigService.html":{}}}],["getmode(mode",{"_index":511,"title":{},"body":{"injectables/ConfigService.html":{}}}],["getoneorfail",{"_index":1250,"title":{},"body":{"injectables/NotificationsService.html":{},"injectables/UserNotificationTokensService.html":{},"injectables/UserRefreshTokensService.html":{},"injectables/UsersService.html":{}}}],["getorder",{"_index":987,"title":{},"body":{"classes/FindManyOptionsDto.html":{}}}],["getselect",{"_index":1013,"title":{},"body":{"classes/FindOneOptionsDto.html":{}}}],["getskip",{"_index":992,"title":{},"body":{"classes/FindManyOptionsDto.html":{}}}],["getsrc",{"_index":713,"title":{},"body":{"classes/FileEntity.html":{}}}],["getter",{"_index":989,"title":{},"body":{"classes/FindManyOptionsDto.html":{},"classes/FindOneOptionsDto.html":{}}}],["getting",{"_index":494,"title":{"changelog.html":{},"index.html":{}},"body":{"injectables/ConfigService.html":{}}}],["getwhere",{"_index":1329,"title":{},"body":{"classes/SelectFilesDto.html":{},"classes/SelectNotificationsDto.html":{},"classes/SelectUsersDto.html":{}}}],["given",{"_index":963,"title":{},"body":{"classes/FindManyOptionsDto.html":{},"classes/SelectFilesDto.html":{},"classes/SelectNotificationsDto.html":{},"classes/SelectUserNotificationTokensDto.html":{},"classes/SelectUsersDto.html":{}}}],["global",{"_index":482,"title":{},"body":{"modules/ConfigModule.html":{},"modules/MultipartModule.html":{},"modules/SendGridModule.html":{}}}],["go",{"_index":1917,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["graph",{"_index":2000,"title":{},"body":{"modules.html":{}}}],["guards",{"_index":274,"title":{},"body":{"controllers/AuthController.html":{}}}],["guidelines",{"_index":1974,"title":{},"body":{"index.html":{}}}],["handlerequest",{"_index":1038,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"injectables/JwtRefreshGuard.html":{}}}],["handlerequest(_err",{"_index":1042,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"injectables/JwtRefreshGuard.html":{}}}],["hash",{"_index":1570,"title":{},"body":{"classes/UserEntity.html":{},"injectables/UserRefreshTokensService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["hash(refreshidentifier",{"_index":1665,"title":{},"body":{"injectables/UserRefreshTokensService.html":{}}}],["hash(this.password",{"_index":1579,"title":{},"body":{"classes/UserEntity.html":{}}}],["hashpassword",{"_index":1543,"title":{},"body":{"classes/UserEntity.html":{}}}],["headers",{"_index":909,"title":{},"body":{"injectables/FilesService.html":{},"miscellaneous/functions.html":{}}}],["headobjectrequest",{"_index":1430,"title":{},"body":{"injectables/StorageS3Service.html":{},"miscellaneous/typealiases.html":{}}}],["health",{"_index":114,"title":{},"body":{"controllers/AppController.html":{}}}],["healthcheck",{"_index":97,"title":{},"body":{"controllers/AppController.html":{}}}],["healthcheckresult",{"_index":98,"title":{},"body":{"controllers/AppController.html":{}}}],["healthcheckservice",{"_index":99,"title":{},"body":{"controllers/AppController.html":{}}}],["helmet",{"_index":1841,"title":{},"body":{"dependencies.html":{}}}],["hex",{"_index":2046,"title":{},"body":{"miscellaneous/variables.html":{}}}],["host",{"_index":27,"title":{},"body":{"classes/AllExceptionFilter.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/DatabaseModule.html":{},"classes/HttpExceptionFilter.html":{}}}],["host.switchtohttp",{"_index":48,"title":{},"body":{"classes/AllExceptionFilter.html":{},"classes/HttpExceptionFilter.html":{}}}],["hour",{"_index":1939,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["hours",{"_index":1935,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["html",{"_index":471,"title":{},"body":{"injectables/AuthService.html":{}}}],["httpexception",{"_index":38,"title":{},"body":{"classes/AllExceptionFilter.html":{},"classes/HttpExceptionFilter.html":{}}}],["httpexceptionfilter",{"_index":1025,"title":{"classes/HttpExceptionFilter.html":{}},"body":{"classes/HttpExceptionFilter.html":{},"coverage.html":{}}}],["https://github.com/angular/angular/blob/22b96b9/contributing.md",{"_index":1976,"title":{},"body":{"index.html":{}}}],["https://www.conventionalcommits.org/en/v1.0.0",{"_index":1975,"title":{},"body":{"index.html":{}}}],["httpstatus",{"_index":37,"title":{},"body":{"classes/AllExceptionFilter.html":{}}}],["httpstatus.internal_server_error",{"_index":56,"title":{},"body":{"classes/AllExceptionFilter.html":{}}}],["id",{"_index":288,"title":{"classes/ID.html":{}},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"classes/DownloadFileDto.html":{},"classes/FileEntity.html":{},"classes/FileEntityPreview.html":{},"controllers/FilesController.html":{},"injectables/FilesService.html":{},"classes/ID.html":{},"classes/JwtAccessTokenPayloadDto.html":{},"classes/JwtRefreshTokenDto.html":{},"classes/JwtRefreshTokenPayloadDto.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"classes/JwtTokensDto.html":{},"classes/NotificationEntity.html":{},"controllers/NotificationsController.html":{},"injectables/NotificationsService.html":{},"classes/UserEntity.html":{},"classes/UserNotificationTokenEntity.html":{},"controllers/UserNotificationTokensController.html":{},"classes/UserRefreshTokenEntity.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"coverage.html":{},"classes/user1615673396368.html":{},"miscellaneous/variables.html":{}}}],["id:13",{"_index":674,"title":{},"body":{"classes/DownloadFileDto.html":{}}}],["identifier",{"_index":1744,"title":{},"body":{"coverage.html":{}}}],["ilike",{"_index":1331,"title":{},"body":{"classes/SelectFilesDto.html":{}}}],["ilike(`%${title",{"_index":1333,"title":{},"body":{"classes/SelectFilesDto.html":{}}}],["image/png",{"_index":578,"title":{},"body":{"interfaces/CreateMockFileReturn.html":{}}}],["implemented",{"_index":1737,"title":{},"body":{"changelog.html":{}}}],["implements",{"_index":8,"title":{},"body":{"classes/AllExceptionFilter.html":{},"classes/FileEntity.html":{},"classes/FileEntityPreview.html":{},"injectables/FileValidationPipe.html":{},"classes/FindManyOptionsDto.html":{},"classes/FindOneOptionsDto.html":{},"classes/HttpExceptionFilter.html":{},"interfaces/Response.html":{},"injectables/StorageService.html":{},"injectables/TransformInterceptor.html":{},"classes/user1615673396368.html":{}}}],["import",{"_index":36,"title":{},"body":{"classes/AllExceptionFilter.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"modules/ConfigModule.html":{},"injectables/ConfigService.html":{},"classes/ConfirmationEmailDto.html":{},"classes/CreateFileDto.html":{},"interfaces/CreateMockFileReturn.html":{},"classes/CreateNotificationDto.html":{},"classes/CreateProfileDto.html":{},"classes/CreateUserDto.html":{},"classes/CreateUserNotificationTokenDto.html":{},"classes/CredentialsDto.html":{},"modules/DatabaseModule.html":{},"classes/DeleteUserNotificationTokenDto.html":{},"classes/DownloadFileDto.html":{},"classes/FileEntity.html":{},"classes/FileEntityPreview.html":{},"injectables/FileValidationPipe.html":{},"controllers/FilesController.html":{},"modules/FilesModule.html":{},"injectables/FilesService.html":{},"interfaces/FindManyBracketsOptions.html":{},"classes/FindManyOptionsDto.html":{},"classes/FindOneOptionsDto.html":{},"classes/HttpExceptionFilter.html":{},"classes/ID.html":{},"classes/JwtAccessTokenPayloadDto.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtRefreshGuard.html":{},"classes/JwtRefreshTokenDto.html":{},"classes/JwtRefreshTokenPayloadDto.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"classes/JwtTokensDto.html":{},"modules/MultipartModule.html":{},"interfaces/MultipartModuleAsyncOptions.html":{},"interfaces/MultipartOptionsFactory.html":{},"classes/NotificationEntity.html":{},"controllers/NotificationsController.html":{},"modules/NotificationsModule.html":{},"injectables/NotificationsService.html":{},"classes/PaginationFilesDto.html":{},"classes/PaginationNotificationsDto.html":{},"classes/PaginationUserNotificationTokensDto.html":{},"classes/PaginationUsersDto.html":{},"classes/ResetPasswordDto.html":{},"interfaces/Response.html":{},"classes/SelectFileDto.html":{},"classes/SelectFilesDto.html":{},"classes/SelectNotificationsDto.html":{},"classes/SelectProfileDto.html":{},"classes/SelectUserDto.html":{},"classes/SelectUserNotificationTokenDto.html":{},"classes/SelectUserNotificationTokensDto.html":{},"classes/SelectUsersDto.html":{},"modules/SendGridModule.html":{},"interfaces/SendGridModuleAsyncOptions.html":{},"interfaces/SendGridModuleOptions.html":{},"interfaces/SendGridOptionsFactory.html":{},"injectables/SendGridService.html":{},"classes/SendResetPasswordDto.html":{},"injectables/StorageS3Service.html":{},"injectables/StorageService.html":{},"injectables/TransformInterceptor.html":{},"classes/UpdateEmailDto.html":{},"classes/UpdateNotificationDto.html":{},"classes/UpdatePasswordDto.html":{},"classes/UpdateProfileDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserNotificationTokenDto.html":{},"classes/UserEntity.html":{},"classes/UserNotificationTokenEntity.html":{},"controllers/UserNotificationTokensController.html":{},"injectables/UserNotificationTokensService.html":{},"classes/UserRefreshTokenEntity.html":{},"injectables/UserRefreshTokensService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"classes/user1615673396368.html":{}}}],["imports",{"_index":159,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/DatabaseModule.html":{},"modules/FilesModule.html":{},"modules/MultipartModule.html":{},"modules/NotificationsModule.html":{},"modules/SendGridModule.html":{},"modules/UsersModule.html":{}}}],["inconvenience",{"_index":1937,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["index",{"_index":10,"title":{"index.html":{}},"body":{"classes/AllExceptionFilter.html":{},"controllers/AppController.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/ConfigService.html":{},"classes/ConfirmationEmailDto.html":{},"classes/CreateFileDto.html":{},"interfaces/CreateMockFileReturn.html":{},"classes/CreateNotificationDto.html":{},"classes/CreateUserDto.html":{},"classes/CreateUserNotificationTokenDto.html":{},"classes/DeleteUserNotificationTokenDto.html":{},"classes/DownloadFileDto.html":{},"classes/FileEntity.html":{},"injectables/FileValidationPipe.html":{},"controllers/FilesController.html":{},"injectables/FilesService.html":{},"interfaces/FindManyBracketsOptions.html":{},"classes/FindManyOptionsDto.html":{},"classes/FindOneOptionsDto.html":{},"classes/HttpExceptionFilter.html":{},"classes/ID.html":{},"classes/JwtAccessTokenPayloadDto.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtRefreshGuard.html":{},"classes/JwtRefreshTokenPayloadDto.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"classes/JwtTokensDto.html":{},"interfaces/MultipartModuleAsyncOptions.html":{},"interfaces/MultipartOptionsFactory.html":{},"classes/NotificationEntity.html":{},"controllers/NotificationsController.html":{},"injectables/NotificationsService.html":{},"classes/ResetPasswordDto.html":{},"interfaces/Response.html":{},"classes/SelectFileDto.html":{},"classes/SelectFilesDto.html":{},"classes/SelectNotificationsDto.html":{},"classes/SelectProfileDto.html":{},"classes/SelectUserDto.html":{},"classes/SelectUserNotificationTokenDto.html":{},"classes/SelectUserNotificationTokensDto.html":{},"classes/SelectUsersDto.html":{},"interfaces/SendGridModuleAsyncOptions.html":{},"interfaces/SendGridModuleOptions.html":{},"interfaces/SendGridOptionsFactory.html":{},"injectables/SendGridService.html":{},"injectables/StorageS3Service.html":{},"injectables/StorageService.html":{},"injectables/TransformInterceptor.html":{},"classes/UpdateNotificationDto.html":{},"classes/UpdatePasswordDto.html":{},"classes/UploadedFile.html":{},"classes/UserEntity.html":{},"classes/UserNotificationTokenEntity.html":{},"controllers/UserNotificationTokensController.html":{},"injectables/UserNotificationTokensService.html":{},"classes/UserRefreshTokenEntity.html":{},"injectables/UserRefreshTokensService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"classes/user1615673396368.html":{},"miscellaneous/variables.html":{}}}],["indicates",{"_index":976,"title":{},"body":{"classes/FindManyOptionsDto.html":{},"classes/FindOneOptionsDto.html":{},"classes/SelectFileDto.html":{},"classes/SelectFilesDto.html":{},"classes/SelectNotificationsDto.html":{},"classes/SelectProfileDto.html":{},"classes/SelectUserDto.html":{},"classes/SelectUserNotificationTokenDto.html":{},"classes/SelectUserNotificationTokensDto.html":{},"classes/SelectUsersDto.html":{}}}],["info",{"_index":3,"title":{},"body":{"classes/AllExceptionFilter.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"modules/ConfigModule.html":{},"injectables/ConfigService.html":{},"classes/ConfirmationEmailDto.html":{},"classes/CreateFileDto.html":{},"interfaces/CreateMockFileReturn.html":{},"classes/CreateNotificationDto.html":{},"classes/CreateProfileDto.html":{},"classes/CreateUserDto.html":{},"classes/CreateUserNotificationTokenDto.html":{},"classes/CredentialsDto.html":{},"modules/DatabaseModule.html":{},"classes/DeleteUserNotificationTokenDto.html":{},"classes/DownloadFileDto.html":{},"classes/FileEntity.html":{},"classes/FileEntityPreview.html":{},"injectables/FileValidationPipe.html":{},"controllers/FilesController.html":{},"modules/FilesModule.html":{},"injectables/FilesService.html":{},"interfaces/FindManyBracketsOptions.html":{},"classes/FindManyOptionsDto.html":{},"classes/FindOneOptionsDto.html":{},"classes/HttpExceptionFilter.html":{},"classes/ID.html":{},"classes/JwtAccessTokenPayloadDto.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtRefreshGuard.html":{},"classes/JwtRefreshTokenDto.html":{},"classes/JwtRefreshTokenPayloadDto.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"classes/JwtTokensDto.html":{},"modules/MultipartModule.html":{},"interfaces/MultipartModuleAsyncOptions.html":{},"interfaces/MultipartOptionsFactory.html":{},"classes/NotificationEntity.html":{},"controllers/NotificationsController.html":{},"modules/NotificationsModule.html":{},"injectables/NotificationsService.html":{},"classes/PaginationFilesDto.html":{},"classes/PaginationNotificationsDto.html":{},"classes/PaginationUserNotificationTokensDto.html":{},"classes/PaginationUsersDto.html":{},"classes/ResetPasswordDto.html":{},"interfaces/Response.html":{},"classes/SelectFileDto.html":{},"classes/SelectFilesDto.html":{},"classes/SelectNotificationsDto.html":{},"classes/SelectProfileDto.html":{},"classes/SelectUserDto.html":{},"classes/SelectUserNotificationTokenDto.html":{},"classes/SelectUserNotificationTokensDto.html":{},"classes/SelectUsersDto.html":{},"modules/SendGridModule.html":{},"interfaces/SendGridModuleAsyncOptions.html":{},"interfaces/SendGridModuleOptions.html":{},"interfaces/SendGridOptionsFactory.html":{},"injectables/SendGridService.html":{},"classes/SendResetPasswordDto.html":{},"injectables/StorageS3Service.html":{},"injectables/StorageService.html":{},"injectables/TransformInterceptor.html":{},"classes/UpdateEmailDto.html":{},"classes/UpdateNotificationDto.html":{},"classes/UpdatePasswordDto.html":{},"classes/UpdateProfileDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserNotificationTokenDto.html":{},"classes/UploadedFile.html":{},"classes/UserEntity.html":{},"classes/UserNotificationTokenEntity.html":{},"controllers/UserNotificationTokensController.html":{},"injectables/UserNotificationTokensService.html":{},"classes/UserRefreshTokenEntity.html":{},"injectables/UserRefreshTokensService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"classes/user1615673396368.html":{}}}],["inherited",{"_index":664,"title":{},"body":{"classes/DeleteUserNotificationTokenDto.html":{},"classes/DownloadFileDto.html":{},"classes/FindManyOptionsDto.html":{},"classes/JwtRefreshTokenPayloadDto.html":{},"classes/SelectFileDto.html":{},"classes/SelectFilesDto.html":{},"classes/SelectNotificationsDto.html":{},"classes/SelectProfileDto.html":{},"classes/SelectUserDto.html":{},"classes/SelectUserNotificationTokenDto.html":{},"classes/SelectUserNotificationTokensDto.html":{},"classes/SelectUsersDto.html":{}}}],["initialobject",{"_index":2055,"title":{},"body":{"miscellaneous/variables.html":{}}}],["initialoptions",{"_index":449,"title":{},"body":{"injectables/AuthService.html":{}}}],["initialvalue",{"_index":2054,"title":{},"body":{"miscellaneous/variables.html":{}}}],["inject",{"_index":176,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"modules/DatabaseModule.html":{},"modules/MultipartModule.html":{},"interfaces/MultipartModuleAsyncOptions.html":{},"interfaces/MultipartOptionsFactory.html":{},"modules/SendGridModule.html":{},"interfaces/SendGridModuleAsyncOptions.html":{},"interfaces/SendGridModuleOptions.html":{},"interfaces/SendGridOptionsFactory.html":{},"injectables/SendGridService.html":{},"injectables/StorageService.html":{}}}],["inject(cache_manager",{"_index":417,"title":{},"body":{"injectables/AuthService.html":{}}}],["inject(multipart_module_options",{"_index":1479,"title":{},"body":{"injectables/StorageService.html":{}}}],["inject(sendgrid_module_options",{"_index":1400,"title":{},"body":{"injectables/SendGridService.html":{}}}],["injectable",{"_index":347,"title":{"injectables/AuthService.html":{},"injectables/ConfigService.html":{},"injectables/FileValidationPipe.html":{},"injectables/FilesService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtRefreshGuard.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/NotificationsService.html":{},"injectables/SendGridService.html":{},"injectables/StorageS3Service.html":{},"injectables/StorageService.html":{},"injectables/TransformInterceptor.html":{},"injectables/UserNotificationTokensService.html":{},"injectables/UserRefreshTokensService.html":{},"injectables/UsersService.html":{}},"body":{"injectables/AuthService.html":{},"injectables/ConfigService.html":{},"injectables/FileValidationPipe.html":{},"injectables/FilesService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtRefreshGuard.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/NotificationsService.html":{},"interfaces/Response.html":{},"injectables/SendGridService.html":{},"injectables/StorageS3Service.html":{},"injectables/StorageService.html":{},"injectables/TransformInterceptor.html":{},"injectables/UserNotificationTokensService.html":{},"injectables/UserRefreshTokensService.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["injectables",{"_index":348,"title":{},"body":{"injectables/AuthService.html":{},"injectables/ConfigService.html":{},"injectables/FileValidationPipe.html":{},"injectables/FilesService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtRefreshGuard.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/NotificationsService.html":{},"injectables/SendGridService.html":{},"injectables/StorageS3Service.html":{},"injectables/StorageService.html":{},"injectables/TransformInterceptor.html":{},"injectables/UserNotificationTokensService.html":{},"injectables/UserRefreshTokensService.html":{},"injectables/UsersService.html":{},"overview.html":{}}}],["injectrepository",{"_index":852,"title":{},"body":{"injectables/FilesService.html":{},"injectables/NotificationsService.html":{},"injectables/UserNotificationTokensService.html":{},"injectables/UserRefreshTokensService.html":{},"injectables/UsersService.html":{}}}],["injectrepository(fileentity",{"_index":856,"title":{},"body":{"injectables/FilesService.html":{}}}],["injectrepository(notificationentity",{"_index":1223,"title":{},"body":{"injectables/NotificationsService.html":{}}}],["injectrepository(userentity",{"_index":1710,"title":{},"body":{"injectables/UsersService.html":{}}}],["injectrepository(usernotificationtokenentity",{"_index":1626,"title":{},"body":{"injectables/UserNotificationTokensService.html":{}}}],["injectrepository(userrefreshtokenentity",{"_index":1661,"title":{},"body":{"injectables/UserRefreshTokensService.html":{}}}],["inline",{"_index":905,"title":{},"body":{"injectables/FilesService.html":{}}}],["installation",{"_index":1977,"title":{},"body":{"index.html":{}}}],["installprepare",{"_index":1979,"title":{},"body":{"index.html":{}}}],["instance",{"_index":559,"title":{},"body":{"classes/CreateFileDto.html":{}}}],["instanceof",{"_index":54,"title":{},"body":{"classes/AllExceptionFilter.html":{}}}],["instancetoplain",{"_index":853,"title":{},"body":{"injectables/FilesService.html":{},"classes/FindManyOptionsDto.html":{},"classes/FindOneOptionsDto.html":{},"injectables/NotificationsService.html":{},"injectables/UserNotificationTokensService.html":{},"injectables/UserRefreshTokensService.html":{},"injectables/UsersService.html":{}}}],["instancetoplain(options",{"_index":889,"title":{},"body":{"injectables/FilesService.html":{},"injectables/NotificationsService.html":{},"injectables/UserNotificationTokensService.html":{},"injectables/UserRefreshTokensService.html":{},"injectables/UsersService.html":{}}}],["int",{"_index":1775,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["intercept",{"_index":1513,"title":{},"body":{"injectables/TransformInterceptor.html":{}}}],["intercept(context",{"_index":1318,"title":{},"body":{"interfaces/Response.html":{},"injectables/TransformInterceptor.html":{}}}],["interface",{"_index":562,"title":{"interfaces/CreateMockFileReturn.html":{},"interfaces/FindManyBracketsOptions.html":{},"interfaces/MultipartModuleAsyncOptions.html":{},"interfaces/MultipartOptionsFactory.html":{},"interfaces/Response.html":{},"interfaces/SendGridModuleAsyncOptions.html":{},"interfaces/SendGridModuleOptions.html":{},"interfaces/SendGridOptionsFactory.html":{}},"body":{"interfaces/CreateMockFileReturn.html":{},"interfaces/FindManyBracketsOptions.html":{},"interfaces/MultipartModuleAsyncOptions.html":{},"interfaces/MultipartOptionsFactory.html":{},"interfaces/Response.html":{},"interfaces/SendGridModuleAsyncOptions.html":{},"interfaces/SendGridModuleOptions.html":{},"interfaces/SendGridOptionsFactory.html":{},"injectables/TransformInterceptor.html":{},"coverage.html":{}}}],["interfaces",{"_index":564,"title":{},"body":{"interfaces/CreateMockFileReturn.html":{},"interfaces/FindManyBracketsOptions.html":{},"modules/MultipartModule.html":{},"interfaces/MultipartModuleAsyncOptions.html":{},"interfaces/MultipartOptionsFactory.html":{},"interfaces/Response.html":{},"modules/SendGridModule.html":{},"interfaces/SendGridModuleAsyncOptions.html":{},"interfaces/SendGridModuleOptions.html":{},"interfaces/SendGridOptionsFactory.html":{},"injectables/SendGridService.html":{},"overview.html":{}}}],["interfaces/config.interface",{"_index":523,"title":{},"body":{"injectables/ConfigService.html":{}}}],["internal_server_error",{"_index":1871,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["isarray",{"_index":994,"title":{},"body":{"classes/FindManyOptionsDto.html":{},"classes/FindOneOptionsDto.html":{}}}],["isarray()@isoptional()@isstring({each",{"_index":949,"title":{},"body":{"classes/FindManyOptionsDto.html":{},"classes/FindOneOptionsDto.html":{},"classes/SelectFileDto.html":{},"classes/SelectFilesDto.html":{},"classes/SelectNotificationsDto.html":{},"classes/SelectProfileDto.html":{},"classes/SelectUserDto.html":{},"classes/SelectUserNotificationTokenDto.html":{},"classes/SelectUserNotificationTokensDto.html":{},"classes/SelectUsersDto.html":{}}}],["isboolean",{"_index":676,"title":{},"body":{"classes/DownloadFileDto.html":{}}}],["isbooleanstring",{"_index":1019,"title":{},"body":{"classes/FindOneOptionsDto.html":{}}}],["isemail",{"_index":614,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["isemail()@apiproperty({example",{"_index":606,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["isenum",{"_index":595,"title":{},"body":{"classes/CreateNotificationDto.html":{},"classes/SelectNotificationsDto.html":{},"classes/UpdateNotificationDto.html":{}}}],["isenum(notificationsstatusenum",{"_index":1340,"title":{},"body":{"classes/SelectNotificationsDto.html":{},"classes/UpdateNotificationDto.html":{}}}],["isenum(notificationstypeenum",{"_index":598,"title":{},"body":{"classes/CreateNotificationDto.html":{}}}],["isenum(notificationstypeenum)@apiproperty",{"_index":592,"title":{},"body":{"classes/CreateNotificationDto.html":{}}}],["isnotempty",{"_index":560,"title":{},"body":{"classes/CreateFileDto.html":{},"classes/FindManyOptionsDto.html":{},"classes/FindOneOptionsDto.html":{}}}],["isnotempty()@apiproperty({type",{"_index":554,"title":{},"body":{"classes/CreateFileDto.html":{}}}],["isnull",{"_index":894,"title":{},"body":{"injectables/FilesService.html":{}}}],["isoptional",{"_index":615,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/DownloadFileDto.html":{},"classes/FindManyOptionsDto.html":{},"classes/FindOneOptionsDto.html":{},"classes/SelectFilesDto.html":{},"classes/SelectNotificationsDto.html":{},"classes/UpdateNotificationDto.html":{}}}],["isoptional()@isboolean",{"_index":671,"title":{},"body":{"classes/DownloadFileDto.html":{}}}],["isoptional()@isbooleanstring()@apiproperty({type",{"_index":975,"title":{},"body":{"classes/FindManyOptionsDto.html":{},"classes/FindOneOptionsDto.html":{},"classes/SelectFileDto.html":{},"classes/SelectFilesDto.html":{},"classes/SelectNotificationsDto.html":{},"classes/SelectProfileDto.html":{},"classes/SelectUserDto.html":{},"classes/SelectUserNotificationTokenDto.html":{},"classes/SelectUserNotificationTokensDto.html":{},"classes/SelectUsersDto.html":{}}}],["isoptional()@isenum(notificationsstatusenum",{"_index":1522,"title":{},"body":{"classes/UpdateNotificationDto.html":{}}}],["isoptional()@isenum(notificationsstatusenum)@apiproperty({enum",{"_index":1336,"title":{},"body":{"classes/SelectNotificationsDto.html":{}}}],["isoptional()@min(1)@apiproperty({type",{"_index":965,"title":{},"body":{"classes/FindManyOptionsDto.html":{},"classes/SelectFilesDto.html":{},"classes/SelectNotificationsDto.html":{},"classes/SelectUserNotificationTokensDto.html":{},"classes/SelectUsersDto.html":{}}}],["isoptional()@min(1)@max(100)@apiproperty({type",{"_index":971,"title":{},"body":{"classes/FindManyOptionsDto.html":{},"classes/SelectFilesDto.html":{},"classes/SelectNotificationsDto.html":{},"classes/SelectUserNotificationTokensDto.html":{},"classes/SelectUsersDto.html":{}}}],["isoptional()@minlength(1)@maxlength(256)@apiproperty({example",{"_index":1322,"title":{},"body":{"classes/SelectFilesDto.html":{}}}],["isoptional()@validatenested()@type(undefined)@apiproperty({type",{"_index":604,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["isstring",{"_index":543,"title":{},"body":{"classes/ConfirmationEmailDto.html":{},"classes/FindManyOptionsDto.html":{},"classes/FindOneOptionsDto.html":{},"classes/ResetPasswordDto.html":{},"classes/SendResetPasswordDto.html":{}}}],["isstring()@length(6)@apiproperty({example",{"_index":1306,"title":{},"body":{"classes/ResetPasswordDto.html":{}}}],["isuuid",{"_index":1031,"title":{},"body":{"classes/ID.html":{}}}],["isuuid()@apiproperty",{"_index":673,"title":{},"body":{"classes/DownloadFileDto.html":{},"classes/ID.html":{}}}],["join",{"_index":522,"title":{},"body":{"injectables/ConfigService.html":{},"classes/FileEntity.html":{},"classes/FileEntityPreview.html":{},"classes/FindManyOptionsDto.html":{},"classes/FindOneOptionsDto.html":{},"classes/SelectFileDto.html":{},"classes/SelectFilesDto.html":{},"classes/SelectNotificationsDto.html":{},"classes/SelectProfileDto.html":{},"classes/SelectUserDto.html":{},"classes/SelectUserNotificationTokenDto.html":{},"classes/SelectUserNotificationTokensDto.html":{},"classes/SelectUsersDto.html":{},"injectables/StorageService.html":{},"miscellaneous/enumerations.html":{}}}],["join(process.cwd",{"_index":526,"title":{},"body":{"injectables/ConfigService.html":{}}}],["join(this.destination",{"_index":1499,"title":{},"body":{"injectables/StorageService.html":{}}}],["joincolumn",{"_index":722,"title":{},"body":{"classes/FileEntity.html":{},"classes/FileEntityPreview.html":{},"classes/NotificationEntity.html":{},"classes/UserEntity.html":{},"classes/UserNotificationTokenEntity.html":{}}}],["joincolumn()@apihideproperty()@manytoone(undefined",{"_index":706,"title":{},"body":{"classes/FileEntity.html":{},"classes/NotificationEntity.html":{},"classes/UserNotificationTokenEntity.html":{}}}],["joincolumn()@apiproperty({type",{"_index":1544,"title":{},"body":{"classes/UserEntity.html":{}}}],["json",{"_index":1259,"title":{},"body":{"injectables/NotificationsService.html":{}}}],["json.parse",{"_index":503,"title":{},"body":{"injectables/ConfigService.html":{}}}],["json.parse(this.eager",{"_index":1024,"title":{},"body":{"classes/FindOneOptionsDto.html":{}}}],["json.parse(variable",{"_index":532,"title":{},"body":{"injectables/ConfigService.html":{}}}],["json.stringify(entity",{"_index":1260,"title":{},"body":{"injectables/NotificationsService.html":{}}}],["jwt",{"_index":1077,"title":{},"body":{"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"dependencies.html":{}}}],["jwtaccesstokenpayloaddto",{"_index":415,"title":{"classes/JwtAccessTokenPayloadDto.html":{}},"body":{"injectables/AuthService.html":{},"classes/JwtAccessTokenPayloadDto.html":{},"classes/JwtRefreshTokenDto.html":{},"classes/JwtRefreshTokenPayloadDto.html":{},"injectables/JwtStrategy.html":{},"classes/JwtTokensDto.html":{},"coverage.html":{}}}],["jwtaccesstokenpayloaddto:32",{"_index":1066,"title":{},"body":{"classes/JwtRefreshTokenPayloadDto.html":{}}}],["jwtaccesstokenpayloaddto:37",{"_index":1067,"title":{},"body":{"classes/JwtRefreshTokenPayloadDto.html":{}}}],["jwtauthguard",{"_index":273,"title":{"injectables/JwtAuthGuard.html":{}},"body":{"controllers/AuthController.html":{},"controllers/FilesController.html":{},"injectables/JwtAuthGuard.html":{},"controllers/NotificationsController.html":{},"controllers/UserNotificationTokensController.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["jwtfromrequest",{"_index":1080,"title":{},"body":{"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{}}}],["jwtmodule",{"_index":330,"title":{},"body":{"modules/AuthModule.html":{}}}],["jwtmodule.register",{"_index":339,"title":{},"body":{"modules/AuthModule.html":{}}}],["jwtrefreshguard",{"_index":272,"title":{"injectables/JwtRefreshGuard.html":{}},"body":{"controllers/AuthController.html":{},"injectables/JwtRefreshGuard.html":{},"coverage.html":{}}}],["jwtrefreshtokendto",{"_index":226,"title":{"classes/JwtRefreshTokenDto.html":{}},"body":{"controllers/AuthController.html":{},"classes/JwtAccessTokenPayloadDto.html":{},"classes/JwtRefreshTokenDto.html":{},"classes/JwtRefreshTokenPayloadDto.html":{},"classes/JwtTokensDto.html":{},"coverage.html":{}}}],["jwtrefreshtokenpayloaddto",{"_index":416,"title":{"classes/JwtRefreshTokenPayloadDto.html":{}},"body":{"injectables/AuthService.html":{},"classes/JwtAccessTokenPayloadDto.html":{},"classes/JwtRefreshTokenDto.html":{},"classes/JwtRefreshTokenPayloadDto.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"classes/JwtTokensDto.html":{},"coverage.html":{}}}],["jwtrefreshtokenstrategy",{"_index":318,"title":{"injectables/JwtRefreshTokenStrategy.html":{}},"body":{"modules/AuthModule.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"coverage.html":{},"overview.html":{}}}],["jwtservice",{"_index":365,"title":{},"body":{"injectables/AuthService.html":{}}}],["jwtstrategy",{"_index":319,"title":{"injectables/JwtStrategy.html":{}},"body":{"modules/AuthModule.html":{},"injectables/JwtStrategy.html":{},"coverage.html":{},"overview.html":{}}}],["jwttokensdto",{"_index":268,"title":{"classes/JwtTokensDto.html":{}},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/JwtAccessTokenPayloadDto.html":{},"classes/JwtRefreshTokenDto.html":{},"classes/JwtRefreshTokenPayloadDto.html":{},"classes/JwtTokensDto.html":{},"coverage.html":{}}}],["key",{"_index":497,"title":{},"body":{"injectables/ConfigService.html":{},"classes/SelectNotificationsDto.html":{},"injectables/SendGridService.html":{},"injectables/StorageS3Service.html":{},"miscellaneous/variables.html":{}}}],["key.startswith('__",{"_index":2089,"title":{},"body":{"miscellaneous/variables.html":{}}}],["keybuffer",{"_index":2044,"title":{},"body":{"miscellaneous/variables.html":{}}}],["keylength",{"_index":1756,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["keyof",{"_index":1020,"title":{},"body":{"classes/FindOneOptionsDto.html":{}}}],["last",{"_index":2093,"title":{},"body":{"miscellaneous/variables.html":{}}}],["leave",{"_index":1907,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["left",{"_index":981,"title":{},"body":{"classes/FindManyOptionsDto.html":{},"classes/FindOneOptionsDto.html":{},"classes/SelectFileDto.html":{},"classes/SelectFilesDto.html":{},"classes/SelectNotificationsDto.html":{},"classes/SelectProfileDto.html":{},"classes/SelectUserDto.html":{},"classes/SelectUserNotificationTokenDto.html":{},"classes/SelectUserNotificationTokensDto.html":{},"classes/SelectUsersDto.html":{},"interfaces/SendGridModuleAsyncOptions.html":{},"interfaces/SendGridModuleOptions.html":{},"interfaces/SendGridOptionsFactory.html":{}}}],["length",{"_index":544,"title":{},"body":{"classes/ConfirmationEmailDto.html":{},"classes/FileEntity.html":{},"classes/FileEntityPreview.html":{},"injectables/FilesService.html":{},"classes/NotificationEntity.html":{},"classes/ResetPasswordDto.html":{},"classes/SendResetPasswordDto.html":{},"classes/UserEntity.html":{},"classes/UserNotificationTokenEntity.html":{},"classes/UserRefreshTokenEntity.html":{}}}],["length(6",{"_index":548,"title":{},"body":{"classes/ConfirmationEmailDto.html":{},"classes/ResetPasswordDto.html":{},"classes/SendResetPasswordDto.html":{}}}],["length(6)@isstring()@apiproperty({example",{"_index":535,"title":{},"body":{"classes/ConfirmationEmailDto.html":{}}}],["limit",{"_index":180,"title":{},"body":{"modules/AppModule.html":{},"classes/FindManyOptionsDto.html":{},"classes/SelectFilesDto.html":{},"classes/SelectNotificationsDto.html":{},"classes/SelectUserNotificationTokensDto.html":{},"classes/SelectUsersDto.html":{}}}],["limited",{"_index":500,"title":{},"body":{"injectables/ConfigService.html":{}}}],["limits",{"_index":2075,"title":{},"body":{"miscellaneous/variables.html":{}}}],["lines",{"_index":2010,"title":{},"body":{"unit-test.html":{}}}],["literal",{"_index":1376,"title":{},"body":{"interfaces/SendGridModuleOptions.html":{},"injectables/StorageService.html":{}}}],["loadeagerrelations",{"_index":453,"title":{},"body":{"injectables/AuthService.html":{},"injectables/FilesService.html":{},"classes/FindOneOptionsDto.html":{},"injectables/NotificationsService.html":{},"injectables/UserNotificationTokensService.html":{},"injectables/UserRefreshTokensService.html":{},"injectables/UsersService.html":{}}}],["loaded",{"_index":978,"title":{},"body":{"classes/FindManyOptionsDto.html":{},"classes/FindOneOptionsDto.html":{},"classes/SelectFileDto.html":{},"classes/SelectFilesDto.html":{},"classes/SelectNotificationsDto.html":{},"classes/SelectProfileDto.html":{},"classes/SelectUserDto.html":{},"classes/SelectUserNotificationTokenDto.html":{},"classes/SelectUserNotificationTokensDto.html":{},"classes/SelectUsersDto.html":{}}}],["logger",{"_index":14,"title":{},"body":{"classes/AllExceptionFilter.html":{},"injectables/SendGridService.html":{}}}],["logger(allexceptionfilter.name",{"_index":22,"title":{},"body":{"classes/AllExceptionFilter.html":{}}}],["logger(sendgridservice.name",{"_index":1391,"title":{},"body":{"injectables/SendGridService.html":{}}}],["logger://').pathname",{"_index":63,"title":{},"body":{"classes/AllExceptionFilter.html":{}}}],["logging",{"_index":648,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["logout",{"_index":201,"title":{},"body":{"controllers/AuthController.html":{}}}],["logout(@user",{"_index":283,"title":{},"body":{"controllers/AuthController.html":{}}}],["logout(user",{"_index":222,"title":{},"body":{"controllers/AuthController.html":{}}}],["maildatarequired",{"_index":1370,"title":{},"body":{"interfaces/SendGridModuleAsyncOptions.html":{},"interfaces/SendGridModuleOptions.html":{},"interfaces/SendGridOptionsFactory.html":{},"injectables/SendGridService.html":{}}}],["mailservice",{"_index":1379,"title":{},"body":{"injectables/SendGridService.html":{}}}],["manager",{"_index":326,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"dependencies.html":{}}}],["many",{"_index":932,"title":{},"body":{"interfaces/FindManyBracketsOptions.html":{},"classes/FindManyOptionsDto.html":{},"coverage.html":{}}}],["manytoone",{"_index":721,"title":{},"body":{"classes/FileEntity.html":{},"classes/FileEntityPreview.html":{},"classes/NotificationEntity.html":{},"classes/UserEntity.html":{},"classes/UserNotificationTokenEntity.html":{},"classes/UserRefreshTokenEntity.html":{}}}],["map",{"_index":1309,"title":{},"body":{"interfaces/Response.html":{},"injectables/TransformInterceptor.html":{}}}],["matching",{"_index":79,"title":{},"body":{"classes/AllExceptionFilter.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"modules/ConfigModule.html":{},"injectables/ConfigService.html":{},"classes/ConfirmationEmailDto.html":{},"classes/CreateFileDto.html":{},"interfaces/CreateMockFileReturn.html":{},"classes/CreateNotificationDto.html":{},"classes/CreateProfileDto.html":{},"classes/CreateUserDto.html":{},"classes/CreateUserNotificationTokenDto.html":{},"classes/CredentialsDto.html":{},"modules/DatabaseModule.html":{},"classes/DeleteUserNotificationTokenDto.html":{},"classes/DownloadFileDto.html":{},"classes/FileEntity.html":{},"classes/FileEntityPreview.html":{},"injectables/FileValidationPipe.html":{},"controllers/FilesController.html":{},"modules/FilesModule.html":{},"injectables/FilesService.html":{},"interfaces/FindManyBracketsOptions.html":{},"classes/FindManyOptionsDto.html":{},"classes/FindOneOptionsDto.html":{},"classes/HttpExceptionFilter.html":{},"classes/ID.html":{},"classes/JwtAccessTokenPayloadDto.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtRefreshGuard.html":{},"classes/JwtRefreshTokenDto.html":{},"classes/JwtRefreshTokenPayloadDto.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"classes/JwtTokensDto.html":{},"modules/MultipartModule.html":{},"interfaces/MultipartModuleAsyncOptions.html":{},"interfaces/MultipartOptionsFactory.html":{},"classes/NotificationEntity.html":{},"controllers/NotificationsController.html":{},"modules/NotificationsModule.html":{},"injectables/NotificationsService.html":{},"classes/PaginationFilesDto.html":{},"classes/PaginationNotificationsDto.html":{},"classes/PaginationUserNotificationTokensDto.html":{},"classes/PaginationUsersDto.html":{},"classes/ResetPasswordDto.html":{},"interfaces/Response.html":{},"classes/SelectFileDto.html":{},"classes/SelectFilesDto.html":{},"classes/SelectNotificationsDto.html":{},"classes/SelectProfileDto.html":{},"classes/SelectUserDto.html":{},"classes/SelectUserNotificationTokenDto.html":{},"classes/SelectUserNotificationTokensDto.html":{},"classes/SelectUsersDto.html":{},"modules/SendGridModule.html":{},"interfaces/SendGridModuleAsyncOptions.html":{},"interfaces/SendGridModuleOptions.html":{},"interfaces/SendGridOptionsFactory.html":{},"injectables/SendGridService.html":{},"classes/SendResetPasswordDto.html":{},"injectables/StorageS3Service.html":{},"injectables/StorageService.html":{},"injectables/TransformInterceptor.html":{},"classes/UpdateEmailDto.html":{},"classes/UpdateNotificationDto.html":{},"classes/UpdatePasswordDto.html":{},"classes/UpdateProfileDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserNotificationTokenDto.html":{},"classes/UploadedFile.html":{},"classes/UserEntity.html":{},"classes/UserNotificationTokenEntity.html":{},"controllers/UserNotificationTokensController.html":{},"injectables/UserNotificationTokensService.html":{},"classes/UserRefreshTokenEntity.html":{},"injectables/UserRefreshTokensService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"changelog.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"miscellaneous/typealiases.html":{},"unit-test.html":{},"classes/user1615673396368.html":{},"miscellaneous/variables.html":{}}}],["max",{"_index":973,"title":{},"body":{"classes/FindManyOptionsDto.html":{},"classes/SelectFilesDto.html":{},"classes/SelectNotificationsDto.html":{},"classes/SelectUserNotificationTokensDto.html":{},"classes/SelectUsersDto.html":{}}}],["max(100",{"_index":1008,"title":{},"body":{"classes/FindManyOptionsDto.html":{}}}],["maxlength",{"_index":537,"title":{},"body":{"classes/ConfirmationEmailDto.html":{},"classes/CreateNotificationDto.html":{},"classes/CreateUserDto.html":{},"classes/CreateUserNotificationTokenDto.html":{},"classes/FileEntity.html":{},"classes/FileEntityPreview.html":{},"classes/NotificationEntity.html":{},"classes/ResetPasswordDto.html":{},"classes/SelectFilesDto.html":{},"classes/SendResetPasswordDto.html":{},"classes/UpdateEmailDto.html":{},"classes/UpdatePasswordDto.html":{},"classes/UpdateProfileDto.html":{},"classes/UserEntity.html":{},"classes/UserNotificationTokenEntity.html":{}}}],["maxlength(1024",{"_index":627,"title":{},"body":{"classes/CreateUserNotificationTokenDto.html":{}}}],["maxlength(1024)@apiproperty({maxlength",{"_index":624,"title":{},"body":{"classes/CreateUserNotificationTokenDto.html":{},"classes/DeleteUserNotificationTokenDto.html":{}}}],["maxlength(256",{"_index":597,"title":{},"body":{"classes/CreateNotificationDto.html":{},"classes/SelectFilesDto.html":{}}}],["maxlength(64",{"_index":620,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/UpdateEmailDto.html":{},"classes/UpdatePasswordDto.html":{},"classes/UpdateProfileDto.html":{}}}],["memory",{"_index":113,"title":{},"body":{"controllers/AppController.html":{}}}],["memoryhealthindicator",{"_index":101,"title":{},"body":{"controllers/AppController.html":{}}}],["mergeintoentity",{"_index":858,"title":{},"body":{"injectables/FilesService.html":{},"injectables/NotificationsService.html":{},"injectables/UserNotificationTokensService.html":{},"injectables/UserRefreshTokensService.html":{},"injectables/UsersService.html":{}}}],["mergewithdefaultmaildata",{"_index":1380,"title":{},"body":{"injectables/SendGridService.html":{}}}],["mergewithdefaultmaildata(data",{"_index":1385,"title":{},"body":{"injectables/SendGridService.html":{}}}],["message",{"_index":57,"title":{},"body":{"classes/AllExceptionFilter.html":{},"classes/HttpExceptionFilter.html":{},"injectables/NotificationsService.html":{},"index.html":{}}}],["messages",{"_index":1273,"title":{},"body":{"injectables/NotificationsService.html":{}}}],["messaging",{"_index":1229,"title":{},"body":{"injectables/NotificationsService.html":{}}}],["messaging().sendall(messages",{"_index":1280,"title":{},"body":{"injectables/NotificationsService.html":{}}}],["messaging().sendmulticast",{"_index":1269,"title":{},"body":{"injectables/NotificationsService.html":{}}}],["metadata",{"_index":867,"title":{},"body":{"injectables/FilesService.html":{},"injectables/NotificationsService.html":{},"injectables/UserNotificationTokensService.html":{},"injectables/UserRefreshTokensService.html":{},"injectables/UsersService.html":{},"dependencies.html":{}}}],["metadata.name",{"_index":872,"title":{},"body":{"injectables/FilesService.html":{},"injectables/NotificationsService.html":{},"injectables/UserNotificationTokensService.html":{},"injectables/UserRefreshTokensService.html":{},"injectables/UsersService.html":{}}}],["method",{"_index":64,"title":{},"body":{"classes/AllExceptionFilter.html":{},"injectables/ConfigService.html":{}}}],["methods",{"_index":15,"title":{},"body":{"classes/AllExceptionFilter.html":{},"controllers/AppController.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/ConfigService.html":{},"injectables/FileValidationPipe.html":{},"controllers/FilesController.html":{},"injectables/FilesService.html":{},"classes/HttpExceptionFilter.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtRefreshGuard.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"modules/MultipartModule.html":{},"interfaces/MultipartOptionsFactory.html":{},"controllers/NotificationsController.html":{},"injectables/NotificationsService.html":{},"modules/SendGridModule.html":{},"interfaces/SendGridOptionsFactory.html":{},"injectables/SendGridService.html":{},"injectables/StorageS3Service.html":{},"injectables/StorageService.html":{},"injectables/TransformInterceptor.html":{},"classes/UserEntity.html":{},"controllers/UserNotificationTokensController.html":{},"injectables/UserNotificationTokensService.html":{},"injectables/UserRefreshTokensService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"classes/user1615673396368.html":{}}}],["microservice",{"_index":117,"title":{},"body":{"controllers/AppController.html":{}}}],["microservicehealthindicator",{"_index":103,"title":{},"body":{"controllers/AppController.html":{}}}],["migrationinterface",{"_index":2011,"title":{},"body":{"classes/user1615673396368.html":{}}}],["migrations",{"_index":659,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["migrations/*.{ts,js",{"_index":661,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["migrationsrun",{"_index":654,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["mimetype",{"_index":569,"title":{},"body":{"interfaces/CreateMockFileReturn.html":{},"classes/FileEntity.html":{},"classes/FileEntityPreview.html":{},"injectables/FilesService.html":{},"injectables/StorageS3Service.html":{},"injectables/StorageService.html":{},"classes/UploadedFile.html":{},"miscellaneous/functions.html":{}}}],["min",{"_index":995,"title":{},"body":{"classes/FindManyOptionsDto.html":{}}}],["min(1",{"_index":1007,"title":{},"body":{"classes/FindManyOptionsDto.html":{}}}],["minimum",{"_index":701,"title":{},"body":{"classes/FileEntity.html":{},"classes/FileEntityPreview.html":{}}}],["minlength",{"_index":594,"title":{},"body":{"classes/CreateNotificationDto.html":{},"classes/CreateUserDto.html":{},"classes/SelectFilesDto.html":{},"classes/UpdateEmailDto.html":{},"classes/UpdatePasswordDto.html":{},"classes/UpdateProfileDto.html":{}}}],["minlength(1",{"_index":596,"title":{},"body":{"classes/CreateNotificationDto.html":{},"classes/SelectFilesDto.html":{}}}],["minlength(1)@maxlength(256)@apiproperty",{"_index":589,"title":{},"body":{"classes/CreateNotificationDto.html":{}}}],["minlength(8",{"_index":619,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/UpdateEmailDto.html":{},"classes/UpdatePasswordDto.html":{},"classes/UpdateProfileDto.html":{}}}],["minlength(8)@maxlength(64)@apiproperty({minlength",{"_index":610,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/UpdatePasswordDto.html":{}}}],["minutes",{"_index":1944,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["miscellaneous",{"_index":1854,"title":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["mkdir",{"_index":1487,"title":{},"body":{"injectables/StorageService.html":{}}}],["mkdir(join(this.destination",{"_index":1501,"title":{},"body":{"injectables/StorageService.html":{}}}],["mkdir(this.destination",{"_index":1495,"title":{},"body":{"injectables/StorageService.html":{}}}],["mode",{"_index":518,"title":{},"body":{"injectables/ConfigService.html":{},"injectables/StorageService.html":{},"index.html":{}}}],["modes",{"_index":517,"title":{},"body":{"injectables/ConfigService.html":{},"miscellaneous/enumerations.html":{}}}],["module",{"_index":142,"title":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/ConfigModule.html":{},"modules/DatabaseModule.html":{},"modules/FilesModule.html":{},"modules/MultipartModule.html":{},"modules/NotificationsModule.html":{},"modules/SendGridModule.html":{},"modules/UsersModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/ConfigModule.html":{},"modules/DatabaseModule.html":{},"modules/FilesModule.html":{},"modules/MultipartModule.html":{},"modules/NotificationsModule.html":{},"modules/SendGridModule.html":{},"modules/UsersModule.html":{}}}],["module.interface.ts",{"_index":1131,"title":{},"body":{"interfaces/MultipartModuleAsyncOptions.html":{},"interfaces/MultipartOptionsFactory.html":{},"interfaces/SendGridModuleAsyncOptions.html":{},"interfaces/SendGridModuleOptions.html":{},"interfaces/SendGridOptionsFactory.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["module.interface.ts:13",{"_index":1377,"title":{},"body":{"interfaces/SendGridOptionsFactory.html":{}}}],["module.interface.ts:17",{"_index":1139,"title":{},"body":{"interfaces/MultipartOptionsFactory.html":{}}}],["modulemetadata",{"_index":1135,"title":{},"body":{"interfaces/MultipartModuleAsyncOptions.html":{},"interfaces/MultipartOptionsFactory.html":{},"interfaces/SendGridModuleAsyncOptions.html":{},"interfaces/SendGridModuleOptions.html":{},"interfaces/SendGridOptionsFactory.html":{}}}],["modules",{"_index":144,"title":{"modules.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/ConfigModule.html":{},"modules/DatabaseModule.html":{},"modules/FilesModule.html":{},"modules/MultipartModule.html":{},"modules/NotificationsModule.html":{},"modules/SendGridModule.html":{},"modules/UsersModule.html":{},"modules.html":{},"overview.html":{}}}],["modules/**/*.entity.{ts,js",{"_index":658,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["modules/auth",{"_index":173,"title":{},"body":{"modules/AppModule.html":{}}}],["modules/files",{"_index":172,"title":{},"body":{"modules/AppModule.html":{}}}],["modules/notifications",{"_index":170,"title":{},"body":{"modules/AppModule.html":{}}}],["modules/users",{"_index":171,"title":{},"body":{"modules/AppModule.html":{}}}],["month",{"_index":1451,"title":{},"body":{"injectables/StorageS3Service.html":{},"injectables/StorageService.html":{},"miscellaneous/enumerations.html":{}}}],["multipart",{"_index":168,"title":{},"body":{"modules/AppModule.html":{},"classes/CreateFileDto.html":{},"classes/FileEntity.html":{},"classes/FileEntityPreview.html":{},"injectables/FileValidationPipe.html":{},"controllers/FilesController.html":{},"injectables/FilesService.html":{},"interfaces/MultipartModuleAsyncOptions.html":{},"interfaces/MultipartOptionsFactory.html":{},"injectables/StorageS3Service.html":{},"injectables/StorageService.html":{},"dependencies.html":{}}}],["multipart.constants",{"_index":1117,"title":{},"body":{"modules/MultipartModule.html":{},"injectables/StorageService.html":{}}}],["multipart.filename",{"_index":1463,"title":{},"body":{"injectables/StorageS3Service.html":{},"injectables/StorageService.html":{}}}],["multipart_module",{"_index":1116,"title":{},"body":{"modules/MultipartModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["multipart_module_options",{"_index":1115,"title":{},"body":{"modules/MultipartModule.html":{},"injectables/StorageService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["multipartmodule",{"_index":152,"title":{"modules/MultipartModule.html":{}},"body":{"modules/AppModule.html":{},"modules/MultipartModule.html":{},"modules.html":{},"overview.html":{}}}],["multipartmodule.register",{"_index":191,"title":{},"body":{"modules/AppModule.html":{}}}],["multipartmoduleasyncoptions",{"_index":1098,"title":{"interfaces/MultipartModuleAsyncOptions.html":{}},"body":{"modules/MultipartModule.html":{},"interfaces/MultipartModuleAsyncOptions.html":{},"interfaces/MultipartOptionsFactory.html":{},"coverage.html":{}}}],["multipartmoduleoptions",{"_index":1106,"title":{},"body":{"modules/MultipartModule.html":{},"interfaces/MultipartModuleAsyncOptions.html":{},"interfaces/MultipartOptionsFactory.html":{},"miscellaneous/typealiases.html":{}}}],["multipartoptionsfactory",{"_index":1119,"title":{"interfaces/MultipartOptionsFactory.html":{}},"body":{"modules/MultipartModule.html":{},"interfaces/MultipartModuleAsyncOptions.html":{},"interfaces/MultipartOptionsFactory.html":{},"coverage.html":{}}}],["name",{"_index":31,"title":{},"body":{"classes/AllExceptionFilter.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/ConfigService.html":{},"modules/DatabaseModule.html":{},"classes/FileEntityPreview.html":{},"injectables/FileValidationPipe.html":{},"controllers/FilesController.html":{},"injectables/FilesService.html":{},"classes/HttpExceptionFilter.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtRefreshGuard.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"modules/MultipartModule.html":{},"controllers/NotificationsController.html":{},"injectables/NotificationsService.html":{},"classes/PaginationFilesDto.html":{},"classes/PaginationNotificationsDto.html":{},"classes/PaginationUserNotificationTokensDto.html":{},"classes/PaginationUsersDto.html":{},"modules/SendGridModule.html":{},"injectables/SendGridService.html":{},"injectables/StorageS3Service.html":{},"injectables/StorageService.html":{},"injectables/TransformInterceptor.html":{},"classes/UploadedFile.html":{},"controllers/UserNotificationTokensController.html":{},"injectables/UserNotificationTokensService.html":{},"injectables/UserRefreshTokensService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"miscellaneous/functions.html":{},"classes/user1615673396368.html":{}}}],["nestinterceptor",{"_index":1314,"title":{},"body":{"interfaces/Response.html":{},"injectables/TransformInterceptor.html":{}}}],["nestjs/bull",{"_index":165,"title":{},"body":{"modules/AppModule.html":{},"dependencies.html":{}}}],["nestjs/common",{"_index":39,"title":{},"body":{"classes/AllExceptionFilter.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"modules/ConfigModule.html":{},"injectables/ConfigService.html":{},"modules/DatabaseModule.html":{},"injectables/FileValidationPipe.html":{},"controllers/FilesController.html":{},"modules/FilesModule.html":{},"injectables/FilesService.html":{},"classes/HttpExceptionFilter.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtRefreshGuard.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"modules/MultipartModule.html":{},"interfaces/MultipartModuleAsyncOptions.html":{},"interfaces/MultipartOptionsFactory.html":{},"controllers/NotificationsController.html":{},"modules/NotificationsModule.html":{},"injectables/NotificationsService.html":{},"interfaces/Response.html":{},"modules/SendGridModule.html":{},"interfaces/SendGridModuleAsyncOptions.html":{},"interfaces/SendGridModuleOptions.html":{},"interfaces/SendGridOptionsFactory.html":{},"injectables/SendGridService.html":{},"injectables/StorageS3Service.html":{},"injectables/StorageService.html":{},"injectables/TransformInterceptor.html":{},"controllers/UserNotificationTokensController.html":{},"injectables/UserNotificationTokensService.html":{},"injectables/UserRefreshTokensService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"dependencies.html":{}}}],["nestjs/common/interfaces",{"_index":1136,"title":{},"body":{"interfaces/MultipartModuleAsyncOptions.html":{},"interfaces/MultipartOptionsFactory.html":{},"interfaces/SendGridModuleAsyncOptions.html":{},"interfaces/SendGridModuleOptions.html":{},"interfaces/SendGridOptionsFactory.html":{}}}],["nestjs/common/utils/random",{"_index":1113,"title":{},"body":{"modules/MultipartModule.html":{},"modules/SendGridModule.html":{}}}],["nestjs/core",{"_index":167,"title":{},"body":{"modules/AppModule.html":{},"injectables/JwtAuthGuard.html":{},"dependencies.html":{}}}],["nestjs/jwt",{"_index":331,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"dependencies.html":{}}}],["nestjs/microservices",{"_index":94,"title":{},"body":{"controllers/AppController.html":{},"dependencies.html":{}}}],["nestjs/passport",{"_index":329,"title":{},"body":{"modules/AuthModule.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtRefreshGuard.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"dependencies.html":{}}}],["nestjs/platform",{"_index":1823,"title":{},"body":{"dependencies.html":{}}}],["nestjs/swagger",{"_index":96,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"classes/ConfirmationEmailDto.html":{},"classes/CreateFileDto.html":{},"classes/CreateNotificationDto.html":{},"classes/CreateProfileDto.html":{},"classes/CreateUserDto.html":{},"classes/CreateUserNotificationTokenDto.html":{},"classes/CredentialsDto.html":{},"classes/FileEntity.html":{},"classes/FileEntityPreview.html":{},"controllers/FilesController.html":{},"classes/FindManyOptionsDto.html":{},"classes/FindOneOptionsDto.html":{},"classes/ID.html":{},"classes/JwtAccessTokenPayloadDto.html":{},"classes/JwtRefreshTokenDto.html":{},"classes/JwtRefreshTokenPayloadDto.html":{},"classes/JwtTokensDto.html":{},"classes/NotificationEntity.html":{},"controllers/NotificationsController.html":{},"classes/ResetPasswordDto.html":{},"classes/SelectFilesDto.html":{},"classes/SelectNotificationsDto.html":{},"classes/SendResetPasswordDto.html":{},"classes/UpdateEmailDto.html":{},"classes/UpdateNotificationDto.html":{},"classes/UpdatePasswordDto.html":{},"classes/UpdateProfileDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserNotificationTokenDto.html":{},"classes/UserEntity.html":{},"classes/UserNotificationTokenEntity.html":{},"controllers/UserNotificationTokensController.html":{},"classes/UserRefreshTokenEntity.html":{},"controllers/UsersController.html":{},"dependencies.html":{}}}],["nestjs/terminus",{"_index":104,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"dependencies.html":{}}}],["nestjs/throttler",{"_index":162,"title":{},"body":{"modules/AppModule.html":{},"dependencies.html":{}}}],["nestjs/typeorm",{"_index":632,"title":{},"body":{"modules/DatabaseModule.html":{},"modules/FilesModule.html":{},"injectables/FilesService.html":{},"modules/NotificationsModule.html":{},"injectables/NotificationsService.html":{},"injectables/UserNotificationTokensService.html":{},"injectables/UserRefreshTokensService.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"dependencies.html":{}}}],["new",{"_index":21,"title":{},"body":{"classes/AllExceptionFilter.html":{},"injectables/AuthService.html":{},"interfaces/CreateMockFileReturn.html":{},"classes/FileEntity.html":{},"classes/FileEntityPreview.html":{},"injectables/FileValidationPipe.html":{},"injectables/FilesService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtRefreshGuard.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/NotificationsService.html":{},"classes/SelectFilesDto.html":{},"injectables/SendGridService.html":{},"injectables/StorageS3Service.html":{},"injectables/StorageService.html":{},"classes/UserEntity.html":{},"injectables/UserNotificationTokensService.html":{},"injectables/UserRefreshTokensService.html":{},"injectables/UsersService.html":{},"coverage.html":{},"unit-test.html":{},"miscellaneous/variables.html":{}}}],["new_password_and_old_password_cannot_be_same",{"_index":1882,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["next",{"_index":1317,"title":{},"body":{"interfaces/Response.html":{},"injectables/TransformInterceptor.html":{}}}],["next.handle().pipe(map((data",{"_index":1319,"title":{},"body":{"interfaces/Response.html":{},"injectables/TransformInterceptor.html":{}}}],["node:crypto",{"_index":1442,"title":{},"body":{"injectables/StorageS3Service.html":{}}}],["node:path",{"_index":719,"title":{},"body":{"classes/FileEntity.html":{},"classes/FileEntityPreview.html":{},"injectables/StorageS3Service.html":{}}}],["node:tls",{"_index":635,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["node:url",{"_index":41,"title":{},"body":{"classes/AllExceptionFilter.html":{}}}],["notation",{"_index":2068,"title":{},"body":{"miscellaneous/variables.html":{}}}],["notation.helper.ts",{"_index":1761,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["notfoundexception",{"_index":851,"title":{},"body":{"injectables/FilesService.html":{},"injectables/NotificationsService.html":{},"injectables/StorageS3Service.html":{},"injectables/StorageService.html":{},"injectables/UserNotificationTokensService.html":{},"injectables/UserRefreshTokensService.html":{},"injectables/UsersService.html":{}}}],["notfoundexception(errortypeenum.file_not_found",{"_index":897,"title":{},"body":{"injectables/FilesService.html":{},"injectables/StorageS3Service.html":{},"injectables/StorageService.html":{}}}],["notfoundexception(errortypeenum.files_not_found",{"_index":887,"title":{},"body":{"injectables/FilesService.html":{}}}],["notfoundexception(errortypeenum.notification_already_exist",{"_index":1240,"title":{},"body":{"injectables/NotificationsService.html":{}}}],["notfoundexception(errortypeenum.notification_not_found",{"_index":1251,"title":{},"body":{"injectables/NotificationsService.html":{}}}],["notfoundexception(errortypeenum.notifications_already_exist",{"_index":1237,"title":{},"body":{"injectables/NotificationsService.html":{}}}],["notfoundexception(errortypeenum.notifications_not_found",{"_index":1247,"title":{},"body":{"injectables/NotificationsService.html":{}}}],["notfoundexception(errortypeenum.user_not_found",{"_index":1727,"title":{},"body":{"injectables/UsersService.html":{}}}],["notfoundexception(errortypeenum.user_notification_token_not_found",{"_index":1638,"title":{},"body":{"injectables/UserNotificationTokensService.html":{}}}],["notfoundexception(errortypeenum.user_notification_tokens_not_found",{"_index":1637,"title":{},"body":{"injectables/UserNotificationTokensService.html":{}}}],["notfoundexception(errortypeenum.user_refresh_token_not_found",{"_index":1674,"title":{},"body":{"injectables/UserRefreshTokensService.html":{}}}],["notfoundexception(errortypeenum.user_refresh_tokens_not_found",{"_index":1673,"title":{},"body":{"injectables/UserRefreshTokensService.html":{}}}],["notfoundexception(errortypeenum.users_not_found",{"_index":1726,"title":{},"body":{"injectables/UsersService.html":{}}}],["notification",{"_index":622,"title":{},"body":{"classes/CreateUserNotificationTokenDto.html":{},"classes/DeleteUserNotificationTokenDto.html":{},"injectables/NotificationsService.html":{},"classes/PaginationUserNotificationTokensDto.html":{},"classes/SelectUserNotificationTokenDto.html":{},"classes/SelectUserNotificationTokensDto.html":{},"classes/UpdateUserNotificationTokenDto.html":{},"classes/UserEntity.html":{},"classes/UserNotificationTokenEntity.html":{},"controllers/UserNotificationTokensController.html":{},"injectables/UserNotificationTokensService.html":{},"coverage.html":{}}}],["notification.dto",{"_index":1524,"title":{},"body":{"classes/UpdateNotificationDto.html":{}}}],["notification.dto.ts",{"_index":587,"title":{},"body":{"classes/CreateNotificationDto.html":{},"classes/UpdateNotificationDto.html":{},"coverage.html":{}}}],["notification.dto.ts:10",{"_index":590,"title":{},"body":{"classes/CreateNotificationDto.html":{},"classes/UpdateNotificationDto.html":{}}}],["notification.dto.ts:14",{"_index":593,"title":{},"body":{"classes/CreateNotificationDto.html":{}}}],["notification_already_exist",{"_index":1896,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["notification_not_found",{"_index":1898,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["notificationentity",{"_index":1140,"title":{"classes/NotificationEntity.html":{}},"body":{"classes/NotificationEntity.html":{},"controllers/NotificationsController.html":{},"modules/NotificationsModule.html":{},"injectables/NotificationsService.html":{},"classes/PaginationNotificationsDto.html":{},"classes/SelectNotificationsDto.html":{},"coverage.html":{}}}],["notificationentity_relation_field",{"_index":1244,"title":{},"body":{"injectables/NotificationsService.html":{}}}],["notificationentityrepository",{"_index":1190,"title":{},"body":{"injectables/NotificationsService.html":{}}}],["notifications",{"_index":1161,"title":{},"body":{"controllers/NotificationsController.html":{},"changelog.html":{}}}],["notifications.controller",{"_index":1187,"title":{},"body":{"modules/NotificationsModule.html":{}}}],["notifications.dto.ts",{"_index":1293,"title":{},"body":{"classes/PaginationNotificationsDto.html":{},"classes/SelectNotificationsDto.html":{},"coverage.html":{}}}],["notifications.dto.ts:14",{"_index":1337,"title":{},"body":{"classes/SelectNotificationsDto.html":{}}}],["notifications.dto.ts:16",{"_index":1338,"title":{},"body":{"classes/SelectNotificationsDto.html":{}}}],["notifications.dto.ts:5",{"_index":1294,"title":{},"body":{"classes/PaginationNotificationsDto.html":{}}}],["notifications_already_exist",{"_index":1895,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["notifications_not_found",{"_index":1897,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["notificationscontroller",{"_index":1159,"title":{"controllers/NotificationsController.html":{}},"body":{"controllers/NotificationsController.html":{},"modules/NotificationsModule.html":{},"coverage.html":{}}}],["notificationsmodule",{"_index":153,"title":{"modules/NotificationsModule.html":{}},"body":{"modules/AppModule.html":{},"modules/NotificationsModule.html":{},"modules.html":{},"overview.html":{}}}],["notificationsservice",{"_index":1172,"title":{"injectables/NotificationsService.html":{}},"body":{"controllers/NotificationsController.html":{},"modules/NotificationsModule.html":{},"injectables/NotificationsService.html":{},"coverage.html":{},"overview.html":{}}}],["notificationsstatusenum",{"_index":1145,"title":{},"body":{"classes/NotificationEntity.html":{},"injectables/NotificationsService.html":{},"classes/SelectNotificationsDto.html":{},"classes/UpdateNotificationDto.html":{},"miscellaneous/enumerations.html":{}}}],["notificationsstatusenum.read",{"_index":1221,"title":{},"body":{"injectables/NotificationsService.html":{}}}],["notificationsstatusenum.unread",{"_index":1158,"title":{},"body":{"classes/NotificationEntity.html":{},"injectables/NotificationsService.html":{}}}],["notificationstitleenum",{"_index":1861,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["notificationstypeenum",{"_index":591,"title":{},"body":{"classes/CreateNotificationDto.html":{},"classes/NotificationEntity.html":{},"miscellaneous/enumerations.html":{}}}],["notificationstypeenum})@column({type",{"_index":1152,"title":{},"body":{"classes/NotificationEntity.html":{}}}],["notificationtokens",{"_index":1261,"title":{},"body":{"injectables/NotificationsService.html":{},"classes/UserEntity.html":{},"classes/UserNotificationTokenEntity.html":{}}}],["now",{"_index":737,"title":{},"body":{"classes/FileEntity.html":{},"classes/FileEntityPreview.html":{},"injectables/StorageS3Service.html":{},"injectables/StorageService.html":{}}}],["now.getfullyear",{"_index":1450,"title":{},"body":{"injectables/StorageS3Service.html":{},"injectables/StorageService.html":{}}}],["now.getmonth",{"_index":1452,"title":{},"body":{"injectables/StorageS3Service.html":{},"injectables/StorageService.html":{}}}],["npm",{"_index":1978,"title":{},"body":{"index.html":{}}}],["null",{"_index":731,"title":{},"body":{"classes/FileEntity.html":{},"classes/FileEntityPreview.html":{},"classes/UserEntity.html":{}}}],["nullable",{"_index":693,"title":{},"body":{"classes/FileEntity.html":{},"classes/FileEntityPreview.html":{},"classes/NotificationEntity.html":{},"classes/UserEntity.html":{},"classes/UserNotificationTokenEntity.html":{}}}],["nulls",{"_index":2092,"title":{},"body":{"miscellaneous/variables.html":{}}}],["number",{"_index":376,"title":{},"body":{"injectables/AuthService.html":{},"classes/FindManyOptionsDto.html":{},"classes/PaginationFilesDto.html":{},"classes/PaginationNotificationsDto.html":{},"classes/PaginationUserNotificationTokensDto.html":{},"classes/PaginationUsersDto.html":{},"classes/SelectFilesDto.html":{},"classes/SelectNotificationsDto.html":{},"classes/SelectUserNotificationTokensDto.html":{},"classes/SelectUsersDto.html":{},"interfaces/SendGridModuleAsyncOptions.html":{},"interfaces/SendGridModuleOptions.html":{},"interfaces/SendGridOptionsFactory.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["object",{"_index":498,"title":{},"body":{"injectables/ConfigService.html":{},"classes/FindManyOptionsDto.html":{},"injectables/StorageService.html":{},"miscellaneous/variables.html":{}}}],["object.assign",{"_index":132,"title":{},"body":{"controllers/AppController.html":{},"modules/AuthModule.html":{},"interfaces/CreateMockFileReturn.html":{},"classes/FindManyOptionsDto.html":{},"classes/FindOneOptionsDto.html":{},"classes/SelectFilesDto.html":{}}}],["object.assign(initialoptions",{"_index":456,"title":{},"body":{"injectables/AuthService.html":{}}}],["object.assign(this",{"_index":741,"title":{},"body":{"classes/FileEntity.html":{},"classes/FileEntityPreview.html":{},"classes/PaginationFilesDto.html":{},"classes/PaginationNotificationsDto.html":{},"classes/PaginationUserNotificationTokensDto.html":{},"classes/PaginationUsersDto.html":{},"classes/UploadedFile.html":{}}}],["object.entries(order",{"_index":2087,"title":{},"body":{"miscellaneous/variables.html":{}}}],["object.keys(order",{"_index":2094,"title":{},"body":{"miscellaneous/variables.html":{}}}],["object.keys(other).includes(key",{"_index":1342,"title":{},"body":{"classes/SelectNotificationsDto.html":{}}}],["object.keys(this).filter(callback).length",{"_index":1344,"title":{},"body":{"classes/SelectNotificationsDto.html":{}}}],["objectpath",{"_index":2057,"title":{},"body":{"miscellaneous/variables.html":{}}}],["objectpath.split",{"_index":2059,"title":{},"body":{"miscellaneous/variables.html":{}}}],["observable",{"_index":1311,"title":{},"body":{"interfaces/Response.html":{},"injectables/TransformInterceptor.html":{}}}],["offset",{"_index":966,"title":{},"body":{"classes/FindManyOptionsDto.html":{},"classes/SelectFilesDto.html":{},"classes/SelectNotificationsDto.html":{},"classes/SelectUserNotificationTokensDto.html":{},"classes/SelectUsersDto.html":{}}}],["oldpassword",{"_index":1520,"title":{},"body":{"classes/UpdateEmailDto.html":{},"classes/UpdatePasswordDto.html":{},"classes/UpdateProfileDto.html":{}}}],["oldrefreshtoken",{"_index":294,"title":{},"body":{"controllers/AuthController.html":{}}}],["oldrefreshtoken.id",{"_index":296,"title":{},"body":{"controllers/AuthController.html":{}}}],["omit",{"_index":1444,"title":{},"body":{"injectables/StorageS3Service.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["omittype",{"_index":1516,"title":{},"body":{"classes/UpdateEmailDto.html":{},"classes/UpdatePasswordDto.html":{},"classes/UpdateProfileDto.html":{}}}],["omittype(updateuserdto",{"_index":1518,"title":{},"body":{"classes/UpdateEmailDto.html":{},"classes/UpdatePasswordDto.html":{},"classes/UpdateProfileDto.html":{}}}],["ondelete",{"_index":707,"title":{},"body":{"classes/FileEntity.html":{},"classes/FileEntityPreview.html":{},"classes/NotificationEntity.html":{},"classes/UserEntity.html":{},"classes/UserNotificationTokenEntity.html":{},"classes/UserRefreshTokenEntity.html":{}}}],["one",{"_index":996,"title":{},"body":{"classes/FindManyOptionsDto.html":{},"classes/FindOneOptionsDto.html":{},"classes/UserEntity.html":{},"coverage.html":{}}}],["onetomany",{"_index":1571,"title":{},"body":{"classes/UserEntity.html":{}}}],["onmoduleinit",{"_index":1470,"title":{},"body":{"injectables/StorageService.html":{}}}],["onupdate",{"_index":1154,"title":{},"body":{"classes/NotificationEntity.html":{}}}],["operating",{"_index":516,"title":{},"body":{"injectables/ConfigService.html":{},"miscellaneous/enumerations.html":{}}}],["operation",{"_index":2104,"title":{},"body":{"miscellaneous/variables.html":{}}}],["operation.summary",{"_index":2111,"title":{},"body":{"miscellaneous/variables.html":{}}}],["operationobject",{"_index":2105,"title":{},"body":{"miscellaneous/variables.html":{}}}],["optional",{"_index":32,"title":{},"body":{"classes/AllExceptionFilter.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/ConfigService.html":{},"interfaces/CreateMockFileReturn.html":{},"classes/CreateUserDto.html":{},"classes/DownloadFileDto.html":{},"classes/FileEntityPreview.html":{},"injectables/FileValidationPipe.html":{},"controllers/FilesController.html":{},"injectables/FilesService.html":{},"interfaces/FindManyBracketsOptions.html":{},"classes/FindManyOptionsDto.html":{},"classes/FindOneOptionsDto.html":{},"classes/HttpExceptionFilter.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtRefreshGuard.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"modules/MultipartModule.html":{},"interfaces/MultipartModuleAsyncOptions.html":{},"controllers/NotificationsController.html":{},"injectables/NotificationsService.html":{},"classes/PaginationFilesDto.html":{},"classes/PaginationNotificationsDto.html":{},"classes/PaginationUserNotificationTokensDto.html":{},"classes/PaginationUsersDto.html":{},"classes/SelectFileDto.html":{},"classes/SelectFilesDto.html":{},"classes/SelectNotificationsDto.html":{},"classes/SelectProfileDto.html":{},"classes/SelectUserDto.html":{},"classes/SelectUserNotificationTokenDto.html":{},"classes/SelectUserNotificationTokensDto.html":{},"classes/SelectUsersDto.html":{},"modules/SendGridModule.html":{},"interfaces/SendGridModuleAsyncOptions.html":{},"interfaces/SendGridModuleOptions.html":{},"injectables/SendGridService.html":{},"injectables/StorageS3Service.html":{},"injectables/StorageService.html":{},"injectables/TransformInterceptor.html":{},"classes/UpdateNotificationDto.html":{},"classes/UploadedFile.html":{},"controllers/UserNotificationTokensController.html":{},"injectables/UserNotificationTokensService.html":{},"injectables/UserRefreshTokensService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"miscellaneous/functions.html":{},"classes/user1615673396368.html":{}}}],["options",{"_index":131,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/FilesController.html":{},"injectables/FilesService.html":{},"classes/FindManyOptionsDto.html":{},"modules/MultipartModule.html":{},"controllers/NotificationsController.html":{},"injectables/NotificationsService.html":{},"modules/SendGridModule.html":{},"injectables/SendGridService.html":{},"injectables/StorageS3Service.html":{},"injectables/StorageService.html":{},"controllers/UserNotificationTokensController.html":{},"injectables/UserNotificationTokensService.html":{},"injectables/UserRefreshTokensService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"miscellaneous/variables.html":{}}}],["options).catch",{"_index":864,"title":{},"body":{"injectables/FilesService.html":{},"injectables/NotificationsService.html":{},"injectables/UserNotificationTokensService.html":{},"injectables/UserRefreshTokensService.html":{},"injectables/UsersService.html":{}}}],["options.apikey",{"_index":1401,"title":{},"body":{"injectables/SendGridService.html":{}}}],["options.dto.ts",{"_index":939,"title":{},"body":{"classes/FindManyOptionsDto.html":{},"classes/FindOneOptionsDto.html":{},"coverage.html":{}}}],["options.dto.ts:24",{"_index":1012,"title":{},"body":{"classes/FindOneOptionsDto.html":{}}}],["options.dto.ts:29",{"_index":955,"title":{},"body":{"classes/FindManyOptionsDto.html":{}}}],["options.dto.ts:30",{"_index":1014,"title":{},"body":{"classes/FindOneOptionsDto.html":{}}}],["options.dto.ts:43",{"_index":1011,"title":{},"body":{"classes/FindOneOptionsDto.html":{}}}],["options.dto.ts:44",{"_index":964,"title":{},"body":{"classes/FindManyOptionsDto.html":{}}}],["options.dto.ts:49",{"_index":1017,"title":{},"body":{"classes/FindOneOptionsDto.html":{}}}],["options.dto.ts:50",{"_index":988,"title":{},"body":{"classes/FindManyOptionsDto.html":{}}}],["options.dto.ts:68",{"_index":969,"title":{},"body":{"classes/FindManyOptionsDto.html":{}}}],["options.dto.ts:82",{"_index":974,"title":{},"body":{"classes/FindManyOptionsDto.html":{}}}],["options.dto.ts:88",{"_index":993,"title":{},"body":{"classes/FindManyOptionsDto.html":{}}}],["options.id",{"_index":820,"title":{},"body":{"controllers/FilesController.html":{}}}],["options.imports",{"_index":1121,"title":{},"body":{"modules/MultipartModule.html":{},"modules/SendGridModule.html":{}}}],["options.inject",{"_index":1127,"title":{},"body":{"modules/MultipartModule.html":{},"modules/SendGridModule.html":{}}}],["options.substitutionwrappers",{"_index":1407,"title":{},"body":{"injectables/SendGridService.html":{}}}],["options.substitutionwrappers.left",{"_index":1409,"title":{},"body":{"injectables/SendGridService.html":{}}}],["options.substitutionwrappers.right",{"_index":1410,"title":{},"body":{"injectables/SendGridService.html":{}}}],["options.timeout",{"_index":1405,"title":{},"body":{"injectables/SendGridService.html":{}}}],["options.useclass",{"_index":1126,"title":{},"body":{"modules/MultipartModule.html":{},"modules/SendGridModule.html":{}}}],["options.useexisting",{"_index":1123,"title":{},"body":{"modules/MultipartModule.html":{},"modules/SendGridModule.html":{}}}],["options.usefactory",{"_index":1124,"title":{},"body":{"modules/MultipartModule.html":{},"modules/SendGridModule.html":{}}}],["options/find",{"_index":938,"title":{},"body":{"classes/FindManyOptionsDto.html":{},"classes/FindOneOptionsDto.html":{},"coverage.html":{}}}],["optionsfactory",{"_index":1128,"title":{},"body":{"modules/MultipartModule.html":{},"modules/SendGridModule.html":{}}}],["optionsfactory.createmultipartoptions",{"_index":1129,"title":{},"body":{"modules/MultipartModule.html":{}}}],["optionsfactory.createsendgridoptions",{"_index":1368,"title":{},"body":{"modules/SendGridModule.html":{}}}],["optionsorconditions",{"_index":844,"title":{},"body":{"injectables/FilesService.html":{},"injectables/NotificationsService.html":{},"injectables/UserNotificationTokensService.html":{},"injectables/UserRefreshTokensService.html":{},"injectables/UsersService.html":{}}}],["optionsorconditions.loadeagerrelations",{"_index":874,"title":{},"body":{"injectables/FilesService.html":{},"injectables/NotificationsService.html":{},"injectables/UsersService.html":{}}}],["optionsorconditions.order",{"_index":1721,"title":{},"body":{"injectables/UsersService.html":{}}}],["order",{"_index":947,"title":{},"body":{"classes/FindManyOptionsDto.html":{},"classes/SelectFilesDto.html":{},"classes/SelectNotificationsDto.html":{},"classes/SelectUserNotificationTokensDto.html":{},"classes/SelectUsersDto.html":{},"injectables/UsersService.html":{},"miscellaneous/variables.html":{}}}],["order.helper.ts",{"_index":1765,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["order[key",{"_index":2098,"title":{},"body":{"miscellaneous/variables.html":{}}}],["ordered",{"_index":952,"title":{},"body":{"classes/FindManyOptionsDto.html":{},"classes/SelectFilesDto.html":{},"classes/SelectNotificationsDto.html":{},"classes/SelectUserNotificationTokensDto.html":{},"classes/SelectUsersDto.html":{}}}],["out",{"_index":157,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"modules/ConfigModule.html":{},"modules/FilesModule.html":{},"modules/NotificationsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["out')@useguards(jwtrefreshguard)@apibody({type",{"_index":225,"title":{},"body":{"controllers/AuthController.html":{}}}],["overview",{"_index":2001,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["owner",{"_index":290,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/FileEntity.html":{},"classes/FileEntityPreview.html":{},"controllers/FilesController.html":{},"injectables/FilesService.html":{},"classes/NotificationEntity.html":{},"controllers/NotificationsController.html":{},"injectables/NotificationsService.html":{},"classes/UserEntity.html":{},"classes/UserNotificationTokenEntity.html":{},"controllers/UserNotificationTokensController.html":{},"classes/UserRefreshTokenEntity.html":{}}}],["owner.id",{"_index":807,"title":{},"body":{"controllers/FilesController.html":{},"controllers/NotificationsController.html":{},"controllers/UserNotificationTokensController.html":{}}}],["owner['id",{"_index":895,"title":{},"body":{"injectables/FilesService.html":{}}}],["owner['role",{"_index":891,"title":{},"body":{"injectables/FilesService.html":{}}}],["package",{"_index":1817,"title":{"dependencies.html":{}},"body":{}}],["page",{"_index":943,"title":{},"body":{"classes/FindManyOptionsDto.html":{},"classes/SelectFilesDto.html":{},"classes/SelectNotificationsDto.html":{},"classes/SelectUserNotificationTokensDto.html":{},"classes/SelectUsersDto.html":{}}}],["paginated",{"_index":967,"title":{},"body":{"classes/FindManyOptionsDto.html":{},"classes/SelectFilesDto.html":{},"classes/SelectNotificationsDto.html":{},"classes/SelectUserNotificationTokensDto.html":{},"classes/SelectUsersDto.html":{}}}],["paginationfilesdto",{"_index":797,"title":{"classes/PaginationFilesDto.html":{}},"body":{"controllers/FilesController.html":{},"injectables/FilesService.html":{},"classes/PaginationFilesDto.html":{},"coverage.html":{}}}],["paginationfilesdto(data",{"_index":886,"title":{},"body":{"injectables/FilesService.html":{}}}],["paginationmixin",{"_index":1287,"title":{},"body":{"classes/PaginationFilesDto.html":{},"classes/PaginationNotificationsDto.html":{},"classes/PaginationUserNotificationTokensDto.html":{},"classes/PaginationUsersDto.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["paginationmixin(classref",{"_index":1968,"title":{},"body":{"miscellaneous/functions.html":{}}}],["paginationmixin(fileentity",{"_index":1288,"title":{},"body":{"classes/PaginationFilesDto.html":{}}}],["paginationmixin(notificationentity",{"_index":1295,"title":{},"body":{"classes/PaginationNotificationsDto.html":{}}}],["paginationmixin(userentity",{"_index":1303,"title":{},"body":{"classes/PaginationUsersDto.html":{}}}],["paginationnotificationsdto",{"_index":1174,"title":{"classes/PaginationNotificationsDto.html":{}},"body":{"controllers/NotificationsController.html":{},"injectables/NotificationsService.html":{},"classes/PaginationNotificationsDto.html":{},"coverage.html":{}}}],["paginationnotificationsdto(data",{"_index":1249,"title":{},"body":{"injectables/NotificationsService.html":{}}}],["paginationusernotificationtokensdto",{"_index":1297,"title":{"classes/PaginationUserNotificationTokensDto.html":{}},"body":{"classes/PaginationUserNotificationTokensDto.html":{},"coverage.html":{}}}],["paginationusersdto",{"_index":1300,"title":{"classes/PaginationUsersDto.html":{}},"body":{"classes/PaginationUsersDto.html":{},"controllers/UserNotificationTokensController.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["paginationusersdto(data",{"_index":1725,"title":{},"body":{"injectables/UsersService.html":{}}}],["paid",{"_index":1931,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["param",{"_index":111,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/ConfigService.html":{},"classes/FileEntity.html":{},"classes/FileEntityPreview.html":{},"injectables/FileValidationPipe.html":{},"controllers/FilesController.html":{},"injectables/FilesService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtRefreshGuard.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"modules/MultipartModule.html":{},"controllers/NotificationsController.html":{},"injectables/NotificationsService.html":{},"classes/PaginationFilesDto.html":{},"classes/PaginationUserNotificationTokensDto.html":{},"classes/PaginationUsersDto.html":{},"interfaces/Response.html":{},"modules/SendGridModule.html":{},"injectables/StorageS3Service.html":{},"injectables/StorageService.html":{},"injectables/TransformInterceptor.html":{},"classes/UploadedFile.html":{},"controllers/UserNotificationTokensController.html":{},"injectables/UserNotificationTokensService.html":{},"injectables/UserRefreshTokensService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"miscellaneous/variables.html":{}}}],["parameters",{"_index":30,"title":{},"body":{"classes/AllExceptionFilter.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/ConfigService.html":{},"classes/FileEntityPreview.html":{},"injectables/FileValidationPipe.html":{},"controllers/FilesController.html":{},"injectables/FilesService.html":{},"classes/HttpExceptionFilter.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtRefreshGuard.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"modules/MultipartModule.html":{},"controllers/NotificationsController.html":{},"injectables/NotificationsService.html":{},"classes/PaginationFilesDto.html":{},"classes/PaginationNotificationsDto.html":{},"classes/PaginationUserNotificationTokensDto.html":{},"classes/PaginationUsersDto.html":{},"modules/SendGridModule.html":{},"injectables/SendGridService.html":{},"injectables/StorageS3Service.html":{},"injectables/StorageService.html":{},"injectables/TransformInterceptor.html":{},"classes/UploadedFile.html":{},"controllers/UserNotificationTokensController.html":{},"injectables/UserNotificationTokensService.html":{},"injectables/UserRefreshTokensService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"miscellaneous/functions.html":{},"classes/user1615673396368.html":{}}}],["params",{"_index":66,"title":{},"body":{"classes/AllExceptionFilter.html":{}}}],["parseint('0700",{"_index":1481,"title":{},"body":{"injectables/StorageService.html":{}}}],["parseint((parsefloat(value.tofixed(2",{"_index":2084,"title":{},"body":{"miscellaneous/variables.html":{}}}],["parseint(range[0",{"_index":926,"title":{},"body":{"injectables/FilesService.html":{}}}],["parseint(range[1",{"_index":923,"title":{},"body":{"injectables/FilesService.html":{}}}],["part",{"_index":2062,"title":{},"body":{"miscellaneous/variables.html":{}}}],["partial",{"_index":390,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/CreateMockFileReturn.html":{},"classes/FileEntity.html":{},"classes/FileEntityPreview.html":{},"injectables/FilesService.html":{},"classes/NotificationEntity.html":{},"injectables/NotificationsService.html":{},"interfaces/SendGridModuleAsyncOptions.html":{},"interfaces/SendGridModuleOptions.html":{},"interfaces/SendGridOptionsFactory.html":{},"injectables/SendGridService.html":{},"injectables/StorageService.html":{},"classes/UploadedFile.html":{},"classes/UserEntity.html":{},"classes/UserNotificationTokenEntity.html":{},"injectables/UserNotificationTokensService.html":{},"classes/UserRefreshTokenEntity.html":{},"injectables/UserRefreshTokensService.html":{},"injectables/UsersService.html":{},"miscellaneous/functions.html":{},"classes/user1615673396368.html":{},"miscellaneous/variables.html":{}}}],["partialtype",{"_index":1523,"title":{},"body":{"classes/UpdateNotificationDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserNotificationTokenDto.html":{}}}],["partialtype(createnotificationdto",{"_index":1525,"title":{},"body":{"classes/UpdateNotificationDto.html":{}}}],["partialtype(createuserdto",{"_index":1529,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["partialtype(createusernotificationtokendto",{"_index":1531,"title":{},"body":{"classes/UpdateUserNotificationTokenDto.html":{}}}],["parts",{"_index":2058,"title":{},"body":{"miscellaneous/variables.html":{}}}],["parts.length",{"_index":2061,"title":{},"body":{"miscellaneous/variables.html":{}}}],["parts.shift",{"_index":2063,"title":{},"body":{"miscellaneous/variables.html":{}}}],["passport",{"_index":1076,"title":{},"body":{"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"dependencies.html":{}}}],["passportmodule",{"_index":328,"title":{},"body":{"modules/AuthModule.html":{}}}],["passportstrategy",{"_index":1078,"title":{},"body":{"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{}}}],["passportstrategy(strategy",{"_index":1079,"title":{},"body":{"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{}}}],["password",{"_index":187,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/CreateProfileDto.html":{},"classes/CreateUserDto.html":{},"classes/CredentialsDto.html":{},"modules/DatabaseModule.html":{},"classes/ResetPasswordDto.html":{},"classes/SendResetPasswordDto.html":{},"classes/UpdateEmailDto.html":{},"classes/UpdatePasswordDto.html":{},"classes/UpdateProfileDto.html":{},"classes/UserEntity.html":{},"coverage.html":{},"classes/user1615673396368.html":{},"miscellaneous/variables.html":{}}}],["password.dto.ts",{"_index":1305,"title":{},"body":{"classes/ResetPasswordDto.html":{},"classes/SendResetPasswordDto.html":{},"coverage.html":{}}}],["password.dto.ts:15",{"_index":1307,"title":{},"body":{"classes/ResetPasswordDto.html":{}}}],["password/send/email",{"_index":242,"title":{},"body":{"controllers/AuthController.html":{}}}],["patch",{"_index":259,"title":{},"body":{"controllers/AuthController.html":{},"controllers/FilesController.html":{},"controllers/NotificationsController.html":{},"controllers/UserNotificationTokensController.html":{},"controllers/UsersController.html":{}}}],["patch(':id",{"_index":813,"title":{},"body":{"controllers/FilesController.html":{},"controllers/NotificationsController.html":{},"controllers/UserNotificationTokensController.html":{},"controllers/UsersController.html":{}}}],["patch(':id')@apibearerauth()@useguards(jwtauthguard)@apibody({type",{"_index":788,"title":{},"body":{"controllers/FilesController.html":{}}}],["patch(':id')@userole(userroleenum.admin",{"_index":1686,"title":{},"body":{"controllers/UsersController.html":{}}}],["patch('profile",{"_index":307,"title":{},"body":{"controllers/AuthController.html":{}}}],["patch('profile')@apibearerauth()@useguards(jwtauthguard",{"_index":246,"title":{},"body":{"controllers/AuthController.html":{}}}],["patch('profile/email",{"_index":311,"title":{},"body":{"controllers/AuthController.html":{}}}],["patch('profile/email')@apibearerauth()@useguards(jwtauthguard",{"_index":250,"title":{},"body":{"controllers/AuthController.html":{}}}],["patch('profile/password",{"_index":309,"title":{},"body":{"controllers/AuthController.html":{}}}],["patch('profile/password')@apibearerauth()@useguards(jwtauthguard",{"_index":254,"title":{},"body":{"controllers/AuthController.html":{}}}],["path",{"_index":109,"title":{},"body":{"controllers/AppController.html":{},"injectables/ConfigService.html":{},"modules/DatabaseModule.html":{},"injectables/StorageService.html":{}}}],["payload",{"_index":427,"title":{},"body":{"injectables/AuthService.html":{}}}],["payloadtoolargeexception(errortypeenum.file_too_large",{"_index":2081,"title":{},"body":{"miscellaneous/variables.html":{}}}],["payment",{"_index":1946,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["payment_artist_deactivated",{"_index":1948,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["payment_refund",{"_index":1945,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["pg",{"_index":1848,"title":{},"body":{"dependencies.html":{}}}],["pick",{"_index":1132,"title":{},"body":{"interfaces/MultipartModuleAsyncOptions.html":{},"interfaces/MultipartOptionsFactory.html":{},"interfaces/SendGridModuleAsyncOptions.html":{},"interfaces/SendGridModuleOptions.html":{},"interfaces/SendGridOptionsFactory.html":{}}}],["picktype",{"_index":542,"title":{},"body":{"classes/ConfirmationEmailDto.html":{},"classes/CreateProfileDto.html":{},"classes/CredentialsDto.html":{},"classes/FileEntity.html":{},"classes/FileEntityPreview.html":{},"classes/JwtAccessTokenPayloadDto.html":{},"classes/JwtRefreshTokenDto.html":{},"classes/JwtRefreshTokenPayloadDto.html":{},"classes/JwtTokensDto.html":{},"classes/ResetPasswordDto.html":{},"classes/SendResetPasswordDto.html":{},"classes/UpdateEmailDto.html":{},"classes/UpdatePasswordDto.html":{},"classes/UpdateProfileDto.html":{}}}],["picktype(createuserdto",{"_index":547,"title":{},"body":{"classes/ConfirmationEmailDto.html":{},"classes/CreateProfileDto.html":{},"classes/CredentialsDto.html":{},"classes/ResetPasswordDto.html":{},"classes/SendResetPasswordDto.html":{}}}],["picktype(fileentity",{"_index":739,"title":{},"body":{"classes/FileEntity.html":{},"classes/FileEntityPreview.html":{}}}],["picktype(jwttokensdto",{"_index":1036,"title":{},"body":{"classes/JwtAccessTokenPayloadDto.html":{},"classes/JwtRefreshTokenDto.html":{},"classes/JwtRefreshTokenPayloadDto.html":{},"classes/JwtTokensDto.html":{}}}],["picktype(updateuserdto",{"_index":1519,"title":{},"body":{"classes/UpdateEmailDto.html":{},"classes/UpdatePasswordDto.html":{},"classes/UpdateProfileDto.html":{}}}],["pipeline",{"_index":1490,"title":{},"body":{"injectables/StorageService.html":{}}}],["pipeline(file",{"_index":1503,"title":{},"body":{"injectables/StorageService.html":{}}}],["pipetransform",{"_index":753,"title":{},"body":{"injectables/FileValidationPipe.html":{}}}],["place",{"_index":877,"title":{},"body":{"injectables/FilesService.html":{},"injectables/NotificationsService.html":{},"injectables/UsersService.html":{}}}],["please",{"_index":1906,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["png",{"_index":575,"title":{},"body":{"interfaces/CreateMockFileReturn.html":{}}}],["poduction",{"_index":1866,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["port",{"_index":134,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/DatabaseModule.html":{}}}],["post",{"_index":258,"title":{},"body":{"controllers/AuthController.html":{},"controllers/FilesController.html":{},"controllers/NotificationsController.html":{},"controllers/UserNotificationTokensController.html":{},"controllers/UsersController.html":{}}}],["post('')@apibearerauth()@useguards(jwtauthguard)@apibody({type",{"_index":770,"title":{},"body":{"controllers/FilesController.html":{}}}],["post('log",{"_index":224,"title":{},"body":{"controllers/AuthController.html":{}}}],["post('refresh",{"_index":229,"title":{},"body":{"controllers/AuthController.html":{}}}],["post('reset",{"_index":234,"title":{},"body":{"controllers/AuthController.html":{}}}],["post('signin",{"_index":216,"title":{},"body":{"controllers/AuthController.html":{}}}],["post('signup",{"_index":220,"title":{},"body":{"controllers/AuthController.html":{}}}],["post('validate/email/code",{"_index":211,"title":{},"body":{"controllers/AuthController.html":{}}}],["post()@userole(userroleenum.admin",{"_index":1679,"title":{},"body":{"controllers/UsersController.html":{}}}],["ppid",{"_index":431,"title":{},"body":{"injectables/AuthService.html":{},"classes/JwtAccessTokenPayloadDto.html":{},"classes/JwtRefreshTokenDto.html":{},"classes/JwtRefreshTokenPayloadDto.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"classes/JwtTokensDto.html":{},"classes/UserRefreshTokenEntity.html":{},"injectables/UserRefreshTokensService.html":{}}}],["prefix",{"_index":84,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"controllers/FilesController.html":{},"controllers/NotificationsController.html":{},"injectables/StorageService.html":{},"controllers/UserNotificationTokensController.html":{},"controllers/UsersController.html":{}}}],["prefix}/${filename",{"_index":1498,"title":{},"body":{"injectables/StorageService.html":{}}}],["primarygeneratedcolumn",{"_index":725,"title":{},"body":{"classes/FileEntity.html":{},"classes/FileEntityPreview.html":{},"classes/NotificationEntity.html":{},"classes/UserEntity.html":{},"classes/UserNotificationTokenEntity.html":{},"classes/UserRefreshTokenEntity.html":{}}}],["primarygeneratedcolumn('uuid",{"_index":728,"title":{},"body":{"classes/FileEntity.html":{},"classes/FileEntityPreview.html":{},"classes/NotificationEntity.html":{},"classes/UserEntity.html":{},"classes/UserNotificationTokenEntity.html":{},"classes/UserRefreshTokenEntity.html":{}}}],["priority",{"_index":962,"title":{},"body":{"classes/FindManyOptionsDto.html":{},"classes/SelectFilesDto.html":{},"classes/SelectNotificationsDto.html":{},"classes/SelectUserNotificationTokensDto.html":{},"classes/SelectUsersDto.html":{}}}],["private",{"_index":12,"title":{},"body":{"classes/AllExceptionFilter.html":{},"controllers/AppController.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/FileValidationPipe.html":{},"injectables/FilesService.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"modules/MultipartModule.html":{},"modules/SendGridModule.html":{},"injectables/SendGridService.html":{},"injectables/StorageS3Service.html":{},"injectables/StorageService.html":{},"miscellaneous/enumerations.html":{}}}],["process.env.cdn}/${this.filename}${this.extname",{"_index":716,"title":{},"body":{"classes/FileEntity.html":{},"classes/FileEntityPreview.html":{}}}],["process.env['node_env",{"_index":528,"title":{},"body":{"injectables/ConfigService.html":{}}}],["process.env[filename",{"_index":525,"title":{},"body":{"injectables/ConfigService.html":{}}}],["process.env[key",{"_index":529,"title":{},"body":{"injectables/ConfigService.html":{}}}],["production",{"_index":1869,"title":{},"body":{"miscellaneous/enumerations.html":{},"index.html":{}}}],["profile.dto.ts",{"_index":600,"title":{},"body":{"classes/CreateProfileDto.html":{},"classes/SelectProfileDto.html":{},"classes/UpdateEmailDto.html":{},"classes/UpdatePasswordDto.html":{},"classes/UpdateProfileDto.html":{},"coverage.html":{}}}],["profile.dto.ts:25",{"_index":1526,"title":{},"body":{"classes/UpdatePasswordDto.html":{}}}],["promise",{"_index":91,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/FilesController.html":{},"injectables/FilesService.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"interfaces/MultipartModuleAsyncOptions.html":{},"interfaces/MultipartOptionsFactory.html":{},"controllers/NotificationsController.html":{},"injectables/NotificationsService.html":{},"interfaces/SendGridModuleAsyncOptions.html":{},"interfaces/SendGridModuleOptions.html":{},"interfaces/SendGridOptionsFactory.html":{},"injectables/SendGridService.html":{},"injectables/StorageS3Service.html":{},"injectables/StorageService.html":{},"classes/UserEntity.html":{},"controllers/UserNotificationTokensController.html":{},"injectables/UserNotificationTokensService.html":{},"injectables/UserRefreshTokensService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"classes/user1615673396368.html":{},"miscellaneous/variables.html":{}}}],["promiseresult",{"_index":1437,"title":{},"body":{"injectables/StorageS3Service.html":{}}}],["promisify(scryptcallback",{"_index":2052,"title":{},"body":{"miscellaneous/variables.html":{}}}],["promotion",{"_index":1951,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["promotion_expire",{"_index":1958,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["promotion_expire_1_hour",{"_index":1950,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["properties",{"_index":11,"title":{},"body":{"classes/AllExceptionFilter.html":{},"injectables/AuthService.html":{},"classes/ConfirmationEmailDto.html":{},"classes/CreateFileDto.html":{},"interfaces/CreateMockFileReturn.html":{},"classes/CreateNotificationDto.html":{},"classes/CreateUserDto.html":{},"classes/CreateUserNotificationTokenDto.html":{},"classes/DeleteUserNotificationTokenDto.html":{},"classes/DownloadFileDto.html":{},"classes/FileEntity.html":{},"injectables/FileValidationPipe.html":{},"interfaces/FindManyBracketsOptions.html":{},"classes/FindManyOptionsDto.html":{},"classes/FindOneOptionsDto.html":{},"classes/ID.html":{},"classes/JwtAccessTokenPayloadDto.html":{},"classes/JwtRefreshTokenPayloadDto.html":{},"classes/JwtTokensDto.html":{},"interfaces/MultipartModuleAsyncOptions.html":{},"classes/NotificationEntity.html":{},"injectables/NotificationsService.html":{},"classes/ResetPasswordDto.html":{},"interfaces/Response.html":{},"classes/SelectFileDto.html":{},"classes/SelectFilesDto.html":{},"classes/SelectNotificationsDto.html":{},"classes/SelectProfileDto.html":{},"classes/SelectUserDto.html":{},"classes/SelectUserNotificationTokenDto.html":{},"classes/SelectUserNotificationTokensDto.html":{},"classes/SelectUsersDto.html":{},"interfaces/SendGridModuleAsyncOptions.html":{},"interfaces/SendGridModuleOptions.html":{},"injectables/SendGridService.html":{},"injectables/StorageS3Service.html":{},"injectables/StorageService.html":{},"classes/UpdateNotificationDto.html":{},"classes/UpdatePasswordDto.html":{},"classes/UploadedFile.html":{},"classes/UserEntity.html":{},"classes/UserNotificationTokenEntity.html":{},"injectables/UserNotificationTokensService.html":{},"classes/UserRefreshTokenEntity.html":{},"injectables/UserRefreshTokensService.html":{},"injectables/UsersService.html":{}}}],["property",{"_index":1018,"title":{},"body":{"classes/FindOneOptionsDto.html":{},"injectables/UsersService.html":{}}}],["provide",{"_index":193,"title":{},"body":{"modules/AppModule.html":{},"modules/MultipartModule.html":{},"modules/SendGridModule.html":{}}}],["provider",{"_index":1100,"title":{},"body":{"modules/MultipartModule.html":{},"modules/SendGridModule.html":{}}}],["providers",{"_index":192,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/ConfigModule.html":{},"modules/FilesModule.html":{},"modules/MultipartModule.html":{},"modules/NotificationsModule.html":{},"modules/SendGridModule.html":{},"modules/UsersModule.html":{}}}],["public",{"_index":87,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/ConfigService.html":{},"classes/ConfirmationEmailDto.html":{},"classes/CreateFileDto.html":{},"classes/CreateNotificationDto.html":{},"classes/CreateUserDto.html":{},"classes/CreateUserNotificationTokenDto.html":{},"classes/DeleteUserNotificationTokenDto.html":{},"classes/DownloadFileDto.html":{},"classes/FileEntity.html":{},"classes/FileEntityPreview.html":{},"controllers/FilesController.html":{},"injectables/FilesService.html":{},"classes/FindManyOptionsDto.html":{},"classes/FindOneOptionsDto.html":{},"classes/ID.html":{},"classes/JwtAccessTokenPayloadDto.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtRefreshGuard.html":{},"classes/JwtRefreshTokenDto.html":{},"classes/JwtRefreshTokenPayloadDto.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"classes/JwtTokensDto.html":{},"modules/MultipartModule.html":{},"classes/NotificationEntity.html":{},"controllers/NotificationsController.html":{},"injectables/NotificationsService.html":{},"classes/ResetPasswordDto.html":{},"classes/SelectFileDto.html":{},"classes/SelectFilesDto.html":{},"classes/SelectNotificationsDto.html":{},"classes/SelectProfileDto.html":{},"classes/SelectUserDto.html":{},"classes/SelectUserNotificationTokenDto.html":{},"classes/SelectUserNotificationTokensDto.html":{},"classes/SelectUsersDto.html":{},"modules/SendGridModule.html":{},"injectables/SendGridService.html":{},"classes/SendResetPasswordDto.html":{},"injectables/StorageS3Service.html":{},"injectables/StorageService.html":{},"classes/UpdateEmailDto.html":{},"classes/UpdateNotificationDto.html":{},"classes/UpdatePasswordDto.html":{},"classes/UpdateProfileDto.html":{},"classes/UploadedFile.html":{},"classes/UserEntity.html":{},"classes/UserNotificationTokenEntity.html":{},"controllers/UserNotificationTokensController.html":{},"injectables/UserNotificationTokensService.html":{},"classes/UserRefreshTokenEntity.html":{},"injectables/UserRefreshTokensService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"classes/user1615673396368.html":{}}}],["push",{"_index":1738,"title":{},"body":{"changelog.html":{}}}],["putobjectrequest",{"_index":1433,"title":{},"body":{"injectables/StorageS3Service.html":{},"miscellaneous/typealiases.html":{}}}],["qb",{"_index":869,"title":{},"body":{"injectables/FilesService.html":{},"injectables/NotificationsService.html":{},"injectables/UserNotificationTokensService.html":{},"injectables/UserRefreshTokensService.html":{},"injectables/UsersService.html":{},"miscellaneous/variables.html":{}}}],["qb.addorderby(key",{"_index":2091,"title":{},"body":{"miscellaneous/variables.html":{}}}],["qb.addselect('__custom",{"_index":1720,"title":{},"body":{"injectables/UsersService.html":{}}}],["qb.alias",{"_index":876,"title":{},"body":{"injectables/FilesService.html":{},"injectables/NotificationsService.html":{}}}],["qb.andwhere",{"_index":893,"title":{},"body":{"injectables/FilesService.html":{},"injectables/NotificationsService.html":{},"classes/SelectFilesDto.html":{}}}],["qb.getmany().catch",{"_index":1636,"title":{},"body":{"injectables/UserNotificationTokensService.html":{},"injectables/UserRefreshTokensService.html":{}}}],["qb.getmanyandcount().catch",{"_index":1246,"title":{},"body":{"injectables/NotificationsService.html":{}}}],["qb.getoneorfail().catch",{"_index":896,"title":{},"body":{"injectables/FilesService.html":{}}}],["qb.leftjoinandselect('entity.relation_field",{"_index":1723,"title":{},"body":{"injectables/UsersService.html":{}}}],["qb.leftjoinandselect('fileentity.relation_field",{"_index":880,"title":{},"body":{"injectables/FilesService.html":{}}}],["qb.leftjoinandselect('notificationentity.relation_field",{"_index":1243,"title":{},"body":{"injectables/NotificationsService.html":{}}}],["qb.setfindoptions(optionsorconditions",{"_index":882,"title":{},"body":{"injectables/FilesService.html":{},"injectables/NotificationsService.html":{},"injectables/UsersService.html":{}}}],["qb.where(object.assign",{"_index":1345,"title":{},"body":{"classes/SelectNotificationsDto.html":{}}}],["query",{"_index":68,"title":{},"body":{"classes/AllExceptionFilter.html":{},"controllers/AuthController.html":{},"controllers/FilesController.html":{},"controllers/NotificationsController.html":{},"controllers/UserNotificationTokensController.html":{},"controllers/UsersController.html":{}}}],["queryrunner",{"_index":2014,"title":{},"body":{"classes/user1615673396368.html":{}}}],["querysearch",{"_index":1768,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["querysearch(field",{"_index":1970,"title":{},"body":{"miscellaneous/functions.html":{}}}],["questions",{"_index":1922,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["randombytes",{"_index":410,"title":{},"body":{"injectables/AuthService.html":{},"injectables/StorageS3Service.html":{},"injectables/StorageService.html":{},"injectables/UserRefreshTokensService.html":{}}}],["randombytes(16).tostring('hex",{"_index":1448,"title":{},"body":{"injectables/StorageS3Service.html":{},"injectables/StorageService.html":{},"injectables/UserRefreshTokensService.html":{}}}],["randombytes(saltrounds).tostring('hex",{"_index":2050,"title":{},"body":{"miscellaneous/variables.html":{}}}],["randombytes(size",{"_index":436,"title":{},"body":{"injectables/AuthService.html":{}}}],["randomstringgenerator",{"_index":1112,"title":{},"body":{"modules/MultipartModule.html":{},"modules/SendGridModule.html":{}}}],["range",{"_index":918,"title":{},"body":{"injectables/FilesService.html":{}}}],["range[0",{"_index":925,"title":{},"body":{"injectables/FilesService.html":{}}}],["range[1",{"_index":922,"title":{},"body":{"injectables/FilesService.html":{}}}],["ranges",{"_index":911,"title":{},"body":{"injectables/FilesService.html":{}}}],["read",{"_index":1901,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["readonly",{"_index":13,"title":{},"body":{"classes/AllExceptionFilter.html":{},"controllers/AppController.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/ConfirmationEmailDto.html":{},"classes/CreateFileDto.html":{},"classes/CreateNotificationDto.html":{},"classes/CreateUserDto.html":{},"classes/CreateUserNotificationTokenDto.html":{},"classes/DeleteUserNotificationTokenDto.html":{},"classes/DownloadFileDto.html":{},"classes/FileEntity.html":{},"classes/FileEntityPreview.html":{},"injectables/FileValidationPipe.html":{},"controllers/FilesController.html":{},"injectables/FilesService.html":{},"classes/FindManyOptionsDto.html":{},"classes/FindOneOptionsDto.html":{},"classes/ID.html":{},"classes/JwtAccessTokenPayloadDto.html":{},"injectables/JwtAuthGuard.html":{},"classes/JwtRefreshTokenDto.html":{},"classes/JwtRefreshTokenPayloadDto.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"classes/JwtTokensDto.html":{},"classes/NotificationEntity.html":{},"controllers/NotificationsController.html":{},"injectables/NotificationsService.html":{},"classes/ResetPasswordDto.html":{},"classes/SelectFileDto.html":{},"classes/SelectFilesDto.html":{},"classes/SelectNotificationsDto.html":{},"classes/SelectProfileDto.html":{},"classes/SelectUserDto.html":{},"classes/SelectUserNotificationTokenDto.html":{},"classes/SelectUserNotificationTokensDto.html":{},"classes/SelectUsersDto.html":{},"injectables/SendGridService.html":{},"classes/SendResetPasswordDto.html":{},"injectables/StorageS3Service.html":{},"injectables/StorageService.html":{},"classes/UpdateEmailDto.html":{},"classes/UpdateNotificationDto.html":{},"classes/UpdatePasswordDto.html":{},"classes/UpdateProfileDto.html":{},"classes/UploadedFile.html":{},"classes/UserEntity.html":{},"classes/UserNotificationTokenEntity.html":{},"controllers/UserNotificationTokensController.html":{},"injectables/UserNotificationTokensService.html":{},"classes/UserRefreshTokenEntity.html":{},"injectables/UserRefreshTokensService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["readstream",{"_index":1483,"title":{},"body":{"injectables/StorageService.html":{}}}],["record",{"_index":59,"title":{},"body":{"classes/AllExceptionFilter.html":{},"classes/HttpExceptionFilter.html":{},"miscellaneous/variables.html":{}}}],["recursive",{"_index":1502,"title":{},"body":{"injectables/StorageService.html":{}}}],["redis",{"_index":184,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"dependencies.html":{}}}],["redisoptions",{"_index":93,"title":{},"body":{"controllers/AppController.html":{}}}],["redisstore",{"_index":324,"title":{},"body":{"modules/AuthModule.html":{}}}],["reduce((acc",{"_index":2096,"title":{},"body":{"miscellaneous/variables.html":{}}}],["reflect",{"_index":1850,"title":{},"body":{"dependencies.html":{}}}],["reflect.getmetadata",{"_index":2106,"title":{},"body":{"miscellaneous/variables.html":{}}}],["reflector",{"_index":1040,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["refresh",{"_index":1063,"title":{},"body":{"injectables/JwtRefreshGuard.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"classes/UserEntity.html":{},"classes/UserRefreshTokenEntity.html":{},"injectables/UserRefreshTokensService.html":{},"coverage.html":{}}}],["refresh.guard.ts",{"_index":1060,"title":{},"body":{"injectables/JwtRefreshGuard.html":{},"coverage.html":{}}}],["refresh.guard.ts:12",{"_index":1061,"title":{},"body":{"injectables/JwtRefreshGuard.html":{}}}],["refresh.guard.ts:27",{"_index":1062,"title":{},"body":{"injectables/JwtRefreshGuard.html":{}}}],["refresh.strategy.ts",{"_index":1069,"title":{},"body":{"injectables/JwtRefreshTokenStrategy.html":{},"coverage.html":{}}}],["refresh.strategy.ts:18",{"_index":1071,"title":{},"body":{"injectables/JwtRefreshTokenStrategy.html":{}}}],["refresh.strategy.ts:38",{"_index":1073,"title":{},"body":{"injectables/JwtRefreshTokenStrategy.html":{}}}],["refreshhash",{"_index":1664,"title":{},"body":{"injectables/UserRefreshTokensService.html":{}}}],["refreshidentifier",{"_index":1663,"title":{},"body":{"injectables/UserRefreshTokensService.html":{}}}],["refreshtoken",{"_index":284,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/JwtAccessTokenPayloadDto.html":{},"classes/JwtRefreshTokenDto.html":{},"classes/JwtRefreshTokenPayloadDto.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"classes/JwtTokensDto.html":{}}}],["refreshtoken.id",{"_index":289,"title":{},"body":{"controllers/AuthController.html":{}}}],["refreshtoken.ppid",{"_index":1086,"title":{},"body":{"injectables/JwtRefreshTokenStrategy.html":{}}}],["refreshtokenid",{"_index":426,"title":{},"body":{"injectables/AuthService.html":{},"classes/JwtAccessTokenPayloadDto.html":{},"classes/JwtRefreshTokenDto.html":{},"classes/JwtRefreshTokenPayloadDto.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"classes/JwtTokensDto.html":{}}}],["refreshtokens",{"_index":202,"title":{},"body":{"controllers/AuthController.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"classes/UserEntity.html":{},"classes/UserRefreshTokenEntity.html":{}}}],["refreshtokens(@user",{"_index":293,"title":{},"body":{"controllers/AuthController.html":{}}}],["refreshtokens(user",{"_index":228,"title":{},"body":{"controllers/AuthController.html":{}}}],["refunded",{"_index":1947,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["register",{"_index":1104,"title":{},"body":{"modules/MultipartModule.html":{},"modules/SendGridModule.html":{}}}],["register(options",{"_index":1105,"title":{},"body":{"modules/MultipartModule.html":{},"modules/SendGridModule.html":{}}}],["registerasync",{"_index":1109,"title":{},"body":{"modules/MultipartModule.html":{},"modules/SendGridModule.html":{}}}],["registerasync(options",{"_index":1110,"title":{},"body":{"modules/MultipartModule.html":{},"modules/SendGridModule.html":{}}}],["rejectunauthorized",{"_index":140,"title":{},"body":{"controllers/AppController.html":{},"modules/AuthModule.html":{},"modules/DatabaseModule.html":{}}}],["relation",{"_index":879,"title":{},"body":{"injectables/FilesService.html":{},"classes/FindManyOptionsDto.html":{},"injectables/NotificationsService.html":{},"classes/SelectFilesDto.html":{},"classes/SelectNotificationsDto.html":{},"classes/SelectUserNotificationTokensDto.html":{},"classes/SelectUsersDto.html":{},"injectables/UsersService.html":{}}}],["relations",{"_index":977,"title":{},"body":{"classes/FindManyOptionsDto.html":{},"classes/FindOneOptionsDto.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/NotificationsService.html":{},"classes/SelectFileDto.html":{},"classes/SelectFilesDto.html":{},"classes/SelectNotificationsDto.html":{},"classes/SelectProfileDto.html":{},"classes/SelectUserDto.html":{},"classes/SelectUserNotificationTokenDto.html":{},"classes/SelectUserNotificationTokensDto.html":{},"classes/SelectUsersDto.html":{}}}],["removeoptions",{"_index":838,"title":{},"body":{"injectables/FilesService.html":{},"injectables/NotificationsService.html":{},"injectables/UserNotificationTokensService.html":{},"injectables/UserRefreshTokensService.html":{},"injectables/UsersService.html":{}}}],["rep",{"_index":779,"title":{},"body":{"controllers/FilesController.html":{},"injectables/FilesService.html":{}}}],["rep.request.headers.range",{"_index":906,"title":{},"body":{"injectables/FilesService.html":{}}}],["rep.request.headers.range.replace(/bytes",{"_index":919,"title":{},"body":{"injectables/FilesService.html":{}}}],["repository",{"_index":830,"title":{},"body":{"injectables/FilesService.html":{},"injectables/NotificationsService.html":{},"injectables/UserNotificationTokensService.html":{},"injectables/UserRefreshTokensService.html":{},"injectables/UsersService.html":{},"classes/user1615673396368.html":{}}}],["repository.save(data).catch((e",{"_index":2027,"title":{},"body":{"classes/user1615673396368.html":{}}}],["request",{"_index":49,"title":{},"body":{"classes/AllExceptionFilter.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["request.body",{"_index":71,"title":{},"body":{"classes/AllExceptionFilter.html":{}}}],["request.file(options).catch",{"_index":2080,"title":{},"body":{"miscellaneous/variables.html":{}}}],["request.method",{"_index":65,"title":{},"body":{"classes/AllExceptionFilter.html":{}}}],["request.params",{"_index":67,"title":{},"body":{"classes/AllExceptionFilter.html":{}}}],["request.query",{"_index":69,"title":{},"body":{"classes/AllExceptionFilter.html":{}}}],["request.user",{"_index":73,"title":{},"body":{"classes/AllExceptionFilter.html":{},"miscellaneous/variables.html":{}}}],["request.user[data",{"_index":2100,"title":{},"body":{"miscellaneous/variables.html":{}}}],["res",{"_index":792,"title":{},"body":{"controllers/FilesController.html":{}}}],["reset",{"_index":156,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/ConfigModule.html":{},"modules/FilesModule.html":{},"modules/NotificationsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["resetpassword",{"_index":203,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["resetpassword(@body",{"_index":300,"title":{},"body":{"controllers/AuthController.html":{}}}],["resetpassword(data",{"_index":232,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["resetpassworddto",{"_index":233,"title":{"classes/ResetPasswordDto.html":{}},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/ResetPasswordDto.html":{},"classes/SendResetPasswordDto.html":{},"coverage.html":{}}}],["response",{"_index":51,"title":{"interfaces/Response.html":{}},"body":{"classes/AllExceptionFilter.html":{},"classes/HttpExceptionFilter.html":{},"interfaces/Response.html":{},"injectables/SendGridService.html":{},"injectables/TransformInterceptor.html":{},"coverage.html":{}}}],["response.body.errors",{"_index":1413,"title":{},"body":{"injectables/SendGridService.html":{}}}],["response.status(statuscode).send",{"_index":76,"title":{},"body":{"classes/AllExceptionFilter.html":{},"classes/HttpExceptionFilter.html":{}}}],["result",{"_index":1289,"title":{},"body":{"classes/PaginationFilesDto.html":{},"classes/PaginationNotificationsDto.html":{},"classes/PaginationUserNotificationTokensDto.html":{},"classes/PaginationUsersDto.html":{},"miscellaneous/variables.html":{}}}],["results",{"_index":78,"title":{},"body":{"classes/AllExceptionFilter.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"modules/ConfigModule.html":{},"injectables/ConfigService.html":{},"classes/ConfirmationEmailDto.html":{},"classes/CreateFileDto.html":{},"interfaces/CreateMockFileReturn.html":{},"classes/CreateNotificationDto.html":{},"classes/CreateProfileDto.html":{},"classes/CreateUserDto.html":{},"classes/CreateUserNotificationTokenDto.html":{},"classes/CredentialsDto.html":{},"modules/DatabaseModule.html":{},"classes/DeleteUserNotificationTokenDto.html":{},"classes/DownloadFileDto.html":{},"classes/FileEntity.html":{},"classes/FileEntityPreview.html":{},"injectables/FileValidationPipe.html":{},"controllers/FilesController.html":{},"modules/FilesModule.html":{},"injectables/FilesService.html":{},"interfaces/FindManyBracketsOptions.html":{},"classes/FindManyOptionsDto.html":{},"classes/FindOneOptionsDto.html":{},"classes/HttpExceptionFilter.html":{},"classes/ID.html":{},"classes/JwtAccessTokenPayloadDto.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtRefreshGuard.html":{},"classes/JwtRefreshTokenDto.html":{},"classes/JwtRefreshTokenPayloadDto.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"classes/JwtTokensDto.html":{},"modules/MultipartModule.html":{},"interfaces/MultipartModuleAsyncOptions.html":{},"interfaces/MultipartOptionsFactory.html":{},"classes/NotificationEntity.html":{},"controllers/NotificationsController.html":{},"modules/NotificationsModule.html":{},"injectables/NotificationsService.html":{},"classes/PaginationFilesDto.html":{},"classes/PaginationNotificationsDto.html":{},"classes/PaginationUserNotificationTokensDto.html":{},"classes/PaginationUsersDto.html":{},"classes/ResetPasswordDto.html":{},"interfaces/Response.html":{},"classes/SelectFileDto.html":{},"classes/SelectFilesDto.html":{},"classes/SelectNotificationsDto.html":{},"classes/SelectProfileDto.html":{},"classes/SelectUserDto.html":{},"classes/SelectUserNotificationTokenDto.html":{},"classes/SelectUserNotificationTokensDto.html":{},"classes/SelectUsersDto.html":{},"modules/SendGridModule.html":{},"interfaces/SendGridModuleAsyncOptions.html":{},"interfaces/SendGridModuleOptions.html":{},"interfaces/SendGridOptionsFactory.html":{},"injectables/SendGridService.html":{},"classes/SendResetPasswordDto.html":{},"injectables/StorageS3Service.html":{},"injectables/StorageService.html":{},"injectables/TransformInterceptor.html":{},"classes/UpdateEmailDto.html":{},"classes/UpdateNotificationDto.html":{},"classes/UpdatePasswordDto.html":{},"classes/UpdateProfileDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserNotificationTokenDto.html":{},"classes/UploadedFile.html":{},"classes/UserEntity.html":{},"classes/UserNotificationTokenEntity.html":{},"controllers/UserNotificationTokensController.html":{},"injectables/UserNotificationTokensService.html":{},"classes/UserRefreshTokenEntity.html":{},"injectables/UserRefreshTokensService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"changelog.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"miscellaneous/typealiases.html":{},"unit-test.html":{},"classes/user1615673396368.html":{},"miscellaneous/variables.html":{}}}],["retrieved",{"_index":985,"title":{},"body":{"classes/FindManyOptionsDto.html":{},"classes/FindOneOptionsDto.html":{},"classes/SelectFileDto.html":{},"classes/SelectFilesDto.html":{},"classes/SelectNotificationsDto.html":{},"classes/SelectProfileDto.html":{},"classes/SelectUserDto.html":{},"classes/SelectUserNotificationTokenDto.html":{},"classes/SelectUserNotificationTokensDto.html":{},"classes/SelectUsersDto.html":{}}}],["return",{"_index":75,"title":{},"body":{"classes/AllExceptionFilter.html":{},"controllers/AppController.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/ConfigService.html":{},"interfaces/CreateMockFileReturn.html":{},"modules/DatabaseModule.html":{},"classes/FileEntity.html":{},"classes/FileEntityPreview.html":{},"injectables/FileValidationPipe.html":{},"controllers/FilesController.html":{},"injectables/FilesService.html":{},"classes/FindManyOptionsDto.html":{},"classes/FindOneOptionsDto.html":{},"classes/HttpExceptionFilter.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtRefreshGuard.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"modules/MultipartModule.html":{},"controllers/NotificationsController.html":{},"injectables/NotificationsService.html":{},"interfaces/Response.html":{},"classes/SelectFilesDto.html":{},"classes/SelectUsersDto.html":{},"modules/SendGridModule.html":{},"injectables/SendGridService.html":{},"injectables/StorageS3Service.html":{},"injectables/StorageService.html":{},"injectables/TransformInterceptor.html":{},"classes/UserEntity.html":{},"controllers/UserNotificationTokensController.html":{},"injectables/UserNotificationTokensService.html":{},"injectables/UserRefreshTokensService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"miscellaneous/variables.html":{}}}],["returned",{"_index":1932,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["returns",{"_index":34,"title":{},"body":{"classes/AllExceptionFilter.html":{},"controllers/AppController.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/ConfigService.html":{},"classes/FileEntity.html":{},"injectables/FileValidationPipe.html":{},"controllers/FilesController.html":{},"injectables/FilesService.html":{},"classes/FindManyOptionsDto.html":{},"classes/FindOneOptionsDto.html":{},"classes/HttpExceptionFilter.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtRefreshGuard.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"modules/MultipartModule.html":{},"interfaces/MultipartOptionsFactory.html":{},"controllers/NotificationsController.html":{},"injectables/NotificationsService.html":{},"modules/SendGridModule.html":{},"interfaces/SendGridOptionsFactory.html":{},"injectables/SendGridService.html":{},"injectables/StorageS3Service.html":{},"injectables/StorageService.html":{},"injectables/TransformInterceptor.html":{},"classes/UserEntity.html":{},"controllers/UserNotificationTokensController.html":{},"injectables/UserNotificationTokensService.html":{},"injectables/UserRefreshTokensService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"miscellaneous/functions.html":{},"classes/user1615673396368.html":{}}}],["right",{"_index":1374,"title":{},"body":{"interfaces/SendGridModuleAsyncOptions.html":{},"interfaces/SendGridModuleOptions.html":{},"interfaces/SendGridOptionsFactory.html":{}}}],["role",{"_index":452,"title":{},"body":{"injectables/AuthService.html":{},"classes/UserEntity.html":{},"classes/user1615673396368.html":{},"miscellaneous/variables.html":{}}}],["role.enum.ts",{"_index":1864,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["roles",{"_index":1054,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"miscellaneous/variables.html":{}}}],["roles)(target",{"_index":2114,"title":{},"body":{"miscellaneous/variables.html":{}}}],["roles.includes(user.role",{"_index":1057,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["roles}]${operation.summary",{"_index":2112,"title":{},"body":{"miscellaneous/variables.html":{}}}],["run",{"_index":1988,"title":{},"body":{"index.html":{}}}],["running",{"_index":1986,"title":{},"body":{"index.html":{}}}],["rxjs",{"_index":1312,"title":{},"body":{"interfaces/Response.html":{},"injectables/TransformInterceptor.html":{},"dependencies.html":{}}}],["rxjs/operators",{"_index":1310,"title":{},"body":{"interfaces/Response.html":{},"injectables/TransformInterceptor.html":{}}}],["s",{"_index":1905,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["s3",{"_index":715,"title":{},"body":{"classes/FileEntity.html":{},"classes/FileEntityPreview.html":{},"injectables/StorageS3Service.html":{}}}],["s3.bucketname",{"_index":1435,"title":{},"body":{"injectables/StorageS3Service.html":{}}}],["s3.objectkey",{"_index":1426,"title":{},"body":{"injectables/StorageS3Service.html":{}}}],["s3.service.ts",{"_index":1418,"title":{},"body":{"injectables/StorageS3Service.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["s3.service.ts:22",{"_index":1436,"title":{},"body":{"injectables/StorageS3Service.html":{}}}],["s3.service.ts:23",{"_index":1423,"title":{},"body":{"injectables/StorageS3Service.html":{}}}],["s3.service.ts:37",{"_index":1428,"title":{},"body":{"injectables/StorageS3Service.html":{}}}],["s3.service.ts:49",{"_index":1434,"title":{},"body":{"injectables/StorageS3Service.html":{}}}],["s3.service.ts:57",{"_index":1431,"title":{},"body":{"injectables/StorageS3Service.html":{}}}],["s3.service.ts:67",{"_index":1424,"title":{},"body":{"injectables/StorageS3Service.html":{}}}],["s3.service.ts:94",{"_index":1427,"title":{},"body":{"injectables/StorageS3Service.html":{}}}],["salt",{"_index":2042,"title":{},"body":{"miscellaneous/variables.html":{}}}],["saltrounds",{"_index":1758,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["same",{"_index":956,"title":{},"body":{"classes/FindManyOptionsDto.html":{},"classes/SelectFilesDto.html":{},"classes/SelectNotificationsDto.html":{},"classes/SelectUserNotificationTokensDto.html":{},"classes/SelectUsersDto.html":{}}}],["saveoptions",{"_index":835,"title":{},"body":{"injectables/FilesService.html":{},"injectables/NotificationsService.html":{},"injectables/UserNotificationTokensService.html":{},"injectables/UserRefreshTokensService.html":{},"injectables/UsersService.html":{}}}],["scrypt",{"_index":1759,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["scrypt(password",{"_index":2048,"title":{},"body":{"miscellaneous/variables.html":{}}}],["sdk",{"_index":1828,"title":{},"body":{"dependencies.html":{}}}],["sdk/clients/s3",{"_index":1443,"title":{},"body":{"injectables/StorageS3Service.html":{}}}],["sdk/lib/error",{"_index":1441,"title":{},"body":{"injectables/StorageS3Service.html":{}}}],["sdk/lib/request",{"_index":1439,"title":{},"body":{"injectables/StorageS3Service.html":{}}}],["search",{"_index":1972,"title":{},"body":{"miscellaneous/functions.html":{}}}],["search.helper.ts",{"_index":1767,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["searchalias",{"_index":1971,"title":{},"body":{"miscellaneous/functions.html":{}}}],["secret",{"_index":430,"title":{},"body":{"injectables/AuthService.html":{}}}],["secretaccesstoken",{"_index":352,"title":{},"body":{"injectables/AuthService.html":{}}}],["secretorkey",{"_index":1082,"title":{},"body":{"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{}}}],["secretrefreshtoken",{"_index":353,"title":{},"body":{"injectables/AuthService.html":{}}}],["select",{"_index":450,"title":{},"body":{"injectables/AuthService.html":{},"classes/FindOneOptionsDto.html":{},"injectables/NotificationsService.html":{},"classes/UserEntity.html":{}}}],["selectall",{"_index":766,"title":{},"body":{"controllers/FilesController.html":{},"injectables/FilesService.html":{},"controllers/NotificationsController.html":{},"injectables/NotificationsService.html":{},"controllers/UserNotificationTokensController.html":{},"injectables/UserNotificationTokensService.html":{},"injectables/UserRefreshTokensService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["selectall(@query",{"_index":809,"title":{},"body":{"controllers/FilesController.html":{},"controllers/UserNotificationTokensController.html":{},"controllers/UsersController.html":{}}}],["selectall(options",{"_index":780,"title":{},"body":{"controllers/FilesController.html":{},"injectables/FilesService.html":{},"controllers/NotificationsController.html":{},"injectables/NotificationsService.html":{},"controllers/UserNotificationTokensController.html":{},"injectables/UserNotificationTokensService.html":{},"injectables/UserRefreshTokensService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["selectfiledto",{"_index":784,"title":{"classes/SelectFileDto.html":{}},"body":{"controllers/FilesController.html":{},"classes/SelectFileDto.html":{},"coverage.html":{}}}],["selectfilesdto",{"_index":781,"title":{"classes/SelectFilesDto.html":{}},"body":{"controllers/FilesController.html":{},"classes/SelectFilesDto.html":{},"coverage.html":{}}}],["selectheadone",{"_index":1421,"title":{},"body":{"injectables/StorageS3Service.html":{}}}],["selectheadone(options",{"_index":1429,"title":{},"body":{"injectables/StorageS3Service.html":{}}}],["selection",{"_index":946,"title":{},"body":{"classes/FindManyOptionsDto.html":{},"classes/FindOneOptionsDto.html":{},"classes/SelectFileDto.html":{},"classes/SelectFilesDto.html":{},"classes/SelectNotificationsDto.html":{},"classes/SelectProfileDto.html":{},"classes/SelectUserDto.html":{},"classes/SelectUserNotificationTokenDto.html":{},"classes/SelectUserNotificationTokensDto.html":{},"classes/SelectUsersDto.html":{}}}],["selectnotificationsdto",{"_index":1164,"title":{"classes/SelectNotificationsDto.html":{}},"body":{"controllers/NotificationsController.html":{},"injectables/NotificationsService.html":{},"classes/SelectNotificationsDto.html":{},"coverage.html":{}}}],["selectone",{"_index":767,"title":{},"body":{"controllers/FilesController.html":{},"injectables/FilesService.html":{},"controllers/NotificationsController.html":{},"injectables/NotificationsService.html":{},"injectables/StorageService.html":{},"controllers/UserNotificationTokensController.html":{},"injectables/UserNotificationTokensService.html":{},"injectables/UserRefreshTokensService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["selectone(conditions",{"_index":455,"title":{},"body":{"injectables/AuthService.html":{},"controllers/FilesController.html":{},"injectables/FilesService.html":{},"controllers/NotificationsController.html":{},"injectables/NotificationsService.html":{},"controllers/UserNotificationTokensController.html":{},"injectables/UserNotificationTokensService.html":{},"injectables/UserRefreshTokensService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["selectone(file",{"_index":1477,"title":{},"body":{"injectables/StorageService.html":{}}}],["selectprofiledto",{"_index":237,"title":{"classes/SelectProfileDto.html":{}},"body":{"controllers/AuthController.html":{},"classes/SelectProfileDto.html":{},"coverage.html":{}}}],["selectquerybuilder",{"_index":845,"title":{},"body":{"injectables/FilesService.html":{},"injectables/NotificationsService.html":{},"injectables/UserNotificationTokensService.html":{},"injectables/UserRefreshTokensService.html":{},"injectables/UsersService.html":{},"miscellaneous/variables.html":{}}}],["selectuser",{"_index":204,"title":{},"body":{"controllers/AuthController.html":{}}}],["selectuser(undefined",{"_index":236,"title":{},"body":{"controllers/AuthController.html":{}}}],["selectuserdto",{"_index":1348,"title":{"classes/SelectUserDto.html":{}},"body":{"classes/SelectUserDto.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["selectusernotificationtokendto",{"_index":1350,"title":{"classes/SelectUserNotificationTokenDto.html":{}},"body":{"classes/SelectUserNotificationTokenDto.html":{},"controllers/UserNotificationTokensController.html":{},"coverage.html":{}}}],["selectusernotificationtokensdto",{"_index":1351,"title":{"classes/SelectUserNotificationTokensDto.html":{}},"body":{"classes/SelectUserNotificationTokensDto.html":{},"coverage.html":{}}}],["selectusersdto",{"_index":1352,"title":{"classes/SelectUsersDto.html":{}},"body":{"classes/SelectUsersDto.html":{},"controllers/UserNotificationTokensController.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["send",{"_index":928,"title":{},"body":{"injectables/FilesService.html":{}}}],["send(await",{"_index":916,"title":{},"body":{"injectables/FilesService.html":{}}}],["sendandcreateone",{"_index":1162,"title":{},"body":{"controllers/NotificationsController.html":{}}}],["sendandcreateone(data",{"_index":1167,"title":{},"body":{"controllers/NotificationsController.html":{}}}],["sendandcreateoneformany",{"_index":1194,"title":{},"body":{"injectables/NotificationsService.html":{}}}],["sendandcreateoneformany(conditions",{"_index":1212,"title":{},"body":{"injectables/NotificationsService.html":{}}}],["sendandcreateoneformanymulticast",{"_index":1195,"title":{},"body":{"injectables/NotificationsService.html":{}}}],["sendandcreateoneformanymulticast(conditions",{"_index":1214,"title":{},"body":{"injectables/NotificationsService.html":{}}}],["sendandcreateoneforone",{"_index":1196,"title":{},"body":{"injectables/NotificationsService.html":{}}}],["sendandcreateoneforone(conditions",{"_index":1216,"title":{},"body":{"injectables/NotificationsService.html":{}}}],["sendgrid.constants",{"_index":1365,"title":{},"body":{"modules/SendGridModule.html":{},"injectables/SendGridService.html":{}}}],["sendgrid.service",{"_index":1366,"title":{},"body":{"modules/SendGridModule.html":{}}}],["sendgrid/client/src/response",{"_index":1395,"title":{},"body":{"injectables/SendGridService.html":{}}}],["sendgrid/helpers/classes/mail",{"_index":1371,"title":{},"body":{"interfaces/SendGridModuleAsyncOptions.html":{},"interfaces/SendGridModuleOptions.html":{},"interfaces/SendGridOptionsFactory.html":{},"injectables/SendGridService.html":{}}}],["sendgrid/mail",{"_index":1396,"title":{},"body":{"injectables/SendGridService.html":{},"dependencies.html":{}}}],["sendgrid_module",{"_index":1364,"title":{},"body":{"modules/SendGridModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["sendgrid_module_options",{"_index":1363,"title":{},"body":{"modules/SendGridModule.html":{},"injectables/SendGridService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["sendgridmodule",{"_index":317,"title":{"modules/SendGridModule.html":{}},"body":{"modules/AuthModule.html":{},"modules/SendGridModule.html":{},"modules.html":{},"overview.html":{}}}],["sendgridmodule.registerasync",{"_index":343,"title":{},"body":{"modules/AuthModule.html":{}}}],["sendgridmoduleasyncoptions",{"_index":1357,"title":{"interfaces/SendGridModuleAsyncOptions.html":{}},"body":{"modules/SendGridModule.html":{},"interfaces/SendGridModuleAsyncOptions.html":{},"interfaces/SendGridModuleOptions.html":{},"interfaces/SendGridOptionsFactory.html":{},"coverage.html":{}}}],["sendgridmoduleoptions",{"_index":1360,"title":{"interfaces/SendGridModuleOptions.html":{}},"body":{"modules/SendGridModule.html":{},"interfaces/SendGridModuleAsyncOptions.html":{},"interfaces/SendGridModuleOptions.html":{},"interfaces/SendGridOptionsFactory.html":{},"injectables/SendGridService.html":{},"coverage.html":{}}}],["sendgridoptionsfactory",{"_index":1367,"title":{"interfaces/SendGridOptionsFactory.html":{}},"body":{"modules/SendGridModule.html":{},"interfaces/SendGridModuleAsyncOptions.html":{},"interfaces/SendGridModuleOptions.html":{},"interfaces/SendGridOptionsFactory.html":{},"coverage.html":{}}}],["sendgridservice",{"_index":364,"title":{"injectables/SendGridService.html":{}},"body":{"injectables/AuthService.html":{},"modules/SendGridModule.html":{},"injectables/SendGridService.html":{},"coverage.html":{}}}],["sendmail",{"_index":1381,"title":{},"body":{"injectables/SendGridService.html":{}}}],["sendmail(data",{"_index":1387,"title":{},"body":{"injectables/SendGridService.html":{}}}],["sendmultiplemail",{"_index":1382,"title":{},"body":{"injectables/SendGridService.html":{}}}],["sendmultiplemail(data",{"_index":1389,"title":{},"body":{"injectables/SendGridService.html":{}}}],["sendresetpassword",{"_index":205,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["sendresetpassword(@body",{"_index":298,"title":{},"body":{"controllers/AuthController.html":{}}}],["sendresetpassword(data",{"_index":240,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["sendresetpassworddto",{"_index":241,"title":{"classes/SendResetPasswordDto.html":{}},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/ResetPasswordDto.html":{},"classes/SendResetPasswordDto.html":{},"coverage.html":{}}}],["service",{"_index":486,"title":{},"body":{"injectables/ConfigService.html":{}}}],["services",{"_index":1173,"title":{},"body":{"controllers/NotificationsController.html":{},"modules/NotificationsModule.html":{},"controllers/UserNotificationTokensController.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{}}}],["set",{"_index":1546,"title":{},"body":{"classes/UserEntity.html":{},"index.html":{}}}],["setfindoptions(optionsorconditions",{"_index":1635,"title":{},"body":{"injectables/UserNotificationTokensService.html":{},"injectables/UserRefreshTokensService.html":{}}}],["setfindorder",{"_index":1766,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["setfindorder(qb",{"_index":1722,"title":{},"body":{"injectables/UsersService.html":{}}}],["setmetadata('roles",{"_index":2113,"title":{},"body":{"miscellaneous/variables.html":{}}}],["simplified",{"_index":980,"title":{},"body":{"classes/FindManyOptionsDto.html":{},"classes/FindOneOptionsDto.html":{},"classes/SelectFileDto.html":{},"classes/SelectFilesDto.html":{},"classes/SelectNotificationsDto.html":{},"classes/SelectProfileDto.html":{},"classes/SelectUserDto.html":{},"classes/SelectUserNotificationTokenDto.html":{},"classes/SelectUserNotificationTokensDto.html":{},"classes/SelectUsersDto.html":{}}}],["size",{"_index":377,"title":{},"body":{"injectables/AuthService.html":{},"injectables/StorageS3Service.html":{},"injectables/StorageService.html":{}}}],["size.tostring",{"_index":1464,"title":{},"body":{"injectables/StorageS3Service.html":{},"injectables/StorageService.html":{}}}],["skip",{"_index":948,"title":{},"body":{"classes/FindManyOptionsDto.html":{}}}],["sorry",{"_index":1936,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["sorting",{"_index":959,"title":{},"body":{"classes/FindManyOptionsDto.html":{},"classes/SelectFilesDto.html":{},"classes/SelectNotificationsDto.html":{},"classes/SelectUserNotificationTokensDto.html":{},"classes/SelectUsersDto.html":{}}}],["source",{"_index":4,"title":{},"body":{"classes/AllExceptionFilter.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"modules/ConfigModule.html":{},"injectables/ConfigService.html":{},"classes/ConfirmationEmailDto.html":{},"classes/CreateFileDto.html":{},"interfaces/CreateMockFileReturn.html":{},"classes/CreateNotificationDto.html":{},"classes/CreateProfileDto.html":{},"classes/CreateUserDto.html":{},"classes/CreateUserNotificationTokenDto.html":{},"classes/CredentialsDto.html":{},"modules/DatabaseModule.html":{},"classes/DeleteUserNotificationTokenDto.html":{},"classes/DownloadFileDto.html":{},"classes/FileEntity.html":{},"classes/FileEntityPreview.html":{},"injectables/FileValidationPipe.html":{},"controllers/FilesController.html":{},"modules/FilesModule.html":{},"injectables/FilesService.html":{},"interfaces/FindManyBracketsOptions.html":{},"classes/FindManyOptionsDto.html":{},"classes/FindOneOptionsDto.html":{},"classes/HttpExceptionFilter.html":{},"classes/ID.html":{},"classes/JwtAccessTokenPayloadDto.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtRefreshGuard.html":{},"classes/JwtRefreshTokenDto.html":{},"classes/JwtRefreshTokenPayloadDto.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"classes/JwtTokensDto.html":{},"modules/MultipartModule.html":{},"interfaces/MultipartModuleAsyncOptions.html":{},"interfaces/MultipartOptionsFactory.html":{},"classes/NotificationEntity.html":{},"controllers/NotificationsController.html":{},"modules/NotificationsModule.html":{},"injectables/NotificationsService.html":{},"classes/PaginationFilesDto.html":{},"classes/PaginationNotificationsDto.html":{},"classes/PaginationUserNotificationTokensDto.html":{},"classes/PaginationUsersDto.html":{},"classes/ResetPasswordDto.html":{},"interfaces/Response.html":{},"classes/SelectFileDto.html":{},"classes/SelectFilesDto.html":{},"classes/SelectNotificationsDto.html":{},"classes/SelectProfileDto.html":{},"classes/SelectUserDto.html":{},"classes/SelectUserNotificationTokenDto.html":{},"classes/SelectUserNotificationTokensDto.html":{},"classes/SelectUsersDto.html":{},"modules/SendGridModule.html":{},"interfaces/SendGridModuleAsyncOptions.html":{},"interfaces/SendGridModuleOptions.html":{},"interfaces/SendGridOptionsFactory.html":{},"injectables/SendGridService.html":{},"classes/SendResetPasswordDto.html":{},"injectables/StorageS3Service.html":{},"injectables/StorageService.html":{},"injectables/TransformInterceptor.html":{},"classes/UpdateEmailDto.html":{},"classes/UpdateNotificationDto.html":{},"classes/UpdatePasswordDto.html":{},"classes/UpdateProfileDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserNotificationTokenDto.html":{},"classes/UploadedFile.html":{},"classes/UserEntity.html":{},"classes/UserNotificationTokenEntity.html":{},"controllers/UserNotificationTokensController.html":{},"injectables/UserNotificationTokensService.html":{},"classes/UserRefreshTokenEntity.html":{},"injectables/UserRefreshTokensService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"classes/user1615673396368.html":{}}}],["specific",{"_index":509,"title":{},"body":{"injectables/ConfigService.html":{}}}],["specified",{"_index":958,"title":{},"body":{"classes/FindManyOptionsDto.html":{},"classes/SelectFilesDto.html":{},"classes/SelectNotificationsDto.html":{},"classes/SelectUserNotificationTokensDto.html":{},"classes/SelectUsersDto.html":{}}}],["specifies",{"_index":983,"title":{},"body":{"classes/FindManyOptionsDto.html":{},"classes/FindOneOptionsDto.html":{},"classes/SelectFileDto.html":{},"classes/SelectFilesDto.html":{},"classes/SelectNotificationsDto.html":{},"classes/SelectProfileDto.html":{},"classes/SelectUserDto.html":{},"classes/SelectUserNotificationTokenDto.html":{},"classes/SelectUserNotificationTokensDto.html":{},"classes/SelectUsersDto.html":{}}}],["split",{"_index":920,"title":{},"body":{"injectables/FilesService.html":{}}}],["src",{"_index":684,"title":{},"body":{"classes/FileEntity.html":{},"classes/FileEntityPreview.html":{}}}],["src/.../1615673396368",{"_index":2033,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../auth.constants.ts",{"_index":2031,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../config.interface.ts",{"_index":1856,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/.../crypto.helper.ts",{"_index":2032,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../dot",{"_index":2034,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../error",{"_index":1857,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/.../file.decorator.ts",{"_index":2035,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../float",{"_index":2036,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../main.ts",{"_index":1963,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../multipart",{"_index":2008,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["src/.../multipart.constants.ts",{"_index":2038,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../notifications",{"_index":1859,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/.../number.helper.ts",{"_index":2037,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../pagination.dto.ts",{"_index":1965,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../query",{"_index":1966,"title":{},"body":{"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["src/.../roles.decorator.ts",{"_index":2041,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../sendgrid.constants.ts",{"_index":2039,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../storage",{"_index":2007,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["src/.../user",{"_index":1863,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/.../user.decorator.ts",{"_index":2040,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/app.controller.ts",{"_index":83,"title":{},"body":{"controllers/AppController.html":{},"coverage.html":{}}}],["src/app.controller.ts:50",{"_index":90,"title":{},"body":{"controllers/AppController.html":{}}}],["src/app.module.ts",{"_index":158,"title":{},"body":{"modules/AppModule.html":{}}}],["src/common/decorators",{"_index":263,"title":{},"body":{"controllers/AuthController.html":{},"controllers/FilesController.html":{},"controllers/NotificationsController.html":{},"controllers/UserNotificationTokensController.html":{},"controllers/UsersController.html":{}}}],["src/common/decorators/roles.decorator.ts",{"_index":1748,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/common/decorators/user.decorator.ts",{"_index":1750,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/common/dto",{"_index":618,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/DownloadFileDto.html":{},"controllers/FilesController.html":{},"controllers/NotificationsController.html":{},"classes/PaginationFilesDto.html":{},"classes/PaginationNotificationsDto.html":{},"classes/PaginationUserNotificationTokensDto.html":{},"classes/PaginationUsersDto.html":{},"classes/SelectFileDto.html":{},"classes/SelectFilesDto.html":{},"classes/SelectNotificationsDto.html":{},"classes/SelectProfileDto.html":{},"classes/SelectUserDto.html":{},"classes/SelectUserNotificationTokenDto.html":{},"classes/SelectUserNotificationTokensDto.html":{},"classes/SelectUsersDto.html":{},"controllers/UserNotificationTokensController.html":{},"controllers/UsersController.html":{}}}],["src/common/dto/find",{"_index":937,"title":{},"body":{"classes/FindManyOptionsDto.html":{},"classes/FindOneOptionsDto.html":{},"coverage.html":{}}}],["src/common/dto/id/id.dto.ts",{"_index":1029,"title":{},"body":{"classes/ID.html":{},"coverage.html":{}}}],["src/common/dto/id/id.dto.ts:13",{"_index":1030,"title":{},"body":{"classes/ID.html":{}}}],["src/common/dto/pagination/pagination.dto.ts",{"_index":1753,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/common/enums",{"_index":414,"title":{},"body":{"injectables/AuthService.html":{},"injectables/FileValidationPipe.html":{},"injectables/FilesService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtRefreshGuard.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/NotificationsService.html":{},"injectables/StorageS3Service.html":{},"injectables/StorageService.html":{},"injectables/UserNotificationTokensService.html":{},"injectables/UserRefreshTokensService.html":{},"injectables/UsersService.html":{}}}],["src/common/enums/error",{"_index":1870,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/common/filters/all",{"_index":6,"title":{},"body":{"classes/AllExceptionFilter.html":{},"coverage.html":{}}}],["src/common/filters/http",{"_index":1026,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"coverage.html":{}}}],["src/common/helpers",{"_index":413,"title":{},"body":{"injectables/AuthService.html":{},"classes/FindManyOptionsDto.html":{},"classes/FindOneOptionsDto.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"classes/UserEntity.html":{},"injectables/UserRefreshTokensService.html":{}}}],["src/common/helpers/crypto.helper.ts",{"_index":1755,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/common/helpers/dot",{"_index":1760,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/common/helpers/number.helper.ts",{"_index":1762,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/common/helpers/query",{"_index":1764,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["src/common/interceptors/transform.interceptor.ts",{"_index":1308,"title":{},"body":{"interfaces/Response.html":{},"injectables/TransformInterceptor.html":{},"coverage.html":{}}}],["src/common/interceptors/transform.interceptor.ts:22",{"_index":1514,"title":{},"body":{"injectables/TransformInterceptor.html":{}}}],["src/common/interfaces",{"_index":855,"title":{},"body":{"injectables/FilesService.html":{}}}],["src/common/interfaces/find",{"_index":931,"title":{},"body":{"interfaces/FindManyBracketsOptions.html":{},"classes/FindManyOptionsDto.html":{},"coverage.html":{}}}],["src/config",{"_index":332,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"interfaces/CreateMockFileReturn.html":{},"modules/DatabaseModule.html":{},"injectables/FileValidationPipe.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/StorageS3Service.html":{},"injectables/StorageService.html":{}}}],["src/config/config.module.ts",{"_index":481,"title":{},"body":{"modules/ConfigModule.html":{}}}],["src/config/config.service.ts",{"_index":484,"title":{},"body":{"injectables/ConfigService.html":{},"coverage.html":{}}}],["src/config/config.service.ts:11",{"_index":489,"title":{},"body":{"injectables/ConfigService.html":{}}}],["src/config/config.service.ts:27",{"_index":506,"title":{},"body":{"injectables/ConfigService.html":{}}}],["src/config/config.service.ts:37",{"_index":513,"title":{},"body":{"injectables/ConfigService.html":{}}}],["src/config/config.service.ts:46",{"_index":492,"title":{},"body":{"injectables/ConfigService.html":{}}}],["src/config/interfaces/config.interface.ts",{"_index":1865,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/database/database.module.ts",{"_index":629,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["src/database/migrations/1615673396368",{"_index":1771,"title":{},"body":{"coverage.html":{},"classes/user1615673396368.html":{},"miscellaneous/variables.html":{}}}],["src/database/transformers/float",{"_index":1774,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/main.ts",{"_index":1778,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/modules/auth/auth.constants.ts",{"_index":1780,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/modules/auth/auth.controller.ts",{"_index":196,"title":{},"body":{"controllers/AuthController.html":{},"coverage.html":{}}}],["src/modules/auth/auth.controller.ts:104",{"_index":243,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/modules/auth/auth.controller.ts:113",{"_index":235,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/modules/auth/auth.controller.ts:122",{"_index":212,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/modules/auth/auth.controller.ts:134",{"_index":239,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/modules/auth/auth.controller.ts:149",{"_index":247,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/modules/auth/auth.controller.ts:164",{"_index":255,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/modules/auth/auth.controller.ts:179",{"_index":251,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/modules/auth/auth.controller.ts:58",{"_index":217,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/modules/auth/auth.controller.ts:67",{"_index":221,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/modules/auth/auth.controller.ts:78",{"_index":227,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/modules/auth/auth.controller.ts:90",{"_index":231,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/modules/auth/auth.module.ts",{"_index":320,"title":{},"body":{"modules/AuthModule.html":{}}}],["src/modules/auth/auth.service.ts",{"_index":349,"title":{},"body":{"injectables/AuthService.html":{},"coverage.html":{}}}],["src/modules/auth/auth.service.ts:108",{"_index":378,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/modules/auth/auth.service.ts:119",{"_index":369,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/modules/auth/auth.service.ts:133",{"_index":370,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/modules/auth/auth.service.ts:146",{"_index":402,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/modules/auth/auth.service.ts:166",{"_index":398,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/modules/auth/auth.service.ts:176",{"_index":395,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/modules/auth/auth.service.ts:194",{"_index":388,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/modules/auth/auth.service.ts:215",{"_index":387,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/modules/auth/auth.service.ts:230",{"_index":393,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/modules/auth/auth.service.ts:244",{"_index":391,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/modules/auth/auth.service.ts:34",{"_index":406,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/modules/auth/auth.service.ts:35",{"_index":405,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/modules/auth/auth.service.ts:36",{"_index":407,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/modules/auth/auth.service.ts:37",{"_index":367,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/modules/auth/auth.service.ts:65",{"_index":373,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/modules/auth/auth.service.ts:81",{"_index":383,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/modules/auth/auth.service.ts:97",{"_index":386,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/modules/auth/dto/confirmation",{"_index":533,"title":{},"body":{"classes/ConfirmationEmailDto.html":{},"coverage.html":{}}}],["src/modules/auth/dto/create",{"_index":599,"title":{},"body":{"classes/CreateProfileDto.html":{},"coverage.html":{}}}],["src/modules/auth/dto/credentials.dto.ts",{"_index":628,"title":{},"body":{"classes/CredentialsDto.html":{},"coverage.html":{}}}],["src/modules/auth/dto/jwt",{"_index":1032,"title":{},"body":{"classes/JwtAccessTokenPayloadDto.html":{},"classes/JwtRefreshTokenDto.html":{},"classes/JwtRefreshTokenPayloadDto.html":{},"classes/JwtTokensDto.html":{},"coverage.html":{}}}],["src/modules/auth/dto/reset",{"_index":1304,"title":{},"body":{"classes/ResetPasswordDto.html":{},"classes/SendResetPasswordDto.html":{},"coverage.html":{}}}],["src/modules/auth/dto/select",{"_index":1347,"title":{},"body":{"classes/SelectProfileDto.html":{},"coverage.html":{}}}],["src/modules/auth/dto/update",{"_index":1515,"title":{},"body":{"classes/UpdateEmailDto.html":{},"classes/UpdatePasswordDto.html":{},"classes/UpdateProfileDto.html":{},"coverage.html":{}}}],["src/modules/auth/guards",{"_index":1607,"title":{},"body":{"controllers/UserNotificationTokensController.html":{},"controllers/UsersController.html":{}}}],["src/modules/auth/guards/jwt",{"_index":1059,"title":{},"body":{"injectables/JwtRefreshGuard.html":{},"coverage.html":{}}}],["src/modules/auth/guards/jwt.guard.ts",{"_index":1037,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"coverage.html":{}}}],["src/modules/auth/guards/jwt.guard.ts:19",{"_index":1041,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["src/modules/auth/guards/jwt.guard.ts:35",{"_index":1044,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["src/modules/auth/strategies/jwt",{"_index":1068,"title":{},"body":{"injectables/JwtRefreshTokenStrategy.html":{},"coverage.html":{}}}],["src/modules/auth/strategies/jwt.strategy.ts",{"_index":1087,"title":{},"body":{"injectables/JwtStrategy.html":{},"coverage.html":{}}}],["src/modules/auth/strategies/jwt.strategy.ts:16",{"_index":1088,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["src/modules/auth/strategies/jwt.strategy.ts:36",{"_index":1089,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["src/modules/files/dto/create",{"_index":551,"title":{},"body":{"classes/CreateFileDto.html":{},"coverage.html":{}}}],["src/modules/files/dto/download",{"_index":669,"title":{},"body":{"classes/DownloadFileDto.html":{},"coverage.html":{}}}],["src/modules/files/dto/pagination",{"_index":1284,"title":{},"body":{"classes/PaginationFilesDto.html":{},"coverage.html":{}}}],["src/modules/files/dto/select.file.dto.ts",{"_index":1320,"title":{},"body":{"classes/SelectFileDto.html":{},"coverage.html":{}}}],["src/modules/files/dto/select.files.dto.ts",{"_index":1321,"title":{},"body":{"classes/SelectFilesDto.html":{},"coverage.html":{}}}],["src/modules/files/dto/select.files.dto.ts:20",{"_index":1324,"title":{},"body":{"classes/SelectFilesDto.html":{}}}],["src/modules/files/dto/select.files.dto.ts:25",{"_index":1330,"title":{},"body":{"classes/SelectFilesDto.html":{}}}],["src/modules/files/entities",{"_index":1569,"title":{},"body":{"classes/UserEntity.html":{}}}],["src/modules/files/entities/file.entity.ts",{"_index":678,"title":{},"body":{"classes/FileEntity.html":{},"classes/FileEntityPreview.html":{},"coverage.html":{}}}],["src/modules/files/entities/file.entity.ts:105",{"_index":689,"title":{},"body":{"classes/FileEntity.html":{}}}],["src/modules/files/entities/file.entity.ts:116",{"_index":712,"title":{},"body":{"classes/FileEntity.html":{}}}],["src/modules/files/entities/file.entity.ts:122",{"_index":743,"title":{},"body":{"classes/FileEntityPreview.html":{}}}],["src/modules/files/entities/file.entity.ts:27",{"_index":704,"title":{},"body":{"classes/FileEntity.html":{}}}],["src/modules/files/entities/file.entity.ts:36",{"_index":714,"title":{},"body":{"classes/FileEntity.html":{}}}],["src/modules/files/entities/file.entity.ts:52",{"_index":709,"title":{},"body":{"classes/FileEntity.html":{}}}],["src/modules/files/entities/file.entity.ts:59",{"_index":710,"title":{},"body":{"classes/FileEntity.html":{}}}],["src/modules/files/entities/file.entity.ts:66",{"_index":698,"title":{},"body":{"classes/FileEntity.html":{}}}],["src/modules/files/entities/file.entity.ts:73",{"_index":702,"title":{},"body":{"classes/FileEntity.html":{}}}],["src/modules/files/entities/file.entity.ts:80",{"_index":705,"title":{},"body":{"classes/FileEntity.html":{}}}],["src/modules/files/entities/file.entity.ts:87",{"_index":695,"title":{},"body":{"classes/FileEntity.html":{}}}],["src/modules/files/entities/file.entity.ts:94",{"_index":697,"title":{},"body":{"classes/FileEntity.html":{}}}],["src/modules/files/files.controller.ts",{"_index":761,"title":{},"body":{"controllers/FilesController.html":{},"coverage.html":{}}}],["src/modules/files/files.controller.ts:105",{"_index":789,"title":{},"body":{"controllers/FilesController.html":{}}}],["src/modules/files/files.controller.ts:122",{"_index":775,"title":{},"body":{"controllers/FilesController.html":{}}}],["src/modules/files/files.controller.ts:134",{"_index":778,"title":{},"body":{"controllers/FilesController.html":{}}}],["src/modules/files/files.controller.ts:60",{"_index":772,"title":{},"body":{"controllers/FilesController.html":{}}}],["src/modules/files/files.controller.ts:72",{"_index":783,"title":{},"body":{"controllers/FilesController.html":{}}}],["src/modules/files/files.controller.ts:86",{"_index":786,"title":{},"body":{"controllers/FilesController.html":{}}}],["src/modules/files/files.module.ts",{"_index":824,"title":{},"body":{"modules/FilesModule.html":{}}}],["src/modules/files/files.service.ts",{"_index":827,"title":{},"body":{"injectables/FilesService.html":{},"coverage.html":{}}}],["src/modules/files/files.service.ts:106",{"_index":848,"title":{},"body":{"injectables/FilesService.html":{}}}],["src/modules/files/files.service.ts:133",{"_index":849,"title":{},"body":{"injectables/FilesService.html":{}}}],["src/modules/files/files.service.ts:154",{"_index":839,"title":{},"body":{"injectables/FilesService.html":{}}}],["src/modules/files/files.service.ts:173",{"_index":840,"title":{},"body":{"injectables/FilesService.html":{}}}],["src/modules/files/files.service.ts:28",{"_index":832,"title":{},"body":{"injectables/FilesService.html":{}}}],["src/modules/files/files.service.ts:45",{"_index":836,"title":{},"body":{"injectables/FilesService.html":{}}}],["src/modules/files/files.service.ts:65",{"_index":843,"title":{},"body":{"injectables/FilesService.html":{}}}],["src/modules/files/files.service.ts:90",{"_index":847,"title":{},"body":{"injectables/FilesService.html":{}}}],["src/modules/notifications/dto/create",{"_index":586,"title":{},"body":{"classes/CreateNotificationDto.html":{},"coverage.html":{}}}],["src/modules/notifications/dto/pagination",{"_index":1292,"title":{},"body":{"classes/PaginationNotificationsDto.html":{},"coverage.html":{}}}],["src/modules/notifications/dto/select",{"_index":1335,"title":{},"body":{"classes/SelectNotificationsDto.html":{},"coverage.html":{}}}],["src/modules/notifications/dto/update",{"_index":1521,"title":{},"body":{"classes/UpdateNotificationDto.html":{},"coverage.html":{}}}],["src/modules/notifications/entities/notification.entity.ts",{"_index":1141,"title":{},"body":{"classes/NotificationEntity.html":{},"coverage.html":{}}}],["src/modules/notifications/entities/notification.entity.ts:23",{"_index":1143,"title":{},"body":{"classes/NotificationEntity.html":{}}}],["src/modules/notifications/entities/notification.entity.ts:30",{"_index":1148,"title":{},"body":{"classes/NotificationEntity.html":{}}}],["src/modules/notifications/entities/notification.entity.ts:37",{"_index":1153,"title":{},"body":{"classes/NotificationEntity.html":{}}}],["src/modules/notifications/entities/notification.entity.ts:48",{"_index":1144,"title":{},"body":{"classes/NotificationEntity.html":{}}}],["src/modules/notifications/entities/notification.entity.ts:55",{"_index":1151,"title":{},"body":{"classes/NotificationEntity.html":{}}}],["src/modules/notifications/entities/notification.entity.ts:66",{"_index":1142,"title":{},"body":{"classes/NotificationEntity.html":{}}}],["src/modules/notifications/entities/notification.entity.ts:78",{"_index":1156,"title":{},"body":{"classes/NotificationEntity.html":{}}}],["src/modules/notifications/enums/notifications",{"_index":1899,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/modules/notifications/notifications.controller.ts",{"_index":1160,"title":{},"body":{"controllers/NotificationsController.html":{},"coverage.html":{}}}],["src/modules/notifications/notifications.controller.ts:104",{"_index":1163,"title":{},"body":{"controllers/NotificationsController.html":{}}}],["src/modules/notifications/notifications.controller.ts:45",{"_index":1168,"title":{},"body":{"controllers/NotificationsController.html":{}}}],["src/modules/notifications/notifications.controller.ts:61",{"_index":1165,"title":{},"body":{"controllers/NotificationsController.html":{}}}],["src/modules/notifications/notifications.controller.ts:75",{"_index":1166,"title":{},"body":{"controllers/NotificationsController.html":{}}}],["src/modules/notifications/notifications.controller.ts:90",{"_index":1171,"title":{},"body":{"controllers/NotificationsController.html":{}}}],["src/modules/notifications/notifications.module.ts",{"_index":1186,"title":{},"body":{"modules/NotificationsModule.html":{}}}],["src/modules/notifications/services/notifications.service.ts",{"_index":1189,"title":{},"body":{"injectables/NotificationsService.html":{},"coverage.html":{}}}],["src/modules/notifications/services/notifications.service.ts:103",{"_index":1210,"title":{},"body":{"injectables/NotificationsService.html":{}}}],["src/modules/notifications/services/notifications.service.ts:123",{"_index":1211,"title":{},"body":{"injectables/NotificationsService.html":{}}}],["src/modules/notifications/services/notifications.service.ts:139",{"_index":1220,"title":{},"body":{"injectables/NotificationsService.html":{}}}],["src/modules/notifications/services/notifications.service.ts:156",{"_index":1222,"title":{},"body":{"injectables/NotificationsService.html":{}}}],["src/modules/notifications/services/notifications.service.ts:176",{"_index":1205,"title":{},"body":{"injectables/NotificationsService.html":{}}}],["src/modules/notifications/services/notifications.service.ts:192",{"_index":1208,"title":{},"body":{"injectables/NotificationsService.html":{}}}],["src/modules/notifications/services/notifications.service.ts:203",{"_index":1215,"title":{},"body":{"injectables/NotificationsService.html":{}}}],["src/modules/notifications/services/notifications.service.ts:227",{"_index":1213,"title":{},"body":{"injectables/NotificationsService.html":{}}}],["src/modules/notifications/services/notifications.service.ts:258",{"_index":1217,"title":{},"body":{"injectables/NotificationsService.html":{}}}],["src/modules/notifications/services/notifications.service.ts:29",{"_index":1199,"title":{},"body":{"injectables/NotificationsService.html":{}}}],["src/modules/notifications/services/notifications.service.ts:32",{"_index":1224,"title":{},"body":{"injectables/NotificationsService.html":{}}}],["src/modules/notifications/services/notifications.service.ts:33",{"_index":1225,"title":{},"body":{"injectables/NotificationsService.html":{}}}],["src/modules/notifications/services/notifications.service.ts:34",{"_index":1226,"title":{},"body":{"injectables/NotificationsService.html":{}}}],["src/modules/notifications/services/notifications.service.ts:42",{"_index":1201,"title":{},"body":{"injectables/NotificationsService.html":{}}}],["src/modules/notifications/services/notifications.service.ts:59",{"_index":1204,"title":{},"body":{"injectables/NotificationsService.html":{}}}],["src/modules/notifications/services/notifications.service.ts:75",{"_index":1206,"title":{},"body":{"injectables/NotificationsService.html":{}}}],["src/modules/users/controllers/user",{"_index":1595,"title":{},"body":{"controllers/UserNotificationTokensController.html":{},"coverage.html":{}}}],["src/modules/users/controllers/users.controller.ts",{"_index":1678,"title":{},"body":{"controllers/UsersController.html":{},"coverage.html":{}}}],["src/modules/users/controllers/users.controller.ts:100",{"_index":1682,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/modules/users/controllers/users.controller.ts:53",{"_index":1680,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/modules/users/controllers/users.controller.ts:63",{"_index":1684,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/modules/users/controllers/users.controller.ts:73",{"_index":1685,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/modules/users/controllers/users.controller.ts:87",{"_index":1687,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/modules/users/dto/create",{"_index":601,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/CreateUserNotificationTokenDto.html":{},"coverage.html":{}}}],["src/modules/users/dto/delete",{"_index":663,"title":{},"body":{"classes/DeleteUserNotificationTokenDto.html":{},"coverage.html":{}}}],["src/modules/users/dto/pagination",{"_index":1298,"title":{},"body":{"classes/PaginationUserNotificationTokensDto.html":{},"classes/PaginationUsersDto.html":{},"coverage.html":{}}}],["src/modules/users/dto/select",{"_index":1349,"title":{},"body":{"classes/SelectUserDto.html":{},"classes/SelectUserNotificationTokenDto.html":{},"classes/SelectUserNotificationTokensDto.html":{},"classes/SelectUsersDto.html":{},"coverage.html":{}}}],["src/modules/users/dto/update",{"_index":1527,"title":{},"body":{"classes/UpdateUserDto.html":{},"classes/UpdateUserNotificationTokenDto.html":{},"coverage.html":{}}}],["src/modules/users/entities",{"_index":726,"title":{},"body":{"classes/FileEntity.html":{},"classes/FileEntityPreview.html":{},"injectables/JwtAuthGuard.html":{},"classes/NotificationEntity.html":{},"injectables/NotificationsService.html":{},"classes/SelectProfileDto.html":{},"classes/UserNotificationTokenEntity.html":{},"classes/user1615673396368.html":{}}}],["src/modules/users/entities/user",{"_index":1586,"title":{},"body":{"classes/UserNotificationTokenEntity.html":{},"classes/UserRefreshTokenEntity.html":{},"coverage.html":{}}}],["src/modules/users/entities/user.entity.ts",{"_index":1541,"title":{},"body":{"classes/UserEntity.html":{},"coverage.html":{}}}],["src/modules/users/entities/user.entity.ts:109",{"_index":1549,"title":{},"body":{"classes/UserEntity.html":{}}}],["src/modules/users/entities/user.entity.ts:119",{"_index":1566,"title":{},"body":{"classes/UserEntity.html":{}}}],["src/modules/users/entities/user.entity.ts:126",{"_index":1551,"title":{},"body":{"classes/UserEntity.html":{}}}],["src/modules/users/entities/user.entity.ts:33",{"_index":1556,"title":{},"body":{"classes/UserEntity.html":{}}}],["src/modules/users/entities/user.entity.ts:40",{"_index":1564,"title":{},"body":{"classes/UserEntity.html":{}}}],["src/modules/users/entities/user.entity.ts:47",{"_index":1563,"title":{},"body":{"classes/UserEntity.html":{}}}],["src/modules/users/entities/user.entity.ts:54",{"_index":1555,"title":{},"body":{"classes/UserEntity.html":{}}}],["src/modules/users/entities/user.entity.ts:61",{"_index":1561,"title":{},"body":{"classes/UserEntity.html":{}}}],["src/modules/users/entities/user.entity.ts:68",{"_index":1568,"title":{},"body":{"classes/UserEntity.html":{}}}],["src/modules/users/entities/user.entity.ts:85",{"_index":1547,"title":{},"body":{"classes/UserEntity.html":{}}}],["src/modules/users/entities/user.entity.ts:92",{"_index":1562,"title":{},"body":{"classes/UserEntity.html":{}}}],["src/modules/users/entities/user.entity.ts:99",{"_index":1558,"title":{},"body":{"classes/UserEntity.html":{}}}],["src/modules/users/enums",{"_index":1049,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"classes/user1615673396368.html":{}}}],["src/modules/users/enums/user",{"_index":1959,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/modules/users/services",{"_index":1232,"title":{},"body":{"injectables/NotificationsService.html":{}}}],["src/modules/users/services/user",{"_index":1615,"title":{},"body":{"injectables/UserNotificationTokensService.html":{},"injectables/UserRefreshTokensService.html":{},"coverage.html":{}}}],["src/modules/users/services/users.service.ts",{"_index":1700,"title":{},"body":{"injectables/UsersService.html":{},"coverage.html":{}}}],["src/modules/users/services/users.service.ts:106",{"_index":1708,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/modules/users/services/users.service.ts:126",{"_index":1709,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/modules/users/services/users.service.ts:147",{"_index":1705,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/modules/users/services/users.service.ts:24",{"_index":1703,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/modules/users/services/users.service.ts:31",{"_index":1711,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/modules/users/services/users.service.ts:39",{"_index":1704,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/modules/users/services/users.service.ts:57",{"_index":1706,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/modules/users/services/users.service.ts:90",{"_index":1707,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/modules/users/users.module.ts",{"_index":1698,"title":{},"body":{"modules/UsersModule.html":{}}}],["src/multipart",{"_index":561,"title":{},"body":{"classes/CreateFileDto.html":{},"injectables/FilesService.html":{}}}],["src/multipart/decorators",{"_index":795,"title":{},"body":{"controllers/FilesController.html":{}}}],["src/multipart/decorators/file.decorator.ts",{"_index":1803,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/multipart/dto/uploaded",{"_index":1532,"title":{},"body":{"classes/UploadedFile.html":{},"coverage.html":{}}}],["src/multipart/interfaces/multipart",{"_index":1130,"title":{},"body":{"interfaces/MultipartModuleAsyncOptions.html":{},"interfaces/MultipartOptionsFactory.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["src/multipart/multipart.constants.ts",{"_index":1805,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/multipart/multipart.module.ts",{"_index":1094,"title":{},"body":{"modules/MultipartModule.html":{}}}],["src/multipart/multipart.module.ts:23",{"_index":1107,"title":{},"body":{"modules/MultipartModule.html":{}}}],["src/multipart/multipart.module.ts:39",{"_index":1111,"title":{},"body":{"modules/MultipartModule.html":{}}}],["src/multipart/multipart.module.ts:56",{"_index":1103,"title":{},"body":{"modules/MultipartModule.html":{}}}],["src/multipart/multipart.module.ts:73",{"_index":1099,"title":{},"body":{"modules/MultipartModule.html":{}}}],["src/multipart/pipes/file",{"_index":745,"title":{},"body":{"injectables/FileValidationPipe.html":{},"coverage.html":{}}}],["src/multipart/storage",{"_index":1417,"title":{},"body":{"injectables/StorageS3Service.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["src/multipart/storage.service.ts",{"_index":1467,"title":{},"body":{"injectables/StorageService.html":{},"coverage.html":{}}}],["src/multipart/storage.service.ts:112",{"_index":1474,"title":{},"body":{"injectables/StorageService.html":{}}}],["src/multipart/storage.service.ts:24",{"_index":1482,"title":{},"body":{"injectables/StorageService.html":{}}}],["src/multipart/storage.service.ts:31",{"_index":1471,"title":{},"body":{"injectables/StorageService.html":{}}}],["src/multipart/storage.service.ts:41",{"_index":1480,"title":{},"body":{"injectables/StorageService.html":{}}}],["src/multipart/storage.service.ts:49",{"_index":1476,"title":{},"body":{"injectables/StorageService.html":{}}}],["src/multipart/storage.service.ts:56",{"_index":1475,"title":{},"body":{"injectables/StorageService.html":{}}}],["src/multipart/storage.service.ts:69",{"_index":1472,"title":{},"body":{"injectables/StorageService.html":{}}}],["src/multipart/storage.service.ts:97",{"_index":1478,"title":{},"body":{"injectables/StorageService.html":{}}}],["src/sendgrid",{"_index":338,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{}}}],["src/sendgrid/interfaces/sendgrid",{"_index":1369,"title":{},"body":{"interfaces/SendGridModuleAsyncOptions.html":{},"interfaces/SendGridModuleOptions.html":{},"interfaces/SendGridOptionsFactory.html":{},"coverage.html":{}}}],["src/sendgrid/sendgrid.constants.ts",{"_index":1809,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/sendgrid/sendgrid.module.ts",{"_index":1356,"title":{},"body":{"modules/SendGridModule.html":{}}}],["src/sendgrid/sendgrid.module.ts:20",{"_index":1361,"title":{},"body":{"modules/SendGridModule.html":{}}}],["src/sendgrid/sendgrid.module.ts:37",{"_index":1362,"title":{},"body":{"modules/SendGridModule.html":{}}}],["src/sendgrid/sendgrid.module.ts:55",{"_index":1359,"title":{},"body":{"modules/SendGridModule.html":{}}}],["src/sendgrid/sendgrid.module.ts:73",{"_index":1358,"title":{},"body":{"modules/SendGridModule.html":{}}}],["src/sendgrid/sendgrid.service.ts",{"_index":1378,"title":{},"body":{"injectables/SendGridService.html":{},"coverage.html":{}}}],["src/sendgrid/sendgrid.service.ts:14",{"_index":1392,"title":{},"body":{"injectables/SendGridService.html":{}}}],["src/sendgrid/sendgrid.service.ts:16",{"_index":1386,"title":{},"body":{"injectables/SendGridService.html":{}}}],["src/sendgrid/sendgrid.service.ts:19",{"_index":1384,"title":{},"body":{"injectables/SendGridService.html":{}}}],["src/sendgrid/sendgrid.service.ts:38",{"_index":1388,"title":{},"body":{"injectables/SendGridService.html":{}}}],["src/sendgrid/sendgrid.service.ts:48",{"_index":1390,"title":{},"body":{"injectables/SendGridService.html":{}}}],["ssl",{"_index":637,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["start",{"_index":924,"title":{},"body":{"injectables/FilesService.html":{},"miscellaneous/enumerations.html":{},"index.html":{}}}],["start:dev",{"_index":1990,"title":{},"body":{"index.html":{}}}],["start:prodtest",{"_index":1991,"title":{},"body":{"index.html":{}}}],["started",{"_index":1730,"title":{"changelog.html":{},"index.html":{}},"body":{}}],["stat",{"_index":1486,"title":{},"body":{"injectables/StorageService.html":{}}}],["stat(filedest",{"_index":1508,"title":{},"body":{"injectables/StorageService.html":{}}}],["stat(filepath",{"_index":1505,"title":{},"body":{"injectables/StorageService.html":{}}}],["stat(this.destination",{"_index":1494,"title":{},"body":{"injectables/StorageService.html":{}}}],["statements",{"_index":1745,"title":{},"body":{"coverage.html":{},"unit-test.html":{}}}],["static",{"_index":1095,"title":{},"body":{"modules/MultipartModule.html":{},"modules/SendGridModule.html":{}}}],["status",{"_index":85,"title":{},"body":{"controllers/AppController.html":{},"classes/NotificationEntity.html":{},"injectables/NotificationsService.html":{},"classes/SelectNotificationsDto.html":{},"classes/SelectUsersDto.html":{},"classes/UpdateNotificationDto.html":{},"classes/UserEntity.html":{}}}],["status(200",{"_index":908,"title":{},"body":{"injectables/FilesService.html":{}}}],["status(206",{"_index":929,"title":{},"body":{"injectables/FilesService.html":{}}}],["status(416",{"_index":927,"title":{},"body":{"injectables/FilesService.html":{}}}],["status.enum.ts",{"_index":1860,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["statuscode",{"_index":53,"title":{},"body":{"classes/AllExceptionFilter.html":{},"classes/HttpExceptionFilter.html":{}}}],["storage.service",{"_index":1118,"title":{},"body":{"modules/MultipartModule.html":{}}}],["storages3service",{"_index":1416,"title":{"injectables/StorageS3Service.html":{}},"body":{"injectables/StorageS3Service.html":{},"coverage.html":{}}}],["storageservice",{"_index":831,"title":{"injectables/StorageService.html":{}},"body":{"injectables/FilesService.html":{},"modules/MultipartModule.html":{},"injectables/StorageService.html":{},"coverage.html":{}}}],["store",{"_index":327,"title":{},"body":{"modules/AuthModule.html":{},"dependencies.html":{}}}],["strategies",{"_index":334,"title":{},"body":{"modules/AuthModule.html":{}}}],["strategy",{"_index":1075,"title":{},"body":{"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{}}}],["stream",{"_index":571,"title":{},"body":{"interfaces/CreateMockFileReturn.html":{}}}],["stream.readable",{"_index":570,"title":{},"body":{"interfaces/CreateMockFileReturn.html":{}}}],["stream.readable.from(buffer.tostring",{"_index":580,"title":{},"body":{"interfaces/CreateMockFileReturn.html":{}}}],["stream/promises",{"_index":1491,"title":{},"body":{"injectables/StorageService.html":{}}}],["string",{"_index":374,"title":{},"body":{"injectables/AuthService.html":{},"injectables/ConfigService.html":{},"classes/ConfirmationEmailDto.html":{},"classes/CreateFileDto.html":{},"interfaces/CreateMockFileReturn.html":{},"classes/CreateNotificationDto.html":{},"classes/CreateUserDto.html":{},"classes/CreateUserNotificationTokenDto.html":{},"classes/DeleteUserNotificationTokenDto.html":{},"classes/DownloadFileDto.html":{},"classes/FileEntity.html":{},"classes/FileEntityPreview.html":{},"injectables/FileValidationPipe.html":{},"controllers/FilesController.html":{},"classes/FindManyOptionsDto.html":{},"classes/FindOneOptionsDto.html":{},"classes/ID.html":{},"classes/JwtAccessTokenPayloadDto.html":{},"classes/JwtRefreshTokenDto.html":{},"classes/JwtRefreshTokenPayloadDto.html":{},"classes/JwtTokensDto.html":{},"modules/MultipartModule.html":{},"classes/NotificationEntity.html":{},"classes/ResetPasswordDto.html":{},"interfaces/Response.html":{},"classes/SelectFileDto.html":{},"classes/SelectFilesDto.html":{},"classes/SelectNotificationsDto.html":{},"classes/SelectProfileDto.html":{},"classes/SelectUserDto.html":{},"classes/SelectUserNotificationTokenDto.html":{},"classes/SelectUserNotificationTokensDto.html":{},"classes/SelectUsersDto.html":{},"modules/SendGridModule.html":{},"interfaces/SendGridModuleAsyncOptions.html":{},"interfaces/SendGridModuleOptions.html":{},"interfaces/SendGridOptionsFactory.html":{},"classes/SendResetPasswordDto.html":{},"injectables/StorageS3Service.html":{},"injectables/StorageService.html":{},"injectables/TransformInterceptor.html":{},"classes/UpdateEmailDto.html":{},"classes/UpdatePasswordDto.html":{},"classes/UpdateProfileDto.html":{},"classes/UploadedFile.html":{},"classes/UserEntity.html":{},"classes/UserNotificationTokenEntity.html":{},"classes/UserRefreshTokenEntity.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["sub",{"_index":2074,"title":{},"body":{"miscellaneous/variables.html":{}}}],["subject",{"_index":469,"title":{},"body":{"injectables/AuthService.html":{}}}],["subscription",{"_index":1952,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["substitutionwrappers",{"_index":1373,"title":{},"body":{"interfaces/SendGridModuleAsyncOptions.html":{},"interfaces/SendGridModuleOptions.html":{},"interfaces/SendGridOptionsFactory.html":{}}}],["summary",{"_index":2110,"title":{},"body":{"miscellaneous/variables.html":{}}}],["super",{"_index":740,"title":{},"body":{"classes/FileEntity.html":{},"classes/FileEntityPreview.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtRefreshGuard.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"classes/PaginationFilesDto.html":{},"classes/PaginationNotificationsDto.html":{},"classes/PaginationUserNotificationTokensDto.html":{},"classes/PaginationUsersDto.html":{},"injectables/SendGridService.html":{}}}],["support",{"_index":1921,"title":{},"body":{"miscellaneous/enumerations.html":{},"modules.html":{}}}],["svg",{"_index":1998,"title":{},"body":{"modules.html":{}}}],["swagger",{"_index":1844,"title":{},"body":{"dependencies.html":{}}}],["symbol",{"_index":2102,"title":{},"body":{"miscellaneous/variables.html":{}}}],["synchronize",{"_index":652,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["t",{"_index":493,"title":{},"body":{"injectables/ConfigService.html":{},"interfaces/Response.html":{},"injectables/TransformInterceptor.html":{}}}],["table",{"_index":1816,"title":{},"body":{"coverage.html":{},"unit-test.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":1815,"title":{},"body":{"coverage.html":{},"unit-test.html":{}}}],["take",{"_index":944,"title":{},"body":{"classes/FindManyOptionsDto.html":{},"classes/SelectFilesDto.html":{},"classes/SelectNotificationsDto.html":{},"classes/SelectUserNotificationTokensDto.html":{},"classes/SelectUsersDto.html":{}}}],["taken",{"_index":968,"title":{},"body":{"classes/FindManyOptionsDto.html":{},"classes/SelectFilesDto.html":{},"classes/SelectNotificationsDto.html":{},"classes/SelectUserNotificationTokensDto.html":{},"classes/SelectUsersDto.html":{}}}],["target",{"_index":2060,"title":{},"body":{"miscellaneous/variables.html":{}}}],["target[part",{"_index":2064,"title":{},"body":{"miscellaneous/variables.html":{}}}],["target[parts[0",{"_index":2066,"title":{},"body":{"miscellaneous/variables.html":{}}}],["terminusmodule",{"_index":163,"title":{},"body":{"modules/AppModule.html":{}}}],["test",{"_index":1868,"title":{"unit-test.html":{}},"body":{"miscellaneous/enumerations.html":{},"index.html":{},"unit-test.html":{}}}],["test/.../mock",{"_index":1964,"title":{},"body":{"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["test/utils/mock",{"_index":565,"title":{},"body":{"interfaces/CreateMockFileReturn.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["test:cov",{"_index":1996,"title":{},"body":{"index.html":{}}}],["test:e2e",{"_index":1995,"title":{},"body":{"index.html":{}}}],["tests",{"_index":1993,"title":{},"body":{"index.html":{}}}],["text",{"_index":470,"title":{},"body":{"injectables/AuthService.html":{}}}],["then((data",{"_index":885,"title":{},"body":{"injectables/FilesService.html":{},"injectables/NotificationsService.html":{},"injectables/UsersService.html":{}}}],["this.allowedtypes",{"_index":756,"title":{},"body":{"injectables/FileValidationPipe.html":{}}}],["this.allowedtypes.includes(value.mimetype",{"_index":758,"title":{},"body":{"injectables/FileValidationPipe.html":{}}}],["this.asc",{"_index":1003,"title":{},"body":{"classes/FindManyOptionsDto.html":{}}}],["this.authservice.createtoken(data",{"_index":279,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.authservice.createuser(data",{"_index":281,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.authservice.generatetokens(user",{"_index":297,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.authservice.resetpassword(data",{"_index":301,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.authservice.sendresetpassword(data",{"_index":299,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.authservice.updateemail(data",{"_index":312,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.authservice.updatepassword(data",{"_index":310,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.authservice.validateemailcode(data",{"_index":303,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.authservice.validateuser",{"_index":1084,"title":{},"body":{"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{}}}],["this.bucket",{"_index":1446,"title":{},"body":{"injectables/StorageS3Service.html":{}}}],["this.cachemanager.del(id",{"_index":475,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.cachemanager.get(user.id",{"_index":462,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.cachemanager.set(id",{"_index":466,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.configservice.get('aws_s3_bucket",{"_index":1447,"title":{},"body":{"injectables/StorageS3Service.html":{}}}],["this.configservice.get('jwt_expires_access_token",{"_index":421,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.configservice.get('jwt_expires_refresh_token",{"_index":419,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.configservice.get('jwt_secret_access_token",{"_index":425,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.configservice.get('jwt_secret_refresh_token",{"_index":423,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.configservice.get('redis_host",{"_index":133,"title":{},"body":{"controllers/AppController.html":{}}}],["this.configservice.get('redis_password",{"_index":138,"title":{},"body":{"controllers/AppController.html":{}}}],["this.configservice.get('redis_port",{"_index":135,"title":{},"body":{"controllers/AppController.html":{}}}],["this.configservice.get('redis_tls",{"_index":136,"title":{},"body":{"controllers/AppController.html":{}}}],["this.configservice.get('store_mime_type",{"_index":757,"title":{},"body":{"injectables/FileValidationPipe.html":{}}}],["this.configservice.getdest('store_dest",{"_index":110,"title":{},"body":{"controllers/AppController.html":{},"injectables/StorageService.html":{}}}],["this.createasyncoptionsprovider(options",{"_index":1125,"title":{},"body":{"modules/MultipartModule.html":{},"modules/SendGridModule.html":{}}}],["this.createasyncproviders(options",{"_index":1122,"title":{},"body":{"modules/MultipartModule.html":{},"modules/SendGridModule.html":{}}}],["this.createmany",{"_index":1271,"title":{},"body":{"injectables/NotificationsService.html":{}}}],["this.createmany(users.map((user",{"_index":1263,"title":{},"body":{"injectables/NotificationsService.html":{}}}],["this.createone",{"_index":1666,"title":{},"body":{"injectables/UserRefreshTokensService.html":{}}}],["this.createone(data",{"_index":1281,"title":{},"body":{"injectables/NotificationsService.html":{}}}],["this.deleteone(filename",{"_index":1465,"title":{},"body":{"injectables/StorageS3Service.html":{},"injectables/StorageService.html":{}}}],["this.desc",{"_index":1005,"title":{},"body":{"classes/FindManyOptionsDto.html":{}}}],["this.destination",{"_index":1493,"title":{},"body":{"injectables/StorageService.html":{}}}],["this.disk.checkstorage('disk",{"_index":119,"title":{},"body":{"controllers/AppController.html":{}}}],["this.eager",{"_index":1023,"title":{},"body":{"classes/FindOneOptionsDto.html":{}}}],["this.expiresinaccesstoken",{"_index":420,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.expiresinrefreshtoken",{"_index":418,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.fileentityrepository.create(mergeintoentity",{"_index":861,"title":{},"body":{"injectables/FilesService.html":{}}}],["this.fileentityrepository.createquerybuilder",{"_index":870,"title":{},"body":{"injectables/FilesService.html":{}}}],["this.fileentityrepository.manager.transaction(async",{"_index":857,"title":{},"body":{"injectables/FilesService.html":{}}}],["this.fileentityrepository.merge(entitylike",{"_index":862,"title":{},"body":{"injectables/FilesService.html":{}}}],["this.fileentityrepository.merge(mergeintoentity",{"_index":900,"title":{},"body":{"injectables/FilesService.html":{}}}],["this.fileentityrepository.metadata",{"_index":868,"title":{},"body":{"injectables/FilesService.html":{}}}],["this.fileentityrepository.remove(entity",{"_index":902,"title":{},"body":{"injectables/FilesService.html":{}}}],["this.fileentityrepository.save(entity",{"_index":863,"title":{},"body":{"injectables/FilesService.html":{}}}],["this.filesize",{"_index":730,"title":{},"body":{"classes/FileEntity.html":{},"classes/FileEntityPreview.html":{}}}],["this.filesservice.createone(file",{"_index":806,"title":{},"body":{"controllers/FilesController.html":{}}}],["this.filesservice.deleteone",{"_index":817,"title":{},"body":{"controllers/FilesController.html":{}}}],["this.filesservice.downloadone(rep",{"_index":819,"title":{},"body":{"controllers/FilesController.html":{}}}],["this.filesservice.selectall(options",{"_index":810,"title":{},"body":{"controllers/FilesController.html":{}}}],["this.filesservice.selectone",{"_index":812,"title":{},"body":{"controllers/FilesController.html":{}}}],["this.filesservice.updateone(file",{"_index":814,"title":{},"body":{"controllers/FilesController.html":{}}}],["this.find",{"_index":888,"title":{},"body":{"injectables/FilesService.html":{},"injectables/NotificationsService.html":{},"injectables/UserNotificationTokensService.html":{},"injectables/UserRefreshTokensService.html":{},"injectables/UsersService.html":{}}}],["this.find(instancetoplain(options",{"_index":1245,"title":{},"body":{"injectables/NotificationsService.html":{},"injectables/UserNotificationTokensService.html":{},"injectables/UserRefreshTokensService.html":{}}}],["this.find(options",{"_index":883,"title":{},"body":{"injectables/FilesService.html":{},"injectables/UsersService.html":{}}}],["this.generateaccesstoken(user",{"_index":433,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.generatecode",{"_index":465,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.generatename",{"_index":1458,"title":{},"body":{"injectables/StorageS3Service.html":{},"injectables/StorageService.html":{}}}],["this.generatenotificationprops(data",{"_index":1270,"title":{},"body":{"injectables/NotificationsService.html":{}}}],["this.generatenotificationprops(entity",{"_index":1277,"title":{},"body":{"injectables/NotificationsService.html":{}}}],["this.generaterefreshtoken(user",{"_index":434,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.generatetokens(user",{"_index":447,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.get(key",{"_index":527,"title":{},"body":{"injectables/ConfigService.html":{}}}],["this.health.check",{"_index":118,"title":{},"body":{"controllers/AppController.html":{}}}],["this.id",{"_index":735,"title":{},"body":{"classes/FileEntity.html":{},"classes/FileEntityPreview.html":{}}}],["this.jwtservice.sign(payload",{"_index":428,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.logger.error",{"_index":61,"title":{},"body":{"classes/AllExceptionFilter.html":{}}}],["this.logger.error(error.message",{"_index":1414,"title":{},"body":{"injectables/SendGridService.html":{}}}],["this.memory.checkheap('memory_heap",{"_index":123,"title":{},"body":{"controllers/AppController.html":{}}}],["this.memory.checkrss('memory_rss",{"_index":126,"title":{},"body":{"controllers/AppController.html":{}}}],["this.microservice.pingcheck('redis",{"_index":129,"title":{},"body":{"controllers/AppController.html":{}}}],["this.notificationentityrepository.create(entitieslike",{"_index":1235,"title":{},"body":{"injectables/NotificationsService.html":{}}}],["this.notificationentityrepository.create(entitylike",{"_index":1238,"title":{},"body":{"injectables/NotificationsService.html":{}}}],["this.notificationentityrepository.createquerybuilder",{"_index":1242,"title":{},"body":{"injectables/NotificationsService.html":{}}}],["this.notificationentityrepository.manager.transaction((transactionalentitymanager",{"_index":1252,"title":{},"body":{"injectables/NotificationsService.html":{}}}],["this.notificationentityrepository.manager.transaction(async",{"_index":1234,"title":{},"body":{"injectables/NotificationsService.html":{}}}],["this.notificationentityrepository.merge(mergeintoentity",{"_index":1255,"title":{},"body":{"injectables/NotificationsService.html":{}}}],["this.notificationentityrepository.metadata",{"_index":1241,"title":{},"body":{"injectables/NotificationsService.html":{}}}],["this.notificationentityrepository.remove(entity",{"_index":1257,"title":{},"body":{"injectables/NotificationsService.html":{}}}],["this.notificationentityrepository.save(entities",{"_index":1236,"title":{},"body":{"injectables/NotificationsService.html":{}}}],["this.notificationentityrepository.save(entity",{"_index":1239,"title":{},"body":{"injectables/NotificationsService.html":{}}}],["this.notificationsservice.deleteone",{"_index":1181,"title":{},"body":{"controllers/NotificationsController.html":{}}}],["this.notificationsservice.selectall(options",{"_index":1178,"title":{},"body":{"controllers/NotificationsController.html":{}}}],["this.notificationsservice.selectone",{"_index":1179,"title":{},"body":{"controllers/NotificationsController.html":{}}}],["this.notificationsservice.sendandcreateoneforone",{"_index":1177,"title":{},"body":{"controllers/NotificationsController.html":{}}}],["this.notificationsservice.updateone",{"_index":1180,"title":{},"body":{"controllers/NotificationsController.html":{}}}],["this.options",{"_index":1496,"title":{},"body":{"injectables/StorageService.html":{}}}],["this.options.default",{"_index":1398,"title":{},"body":{"injectables/SendGridService.html":{}}}],["this.page",{"_index":1010,"title":{},"body":{"classes/FindManyOptionsDto.html":{}}}],["this.password",{"_index":1578,"title":{},"body":{"classes/UserEntity.html":{}}}],["this.path",{"_index":120,"title":{},"body":{"controllers/AppController.html":{}}}],["this.reflector.get('roles",{"_index":1055,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["this.s3",{"_index":1445,"title":{},"body":{"injectables/StorageS3Service.html":{}}}],["this.s3.headobject",{"_index":1456,"title":{},"body":{"injectables/StorageS3Service.html":{}}}],["this.s3.upload",{"_index":1455,"title":{},"body":{"injectables/StorageS3Service.html":{}}}],["this.secretaccesstoken",{"_index":424,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.secretrefreshtoken",{"_index":422,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.selectheadone",{"_index":1462,"title":{},"body":{"injectables/StorageS3Service.html":{}}}],["this.selection",{"_index":1021,"title":{},"body":{"classes/FindOneOptionsDto.html":{}}}],["this.selectone",{"_index":1256,"title":{},"body":{"injectables/NotificationsService.html":{},"injectables/UsersService.html":{}}}],["this.selectone(conditions",{"_index":898,"title":{},"body":{"injectables/FilesService.html":{},"injectables/NotificationsService.html":{},"injectables/UserNotificationTokensService.html":{},"injectables/UserRefreshTokensService.html":{},"injectables/UsersService.html":{}}}],["this.send(this.mergewithdefaultmaildata(data)).catch",{"_index":1412,"title":{},"body":{"injectables/SendGridService.html":{}}}],["this.sendgridservice.sendmail",{"_index":467,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.sendmultiple(this.mergewithdefaultmaildata(data)).catch",{"_index":1415,"title":{},"body":{"injectables/SendGridService.html":{}}}],["this.setapikey(options.apikey",{"_index":1411,"title":{},"body":{"injectables/SendGridService.html":{}}}],["this.setsubstitutionwrappers",{"_index":1408,"title":{},"body":{"injectables/SendGridService.html":{}}}],["this.settimeout(options.timeout",{"_index":1406,"title":{},"body":{"injectables/SendGridService.html":{}}}],["this.storageservice.createone(file",{"_index":899,"title":{},"body":{"injectables/FilesService.html":{}}}],["this.storageservice.createone(multipart",{"_index":859,"title":{},"body":{"injectables/FilesService.html":{}}}],["this.storageservice.deleteone(entity.filename",{"_index":901,"title":{},"body":{"injectables/FilesService.html":{}}}],["this.storageservice.deleteone(entitylike.filename",{"_index":865,"title":{},"body":{"injectables/FilesService.html":{}}}],["this.storageservice.selectone",{"_index":917,"title":{},"body":{"injectables/FilesService.html":{}}}],["this.take",{"_index":1009,"title":{},"body":{"classes/FindManyOptionsDto.html":{}}}],["this.title",{"_index":733,"title":{},"body":{"classes/FileEntity.html":{},"classes/FileEntityPreview.html":{}}}],["this.typeorm.pingcheck('database",{"_index":128,"title":{},"body":{"controllers/AppController.html":{}}}],["this.updateall",{"_index":1248,"title":{},"body":{"injectables/NotificationsService.html":{}}}],["this.uploadone",{"_index":1459,"title":{},"body":{"injectables/StorageS3Service.html":{}}}],["this.userentityrepository.create(entitylike",{"_index":1713,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.userentityrepository.createquerybuilder",{"_index":1717,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.userentityrepository.manager.transaction(async",{"_index":1712,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.userentityrepository.merge(mergeintoentity",{"_index":1728,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.userentityrepository.metadata",{"_index":1716,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.userentityrepository.remove(entity",{"_index":1729,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.userentityrepository.save(entity",{"_index":1714,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.usernotificationtokenentityrepository",{"_index":1633,"title":{},"body":{"injectables/UserNotificationTokensService.html":{}}}],["this.usernotificationtokenentityrepository.create(entitylike",{"_index":1629,"title":{},"body":{"injectables/UserNotificationTokensService.html":{}}}],["this.usernotificationtokenentityrepository.manager.transaction(async",{"_index":1628,"title":{},"body":{"injectables/UserNotificationTokensService.html":{}}}],["this.usernotificationtokenentityrepository.merge(mergeintoentity",{"_index":1639,"title":{},"body":{"injectables/UserNotificationTokensService.html":{}}}],["this.usernotificationtokenentityrepository.metadata",{"_index":1632,"title":{},"body":{"injectables/UserNotificationTokensService.html":{}}}],["this.usernotificationtokenentityrepository.remove(entity",{"_index":1640,"title":{},"body":{"injectables/UserNotificationTokensService.html":{}}}],["this.usernotificationtokenentityrepository.save(entity",{"_index":1630,"title":{},"body":{"injectables/UserNotificationTokensService.html":{}}}],["this.usernotificationtokensservice",{"_index":1282,"title":{},"body":{"injectables/NotificationsService.html":{}}}],["this.usernotificationtokensservice.createone",{"_index":1610,"title":{},"body":{"controllers/UserNotificationTokensController.html":{}}}],["this.usernotificationtokensservice.deleteone",{"_index":1614,"title":{},"body":{"controllers/UserNotificationTokensController.html":{}}}],["this.usernotificationtokensservice.selectall(options",{"_index":1611,"title":{},"body":{"controllers/UserNotificationTokensController.html":{}}}],["this.usernotificationtokensservice.selectone",{"_index":1612,"title":{},"body":{"controllers/UserNotificationTokensController.html":{}}}],["this.usernotificationtokensservice.updateone",{"_index":1613,"title":{},"body":{"controllers/UserNotificationTokensController.html":{}}}],["this.userrefreshtokenentityrepository",{"_index":1672,"title":{},"body":{"injectables/UserRefreshTokensService.html":{}}}],["this.userrefreshtokenentityrepository.create(entitylike",{"_index":1668,"title":{},"body":{"injectables/UserRefreshTokensService.html":{}}}],["this.userrefreshtokenentityrepository.manager.transaction(async",{"_index":1667,"title":{},"body":{"injectables/UserRefreshTokensService.html":{}}}],["this.userrefreshtokenentityrepository.merge(mergeintoentity",{"_index":1675,"title":{},"body":{"injectables/UserRefreshTokensService.html":{}}}],["this.userrefreshtokenentityrepository.metadata",{"_index":1671,"title":{},"body":{"injectables/UserRefreshTokensService.html":{}}}],["this.userrefreshtokenentityrepository.remove(entity).catch",{"_index":1676,"title":{},"body":{"injectables/UserRefreshTokensService.html":{}}}],["this.userrefreshtokenentityrepository.save(entity",{"_index":1669,"title":{},"body":{"injectables/UserRefreshTokensService.html":{}}}],["this.userrefreshtokensservice.deleteone",{"_index":287,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.userrefreshtokensservice.generateandcreateone",{"_index":295,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["this.usersservice",{"_index":454,"title":{},"body":{"injectables/AuthService.html":{},"injectables/NotificationsService.html":{}}}],["this.usersservice.createone(data",{"_index":448,"title":{},"body":{"injectables/AuthService.html":{},"controllers/UsersController.html":{}}}],["this.usersservice.deleteone(conditions",{"_index":1694,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.usersservice.selectall(options",{"_index":1691,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.usersservice.selectone",{"_index":306,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["this.usersservice.selectone(conditions",{"_index":1692,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.usersservice.selectone(data",{"_index":464,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.usersservice.updateone",{"_index":308,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["this.usersservice.updateone(conditions",{"_index":1693,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.validateemailcode(data",{"_index":472,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.validatepassword(data.oldpassword",{"_index":477,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.validatepassword(data.password",{"_index":473,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.validatepassword(password",{"_index":443,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.validateuser",{"_index":442,"title":{},"body":{"injectables/AuthService.html":{}}}],["thresholdpercent",{"_index":121,"title":{},"body":{"controllers/AppController.html":{}}}],["throttlerguard",{"_index":160,"title":{},"body":{"modules/AppModule.html":{}}}],["throttlermodule",{"_index":161,"title":{},"body":{"modules/AppModule.html":{}}}],["throttlermodule.forrootasync",{"_index":175,"title":{},"body":{"modules/AppModule.html":{}}}],["through",{"_index":1918,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["throw",{"_index":445,"title":{},"body":{"injectables/AuthService.html":{},"injectables/ConfigService.html":{},"injectables/FileValidationPipe.html":{},"injectables/FilesService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtRefreshGuard.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/NotificationsService.html":{},"injectables/SendGridService.html":{},"injectables/StorageS3Service.html":{},"injectables/StorageService.html":{},"injectables/UserNotificationTokensService.html":{},"injectables/UserRefreshTokensService.html":{},"injectables/UsersService.html":{},"miscellaneous/variables.html":{}}}],["timeout",{"_index":1372,"title":{},"body":{"interfaces/SendGridModuleAsyncOptions.html":{},"interfaces/SendGridModuleOptions.html":{},"interfaces/SendGridOptionsFactory.html":{}}}],["timestamptz",{"_index":688,"title":{},"body":{"classes/FileEntity.html":{},"classes/FileEntityPreview.html":{},"classes/NotificationEntity.html":{},"classes/UserEntity.html":{},"classes/UserNotificationTokenEntity.html":{},"classes/UserRefreshTokenEntity.html":{}}}],["timingsafeequal(keybuffer",{"_index":2049,"title":{},"body":{"miscellaneous/variables.html":{}}}],["title",{"_index":588,"title":{},"body":{"classes/CreateNotificationDto.html":{},"classes/FileEntity.html":{},"classes/FileEntityPreview.html":{},"injectables/FilesService.html":{},"classes/NotificationEntity.html":{},"injectables/NotificationsService.html":{},"classes/SelectFilesDto.html":{},"injectables/StorageS3Service.html":{},"injectables/StorageService.html":{},"classes/UploadedFile.html":{}}}],["title.enum.ts",{"_index":1862,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["tls",{"_index":139,"title":{},"body":{"controllers/AppController.html":{},"modules/AuthModule.html":{}}}],["tlsoptions",{"_index":634,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["toclassonly",{"_index":729,"title":{},"body":{"classes/FileEntity.html":{},"classes/FileEntityPreview.html":{}}}],["token",{"_index":432,"title":{},"body":{"injectables/AuthService.html":{},"classes/CreateUserNotificationTokenDto.html":{},"classes/DeleteUserNotificationTokenDto.html":{},"classes/JwtAccessTokenPayloadDto.html":{},"injectables/JwtRefreshGuard.html":{},"classes/JwtRefreshTokenDto.html":{},"classes/JwtRefreshTokenPayloadDto.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"classes/JwtTokensDto.html":{},"injectables/NotificationsService.html":{},"classes/UserNotificationTokenEntity.html":{}}}],["token.dto",{"_index":667,"title":{},"body":{"classes/DeleteUserNotificationTokenDto.html":{},"classes/UpdateUserNotificationTokenDto.html":{}}}],["token.dto.ts",{"_index":623,"title":{},"body":{"classes/CreateUserNotificationTokenDto.html":{},"classes/DeleteUserNotificationTokenDto.html":{},"classes/SelectUserNotificationTokenDto.html":{},"classes/UpdateUserNotificationTokenDto.html":{},"coverage.html":{}}}],["token.dto.ts:13",{"_index":626,"title":{},"body":{"classes/CreateUserNotificationTokenDto.html":{}}}],["token.entity",{"_index":1575,"title":{},"body":{"classes/UserEntity.html":{}}}],["token.entity.ts",{"_index":1587,"title":{},"body":{"classes/UserNotificationTokenEntity.html":{},"classes/UserRefreshTokenEntity.html":{},"coverage.html":{}}}],["token.entity.ts:21",{"_index":1589,"title":{},"body":{"classes/UserNotificationTokenEntity.html":{},"classes/UserRefreshTokenEntity.html":{}}}],["token.entity.ts:28",{"_index":1591,"title":{},"body":{"classes/UserNotificationTokenEntity.html":{}}}],["token.entity.ts:29",{"_index":1645,"title":{},"body":{"classes/UserRefreshTokenEntity.html":{}}}],["token.entity.ts:38",{"_index":1643,"title":{},"body":{"classes/UserRefreshTokenEntity.html":{}}}],["token.entity.ts:39",{"_index":1590,"title":{},"body":{"classes/UserNotificationTokenEntity.html":{}}}],["token.entity.ts:48",{"_index":1641,"title":{},"body":{"classes/UserRefreshTokenEntity.html":{}}}],["token.entity.ts:49",{"_index":1588,"title":{},"body":{"classes/UserNotificationTokenEntity.html":{}}}],["token.entity.ts:58",{"_index":1646,"title":{},"body":{"classes/UserRefreshTokenEntity.html":{}}}],["token.entity.ts:59",{"_index":1592,"title":{},"body":{"classes/UserNotificationTokenEntity.html":{}}}],["tokens",{"_index":292,"title":{},"body":{"controllers/AuthController.html":{},"injectables/NotificationsService.html":{},"controllers/UserNotificationTokensController.html":{}}}],["tokens')@useguards(jwtrefreshguard)@apibody({type",{"_index":230,"title":{},"body":{"controllers/AuthController.html":{}}}],["tokens.controller.ts",{"_index":1596,"title":{},"body":{"controllers/UserNotificationTokensController.html":{},"coverage.html":{}}}],["tokens.controller.ts:107",{"_index":1603,"title":{},"body":{"controllers/UserNotificationTokensController.html":{}}}],["tokens.controller.ts:119",{"_index":1601,"title":{},"body":{"controllers/UserNotificationTokensController.html":{}}}],["tokens.controller.ts:52",{"_index":1600,"title":{},"body":{"controllers/UserNotificationTokensController.html":{}}}],["tokens.controller.ts:64",{"_index":1604,"title":{},"body":{"controllers/UserNotificationTokensController.html":{}}}],["tokens.controller.ts:74",{"_index":1605,"title":{},"body":{"controllers/UserNotificationTokensController.html":{}}}],["tokens.controller.ts:91",{"_index":1606,"title":{},"body":{"controllers/UserNotificationTokensController.html":{}}}],["tokens.dto.ts",{"_index":1033,"title":{},"body":{"classes/JwtAccessTokenPayloadDto.html":{},"classes/JwtRefreshTokenDto.html":{},"classes/JwtRefreshTokenPayloadDto.html":{},"classes/JwtTokensDto.html":{},"classes/PaginationUserNotificationTokensDto.html":{},"classes/SelectUserNotificationTokensDto.html":{},"coverage.html":{}}}],["tokens.dto.ts:10",{"_index":1299,"title":{},"body":{"classes/PaginationUserNotificationTokensDto.html":{}}}],["tokens.dto.ts:11",{"_index":1093,"title":{},"body":{"classes/JwtTokensDto.html":{}}}],["tokens.dto.ts:17",{"_index":1092,"title":{},"body":{"classes/JwtTokensDto.html":{}}}],["tokens.dto.ts:32",{"_index":1034,"title":{},"body":{"classes/JwtAccessTokenPayloadDto.html":{}}}],["tokens.dto.ts:37",{"_index":1035,"title":{},"body":{"classes/JwtAccessTokenPayloadDto.html":{}}}],["tokens.dto.ts:47",{"_index":1065,"title":{},"body":{"classes/JwtRefreshTokenPayloadDto.html":{}}}],["tokens.service.ts",{"_index":1616,"title":{},"body":{"injectables/UserNotificationTokensService.html":{},"injectables/UserRefreshTokensService.html":{},"coverage.html":{}}}],["tokens.service.ts:100",{"_index":1625,"title":{},"body":{"injectables/UserNotificationTokensService.html":{},"injectables/UserRefreshTokensService.html":{}}}],["tokens.service.ts:117",{"_index":1660,"title":{},"body":{"injectables/UserRefreshTokensService.html":{}}}],["tokens.service.ts:119",{"_index":1621,"title":{},"body":{"injectables/UserNotificationTokensService.html":{}}}],["tokens.service.ts:136",{"_index":1655,"title":{},"body":{"injectables/UserRefreshTokensService.html":{}}}],["tokens.service.ts:23",{"_index":1619,"title":{},"body":{"injectables/UserNotificationTokensService.html":{}}}],["tokens.service.ts:25",{"_index":1653,"title":{},"body":{"injectables/UserRefreshTokensService.html":{}}}],["tokens.service.ts:30",{"_index":1627,"title":{},"body":{"injectables/UserNotificationTokensService.html":{}}}],["tokens.service.ts:32",{"_index":1662,"title":{},"body":{"injectables/UserRefreshTokensService.html":{}}}],["tokens.service.ts:38",{"_index":1620,"title":{},"body":{"injectables/UserNotificationTokensService.html":{}}}],["tokens.service.ts:40",{"_index":1658,"title":{},"body":{"injectables/UserRefreshTokensService.html":{}}}],["tokens.service.ts:54",{"_index":1622,"title":{},"body":{"injectables/UserNotificationTokensService.html":{}}}],["tokens.service.ts:55",{"_index":1654,"title":{},"body":{"injectables/UserRefreshTokensService.html":{}}}],["tokens.service.ts:69",{"_index":1623,"title":{},"body":{"injectables/UserNotificationTokensService.html":{}}}],["tokens.service.ts:71",{"_index":1656,"title":{},"body":{"injectables/UserRefreshTokensService.html":{}}}],["tokens.service.ts:83",{"_index":1624,"title":{},"body":{"injectables/UserNotificationTokensService.html":{}}}],["tokens.service.ts:86",{"_index":1659,"title":{},"body":{"injectables/UserRefreshTokensService.html":{}}}],["toplainonly",{"_index":1001,"title":{},"body":{"classes/FindManyOptionsDto.html":{},"classes/FindOneOptionsDto.html":{}}}],["total",{"_index":1290,"title":{},"body":{"classes/PaginationFilesDto.html":{}}}],["transaction",{"_index":837,"title":{},"body":{"injectables/FilesService.html":{},"injectables/NotificationsService.html":{},"injectables/UserNotificationTokensService.html":{},"injectables/UserRefreshTokensService.html":{},"injectables/UsersService.html":{}}}],["transactionalentitymanager.update(notificationentity",{"_index":1253,"title":{},"body":{"injectables/NotificationsService.html":{}}}],["transform",{"_index":748,"title":{},"body":{"injectables/FileValidationPipe.html":{},"classes/FindManyOptionsDto.html":{},"classes/FindOneOptionsDto.html":{},"classes/UserEntity.html":{},"miscellaneous/variables.html":{}}}],["transform(value",{"_index":751,"title":{},"body":{"injectables/FileValidationPipe.html":{}}}],["transformer",{"_index":617,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/FileEntity.html":{},"classes/FileEntityPreview.html":{},"injectables/FilesService.html":{},"classes/FindManyOptionsDto.html":{},"classes/FindOneOptionsDto.html":{},"injectables/NotificationsService.html":{},"classes/UserEntity.html":{},"injectables/UserNotificationTokensService.html":{},"classes/UserRefreshTokenEntity.html":{},"injectables/UserRefreshTokensService.html":{},"injectables/UsersService.html":{},"dependencies.html":{}}}],["transforminterceptor",{"_index":1315,"title":{"injectables/TransformInterceptor.html":{}},"body":{"interfaces/Response.html":{},"injectables/TransformInterceptor.html":{},"coverage.html":{}}}],["transport",{"_index":92,"title":{},"body":{"controllers/AppController.html":{}}}],["transport.redis",{"_index":130,"title":{},"body":{"controllers/AppController.html":{}}}],["true",{"_index":451,"title":{},"body":{"injectables/AuthService.html":{},"classes/FileEntity.html":{},"classes/FileEntityPreview.html":{},"classes/FindManyOptionsDto.html":{},"classes/FindOneOptionsDto.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"classes/NotificationEntity.html":{},"injectables/NotificationsService.html":{},"injectables/StorageService.html":{},"classes/UserEntity.html":{},"classes/UserNotificationTokenEntity.html":{},"classes/UserRefreshTokenEntity.html":{},"injectables/UsersService.html":{},"miscellaneous/variables.html":{}}}],["true})@apiproperty({maxlength",{"_index":694,"title":{},"body":{"classes/FileEntity.html":{}}}],["true})@apiproperty({readonly",{"_index":700,"title":{},"body":{"classes/FileEntity.html":{}}}],["true})@column({type",{"_index":1553,"title":{},"body":{"classes/UserEntity.html":{}}}],["true})@createdatecolumn({readonly",{"_index":687,"title":{},"body":{"classes/FileEntity.html":{},"classes/NotificationEntity.html":{}}}],["true})@createdatecolumn({type",{"_index":1548,"title":{},"body":{"classes/UserEntity.html":{},"classes/UserNotificationTokenEntity.html":{},"classes/UserRefreshTokenEntity.html":{}}}],["true})@deletedatecolumn",{"_index":1550,"title":{},"body":{"classes/UserEntity.html":{}}}],["true})@isnotempty({each",{"_index":950,"title":{},"body":{"classes/FindManyOptionsDto.html":{},"classes/FindOneOptionsDto.html":{},"classes/SelectFileDto.html":{},"classes/SelectFilesDto.html":{},"classes/SelectNotificationsDto.html":{},"classes/SelectProfileDto.html":{},"classes/SelectUserDto.html":{},"classes/SelectUserNotificationTokenDto.html":{},"classes/SelectUserNotificationTokensDto.html":{},"classes/SelectUsersDto.html":{}}}],["true})@primarygeneratedcolumn('uuid",{"_index":703,"title":{},"body":{"classes/FileEntity.html":{},"classes/NotificationEntity.html":{},"classes/UserEntity.html":{},"classes/UserNotificationTokenEntity.html":{},"classes/UserRefreshTokenEntity.html":{}}}],["true})@transform(undefined)@apiproperty({type",{"_index":951,"title":{},"body":{"classes/FindManyOptionsDto.html":{},"classes/FindOneOptionsDto.html":{},"classes/SelectFileDto.html":{},"classes/SelectFilesDto.html":{},"classes/SelectNotificationsDto.html":{},"classes/SelectProfileDto.html":{},"classes/SelectUserDto.html":{},"classes/SelectUserNotificationTokenDto.html":{},"classes/SelectUserNotificationTokensDto.html":{},"classes/SelectUsersDto.html":{}}}],["true})@updatedatecolumn({readonly",{"_index":711,"title":{},"body":{"classes/FileEntity.html":{},"classes/NotificationEntity.html":{}}}],["true})@updatedatecolumn({type",{"_index":1565,"title":{},"body":{"classes/UserEntity.html":{},"classes/UserNotificationTokenEntity.html":{},"classes/UserRefreshTokenEntity.html":{}}}],["try",{"_index":531,"title":{},"body":{"injectables/ConfigService.html":{},"injectables/StorageS3Service.html":{},"injectables/StorageService.html":{}}}],["ttl",{"_index":178,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{}}}],["turned",{"_index":1581,"title":{},"body":{"classes/UserEntity.html":{}}}],["two",{"_index":960,"title":{},"body":{"classes/FindManyOptionsDto.html":{},"classes/SelectFilesDto.html":{},"classes/SelectNotificationsDto.html":{},"classes/SelectUserNotificationTokensDto.html":{},"classes/SelectUsersDto.html":{}}}],["type",{"_index":17,"title":{},"body":{"classes/AllExceptionFilter.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/ConfigService.html":{},"classes/ConfirmationEmailDto.html":{},"classes/CreateFileDto.html":{},"interfaces/CreateMockFileReturn.html":{},"classes/CreateNotificationDto.html":{},"classes/CreateUserDto.html":{},"classes/CreateUserNotificationTokenDto.html":{},"modules/DatabaseModule.html":{},"classes/DeleteUserNotificationTokenDto.html":{},"classes/DownloadFileDto.html":{},"classes/FileEntity.html":{},"classes/FileEntityPreview.html":{},"injectables/FileValidationPipe.html":{},"controllers/FilesController.html":{},"injectables/FilesService.html":{},"interfaces/FindManyBracketsOptions.html":{},"classes/FindManyOptionsDto.html":{},"classes/FindOneOptionsDto.html":{},"classes/HttpExceptionFilter.html":{},"classes/ID.html":{},"classes/JwtAccessTokenPayloadDto.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtRefreshGuard.html":{},"classes/JwtRefreshTokenPayloadDto.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"classes/JwtTokensDto.html":{},"modules/MultipartModule.html":{},"interfaces/MultipartModuleAsyncOptions.html":{},"interfaces/MultipartOptionsFactory.html":{},"classes/NotificationEntity.html":{},"controllers/NotificationsController.html":{},"injectables/NotificationsService.html":{},"classes/PaginationFilesDto.html":{},"classes/PaginationNotificationsDto.html":{},"classes/PaginationUserNotificationTokensDto.html":{},"classes/PaginationUsersDto.html":{},"classes/ResetPasswordDto.html":{},"interfaces/Response.html":{},"classes/SelectFileDto.html":{},"classes/SelectFilesDto.html":{},"classes/SelectNotificationsDto.html":{},"classes/SelectProfileDto.html":{},"classes/SelectUserDto.html":{},"classes/SelectUserNotificationTokenDto.html":{},"classes/SelectUserNotificationTokensDto.html":{},"classes/SelectUsersDto.html":{},"modules/SendGridModule.html":{},"interfaces/SendGridModuleAsyncOptions.html":{},"interfaces/SendGridModuleOptions.html":{},"interfaces/SendGridOptionsFactory.html":{},"injectables/SendGridService.html":{},"injectables/StorageS3Service.html":{},"injectables/StorageService.html":{},"injectables/TransformInterceptor.html":{},"classes/UpdateNotificationDto.html":{},"classes/UpdatePasswordDto.html":{},"classes/UploadedFile.html":{},"classes/UserEntity.html":{},"classes/UserNotificationTokenEntity.html":{},"controllers/UserNotificationTokensController.html":{},"injectables/UserNotificationTokensService.html":{},"classes/UserRefreshTokenEntity.html":{},"injectables/UserRefreshTokensService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"classes/user1615673396368.html":{},"miscellaneous/variables.html":{}}}],["type(mimetype",{"_index":907,"title":{},"body":{"injectables/FilesService.html":{}}}],["type.enum.ts",{"_index":1858,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["typealiases",{"_index":2005,"title":{"miscellaneous/typealiases.html":{}},"body":{}}],["typedpropertydescriptor",{"_index":2103,"title":{},"body":{"miscellaneous/variables.html":{}}}],["typeerror(`the",{"_index":530,"title":{},"body":{"injectables/ConfigService.html":{}}}],["typeof",{"_index":2065,"title":{},"body":{"miscellaneous/variables.html":{}}}],["typeorm",{"_index":112,"title":{},"body":{"controllers/AppController.html":{},"injectables/AuthService.html":{},"classes/FileEntity.html":{},"classes/FileEntityPreview.html":{},"injectables/FilesService.html":{},"interfaces/FindManyBracketsOptions.html":{},"classes/FindManyOptionsDto.html":{},"classes/FindOneOptionsDto.html":{},"classes/NotificationEntity.html":{},"injectables/NotificationsService.html":{},"classes/SelectFilesDto.html":{},"classes/SelectNotificationsDto.html":{},"classes/SelectUsersDto.html":{},"classes/UserEntity.html":{},"classes/UserNotificationTokenEntity.html":{},"injectables/UserNotificationTokensService.html":{},"classes/UserRefreshTokenEntity.html":{},"injectables/UserRefreshTokensService.html":{},"injectables/UsersService.html":{},"dependencies.html":{},"classes/user1615673396368.html":{}}}],["typeormhealthindicator",{"_index":102,"title":{},"body":{"controllers/AppController.html":{}}}],["typeormmodule",{"_index":630,"title":{},"body":{"modules/DatabaseModule.html":{},"modules/FilesModule.html":{},"modules/NotificationsModule.html":{},"modules/UsersModule.html":{}}}],["typeormmodule.forfeature([fileentity",{"_index":826,"title":{},"body":{"modules/FilesModule.html":{}}}],["typeormmodule.forfeature([notificationentity",{"_index":1188,"title":{},"body":{"modules/NotificationsModule.html":{}}}],["typeormmodule.forfeature([userentity",{"_index":1699,"title":{},"body":{"modules/UsersModule.html":{}}}],["typeormmodule.forrootasync",{"_index":636,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["typeormmoduleoptions",{"_index":631,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["types",{"_index":502,"title":{},"body":{"injectables/ConfigService.html":{}}}],["unauthorizedexception",{"_index":1047,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"injectables/JwtRefreshGuard.html":{}}}],["unauthorizedexception(errortypeenum.auth_invalid_refresh_token",{"_index":1064,"title":{},"body":{"injectables/JwtRefreshGuard.html":{}}}],["unauthorizedexception(errortypeenum.auth_invalid_token",{"_index":1052,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["unauthorizedexception(errortypeenum.auth_unauthorized",{"_index":1053,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"injectables/JwtRefreshGuard.html":{}}}],["undefined",{"_index":190,"title":{},"body":{"modules/AppModule.html":{},"injectables/AuthService.html":{},"injectables/ConfigService.html":{},"classes/CreateUserDto.html":{},"classes/FileEntity.html":{},"injectables/FilesService.html":{},"classes/FindManyOptionsDto.html":{},"classes/FindOneOptionsDto.html":{},"classes/NotificationEntity.html":{},"classes/SelectFileDto.html":{},"classes/SelectFilesDto.html":{},"classes/SelectNotificationsDto.html":{},"classes/SelectProfileDto.html":{},"classes/SelectUserDto.html":{},"classes/SelectUserNotificationTokenDto.html":{},"classes/SelectUserNotificationTokensDto.html":{},"classes/SelectUsersDto.html":{},"classes/UserEntity.html":{},"classes/UserNotificationTokenEntity.html":{},"classes/UserRefreshTokenEntity.html":{}}}],["undefined})@column({type",{"_index":1147,"title":{},"body":{"classes/NotificationEntity.html":{},"classes/UserEntity.html":{}}}],["undefined})@transform(undefined)@manytoone(undefined",{"_index":1545,"title":{},"body":{"classes/UserEntity.html":{}}}],["unique",{"_index":1554,"title":{},"body":{"classes/UserEntity.html":{},"classes/UserNotificationTokenEntity.html":{}}}],["uniqueitems",{"_index":1552,"title":{},"body":{"classes/UserEntity.html":{}}}],["unit",{"_index":1992,"title":{"unit-test.html":{}},"body":{"index.html":{},"unit-test.html":{}}}],["unlink",{"_index":1488,"title":{},"body":{"injectables/StorageService.html":{}}}],["unlink(filedest).catch",{"_index":1512,"title":{},"body":{"injectables/StorageService.html":{}}}],["unread",{"_index":1900,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["unsupportedmediatypeexception",{"_index":754,"title":{},"body":{"injectables/FileValidationPipe.html":{}}}],["unsupportedmediatypeexception(errortypeenum.file_unsupported_type",{"_index":759,"title":{},"body":{"injectables/FileValidationPipe.html":{}}}],["up",{"_index":1980,"title":{},"body":{"index.html":{},"classes/user1615673396368.html":{}}}],["up(undefined",{"_index":2016,"title":{},"body":{"classes/user1615673396368.html":{}}}],["updateall",{"_index":1197,"title":{},"body":{"injectables/NotificationsService.html":{}}}],["updateall(conditions",{"_index":1218,"title":{},"body":{"injectables/NotificationsService.html":{}}}],["updatedat",{"_index":682,"title":{},"body":{"classes/FileEntity.html":{},"classes/FileEntityPreview.html":{},"classes/NotificationEntity.html":{},"classes/UserEntity.html":{},"classes/UserNotificationTokenEntity.html":{},"classes/UserRefreshTokenEntity.html":{}}}],["updatedatecolumn",{"_index":724,"title":{},"body":{"classes/FileEntity.html":{},"classes/FileEntityPreview.html":{},"classes/NotificationEntity.html":{},"classes/UserEntity.html":{},"classes/UserNotificationTokenEntity.html":{},"classes/UserRefreshTokenEntity.html":{}}}],["updateemail",{"_index":358,"title":{},"body":{"injectables/AuthService.html":{}}}],["updateemail(data",{"_index":389,"title":{},"body":{"injectables/AuthService.html":{}}}],["updateemaildto",{"_index":249,"title":{"classes/UpdateEmailDto.html":{}},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/UpdateEmailDto.html":{},"classes/UpdatePasswordDto.html":{},"classes/UpdateProfileDto.html":{},"coverage.html":{}}}],["updatenotificationdto",{"_index":1170,"title":{"classes/UpdateNotificationDto.html":{}},"body":{"controllers/NotificationsController.html":{},"classes/UpdateNotificationDto.html":{},"coverage.html":{}}}],["updateone",{"_index":768,"title":{},"body":{"controllers/FilesController.html":{},"injectables/FilesService.html":{},"controllers/NotificationsController.html":{},"injectables/NotificationsService.html":{},"controllers/UserNotificationTokensController.html":{},"injectables/UserNotificationTokensService.html":{},"injectables/UserRefreshTokensService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["updateone(conditions",{"_index":1169,"title":{},"body":{"controllers/NotificationsController.html":{},"injectables/NotificationsService.html":{},"controllers/UserNotificationTokensController.html":{},"injectables/UserNotificationTokensService.html":{},"injectables/UserRefreshTokensService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["updateone(file",{"_index":787,"title":{},"body":{"controllers/FilesController.html":{},"injectables/FilesService.html":{}}}],["updatepassword",{"_index":359,"title":{},"body":{"injectables/AuthService.html":{}}}],["updatepassword(data",{"_index":392,"title":{},"body":{"injectables/AuthService.html":{}}}],["updatepassworddto",{"_index":253,"title":{"classes/UpdatePasswordDto.html":{}},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/UpdateEmailDto.html":{},"classes/UpdatePasswordDto.html":{},"classes/UpdateProfileDto.html":{},"coverage.html":{}}}],["updateprofiledto",{"_index":245,"title":{"classes/UpdateProfileDto.html":{}},"body":{"controllers/AuthController.html":{},"classes/UpdateEmailDto.html":{},"classes/UpdatePasswordDto.html":{},"classes/UpdateProfileDto.html":{},"coverage.html":{}}}],["updateresult",{"_index":1231,"title":{},"body":{"injectables/NotificationsService.html":{}}}],["updateuser",{"_index":206,"title":{},"body":{"controllers/AuthController.html":{}}}],["updateuser(data",{"_index":244,"title":{},"body":{"controllers/AuthController.html":{}}}],["updateuserdto",{"_index":1517,"title":{"classes/UpdateUserDto.html":{}},"body":{"classes/UpdateEmailDto.html":{},"classes/UpdatePasswordDto.html":{},"classes/UpdateProfileDto.html":{},"classes/UpdateUserDto.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["updateuseremail",{"_index":207,"title":{},"body":{"controllers/AuthController.html":{}}}],["updateuseremail(data",{"_index":248,"title":{},"body":{"controllers/AuthController.html":{}}}],["updateusernotificationtokendto",{"_index":1530,"title":{"classes/UpdateUserNotificationTokenDto.html":{}},"body":{"classes/UpdateUserNotificationTokenDto.html":{},"controllers/UserNotificationTokensController.html":{},"coverage.html":{}}}],["updateuserpassword",{"_index":208,"title":{},"body":{"controllers/AuthController.html":{}}}],["updateuserpassword(data",{"_index":252,"title":{},"body":{"controllers/AuthController.html":{}}}],["uploadedfile",{"_index":553,"title":{"classes/UploadedFile.html":{}},"body":{"classes/CreateFileDto.html":{},"injectables/StorageS3Service.html":{},"injectables/StorageService.html":{},"classes/UploadedFile.html":{},"coverage.html":{}}}],["uploadone",{"_index":1422,"title":{},"body":{"injectables/StorageS3Service.html":{}}}],["uploadone(options",{"_index":1432,"title":{},"body":{"injectables/StorageS3Service.html":{}}}],["url",{"_index":40,"title":{},"body":{"classes/AllExceptionFilter.html":{},"classes/FileEntity.html":{},"classes/FileEntityPreview.html":{}}}],["url(join(process.env.cdn",{"_index":732,"title":{},"body":{"classes/FileEntity.html":{},"classes/FileEntityPreview.html":{}}}],["url(request.url",{"_index":62,"title":{},"body":{"classes/AllExceptionFilter.html":{}}}],["url.searchparams.set('id",{"_index":734,"title":{},"body":{"classes/FileEntity.html":{},"classes/FileEntityPreview.html":{}}}],["url.tostring",{"_index":736,"title":{},"body":{"classes/FileEntity.html":{},"classes/FileEntityPreview.html":{}}}],["use",{"_index":953,"title":{},"body":{"classes/FindManyOptionsDto.html":{},"classes/SelectFilesDto.html":{},"classes/SelectNotificationsDto.html":{},"classes/SelectUserNotificationTokensDto.html":{},"classes/SelectUsersDto.html":{}}}],["useclass",{"_index":194,"title":{},"body":{"modules/AppModule.html":{},"modules/MultipartModule.html":{},"interfaces/MultipartModuleAsyncOptions.html":{},"interfaces/MultipartOptionsFactory.html":{},"modules/SendGridModule.html":{},"interfaces/SendGridModuleAsyncOptions.html":{},"interfaces/SendGridModuleOptions.html":{},"interfaces/SendGridOptionsFactory.html":{}}}],["useexisting",{"_index":1133,"title":{},"body":{"interfaces/MultipartModuleAsyncOptions.html":{},"interfaces/MultipartOptionsFactory.html":{},"interfaces/SendGridModuleAsyncOptions.html":{},"interfaces/SendGridModuleOptions.html":{},"interfaces/SendGridOptionsFactory.html":{}}}],["usefactory",{"_index":177,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/DatabaseModule.html":{},"modules/MultipartModule.html":{},"interfaces/MultipartModuleAsyncOptions.html":{},"interfaces/MultipartOptionsFactory.html":{},"modules/SendGridModule.html":{},"interfaces/SendGridModuleAsyncOptions.html":{},"interfaces/SendGridModuleOptions.html":{},"interfaces/SendGridOptionsFactory.html":{}}}],["useguards",{"_index":260,"title":{},"body":{"controllers/AuthController.html":{},"controllers/FilesController.html":{},"controllers/NotificationsController.html":{},"controllers/UserNotificationTokensController.html":{},"controllers/UsersController.html":{}}}],["useguards(jwtauthguard",{"_index":305,"title":{},"body":{"controllers/AuthController.html":{},"controllers/FilesController.html":{},"controllers/NotificationsController.html":{},"controllers/UserNotificationTokensController.html":{},"controllers/UsersController.html":{}}}],["useguards(jwtrefreshguard",{"_index":282,"title":{},"body":{"controllers/AuthController.html":{}}}],["useinterceptors",{"_index":261,"title":{},"body":{"controllers/AuthController.html":{},"controllers/FilesController.html":{},"controllers/NotificationsController.html":{},"controllers/UserNotificationTokensController.html":{},"controllers/UsersController.html":{}}}],["useinterceptors(classserializerinterceptor",{"_index":277,"title":{},"body":{"controllers/AuthController.html":{},"controllers/FilesController.html":{},"controllers/NotificationsController.html":{},"controllers/UserNotificationTokensController.html":{},"controllers/UsersController.html":{}}}],["user",{"_index":72,"title":{},"body":{"classes/AllExceptionFilter.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/CreateUserNotificationTokenDto.html":{},"classes/DeleteUserNotificationTokenDto.html":{},"controllers/FilesController.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtRefreshGuard.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"controllers/NotificationsController.html":{},"classes/PaginationUserNotificationTokensDto.html":{},"classes/SelectUserNotificationTokenDto.html":{},"classes/SelectUserNotificationTokensDto.html":{},"classes/UpdateUserNotificationTokenDto.html":{},"classes/UserEntity.html":{},"controllers/UserNotificationTokensController.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["user.dto",{"_index":1528,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["user.dto.ts",{"_index":602,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/SelectUserDto.html":{},"classes/UpdateUserDto.html":{},"coverage.html":{}}}],["user.dto.ts:16",{"_index":609,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:24",{"_index":613,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:33",{"_index":605,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.entity",{"_index":1647,"title":{},"body":{"classes/UserRefreshTokenEntity.html":{}}}],["user.id",{"_index":291,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/NotificationsService.html":{}}}],["user.migration.ts",{"_index":1772,"title":{},"body":{"coverage.html":{},"classes/user1615673396368.html":{},"miscellaneous/variables.html":{}}}],["user.migration.ts:18",{"_index":2017,"title":{},"body":{"classes/user1615673396368.html":{}}}],["user.migration.ts:24",{"_index":2015,"title":{},"body":{"classes/user1615673396368.html":{}}}],["user.password",{"_index":444,"title":{},"body":{"injectables/AuthService.html":{}}}],["user.refreshtokens",{"_index":285,"title":{},"body":{"controllers/AuthController.html":{},"injectables/JwtRefreshTokenStrategy.html":{}}}],["user1615673396368",{"_index":1773,"title":{"classes/user1615673396368.html":{}},"body":{"coverage.html":{},"classes/user1615673396368.html":{}}}],["user_already_exist",{"_index":1885,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["user_already_exists",{"_index":1886,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["user_not_found",{"_index":1888,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["user_notification_token_already_exist",{"_index":1892,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["user_notification_token_not_found",{"_index":1894,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["user_notification_tokens_not_found",{"_index":1893,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["user_refresh_token_already_exist",{"_index":1889,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["user_refresh_token_not_found",{"_index":1891,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["user_refresh_tokens_not_found",{"_index":1890,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["userentity",{"_index":223,"title":{"classes/UserEntity.html":{}},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/FileEntity.html":{},"classes/FileEntityPreview.html":{},"controllers/FilesController.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtRefreshGuard.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"classes/NotificationEntity.html":{},"controllers/NotificationsController.html":{},"injectables/NotificationsService.html":{},"classes/PaginationUsersDto.html":{},"classes/SelectProfileDto.html":{},"classes/SelectUserDto.html":{},"classes/SelectUsersDto.html":{},"classes/UserEntity.html":{},"classes/UserNotificationTokenEntity.html":{},"controllers/UserNotificationTokensController.html":{},"classes/UserRefreshTokenEntity.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"classes/user1615673396368.html":{},"miscellaneous/variables.html":{}}}],["userentityrepository",{"_index":1701,"title":{},"body":{"injectables/UsersService.html":{}}}],["username",{"_index":644,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["usernotificationtokenentity",{"_index":1233,"title":{"classes/UserNotificationTokenEntity.html":{}},"body":{"injectables/NotificationsService.html":{},"classes/PaginationUserNotificationTokensDto.html":{},"classes/SelectUserNotificationTokenDto.html":{},"classes/SelectUserNotificationTokensDto.html":{},"classes/UserEntity.html":{},"classes/UserNotificationTokenEntity.html":{},"controllers/UserNotificationTokensController.html":{},"injectables/UserNotificationTokensService.html":{},"modules/UsersModule.html":{},"coverage.html":{}}}],["usernotificationtokenentityrepository",{"_index":1617,"title":{},"body":{"injectables/UserNotificationTokensService.html":{}}}],["usernotificationtokenscontroller",{"_index":1594,"title":{"controllers/UserNotificationTokensController.html":{}},"body":{"controllers/UserNotificationTokensController.html":{},"modules/UsersModule.html":{},"coverage.html":{}}}],["usernotificationtokensservice",{"_index":1191,"title":{"injectables/UserNotificationTokensService.html":{}},"body":{"injectables/NotificationsService.html":{},"controllers/UserNotificationTokensController.html":{},"injectables/UserNotificationTokensService.html":{},"modules/UsersModule.html":{},"coverage.html":{},"overview.html":{}}}],["userole",{"_index":794,"title":{},"body":{"controllers/FilesController.html":{},"controllers/UsersController.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["userole(userroleenum.admin",{"_index":808,"title":{},"body":{"controllers/FilesController.html":{},"controllers/UsersController.html":{}}}],["userrefreshtoken",{"_index":385,"title":{},"body":{"injectables/AuthService.html":{}}}],["userrefreshtokenentity",{"_index":372,"title":{"classes/UserRefreshTokenEntity.html":{}},"body":{"injectables/AuthService.html":{},"classes/UserEntity.html":{},"classes/UserRefreshTokenEntity.html":{},"injectables/UserRefreshTokensService.html":{},"modules/UsersModule.html":{},"coverage.html":{}}}],["userrefreshtokenentityrepository",{"_index":1650,"title":{},"body":{"injectables/UserRefreshTokensService.html":{}}}],["userrefreshtokensservice",{"_index":265,"title":{"injectables/UserRefreshTokensService.html":{}},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/UserRefreshTokensService.html":{},"modules/UsersModule.html":{},"coverage.html":{},"overview.html":{}}}],["userroleenum",{"_index":800,"title":{},"body":{"controllers/FilesController.html":{},"injectables/JwtAuthGuard.html":{},"classes/UserEntity.html":{},"controllers/UsersController.html":{},"miscellaneous/enumerations.html":{},"classes/user1615673396368.html":{},"miscellaneous/variables.html":{}}}],["userroleenum.admin",{"_index":892,"title":{},"body":{"injectables/FilesService.html":{},"classes/user1615673396368.html":{},"miscellaneous/variables.html":{}}}],["userroleenum.user",{"_index":1577,"title":{},"body":{"classes/UserEntity.html":{}}}],["users",{"_index":333,"title":{},"body":{"modules/AuthModule.html":{},"modules/NotificationsModule.html":{},"injectables/NotificationsService.html":{},"controllers/UsersController.html":{}}}],["users.dto.ts",{"_index":1301,"title":{},"body":{"classes/PaginationUsersDto.html":{},"classes/SelectUsersDto.html":{},"coverage.html":{}}}],["users.dto.ts:14",{"_index":1353,"title":{},"body":{"classes/SelectUsersDto.html":{}}}],["users.dto.ts:8",{"_index":1302,"title":{},"body":{"classes/PaginationUsersDto.html":{}}}],["users.map((user",{"_index":1272,"title":{},"body":{"injectables/NotificationsService.html":{}}}],["users.reduce",{"_index":1264,"title":{},"body":{"injectables/NotificationsService.html":{}}}],["users.reduce((acc",{"_index":1274,"title":{},"body":{"injectables/NotificationsService.html":{}}}],["users/dto",{"_index":540,"title":{},"body":{"classes/ConfirmationEmailDto.html":{},"classes/CreateProfileDto.html":{},"classes/CredentialsDto.html":{},"classes/ResetPasswordDto.html":{},"classes/SendResetPasswordDto.html":{},"classes/UpdateEmailDto.html":{},"classes/UpdatePasswordDto.html":{},"classes/UpdateProfileDto.html":{}}}],["users/entities",{"_index":264,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/FilesController.html":{},"injectables/JwtRefreshGuard.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"controllers/NotificationsController.html":{}}}],["users/enums",{"_index":801,"title":{},"body":{"controllers/FilesController.html":{}}}],["users/notification",{"_index":1597,"title":{},"body":{"controllers/UserNotificationTokensController.html":{}}}],["users/services",{"_index":267,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["users_not_found",{"_index":1887,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["userscontroller",{"_index":1677,"title":{"controllers/UsersController.html":{}},"body":{"controllers/UsersController.html":{},"modules/UsersModule.html":{},"coverage.html":{}}}],["usersmodule",{"_index":154,"title":{"modules/UsersModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/NotificationsModule.html":{},"modules/UsersModule.html":{},"modules.html":{},"overview.html":{}}}],["usersservice",{"_index":266,"title":{"injectables/UsersService.html":{}},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/NotificationsService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"overview.html":{}}}],["userstatusenum",{"_index":1354,"title":{},"body":{"classes/SelectUsersDto.html":{},"classes/UserEntity.html":{},"miscellaneous/enumerations.html":{}}}],["userstatusenum.activated",{"_index":1355,"title":{},"body":{"classes/SelectUsersDto.html":{},"classes/UserEntity.html":{}}}],["usevalue",{"_index":1120,"title":{},"body":{"modules/MultipartModule.html":{},"modules/SendGridModule.html":{}}}],["validate",{"_index":1070,"title":{},"body":{"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{}}}],["validate(undefined",{"_index":1072,"title":{},"body":{"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{}}}],["validateemailcode",{"_index":360,"title":{},"body":{"injectables/AuthService.html":{}}}],["validateemailcode(data",{"_index":394,"title":{},"body":{"injectables/AuthService.html":{}}}],["validatenested",{"_index":616,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["validatepassword",{"_index":361,"title":{},"body":{"injectables/AuthService.html":{}}}],["validatepassword(data",{"_index":396,"title":{},"body":{"injectables/AuthService.html":{}}}],["validateuser",{"_index":362,"title":{},"body":{"injectables/AuthService.html":{}}}],["validateuser(conditions",{"_index":399,"title":{},"body":{"injectables/AuthService.html":{}}}],["validation.pipe.ts",{"_index":746,"title":{},"body":{"injectables/FileValidationPipe.html":{},"coverage.html":{}}}],["validation.pipe.ts:15",{"_index":750,"title":{},"body":{"injectables/FileValidationPipe.html":{}}}],["validation.pipe.ts:29",{"_index":752,"title":{},"body":{"injectables/FileValidationPipe.html":{}}}],["validator",{"_index":545,"title":{},"body":{"classes/ConfirmationEmailDto.html":{},"classes/CreateFileDto.html":{},"classes/CreateNotificationDto.html":{},"classes/CreateUserDto.html":{},"classes/CreateUserNotificationTokenDto.html":{},"classes/DownloadFileDto.html":{},"classes/FindManyOptionsDto.html":{},"classes/FindOneOptionsDto.html":{},"classes/ID.html":{},"classes/ResetPasswordDto.html":{},"classes/SelectFilesDto.html":{},"classes/SelectNotificationsDto.html":{},"classes/SendResetPasswordDto.html":{},"classes/UpdateEmailDto.html":{},"classes/UpdateNotificationDto.html":{},"classes/UpdatePasswordDto.html":{},"classes/UpdateProfileDto.html":{},"dependencies.html":{}}}],["value",{"_index":20,"title":{},"body":{"classes/AllExceptionFilter.html":{},"injectables/AuthService.html":{},"injectables/ConfigService.html":{},"injectables/FileValidationPipe.html":{},"injectables/FilesService.html":{},"classes/FindManyOptionsDto.html":{},"classes/FindOneOptionsDto.html":{},"modules/MultipartModule.html":{},"injectables/NotificationsService.html":{},"classes/SelectFilesDto.html":{},"classes/SelectNotificationsDto.html":{},"classes/SelectUserNotificationTokensDto.html":{},"classes/SelectUsersDto.html":{},"injectables/SendGridService.html":{},"injectables/StorageService.html":{},"classes/UserEntity.html":{},"injectables/UserNotificationTokensService.html":{},"injectables/UserRefreshTokensService.html":{},"injectables/UsersService.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["value.tostring().padstart(digits",{"_index":439,"title":{},"body":{"injectables/AuthService.html":{}}}],["valuetransformer",{"_index":2082,"title":{},"body":{"miscellaneous/variables.html":{}}}],["varchar",{"_index":691,"title":{},"body":{"classes/FileEntity.html":{},"classes/FileEntityPreview.html":{},"classes/NotificationEntity.html":{},"classes/UserEntity.html":{},"classes/UserNotificationTokenEntity.html":{},"classes/UserRefreshTokenEntity.html":{}}}],["variable",{"_index":495,"title":{},"body":{"injectables/ConfigService.html":{},"coverage.html":{}}}],["variables",{"_index":2030,"title":{"miscellaneous/variables.html":{}},"body":{"miscellaneous/variables.html":{}}}],["verification_accepted",{"_index":1914,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["verification_declined",{"_index":1916,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["verified",{"_index":1915,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["void",{"_index":1511,"title":{},"body":{"injectables/StorageService.html":{},"miscellaneous/variables.html":{}}}],["watch",{"_index":1989,"title":{},"body":{"index.html":{}}}],["wherebrackets",{"_index":934,"title":{},"body":{"interfaces/FindManyBracketsOptions.html":{},"classes/SelectFilesDto.html":{}}}],["within",{"_index":1933,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["working",{"_index":1904,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["year",{"_index":1449,"title":{},"body":{"injectables/StorageS3Service.html":{},"injectables/StorageService.html":{}}}],["year}/${month",{"_index":1497,"title":{},"body":{"injectables/StorageService.html":{}}}],["year}/${month}/${filename",{"_index":1454,"title":{},"body":{"injectables/StorageS3Service.html":{}}}],["yes",{"_index":404,"title":{},"body":{"injectables/AuthService.html":{},"injectables/ConfigService.html":{},"injectables/FilesService.html":{},"controllers/NotificationsController.html":{},"injectables/NotificationsService.html":{},"modules/SendGridModule.html":{},"injectables/StorageService.html":{},"injectables/UserNotificationTokensService.html":{},"injectables/UserRefreshTokensService.html":{},"injectables/UsersService.html":{},"miscellaneous/functions.html":{}}}],["you're",{"_index":1903,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["zoom",{"_index":155,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/ConfigModule.html":{},"modules/FilesModule.html":{},"modules/NotificationsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"classes/AllExceptionFilter.html":{"url":"classes/AllExceptionFilter.html","title":"class - AllExceptionFilter","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  AllExceptionFilter\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/filters/all-exception.filter.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                        ExceptionFilter\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                logger\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                catch\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        logger\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Logger\n\n                    \n                \n                \n                    \n                        Default value : new Logger(AllExceptionFilter.name)\n                    \n                \n                    \n                        \n                                Defined in src/common/filters/all-exception.filter.ts:16\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        catch\n                        \n                    \n                \n            \n            \n                \ncatch(exception: Error, host: ArgumentsHost)\n                \n            \n\n\n            \n                \n                    Defined in src/common/filters/all-exception.filter.ts:18\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    exception\n                                    \n                                            Error\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    host\n                                    \n                                            ArgumentsHost\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     FastifyReply\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import {\n  Catch,\n  Logger,\n  HttpStatus,\n  ArgumentsHost,\n  HttpException,\n  ExceptionFilter,\n} from '@nestjs/common';\nimport { URL } from 'node:url';\nimport { FastifyReply } from 'fastify';\n\nimport { ErrorTypeEnum } from '../enums';\n\n@Catch()\nexport class AllExceptionFilter implements ExceptionFilter {\n  private readonly logger: Logger = new Logger(AllExceptionFilter.name);\n\n  catch(exception: Error, host: ArgumentsHost): FastifyReply {\n    const ctx = host.switchToHttp();\n    const request = ctx.getRequest();\n    const response = ctx.getResponse();\n\n    const statusCode =\n      exception instanceof HttpException ? exception.getStatus() : HttpStatus.INTERNAL_SERVER_ERROR;\n\n    const { message, error } =\n      exception instanceof HttpException\n        ? (exception.getResponse() as Record)\n        : {\n            message: ErrorTypeEnum.INTERNAL_SERVER_ERROR,\n            error: ErrorTypeEnum.INTERNAL_SERVER_ERROR,\n          };\n\n    this.logger.error(\n      {\n        url: new URL(request.url, 'logger://').pathname,\n        method: request.method,\n        params: request.params,\n        query: request.query,\n        body: request.body,\n        user: request.user,\n        statusCode,\n        message,\n      },\n      exception.stack,\n    );\n\n    return response.status(statusCode).send({ error, statusCode, message: [].concat(message) });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/AppController.html":{"url":"controllers/AppController.html","title":"controller - AppController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AppController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                status\n            \n\n\n            \n                Description\n            \n            \n                [description]\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                status\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        status\n                        \n                    \n                \n            \n            \n                \n                    \n                    status()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()@HealthCheck()\n                \n            \n\n            \n                \n                    Defined in src/app.controller.ts:50\n                \n            \n\n\n            \n                \n                    [description]\n\n\n                    \n                        Returns :     Promise\n\n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Transport, RedisOptions } from '@nestjs/microservices';\nimport { Controller, Get } from '@nestjs/common';\nimport { ApiTags } from '@nestjs/swagger';\nimport {\n  HealthCheck,\n  HealthCheckResult,\n  HealthCheckService,\n  DiskHealthIndicator,\n  MemoryHealthIndicator,\n  TypeOrmHealthIndicator,\n  MicroserviceHealthIndicator,\n} from '@nestjs/terminus';\n\nimport { ConfigService } from './config';\n\n/**\n * [description]\n */\n@ApiTags('status')\n@Controller('status')\nexport class AppController {\n  /**\n   * [description]\n   * @private\n   */\n  private readonly path = this.configService.getDest('STORE_DEST');\n\n  /**\n   * [description]\n   * @param configService\n   * @param typeorm\n   * @param memory\n   * @param health\n   * @param disk\n   */\n  constructor(\n    private readonly microservice: MicroserviceHealthIndicator,\n    private readonly configService: ConfigService,\n    private readonly typeorm: TypeOrmHealthIndicator,\n    private readonly memory: MemoryHealthIndicator,\n    private readonly health: HealthCheckService,\n    private readonly disk: DiskHealthIndicator,\n  ) {}\n\n  /**\n   * [description]\n   */\n  @Get()\n  @HealthCheck()\n  public status(): Promise {\n    return this.health.check([\n      () => this.disk.checkStorage('disk', { path: this.path, thresholdPercent: 1 }),\n      () => this.memory.checkHeap('memory_heap', 2 ** 30),\n      () => this.memory.checkRSS('memory_rss', 2 ** 31),\n      () => this.typeorm.pingCheck('database'),\n      () =>\n        this.microservice.pingCheck('redis', {\n          transport: Transport.REDIS,\n          options: Object.assign(\n            {\n              host: this.configService.get('REDIS_HOST'),\n              port: this.configService.get('REDIS_PORT'),\n            },\n            this.configService.get('REDIS_TLS') && {\n              auth_pass: this.configService.get('REDIS_PASSWORD'),\n              tls: { rejectUnauthorized: false },\n            },\n          ),\n        }),\n    ]);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AppModule.html":{"url":"modules/AppModule.html","title":"module - AppModule","body":"\n                   \n\n\n\n\n    Modules\n    AppModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nConfigModule\n\nConfigModule\n\nAppModule -->\n\nConfigModule->AppModule\n\n\n\n\n\nDatabaseModule\n\nDatabaseModule\n\nAppModule -->\n\nDatabaseModule->AppModule\n\n\n\n\n\nFilesModule\n\nFilesModule\n\nAppModule -->\n\nFilesModule->AppModule\n\n\n\n\n\nMultipartModule\n\nMultipartModule\n\nAppModule -->\n\nMultipartModule->AppModule\n\n\n\n\n\nNotificationsModule\n\nNotificationsModule\n\nAppModule -->\n\nNotificationsModule->AppModule\n\n\n\n\n\nUsersModule\n\nUsersModule\n\nAppModule -->\n\nUsersModule->AppModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app.module.ts\n        \n\n\n\n        \n            Description\n        \n        \n            [description]\n\n        \n\n\n        \n            \n                \n                    Controllers\n                    \n                        \n                            AppController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            AuthModule\n                        \n                        \n                            ConfigModule\n                        \n                        \n                            DatabaseModule\n                        \n                        \n                            FilesModule\n                        \n                        \n                            MultipartModule\n                        \n                        \n                            NotificationsModule\n                        \n                        \n                            UsersModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { ThrottlerGuard, ThrottlerModule } from '@nestjs/throttler';\nimport { TerminusModule } from '@nestjs/terminus';\nimport { BullModule } from '@nestjs/bull';\nimport { APP_GUARD } from '@nestjs/core';\nimport { Module } from '@nestjs/common';\n\nimport { ConfigModule, ConfigService } from './config';\nimport { MultipartModule } from './multipart';\nimport { DatabaseModule } from './database';\n\nimport { NotificationsModule } from './modules/notifications';\nimport { UsersModule } from './modules/users';\nimport { FilesModule } from './modules/files';\nimport { AuthModule } from './modules/auth';\n\nimport { AppController } from './app.controller';\n\n/**\n * [description]\n */\n@Module({\n  imports: [\n    TerminusModule,\n    ThrottlerModule.forRootAsync({\n      inject: [ConfigService],\n      useFactory: (configService: ConfigService) => ({\n        ttl: configService.get('THROTTLE_TTL'),\n        limit: configService.get('THROTTLE_LIMIT'),\n      }),\n    }),\n    BullModule.forRootAsync({\n      useFactory: async (configService: ConfigService) => ({\n        redis: {\n          host: configService.get('REDIS_HOST'),\n          port: configService.get('REDIS_PORT'),\n          password: configService.get('REDIS_HAS_PASSWORD')\n            ? configService.get('REDIS_PASSWORD')\n            : undefined,\n        },\n      }),\n      inject: [ConfigService],\n    }),\n    MultipartModule.register(),\n    DatabaseModule,\n    ConfigModule,\n    AuthModule,\n    UsersModule,\n    FilesModule,\n    NotificationsModule,\n  ],\n  controllers: [AppController],\n  providers: [{ provide: APP_GUARD, useClass: ThrottlerGuard }],\n})\nexport class AppModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/AuthController.html":{"url":"controllers/AuthController.html","title":"controller - AuthController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AuthController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/auth/auth.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                auth\n            \n\n\n            \n                Description\n            \n            \n                [description]\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                confirmationEmail\n                            \n                            \n                                    Public\n                                    Async\n                                createToken\n                            \n                            \n                                    Public\n                                    Async\n                                createUser\n                            \n                            \n                                    Public\n                                    Async\n                                logOut\n                            \n                            \n                                    Public\n                                    Async\n                                refreshTokens\n                            \n                            \n                                    Public\n                                    Async\n                                resetPassword\n                            \n                            \n                                    Public\n                                    Async\n                                selectUser\n                            \n                            \n                                    Public\n                                    Async\n                                sendResetPassword\n                            \n                            \n                                    Public\n                                    Async\n                                updateUser\n                            \n                            \n                                    Public\n                                    Async\n                                updateUserEmail\n                            \n                            \n                                    Public\n                                    Async\n                                updateUserPassword\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        confirmationEmail\n                        \n                    \n                \n            \n            \n                \n                    \n                    confirmationEmail(data: ConfirmationEmailDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('validate/email/code')\n                \n            \n\n            \n                \n                    Defined in src/modules/auth/auth.controller.ts:122\n                \n            \n\n\n            \n                \n                    [description]\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    data\n                                    \n                                                ConfirmationEmailDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        createToken\n                        \n                    \n                \n            \n            \n                \n                    \n                    createToken(data: CredentialsDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('signin')\n                \n            \n\n            \n                \n                    Defined in src/modules/auth/auth.controller.ts:58\n                \n            \n\n\n            \n                \n                    [description]\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    data\n                                    \n                                                CredentialsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        createUser\n                        \n                    \n                \n            \n            \n                \n                    \n                    createUser(data: CreateProfileDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('signup')\n                \n            \n\n            \n                \n                    Defined in src/modules/auth/auth.controller.ts:67\n                \n            \n\n\n            \n                \n                    [description]\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    data\n                                    \n                                                CreateProfileDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        logOut\n                        \n                    \n                \n            \n            \n                \n                    \n                    logOut(user: UserEntity)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('log-out')@UseGuards(JwtRefreshGuard)@ApiBody({type: JwtRefreshTokenDto})\n                \n            \n\n            \n                \n                    Defined in src/modules/auth/auth.controller.ts:78\n                \n            \n\n\n            \n                \n                    [description]\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                                UserEntity\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        refreshTokens\n                        \n                    \n                \n            \n            \n                \n                    \n                    refreshTokens(user: UserEntity)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('refresh-tokens')@UseGuards(JwtRefreshGuard)@ApiBody({type: JwtRefreshTokenDto})\n                \n            \n\n            \n                \n                    Defined in src/modules/auth/auth.controller.ts:90\n                \n            \n\n\n            \n                \n                    [description]\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                                UserEntity\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        resetPassword\n                        \n                    \n                \n            \n            \n                \n                    \n                    resetPassword(data: ResetPasswordDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('reset-password')\n                \n            \n\n            \n                \n                    Defined in src/modules/auth/auth.controller.ts:113\n                \n            \n\n\n            \n                \n                    [description]\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    data\n                                    \n                                                ResetPasswordDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        selectUser\n                        \n                    \n                \n            \n            \n                \n                    \n                    selectUser(undefined: UserEntity, options: SelectProfileDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('profile')@ApiBearerAuth()@UseGuards(JwtAuthGuard)\n                \n            \n\n            \n                \n                    Defined in src/modules/auth/auth.controller.ts:134\n                \n            \n\n\n            \n                \n                    [description]\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    \n                                                UserEntity\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    options\n                                    \n                                                SelectProfileDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        sendResetPassword\n                        \n                    \n                \n            \n            \n                \n                    \n                    sendResetPassword(data: SendResetPasswordDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('reset-password/send/email')\n                \n            \n\n            \n                \n                    Defined in src/modules/auth/auth.controller.ts:104\n                \n            \n\n\n            \n                \n                    [description]\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    data\n                                    \n                                                SendResetPasswordDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        updateUser\n                        \n                    \n                \n            \n            \n                \n                    \n                    updateUser(data: UpdateProfileDto, user: UserEntity)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch('profile')@ApiBearerAuth()@UseGuards(JwtAuthGuard)\n                \n            \n\n            \n                \n                    Defined in src/modules/auth/auth.controller.ts:149\n                \n            \n\n\n            \n                \n                    [description]\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    data\n                                    \n                                                UpdateProfileDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    user\n                                    \n                                                UserEntity\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        updateUserEmail\n                        \n                    \n                \n            \n            \n                \n                    \n                    updateUserEmail(data: UpdateEmailDto, user: UserEntity)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch('profile/email')@ApiBearerAuth()@UseGuards(JwtAuthGuard)\n                \n            \n\n            \n                \n                    Defined in src/modules/auth/auth.controller.ts:179\n                \n            \n\n\n            \n                \n                    [description]\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    data\n                                    \n                                                UpdateEmailDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    user\n                                    \n                                                UserEntity\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        updateUserPassword\n                        \n                    \n                \n            \n            \n                \n                    \n                    updateUserPassword(data: UpdatePasswordDto, user: UserEntity)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch('profile/password')@ApiBearerAuth()@UseGuards(JwtAuthGuard)\n                \n            \n\n            \n                \n                    Defined in src/modules/auth/auth.controller.ts:164\n                \n            \n\n\n            \n                \n                    [description]\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    data\n                                    \n                                                UpdatePasswordDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    user\n                                    \n                                                UserEntity\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { ApiBearerAuth, ApiBody, ApiTags } from '@nestjs/swagger';\nimport {\n  Get,\n  Post,\n  Body,\n  Query,\n  Patch,\n  UseGuards,\n  Controller,\n  UseInterceptors,\n  ClassSerializerInterceptor,\n} from '@nestjs/common';\n\nimport { User } from 'src/common/decorators';\n\nimport { UserEntity } from '../users/entities';\nimport { UserRefreshTokensService, UsersService } from '../users/services';\n\nimport {\n  JwtTokensDto,\n  CredentialsDto,\n  UpdateEmailDto,\n  CreateProfileDto,\n  SelectProfileDto,\n  ResetPasswordDto,\n  UpdateProfileDto,\n  UpdatePasswordDto,\n  JwtRefreshTokenDto,\n  SendResetPasswordDto,\n  ConfirmationEmailDto,\n} from './dto';\nimport { AuthService } from './auth.service';\nimport { JwtRefreshGuard, JwtAuthGuard } from './guards';\n\n/**\n * [description]\n */\n@ApiTags('auth')\n@Controller('auth')\n@UseInterceptors(ClassSerializerInterceptor)\nexport class AuthController {\n  /**\n   * [description]\n   * @param usersService\n   * @param authService\n   */\n  constructor(\n    private readonly userRefreshTokensService: UserRefreshTokensService,\n    private readonly usersService: UsersService,\n    private readonly authService: AuthService,\n  ) {}\n\n  /**\n   * [description]\n   * @param data\n   */\n  @Post('signin')\n  public async createToken(@Body() data: CredentialsDto): Promise {\n    return this.authService.createToken(data);\n  }\n\n  /**\n   * [description]\n   * @param data\n   */\n  @Post('signup')\n  public async createUser(@Body() data: CreateProfileDto): Promise {\n    return this.authService.createUser(data);\n  }\n\n  /**\n   * [description]\n   * @param data\n   */\n  @Post('log-out')\n  @UseGuards(JwtRefreshGuard)\n  @ApiBody({ type: JwtRefreshTokenDto })\n  public async logOut(@User() user: UserEntity): Promise {\n    const [refreshToken] = user.refreshTokens;\n    await this.userRefreshTokensService.deleteOne({ id: refreshToken.id, owner: { id: user.id } });\n  }\n\n  /**\n   * [description]\n   * @param user\n   */\n  @Post('refresh-tokens')\n  @UseGuards(JwtRefreshGuard)\n  @ApiBody({ type: JwtRefreshTokenDto })\n  public async refreshTokens(@User() user: UserEntity): Promise {\n    const [oldRefreshToken] = user.refreshTokens;\n    const refreshToken = await this.userRefreshTokensService.generateAndCreateOne({\n      id: oldRefreshToken.id,\n      owner: { id: user.id },\n    });\n    return this.authService.generateTokens(user, refreshToken);\n  }\n\n  /**\n   * [description]\n   * @param data\n   */\n  @Post('reset-password/send/email')\n  public async sendResetPassword(@Body() data: SendResetPasswordDto): Promise {\n    return this.authService.sendResetPassword(data);\n  }\n\n  /**\n   * [description]\n   * @param data\n   */\n  @Post('reset-password')\n  public async resetPassword(@Body() data: ResetPasswordDto): Promise {\n    return this.authService.resetPassword(data);\n  }\n\n  /**\n   * [description]\n   * @param data\n   */\n  @Post('validate/email/code')\n  public async confirmationEmail(@Body() data: ConfirmationEmailDto): Promise {\n    await this.authService.validateEmailCode(data);\n  }\n\n  /**\n   * [description]\n   * @param id\n   * @param options\n   */\n  @Get('profile')\n  @ApiBearerAuth()\n  @UseGuards(JwtAuthGuard)\n  public async selectUser(\n    @User() { id }: UserEntity,\n    @Query() options: SelectProfileDto,\n  ): Promise {\n    return this.usersService.selectOne({ id }, options);\n  }\n\n  /**\n   * [description]\n   * @param user\n   * @param data\n   */\n  @Patch('profile')\n  @ApiBearerAuth()\n  @UseGuards(JwtAuthGuard)\n  public async updateUser(\n    @Body() data: UpdateProfileDto,\n    @User() user: UserEntity,\n  ): Promise {\n    return this.usersService.updateOne({ id: user.id }, data);\n  }\n\n  /**\n   * [description]\n   * @param user\n   * @param data\n   */\n  @Patch('profile/password')\n  @ApiBearerAuth()\n  @UseGuards(JwtAuthGuard)\n  public async updateUserPassword(\n    @Body() data: UpdatePasswordDto,\n    @User() user: UserEntity,\n  ): Promise {\n    return this.authService.updatePassword(data, user);\n  }\n\n  /**\n   * [description]\n   * @param user\n   * @param data\n   */\n  @Patch('profile/email')\n  @ApiBearerAuth()\n  @UseGuards(JwtAuthGuard)\n  public async updateUserEmail(\n    @Body() data: UpdateEmailDto,\n    @User() user: UserEntity,\n  ): Promise {\n    return this.authService.updateEmail(data, user);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AuthModule.html":{"url":"modules/AuthModule.html","title":"module - AuthModule","body":"\n                   \n\n\n\n\n    Modules\n    AuthModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_providers\n\n\n\ncluster_AuthModule_imports\n\n\n\ncluster_AuthModule_exports\n\n\n\n\nSendGridModule\n\nSendGridModule\n\n\n\nAuthModule\n\nAuthModule\n\nAuthModule -->\n\nSendGridModule->AuthModule\n\n\n\n\n\nUsersModule\n\nUsersModule\n\nAuthModule -->\n\nUsersModule->AuthModule\n\n\n\n\n\nAuthService \n\nAuthService \n\nAuthService  -->\n\nAuthModule->AuthService \n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\nJwtRefreshTokenStrategy\n\nJwtRefreshTokenStrategy\n\nAuthModule -->\n\nJwtRefreshTokenStrategy->AuthModule\n\n\n\n\n\nJwtStrategy\n\nJwtStrategy\n\nAuthModule -->\n\nJwtStrategy->AuthModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/modules/auth/auth.module.ts\n        \n\n\n\n        \n            Description\n        \n        \n            [description]\n\n        \n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AuthService\n                        \n                        \n                            JwtRefreshTokenStrategy\n                        \n                        \n                            JwtStrategy\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AuthController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            SendGridModule\n                        \n                        \n                            UsersModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            AuthService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { CacheModule, CacheModuleOptions, Module } from '@nestjs/common';\nimport * as redisStore from 'cache-manager-redis-store';\nimport { PassportModule } from '@nestjs/passport';\nimport { JwtModule } from '@nestjs/jwt';\n\nimport { ConfigService } from 'src/config';\n\nimport { UsersModule } from '../users';\n\nimport { JwtRefreshTokenStrategy, JwtStrategy } from './strategies';\n\nimport { CACHE_AUTH_PREFIX } from './auth.constants';\nimport { AuthController } from './auth.controller';\nimport { AuthService } from './auth.service';\nimport { SendGridModule } from 'src/sendgrid';\n\n/**\n * [description]\n */\n@Module({\n  imports: [\n    PassportModule,\n    JwtModule.register({}),\n    CacheModule.registerAsync({\n      useFactory: (configService: ConfigService) =>\n        Object.assign(\n          {\n            store: redisStore,\n            prefix: CACHE_AUTH_PREFIX,\n            ttl: configService.get('CACHE_AUTH_TTL'),\n            host: configService.get('REDIS_HOST'),\n            port: configService.get('REDIS_PORT'),\n          },\n          configService.get('REDIS_HAS_PASSWORD') && {\n            auth_pass: configService.get('REDIS_PASSWORD'),\n          },\n          configService.get('REDIS_TLS') && {\n            tls: {\n              rejectUnauthorized: false,\n            },\n          },\n        ) as CacheModuleOptions,\n      inject: [ConfigService],\n    }),\n    SendGridModule.registerAsync({\n      useFactory: (configService: ConfigService) => ({\n        apiKey: configService.get('SENDGRID_API_KEY'),\n        default: {\n          from: configService.get('SENDGRID_API_SENDER'),\n        },\n      }),\n      inject: [ConfigService],\n    }),\n    UsersModule,\n  ],\n  controllers: [AuthController],\n  providers: [AuthService, JwtStrategy, JwtRefreshTokenStrategy],\n  exports: [PassportModule, JwtModule, AuthService],\n})\nexport class AuthModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AuthService.html":{"url":"injectables/AuthService.html","title":"injectable - AuthService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  AuthService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/auth/auth.service.ts\n        \n\n\n            \n                Description\n            \n            \n                [description]\n\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                expiresInAccessToken\n                            \n                            \n                                    Private\n                                    Readonly\n                                expiresInRefreshToken\n                            \n                            \n                                    Private\n                                    Readonly\n                                secretAccessToken\n                            \n                            \n                                    Private\n                                    Readonly\n                                secretRefreshToken\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                createToken\n                            \n                            \n                                    Public\n                                    Async\n                                createUser\n                            \n                            \n                                    Public\n                                generateAccessToken\n                            \n                            \n                                    Public\n                                generateCode\n                            \n                            \n                                    Public\n                                generateRefreshToken\n                            \n                            \n                                    Public\n                                generateTokens\n                            \n                            \n                                    Public\n                                    Async\n                                resetPassword\n                            \n                            \n                                    Public\n                                    Async\n                                sendResetPassword\n                            \n                            \n                                    Public\n                                    Async\n                                updateEmail\n                            \n                            \n                                    Public\n                                    Async\n                                updatePassword\n                            \n                            \n                                    Public\n                                    Async\n                                validateEmailCode\n                            \n                            \n                                    Public\n                                    Async\n                                validatePassword\n                            \n                            \n                                    Public\n                                    Async\n                                validateUser\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(userRefreshTokensService: UserRefreshTokensService, sendGridService: SendGridService, configService: ConfigService, usersService: UsersService, jwtService: JwtService, cacheManager: Cache)\n                    \n                \n                        \n                            \n                                Defined in src/modules/auth/auth.service.ts:37\n                            \n                        \n\n                \n                    \n                            [description]\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        userRefreshTokensService\n                                                  \n                                                        \n                                                                        UserRefreshTokensService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        sendGridService\n                                                  \n                                                        \n                                                                        SendGridService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                        ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        usersService\n                                                  \n                                                        \n                                                                        UsersService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        jwtService\n                                                  \n                                                        \n                                                                    JwtService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        cacheManager\n                                                  \n                                                        \n                                                                    Cache\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        createToken\n                        \n                    \n                \n            \n            \n                \n                    \n                    createToken(undefined: CredentialsDto)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/auth/auth.service.ts:119\n                \n            \n\n\n            \n                \n                    [description]\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    \n                                                CredentialsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        createUser\n                        \n                    \n                \n            \n            \n                \n                    \n                    createUser(data: CreateProfileDto)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/auth/auth.service.ts:133\n                \n            \n\n\n            \n                \n                    [description]\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    data\n                                    \n                                                CreateProfileDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        generateAccessToken\n                        \n                    \n                \n            \n            \n                \n                    \n                    generateAccessToken(undefined: UserEntity, undefined: UserRefreshTokenEntity)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/auth/auth.service.ts:65\n                \n            \n\n\n            \n                \n                    [description]\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    \n                                                UserEntity\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    \n                                                UserRefreshTokenEntity\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        generateCode\n                        \n                    \n                \n            \n            \n                \n                    \n                    generateCode(digits: number, size: number)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/auth/auth.service.ts:108\n                \n            \n\n\n            \n                \n                    [description]\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    digits\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        6\n                                    \n\n                                \n                                \n                                    size\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        20\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        generateRefreshToken\n                        \n                    \n                \n            \n            \n                \n                    \n                    generateRefreshToken(undefined: UserEntity, undefined: UserRefreshTokenEntity)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/auth/auth.service.ts:81\n                \n            \n\n\n            \n                \n                    [description]\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    \n                                                UserEntity\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    \n                                                UserRefreshTokenEntity\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        generateTokens\n                        \n                    \n                \n            \n            \n                \n                    \n                    generateTokens(user: UserEntity, userRefreshToken: UserRefreshTokenEntity)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/auth/auth.service.ts:97\n                \n            \n\n\n            \n                \n                    [description]\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                                UserEntity\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userRefreshToken\n                                    \n                                                UserRefreshTokenEntity\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         JwtTokensDto\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        resetPassword\n                        \n                    \n                \n            \n            \n                \n                    \n                    resetPassword(data: ResetPasswordDto)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/auth/auth.service.ts:215\n                \n            \n\n\n            \n                \n                    [description]\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    data\n                                    \n                                                ResetPasswordDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        sendResetPassword\n                        \n                    \n                \n            \n            \n                \n                    \n                    sendResetPassword(data: SendResetPasswordDto)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/auth/auth.service.ts:194\n                \n            \n\n\n            \n                \n                    [description]\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    data\n                                    \n                                                SendResetPasswordDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        updateEmail\n                        \n                    \n                \n            \n            \n                \n                    \n                    updateEmail(data: UpdateEmailDto, user: Partial)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/auth/auth.service.ts:244\n                \n            \n\n\n            \n                \n                    [description]\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    data\n                                    \n                                                UpdateEmailDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    user\n                                    \n                                                Partial\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        updatePassword\n                        \n                    \n                \n            \n            \n                \n                    \n                    updatePassword(data: UpdatePasswordDto, user: Partial)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/auth/auth.service.ts:230\n                \n            \n\n\n            \n                \n                    [description]\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    data\n                                    \n                                                UpdatePasswordDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    user\n                                    \n                                                Partial\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        validateEmailCode\n                        \n                    \n                \n            \n            \n                \n                    \n                    validateEmailCode(data: ConfirmationEmailDto)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/auth/auth.service.ts:176\n                \n            \n\n\n            \n                \n                    [description]\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    data\n                                    \n                                                ConfirmationEmailDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        validatePassword\n                        \n                    \n                \n            \n            \n                \n                    \n                    validatePassword(data: string, encrypted: string)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/auth/auth.service.ts:166\n                \n            \n\n\n            \n                \n                    [description]\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    data\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    encrypted\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        validateUser\n                        \n                    \n                \n            \n            \n                \n                    \n                    validateUser(conditions: FindOptionsWhere, options?: FindOneOptions)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/auth/auth.service.ts:146\n                \n            \n\n\n            \n                \n                    [description]\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    conditions\n                                    \n                                                FindOptionsWhere\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    options\n                                    \n                                                FindOneOptions\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        expiresInAccessToken\n                        \n                    \n                \n            \n                    \n                        \n                                Defined in src/modules/auth/auth.service.ts:35\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        expiresInRefreshToken\n                        \n                    \n                \n            \n                    \n                        \n                                Defined in src/modules/auth/auth.service.ts:34\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        secretAccessToken\n                        \n                    \n                \n            \n                    \n                        \n                                Defined in src/modules/auth/auth.service.ts:37\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        secretRefreshToken\n                        \n                    \n                \n            \n                    \n                        \n                                Defined in src/modules/auth/auth.service.ts:36\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { BadRequestException, CACHE_MANAGER, Inject, Injectable } from '@nestjs/common';\nimport { FindOneOptions, FindOptionsWhere } from 'typeorm';\nimport { ConfigService } from 'src/config';\nimport { JwtService } from '@nestjs/jwt';\nimport { Cache } from 'cache-manager';\n\nimport { randomBytes } from 'crypto';\nimport { compare } from 'src/common/helpers';\n\nimport { ErrorTypeEnum } from 'src/common/enums';\nimport { SendGridService } from 'src/sendgrid';\n\nimport { UserEntity, UserRefreshTokenEntity } from '../users/entities';\nimport { UserRefreshTokensService, UsersService } from '../users/services';\n\nimport {\n  JwtTokensDto,\n  CredentialsDto,\n  UpdateEmailDto,\n  CreateProfileDto,\n  ResetPasswordDto,\n  UpdatePasswordDto,\n  SendResetPasswordDto,\n  ConfirmationEmailDto,\n  JwtAccessTokenPayloadDto,\n  JwtRefreshTokenPayloadDto,\n} from './dto';\n\n/**\n * [description]\n */\n@Injectable()\nexport class AuthService {\n  private readonly expiresInRefreshToken;\n  private readonly expiresInAccessToken;\n  private readonly secretRefreshToken;\n  private readonly secretAccessToken;\n\n  /**\n   * [description]\n   * @param configService\n   * @param usersService\n   * @param jwtService\n   */\n  constructor(\n    private readonly userRefreshTokensService: UserRefreshTokensService,\n    private readonly sendGridService: SendGridService,\n    private readonly configService: ConfigService,\n    private readonly usersService: UsersService,\n    private readonly jwtService: JwtService,\n    @Inject(CACHE_MANAGER)\n    private cacheManager: Cache,\n  ) {\n    this.expiresInRefreshToken = this.configService.get('JWT_EXPIRES_REFRESH_TOKEN');\n    this.expiresInAccessToken = this.configService.get('JWT_EXPIRES_ACCESS_TOKEN');\n    this.secretRefreshToken = this.configService.get('JWT_SECRET_REFRESH_TOKEN');\n    this.secretAccessToken = this.configService.get('JWT_SECRET_ACCESS_TOKEN');\n  }\n\n  /**\n   * [description]\n   * @param id\n   * @param userRefreshToken\n   */\n  public generateAccessToken(\n    { id }: UserEntity,\n    { id: refreshTokenId }: UserRefreshTokenEntity,\n  ): string {\n    const payload: JwtAccessTokenPayloadDto = { id, refreshTokenId };\n    return this.jwtService.sign(payload, {\n      expiresIn: this.expiresInAccessToken,\n      secret: this.secretAccessToken,\n    });\n  }\n\n  /**\n   * [description]\n   * @param id\n   * @param userRefreshToken\n   */\n  public generateRefreshToken(\n    { id }: UserEntity,\n    { id: refreshTokenId, ppid }: UserRefreshTokenEntity,\n  ): string {\n    const payload: JwtRefreshTokenPayloadDto = { id, refreshTokenId, ppid };\n    return this.jwtService.sign(payload, {\n      expiresIn: this.expiresInRefreshToken,\n      secret: this.secretRefreshToken,\n    });\n  }\n\n  /**\n   * [description]\n   * @param user\n   * @param userRefreshToken\n   */\n  public generateTokens(user: UserEntity, userRefreshToken: UserRefreshTokenEntity): JwtTokensDto {\n    const token = this.generateAccessToken(user, userRefreshToken);\n    const refreshToken = this.generateRefreshToken(user, userRefreshToken);\n    return { token, refreshToken };\n  }\n\n  /**\n   * [description]\n   * @param digits\n   * @param size\n   */\n  public generateCode(digits = 6, size = 20): string {\n    const buffer = randomBytes(size);\n    const value = buffer.readUInt32BE(0x0f) % 10 ** digits;\n    return value.toString().padStart(digits, '0');\n  }\n\n  /**\n   * [description]\n   * @param email\n   * @param password\n   */\n  public async createToken({ email, password }: CredentialsDto): Promise {\n    const user = await this.validateUser({ email });\n    if (!(await this.validatePassword(password, user.password)))\n      throw new BadRequestException(ErrorTypeEnum.AUTH_INCORRECT_CREDENTIALS);\n    const refreshToken = await this.userRefreshTokensService.generateAndCreateOne({\n      owner: { id: user.id },\n    });\n    return this.generateTokens(user, refreshToken);\n  }\n\n  /**\n   * [description]\n   * @param data\n   */\n  public async createUser(data: CreateProfileDto): Promise {\n    const user = await this.usersService.createOne(data);\n    const refreshToken = await this.userRefreshTokensService.generateAndCreateOne({\n      owner: { id: user.id },\n    });\n    return this.generateTokens(user, refreshToken);\n  }\n\n  /**\n   * [description]\n   * @param conditions\n   * @param options\n   */\n  public async validateUser(\n    conditions: FindOptionsWhere,\n    options?: FindOneOptions,\n  ): Promise {\n    const initialOptions: FindOneOptions = {\n      select: { id: true, password: true, role: true },\n      loadEagerRelations: false,\n    };\n    return this.usersService\n      .selectOne(conditions, Object.assign(initialOptions, options))\n      .catch(() => {\n        throw new BadRequestException(ErrorTypeEnum.AUTH_INCORRECT_CREDENTIALS);\n      });\n  }\n\n  /**\n   * [description]\n   * @param data\n   * @param encrypted\n   */\n  public async validatePassword(data: string, encrypted: string): Promise {\n    return compare(data, encrypted).catch(() => {\n      throw new BadRequestException(ErrorTypeEnum.AUTH_PASSWORDS_DO_NOT_MATCH);\n    });\n  }\n\n  /**\n   * [description]\n   * @param data\n   */\n  public async validateEmailCode(data: ConfirmationEmailDto): Promise> {\n    const { code, email } = data;\n    const user = await this.usersService.selectOne(\n      { email },\n      { loadEagerRelations: false, select: { id: true, password: true } },\n    );\n\n    const cacheCode = await this.cacheManager.get(user.id);\n    if (cacheCode !== code)\n      throw new BadRequestException(ErrorTypeEnum.AUTH_INCORRECT_CONFIRMATION_EMAIL_CODE);\n\n    return user;\n  }\n\n  /**\n   * [description]\n   * @param data\n   */\n  public async sendResetPassword(data: SendResetPasswordDto): Promise {\n    const { id } = await this.usersService.selectOne(data, {\n      loadEagerRelations: false,\n      select: { id: true },\n    });\n\n    const code = this.generateCode();\n    this.cacheManager.set(id, code);\n\n    await this.sendGridService.sendMail({\n      to: data.email,\n      subject: 'Забули свій пароль?',\n      text: `Код для скидання паролю: ${code}`,\n      html: `Код для скидання паролю: ${code}`,\n    });\n  }\n\n  /**\n   * [description]\n   * @param data\n   */\n  public async resetPassword(data: ResetPasswordDto): Promise {\n    const { id, password } = await this.validateEmailCode(data);\n\n    if (await this.validatePassword(data.password, password))\n      throw new BadRequestException(ErrorTypeEnum.NEW_PASSWORD_AND_OLD_PASSWORD_CANNOT_BE_SAME);\n\n    await this.cacheManager.del(id);\n    await this.usersService.updateOne({ id }, { password: data.password });\n  }\n\n  /**\n   * [description]\n   * @param data\n   * @param user\n   */\n  public async updatePassword(\n    data: UpdatePasswordDto,\n    user: Partial,\n  ): Promise {\n    if (!(await this.validatePassword(data.oldPassword, user.password)))\n      throw new BadRequestException(ErrorTypeEnum.AUTH_PASSWORDS_DO_NOT_MATCH);\n    return this.usersService.updateOne({ id: user.id }, { password: data.password });\n  }\n\n  /**\n   * [description]\n   * @param data\n   * @param user\n   */\n  public async updateEmail(data: UpdateEmailDto, user: Partial): Promise {\n    if (!(await this.validatePassword(data.password, user.password)))\n      throw new BadRequestException(ErrorTypeEnum.AUTH_PASSWORDS_DO_NOT_MATCH);\n    return this.usersService.updateOne({ id: user.id }, { email: data.email });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/ConfigModule.html":{"url":"modules/ConfigModule.html","title":"module - ConfigModule","body":"\n                   \n\n\n\n\n    Modules\n    ConfigModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_ConfigModule\n\n\n\ncluster_ConfigModule_providers\n\n\n\ncluster_ConfigModule_exports\n\n\n\n\nConfigService \n\nConfigService \n\n\n\nConfigModule\n\nConfigModule\n\nConfigService  -->\n\nConfigModule->ConfigService \n\n\n\n\n\nConfigService\n\nConfigService\n\nConfigModule -->\n\nConfigService->ConfigModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/config/config.module.ts\n        \n\n\n\n        \n            Description\n        \n        \n            [description]\n\n        \n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            ConfigService\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            ConfigService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module, Global } from '@nestjs/common';\n\nimport { ConfigService } from './config.service';\n\n/**\n * [description]\n */\n@Global()\n@Module({\n  providers: [ConfigService],\n  exports: [ConfigService],\n})\nexport class ConfigModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/ConfigService.html":{"url":"injectables/ConfigService.html","title":"injectable - ConfigService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  ConfigService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/config/config.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Configuration service\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                get\n                            \n                            \n                                    Public\n                                getDest\n                            \n                            \n                                    Public\n                                getMode\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/config/config.service.ts:11\n                            \n                        \n\n                \n                    \n                            Configuration service constructor\nDotEnv config\n\n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        get\n                        \n                    \n                \n            \n            \n                \n                    \n                    get(key: string)\n                \n            \n\n\n            \n                \n                    Defined in src/config/config.service.ts:46\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        T\n                    \n                \n            \n\n            \n                \n                    Method for getting the value of a variable in the environment\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    key\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The key in the environment variable object must be a string\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     T\n\n                    \n                    \n                        Returns the generated type limited the function types JSON.parse()\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        getDest\n                        \n                    \n                \n            \n            \n                \n                    \n                    getDest(key: string, filename?: string)\n                \n            \n\n\n            \n                \n                    Defined in src/config/config.service.ts:27\n                \n            \n\n\n            \n                \n                    Method to get the path to a directory or file in this directory based on an environment variable\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    key\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The key in the environment variable object must be a string\n\n                                    \n                                \n                                \n                                    filename\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                    \n                                        The file name for a specific directory must be string, is optional\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        Returns the absolute path to a file or directory as a string\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        getMode\n                        \n                    \n                \n            \n            \n                \n                    \n                    getMode(mode: ConfigMode)\n                \n            \n\n\n            \n                \n                    Defined in src/config/config.service.ts:37\n                \n            \n\n\n            \n                \n                    Method for checking application operating modes\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    mode\n                                    \n                                                ConfigMode\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The mode to be checked must be enum modes in ConfigMode\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         boolean\n\n                    \n                    \n                        Returns the boolean value\n\n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { config } from 'dotenv';\nimport { join } from 'path';\n\nimport { ConfigMode } from './interfaces/config.interface';\n\n/**\n * Configuration service\n */\n@Injectable()\nexport class ConfigService {\n  /**\n   * Configuration service constructor\n   * DotEnv config\n   */\n  constructor() {\n    const { error } = config({ path: `env/.env.${process.env.NODE_ENV}` });\n    if (error) throw error;\n  }\n\n  /**\n   * Method to get the path to a directory or file in this directory based on an environment variable\n   * @param  key      The key in the environment variable object must be a string\n   * @param  filename The file name for a specific directory must be string, is optional\n   * @return          Returns the absolute path to a file or directory as a string\n   */\n  public getDest(key: string, filename?: string): string {\n    filename = process.env[filename] || filename || '/';\n    return join(process.cwd(), this.get(key), filename);\n  }\n\n  /**\n   * Method for checking application operating modes\n   * @param  mode The mode to be checked must be enum modes in ConfigMode\n   * @return     Returns the boolean value\n   */\n  public getMode(mode: ConfigMode): boolean {\n    return process.env['NODE_ENV'] === mode;\n  }\n\n  /**\n   * Method for getting the value of a variable in the environment\n   * @param  key The key in the environment variable object must be a string\n   * @return     Returns the generated type limited the function types JSON.parse()\n   */\n  public get(key: string): T {\n    const variable = process.env[key];\n    if (!variable) throw TypeError(`The ${key} cannot be undefined`);\n    try {\n      return JSON.parse(variable);\n    } catch {\n      return (variable);\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ConfirmationEmailDto.html":{"url":"classes/ConfirmationEmailDto.html","title":"class - ConfirmationEmailDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ConfirmationEmailDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/auth/dto/confirmation-email.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                [description]\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Readonly\n                                code\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        code\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Length(6)@IsString()@ApiProperty({example: '123456', maxLength: 6})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/auth/dto/confirmation-email.dto.ts:15\n                        \n                    \n\n            \n                \n                    [description]\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { CreateUserDto } from '../../users/dto';\nimport { ApiProperty, PickType } from '@nestjs/swagger';\nimport { IsString, Length } from 'class-validator';\n\n/**\n * [description]\n */\nexport class ConfirmationEmailDto extends PickType(CreateUserDto, ['email']) {\n  /**\n   * [description]\n   */\n  @Length(6)\n  @IsString()\n  @ApiProperty({ example: '123456', maxLength: 6 })\n  public readonly code: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateFileDto.html":{"url":"classes/CreateFileDto.html","title":"class - CreateFileDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateFileDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/files/dto/create-file.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                [description]\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Readonly\n                                file\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        file\n                        \n                    \n                \n            \n                \n                    \n                        Type :         UploadedFile\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()@ApiProperty({type: String, format: 'binary', description: 'multipart file field'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/files/dto/create-file.dto.ts:19\n                        \n                    \n\n            \n                \n                    Fastify multipart instance\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport { IsNotEmpty } from 'class-validator';\n\nimport { UploadedFile } from 'src/multipart';\n\n/**\n * [description]\n */\nexport class CreateFileDto {\n  /**\n   * Fastify multipart instance\n   */\n  @IsNotEmpty()\n  @ApiProperty({\n    type: String,\n    format: 'binary',\n    description: 'multipart file field',\n  })\n  public readonly file: UploadedFile;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/CreateMockFileReturn.html":{"url":"interfaces/CreateMockFileReturn.html","title":"interface - CreateMockFileReturn","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  CreateMockFileReturn\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            test/utils/mock-file.util.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            buffer\n                                        \n                                \n                                \n                                        \n                                            encoding\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            file\n                                        \n                                \n                                \n                                        \n                                            filename\n                                        \n                                \n                                \n                                        \n                                            filePath\n                                        \n                                \n                                \n                                        \n                                            mimetype\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        buffer\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        buffer:     Buffer\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     Buffer\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        encoding\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        encoding:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        file\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        file:     stream.Readable\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     stream.Readable\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        filename\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        filename:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        filePath\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        filePath:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        mimetype\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        mimetype:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import * as crypto from 'crypto';\nimport * as stream from 'stream';\nimport * as fs from 'fs';\n\nimport { ConfigService } from 'src/config';\n\nconst configService = new ConfigService();\n\nexport interface CreateMockFileReturn {\n  filename: string;\n  encoding: string;\n  mimetype: string;\n  filePath: string;\n  buffer: Buffer;\n  file?: stream.Readable;\n}\n\nexport function createMockFileMeta(data?: Partial): CreateMockFileReturn {\n  const filename = crypto.randomBytes(8).toString('hex') + '.png';\n  const filePath = configService.getDest('STORE_DEST', filename);\n  const encoding = '7bit';\n  const mimetype = 'image/png';\n  const buffer = crypto.randomBytes(64);\n  const file = stream.Readable.from(buffer.toString());\n  return Object.assign({ filename, encoding, mimetype, filePath, file, buffer }, data);\n}\n\nexport function createMockFile(data?: Partial): CreateMockFileReturn {\n  const { filename, encoding, mimetype, filePath, buffer } = createMockFileMeta();\n  fs.writeFileSync(filePath, buffer);\n  expect(fs.existsSync(filePath)).toEqual(true);\n  return Object.assign({ filename, encoding, mimetype, filePath, buffer }, data);\n}\n\n    \n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateNotificationDto.html":{"url":"classes/CreateNotificationDto.html","title":"class - CreateNotificationDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateNotificationDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/notifications/dto/create-notification.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Readonly\n                                title\n                            \n                            \n                                    Public\n                                    Readonly\n                                type\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        title\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @MinLength(1)@MaxLength(256)@ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/notifications/dto/create-notification.dto.ts:10\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        type\n                        \n                    \n                \n            \n                \n                    \n                        Type :         NotificationsTypeEnum\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsEnum(NotificationsTypeEnum)@ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/notifications/dto/create-notification.dto.ts:14\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { MaxLength, MinLength, IsEnum } from 'class-validator';\nimport { ApiProperty } from '@nestjs/swagger';\n\nimport { NotificationsTypeEnum } from '../enums';\n\nexport class CreateNotificationDto {\n  @MinLength(1)\n  @MaxLength(256)\n  @ApiProperty()\n  public readonly title: string;\n\n  @IsEnum(NotificationsTypeEnum)\n  @ApiProperty()\n  public readonly type: NotificationsTypeEnum;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateProfileDto.html":{"url":"classes/CreateProfileDto.html","title":"class - CreateProfileDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateProfileDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/auth/dto/create-profile.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                [description]\n\n            \n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PickType } from '@nestjs/swagger';\nimport { CreateUserDto } from '../../users/dto';\n\n/**\n * [description]\n */\nexport class CreateProfileDto extends PickType(CreateUserDto, ['password', 'email']) {}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateUserDto.html":{"url":"classes/CreateUserDto.html","title":"class - CreateUserDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateUserDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/users/dto/create-user.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                [description]\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Readonly\n                                    Optional\n                                cover\n                            \n                            \n                                    Public\n                                    Readonly\n                                email\n                            \n                            \n                                    Public\n                                    Readonly\n                                password\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                            Optional\n                        cover\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ID\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@ValidateNested()@Type(undefined)@ApiProperty({type: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/users/dto/create-user.dto.ts:33\n                        \n                    \n\n            \n                \n                    [description]\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsEmail()@ApiProperty({example: 'admin@gmail.com', maxLength: 320})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/users/dto/create-user.dto.ts:16\n                        \n                    \n\n            \n                \n                    [description]\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @MinLength(8)@MaxLength(64)@ApiProperty({minLength: 8, maxLength: 64, example: 'password'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/users/dto/create-user.dto.ts:24\n                        \n                    \n\n            \n                \n                    [description]\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsEmail, IsOptional, MaxLength, MinLength, ValidateNested } from 'class-validator';\nimport { ApiProperty } from '@nestjs/swagger';\nimport { Type } from 'class-transformer';\n\nimport { ID } from 'src/common/dto';\n\n/**\n * [description]\n */\nexport class CreateUserDto {\n  /**\n   * [description]\n   */\n  @IsEmail()\n  @ApiProperty({ example: 'admin@gmail.com', maxLength: 320 })\n  public readonly email: string;\n\n  /**\n   * [description]\n   */\n  @MinLength(8)\n  @MaxLength(64)\n  @ApiProperty({ minLength: 8, maxLength: 64, example: 'password' })\n  public readonly password: string;\n\n  /**\n   * [description]\n   */\n  @IsOptional()\n  @ValidateNested()\n  @Type(() => ID)\n  @ApiProperty({ type: () => ID })\n  public readonly cover?: ID;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateUserNotificationTokenDto.html":{"url":"classes/CreateUserNotificationTokenDto.html","title":"class - CreateUserNotificationTokenDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateUserNotificationTokenDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/users/dto/create-user-notification-token.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                [description]\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Readonly\n                                token\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        token\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @MaxLength(1024)@ApiProperty({maxLength: 1024})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/users/dto/create-user-notification-token.dto.ts:13\n                        \n                    \n\n            \n                \n                    [description]\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport { MaxLength } from 'class-validator';\n\n/**\n * [description]\n */\nexport class CreateUserNotificationTokenDto {\n  /**\n   * [description]\n   */\n  @MaxLength(1024)\n  @ApiProperty({ maxLength: 1024 })\n  public readonly token: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CredentialsDto.html":{"url":"classes/CredentialsDto.html","title":"class - CredentialsDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CredentialsDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/auth/dto/credentials.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                [description]\n\n            \n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PickType } from '@nestjs/swagger';\n\nimport { CreateUserDto } from '../../users/dto';\n\n/**\n * [description]\n */\nexport class CredentialsDto extends PickType(CreateUserDto, ['email', 'password']) {}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/DatabaseModule.html":{"url":"modules/DatabaseModule.html","title":"module - DatabaseModule","body":"\n                   \n\n\n\n\n    Modules\n    DatabaseModule\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/database/database.module.ts\n        \n\n\n\n        \n            Description\n        \n        \n            [description]\n\n        \n\n\n        \n            \n            \n        \n\n\n    \n\n\n    \n        import { TypeOrmModule, TypeOrmModuleOptions } from '@nestjs/typeorm';\nimport { Module } from '@nestjs/common';\nimport { dirname } from 'path';\n\nimport { ConfigService } from 'src/config';\nimport { TlsOptions } from 'node:tls';\n\n/**\n * [description]\n */\n@Module({\n  imports: [\n    TypeOrmModule.forRootAsync({\n      useFactory: (configService: ConfigService) => {\n        const ssl: TlsOptions = configService.get('TYPEORM_SSL') && {\n          rejectUnauthorized: false,\n        };\n\n        return {\n          name: configService.get('TYPEORM_NAME'),\n          type: configService.get('TYPEORM_TYPE'),\n          host: configService.get('TYPEORM_HOST'),\n          port: configService.get('TYPEORM_PORT'),\n          database: configService.get('TYPEORM_DATABASE'),\n          username: configService.get('TYPEORM_USERNAME'),\n          password: configService.get('TYPEORM_PASSWORD'),\n          cache: configService.get('TYPEORM_CACHE'),\n          logging: configService.get('TYPEORM_LOGGING'),\n          dropSchema: configService.get('TYPEORM_DROP_SCHEMA'),\n          synchronize: configService.get('TYPEORM_SYNCHRONIZE'),\n          migrationsRun: configService.get('TYPEORM_MIGRATIONS_RUN'),\n          entities: [dirname(__dirname) + '/modules/**/*.entity.{ts,js}'],\n          migrations: [__dirname + '/migrations/*.{ts,js}'],\n          ssl,\n        } as TypeOrmModuleOptions;\n      },\n      inject: [ConfigService],\n    }),\n  ],\n})\nexport class DatabaseModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/DeleteUserNotificationTokenDto.html":{"url":"classes/DeleteUserNotificationTokenDto.html","title":"class - DeleteUserNotificationTokenDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  DeleteUserNotificationTokenDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/users/dto/delete-user-notification-token.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                [description]\n\n            \n\n            \n                Extends\n            \n            \n                        CreateUserNotificationTokenDto\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Readonly\n                                token\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        token\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @MaxLength(1024)@ApiProperty({maxLength: 1024})\n                        \n                    \n                \n                        \n                            \n                                Inherited from         CreateUserNotificationTokenDto\n\n                            \n                        \n                    \n                        \n                                Defined in         CreateUserNotificationTokenDto:13\n\n                        \n                    \n\n            \n                \n                    [description]\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { CreateUserNotificationTokenDto } from './create-user-notification-token.dto';\n\n/**\n * [description]\n */\nexport class DeleteUserNotificationTokenDto extends CreateUserNotificationTokenDto {}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/DownloadFileDto.html":{"url":"classes/DownloadFileDto.html","title":"class - DownloadFileDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  DownloadFileDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/files/dto/download-file.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                [description]\n\n            \n\n            \n                Extends\n            \n            \n                        ID\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Readonly\n                                    Optional\n                                download\n                            \n                            \n                                    Public\n                                    Readonly\n                                id\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                            Optional\n                        download\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsBoolean()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/files/dto/download-file.dto.ts:13\n                        \n                    \n\n            \n                \n                    [description]\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsUUID()@ApiProperty()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         ID\n\n                            \n                        \n                    \n                        \n                                Defined in         ID:13\n\n                        \n                    \n\n            \n                \n                    Entity ID\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsBoolean, IsOptional } from 'class-validator';\nimport { ID } from 'src/common/dto';\n\n/**\n * [description]\n */\nexport class DownloadFileDto extends ID {\n  /**\n   * [description]\n   */\n  @IsOptional()\n  @IsBoolean()\n  public readonly download?: boolean;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/FileEntity.html":{"url":"classes/FileEntity.html","title":"class - FileEntity","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  FileEntity\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/files/entities/file.entity.ts\n        \n\n\n            \n                Description\n            \n            \n                [description]\n\n            \n\n\n            \n                Implements\n            \n            \n                        Partial\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Readonly\n                                createdAt\n                            \n                            \n                                    Public\n                                    Readonly\n                                encoding\n                            \n                            \n                                    Public\n                                    Readonly\n                                extname\n                            \n                            \n                                    Public\n                                    Readonly\n                                filename\n                            \n                            \n                                    Public\n                                    Readonly\n                                fileSize\n                            \n                            \n                                    Public\n                                    Readonly\n                                id\n                            \n                            \n                                    Public\n                                    Readonly\n                                mimetype\n                            \n                            \n                                    Public\n                                    Readonly\n                                owner\n                            \n                            \n                                    Public\n                                    Readonly\n                                title\n                            \n                            \n                                    Public\n                                    Readonly\n                                updatedAt\n                            \n                        \n                    \n                \n\n\n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    src\n                                \n                            \n                        \n                    \n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        createdAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({readOnly: true})@CreateDateColumn({readonly: true, type: 'timestamptz', default: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/files/entities/file.entity.ts:105\n                        \n                    \n\n            \n                \n                    [description]\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        encoding\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', length: 7, nullable: true})@ApiProperty({maxLength: 7, readOnly: true, nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/files/entities/file.entity.ts:87\n                        \n                    \n\n            \n                \n                    [description]\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        extname\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', length: 256, nullable: true})@ApiProperty({maxLength: 256, readOnly: true, nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/files/entities/file.entity.ts:94\n                        \n                    \n\n            \n                \n                    [description]\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        filename\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', length: 256, nullable: true})@ApiProperty({maxLength: 256, readOnly: true, nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/files/entities/file.entity.ts:66\n                        \n                    \n\n            \n                \n                    [description]\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        fileSize\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'bigint', nullable: true})@ApiProperty({readOnly: true, minimum: 1, nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/files/entities/file.entity.ts:73\n                        \n                    \n\n            \n                \n                    [description]\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({readOnly: true})@PrimaryGeneratedColumn('uuid')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/files/entities/file.entity.ts:27\n                        \n                    \n\n            \n                \n                    [description]\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        mimetype\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', length: 256, nullable: true})@ApiProperty({maxLength: 256, readOnly: true, nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/files/entities/file.entity.ts:80\n                        \n                    \n\n            \n                \n                    [description]\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        owner\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Partial\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @JoinColumn()@ApiHideProperty()@ManyToOne(undefined, {onDelete: 'CASCADE', nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/files/entities/file.entity.ts:52\n                        \n                    \n\n            \n                \n                    [description]\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        title\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', length: 256, nullable: true})@ApiProperty({maxLength: 256, readOnly: true, nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/files/entities/file.entity.ts:59\n                        \n                    \n\n            \n                \n                    [description]\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        updatedAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({readOnly: true})@UpdateDateColumn({readonly: true, type: 'timestamptz', default: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/files/entities/file.entity.ts:116\n                        \n                    \n\n            \n                \n                    [description]\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        src\n                    \n                \n\n                \n                    \n                        getsrc()\n                    \n                \n                            \n                                \n                                    Defined in src/modules/files/entities/file.entity.ts:36\n                                \n                            \n                    \n                        \n                                [description]\n\n\n                                \n                                        Example :\n                                            \n                                                for s3\nreturn ${process.env.CDN}/${this.filename}${this.extname};\n                                            \n                                \n                                \n                                    Returns :         string\n\n                                \n                        \n                    \n\n            \n        \n\n    \n\n\n    \n        import { ApiHideProperty, ApiProperty, PickType } from '@nestjs/swagger';\nimport { Multipart } from 'fastify-multipart';\nimport { Expose } from 'class-transformer';\nimport { join } from 'node:path';\nimport {\n  Column,\n  Entity,\n  ManyToOne,\n  JoinColumn,\n  CreateDateColumn,\n  UpdateDateColumn,\n  PrimaryGeneratedColumn,\n} from 'typeorm';\n\nimport { UserEntity } from 'src/modules/users/entities';\n\n/**\n * [description]\n */\n@Entity('files')\nexport class FileEntity implements Partial {\n  /**\n   * [description]\n   */\n  @ApiProperty({ readOnly: true })\n  @PrimaryGeneratedColumn('uuid')\n  public readonly id: string;\n\n  /**\n   * [description]\n   * @example for s3\n   * return `${process.env.CDN}/${this.filename}${this.extname}`;\n   */\n  @Expose({ toClassOnly: true })\n  @ApiProperty({ readOnly: true })\n  get src(): string {\n    if (!this.fileSize) return null;\n    const url = new URL(join(process.env.CDN, this.title));\n    url.searchParams.set('id', this.id);\n    return url.toString();\n  }\n\n  /**\n   * [description]\n   */\n  @JoinColumn()\n  @ApiHideProperty()\n  @ManyToOne(() => UserEntity, {\n    onDelete: 'CASCADE',\n    nullable: true,\n  })\n  public readonly owner: Partial;\n\n  /**\n   * [description]\n   */\n  @Column({ type: 'varchar', length: 256, nullable: true })\n  @ApiProperty({ maxLength: 256, readOnly: true, nullable: true })\n  public readonly title: string;\n\n  /**\n   * [description]\n   */\n  @Column({ type: 'varchar', length: 256, nullable: true })\n  @ApiProperty({ maxLength: 256, readOnly: true, nullable: true })\n  public readonly filename: string;\n\n  /**\n   * [description]\n   */\n  @Column({ type: 'bigint', nullable: true })\n  @ApiProperty({ readOnly: true, minimum: 1, nullable: true })\n  public readonly fileSize: string;\n\n  /**\n   * [description]\n   */\n  @Column({ type: 'varchar', length: 256, nullable: true })\n  @ApiProperty({ maxLength: 256, readOnly: true, nullable: true })\n  public readonly mimetype: string;\n\n  /**\n   * [description]\n   */\n  @Column({ type: 'varchar', length: 7, nullable: true })\n  @ApiProperty({ maxLength: 7, readOnly: true, nullable: true })\n  public readonly encoding: string;\n\n  /**\n   * [description]\n   */\n  @Column({ type: 'varchar', length: 256, nullable: true })\n  @ApiProperty({ maxLength: 256, readOnly: true, nullable: true })\n  public readonly extname: string;\n\n  /**\n   * [description]\n   */\n  @ApiProperty({ readOnly: true })\n  @CreateDateColumn({\n    readonly: true,\n    type: 'timestamptz',\n    default: () => 'NOW()',\n  })\n  public readonly createdAt: Date;\n\n  /**\n   * [description]\n   */\n  @ApiProperty({ readOnly: true })\n  @UpdateDateColumn({\n    readonly: true,\n    type: 'timestamptz',\n    default: () => 'NOW()',\n  })\n  public readonly updatedAt: Date;\n}\n\n/**\n * [description]\n */\nexport class FileEntityPreview extends PickType(FileEntity, ['id', 'src']) {\n  /**\n   * [description]\n   * @param id\n   * @param src\n   * @param fileSize\n   */\n  constructor({ id, src }: Partial) {\n    super();\n    Object.assign(this, { id, src });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/FileEntityPreview.html":{"url":"classes/FileEntityPreview.html","title":"class - FileEntityPreview","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  FileEntityPreview\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/files/entities/file.entity.ts\n        \n\n\n            \n                Description\n            \n            \n                [description]\n\n            \n\n\n\n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(undefined: Partial)\n                    \n                \n                        \n                            \n                                Defined in src/modules/files/entities/file.entity.ts:122\n                            \n                        \n\n                \n                    \n                            [description]\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                  \n                                                        \n                                                                        Partial\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiHideProperty, ApiProperty, PickType } from '@nestjs/swagger';\nimport { Multipart } from 'fastify-multipart';\nimport { Expose } from 'class-transformer';\nimport { join } from 'node:path';\nimport {\n  Column,\n  Entity,\n  ManyToOne,\n  JoinColumn,\n  CreateDateColumn,\n  UpdateDateColumn,\n  PrimaryGeneratedColumn,\n} from 'typeorm';\n\nimport { UserEntity } from 'src/modules/users/entities';\n\n/**\n * [description]\n */\n@Entity('files')\nexport class FileEntity implements Partial {\n  /**\n   * [description]\n   */\n  @ApiProperty({ readOnly: true })\n  @PrimaryGeneratedColumn('uuid')\n  public readonly id: string;\n\n  /**\n   * [description]\n   * @example for s3\n   * return `${process.env.CDN}/${this.filename}${this.extname}`;\n   */\n  @Expose({ toClassOnly: true })\n  @ApiProperty({ readOnly: true })\n  get src(): string {\n    if (!this.fileSize) return null;\n    const url = new URL(join(process.env.CDN, this.title));\n    url.searchParams.set('id', this.id);\n    return url.toString();\n  }\n\n  /**\n   * [description]\n   */\n  @JoinColumn()\n  @ApiHideProperty()\n  @ManyToOne(() => UserEntity, {\n    onDelete: 'CASCADE',\n    nullable: true,\n  })\n  public readonly owner: Partial;\n\n  /**\n   * [description]\n   */\n  @Column({ type: 'varchar', length: 256, nullable: true })\n  @ApiProperty({ maxLength: 256, readOnly: true, nullable: true })\n  public readonly title: string;\n\n  /**\n   * [description]\n   */\n  @Column({ type: 'varchar', length: 256, nullable: true })\n  @ApiProperty({ maxLength: 256, readOnly: true, nullable: true })\n  public readonly filename: string;\n\n  /**\n   * [description]\n   */\n  @Column({ type: 'bigint', nullable: true })\n  @ApiProperty({ readOnly: true, minimum: 1, nullable: true })\n  public readonly fileSize: string;\n\n  /**\n   * [description]\n   */\n  @Column({ type: 'varchar', length: 256, nullable: true })\n  @ApiProperty({ maxLength: 256, readOnly: true, nullable: true })\n  public readonly mimetype: string;\n\n  /**\n   * [description]\n   */\n  @Column({ type: 'varchar', length: 7, nullable: true })\n  @ApiProperty({ maxLength: 7, readOnly: true, nullable: true })\n  public readonly encoding: string;\n\n  /**\n   * [description]\n   */\n  @Column({ type: 'varchar', length: 256, nullable: true })\n  @ApiProperty({ maxLength: 256, readOnly: true, nullable: true })\n  public readonly extname: string;\n\n  /**\n   * [description]\n   */\n  @ApiProperty({ readOnly: true })\n  @CreateDateColumn({\n    readonly: true,\n    type: 'timestamptz',\n    default: () => 'NOW()',\n  })\n  public readonly createdAt: Date;\n\n  /**\n   * [description]\n   */\n  @ApiProperty({ readOnly: true })\n  @UpdateDateColumn({\n    readonly: true,\n    type: 'timestamptz',\n    default: () => 'NOW()',\n  })\n  public readonly updatedAt: Date;\n}\n\n/**\n * [description]\n */\nexport class FileEntityPreview extends PickType(FileEntity, ['id', 'src']) {\n  /**\n   * [description]\n   * @param id\n   * @param src\n   * @param fileSize\n   */\n  constructor({ id, src }: Partial) {\n    super();\n    Object.assign(this, { id, src });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/FileValidationPipe.html":{"url":"injectables/FileValidationPipe.html","title":"injectable - FileValidationPipe","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  FileValidationPipe\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/multipart/pipes/file-validation.pipe.ts\n        \n\n\n            \n                Description\n            \n            \n                [description]\n\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                allowedTypes\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                transform\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(configService: ConfigService)\n                    \n                \n                        \n                            \n                                Defined in src/multipart/pipes/file-validation.pipe.ts:15\n                            \n                        \n\n                \n                    \n                            [description]\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                        ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        transform\n                        \n                    \n                \n            \n            \n                \ntransform(value: Multipart)\n                \n            \n\n\n            \n                \n                    Defined in src/multipart/pipes/file-validation.pipe.ts:29\n                \n            \n\n\n            \n                \n                    [description]\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                            Multipart\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        allowedTypes\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                    \n                        \n                                Defined in src/multipart/pipes/file-validation.pipe.ts:15\n                        \n                    \n\n            \n                \n                    [description]\n\n                \n            \n\n        \n    \n\n\n    \n\n\n    \n        import { Injectable, PipeTransform, UnsupportedMediaTypeException } from '@nestjs/common';\nimport { Multipart } from 'fastify-multipart';\n\nimport { ErrorTypeEnum } from 'src/common/enums';\nimport { ConfigService } from 'src/config';\n\n/**\n * [description]\n */\n@Injectable()\nexport class FileValidationPipe implements PipeTransform {\n  /**\n   * [description]\n   */\n  private readonly allowedTypes: string[];\n\n  /**\n   * [description]\n   * @param configService\n   */\n  constructor(private readonly configService: ConfigService) {\n    this.allowedTypes = this.configService.get('STORE_MIME_TYPE');\n  }\n\n  /**\n   * [description]\n   * @param value\n   */\n  transform(value: Multipart) {\n    if (!this.allowedTypes.includes(value.mimetype))\n      throw new UnsupportedMediaTypeException(ErrorTypeEnum.FILE_UNSUPPORTED_TYPE);\n    return value;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/FilesController.html":{"url":"controllers/FilesController.html","title":"controller - FilesController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  FilesController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/files/files.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                files\n            \n\n\n            \n                Description\n            \n            \n                [description]\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                createOne\n                            \n                            \n                                    Public\n                                    Async\n                                deleteOne\n                            \n                            \n                                    Public\n                                    Async\n                                downloadOne\n                            \n                            \n                                    Public\n                                    Async\n                                selectAll\n                            \n                            \n                                    Public\n                                    Async\n                                selectOne\n                            \n                            \n                                    Public\n                                    Async\n                                updateOne\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        createOne\n                        \n                    \n                \n            \n            \n                \n                    \n                    createOne(file: Multipart, owner: UserEntity)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('')@ApiBearerAuth()@UseGuards(JwtAuthGuard)@ApiBody({type: CreateFileDto})@ApiConsumes('multipart/form-data')\n                \n            \n\n            \n                \n                    Defined in src/modules/files/files.controller.ts:60\n                \n            \n\n\n            \n                \n                    [description]\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    file\n                                    \n                                            Multipart\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    owner\n                                    \n                                                UserEntity\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        deleteOne\n                        \n                    \n                \n            \n            \n                \n                    \n                    deleteOne(conditions: ID, owner: UserEntity)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete(':id')@ApiBearerAuth()@UseGuards(JwtAuthGuard)@UseRole(UserRoleEnum.ADMIN)\n                \n            \n\n            \n                \n                    Defined in src/modules/files/files.controller.ts:122\n                \n            \n\n\n            \n                \n                    [description]\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    conditions\n                                    \n                                                ID\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    owner\n                                    \n                                                UserEntity\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        downloadOne\n                        \n                    \n                \n            \n            \n                \n                    \n                    downloadOne(rep: FastifyReply, options: DownloadFileDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('download/:filename')@ApiParam({name: 'filename', type: String})\n                \n            \n\n            \n                \n                    Defined in src/modules/files/files.controller.ts:134\n                \n            \n\n\n            \n                \n                    [description]\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    rep\n                                    \n                                            FastifyReply\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    options\n                                    \n                                                DownloadFileDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        selectAll\n                        \n                    \n                \n            \n            \n                \n                    \n                    selectAll(options: SelectFilesDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()@ApiBearerAuth()@UseGuards(JwtAuthGuard)@UseRole(UserRoleEnum.ADMIN)\n                \n            \n\n            \n                \n                    Defined in src/modules/files/files.controller.ts:72\n                \n            \n\n\n            \n                \n                    [description]\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    options\n                                    \n                                                SelectFilesDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        selectOne\n                        \n                    \n                \n            \n            \n                \n                    \n                    selectOne(conditions: ID, owner: UserEntity, options: SelectFileDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get(':id')@ApiBearerAuth()@UseGuards(JwtAuthGuard)@UseRole(UserRoleEnum.ADMIN)\n                \n            \n\n            \n                \n                    Defined in src/modules/files/files.controller.ts:86\n                \n            \n\n\n            \n                \n                    [description]\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    conditions\n                                    \n                                                ID\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    owner\n                                    \n                                                UserEntity\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    options\n                                    \n                                                SelectFileDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        updateOne\n                        \n                    \n                \n            \n            \n                \n                    \n                    updateOne(file: Multipart, conditions: ID, owner: UserEntity)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch(':id')@ApiBearerAuth()@UseGuards(JwtAuthGuard)@ApiBody({type: CreateFileDto})@ApiConsumes('multipart/form-data')\n                \n            \n\n            \n                \n                    Defined in src/modules/files/files.controller.ts:105\n                \n            \n\n\n            \n                \n                    [description]\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    file\n                                    \n                                            Multipart\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    conditions\n                                    \n                                                ID\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    owner\n                                    \n                                                UserEntity\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { ApiTags, ApiBearerAuth, ApiConsumes, ApiBody, ApiParam } from '@nestjs/swagger';\nimport { Multipart } from 'fastify-multipart';\nimport { FastifyReply } from 'fastify';\nimport {\n  Res,\n  Get,\n  Post,\n  Patch,\n  Param,\n  Query,\n  Delete,\n  UseGuards,\n  Controller,\n  UseInterceptors,\n  ClassSerializerInterceptor,\n} from '@nestjs/common';\n\nimport { User, UseRole } from 'src/common/decorators';\nimport { File } from 'src/multipart/decorators';\nimport { ID } from 'src/common/dto';\n\nimport { JwtAuthGuard } from '../auth/guards';\n\nimport { FileEntity } from './entities';\nimport {\n  SelectFileDto,\n  CreateFileDto,\n  SelectFilesDto,\n  DownloadFileDto,\n  PaginationFilesDto,\n} from './dto';\n\nimport { UserEntity } from '../users/entities';\nimport { FilesService } from './files.service';\nimport { UserRoleEnum } from '../users/enums';\n\n/**\n * [description]\n */\n@ApiTags('files')\n@Controller('files')\n@UseInterceptors(ClassSerializerInterceptor)\nexport class FilesController {\n  /**\n   * [description]\n   * @param filesService\n   */\n  constructor(private readonly filesService: FilesService) {}\n\n  /**\n   * [description]\n   * @param file\n   * @param owner\n   */\n  @Post('')\n  @ApiBearerAuth()\n  @UseGuards(JwtAuthGuard)\n  @ApiBody({ type: CreateFileDto })\n  @ApiConsumes('multipart/form-data')\n  public async createOne(@File() file: Multipart, @User() owner: UserEntity): Promise {\n    return this.filesService.createOne(file, { owner: { id: owner.id } });\n  }\n\n  /**\n   * [description]\n   * @param options\n   */\n  @Get()\n  @ApiBearerAuth()\n  @UseGuards(JwtAuthGuard)\n  @UseRole(UserRoleEnum.ADMIN)\n  public async selectAll(@Query() options: SelectFilesDto): Promise {\n    return this.filesService.selectAll(options);\n  }\n\n  /**\n   * [description]\n   * @param conditions\n   * @param owner\n   * @param options\n   */\n  @Get(':id')\n  @ApiBearerAuth()\n  @UseGuards(JwtAuthGuard)\n  @UseRole(UserRoleEnum.ADMIN)\n  public async selectOne(\n    @Param() conditions: ID,\n    @User() owner: UserEntity,\n    @Query() options: SelectFileDto,\n  ): Promise {\n    return this.filesService.selectOne({ ...conditions, owner: { id: owner.id } }, options);\n  }\n\n  /**\n   * [description]\n   * @param file\n   * @param conditions\n   * @param owner\n   */\n  @Patch(':id')\n  @ApiBearerAuth()\n  @UseGuards(JwtAuthGuard)\n  @ApiBody({ type: CreateFileDto })\n  @ApiConsumes('multipart/form-data')\n  public async updateOne(\n    @File() file: Multipart,\n    @Param() conditions: ID,\n    @User() owner: UserEntity,\n  ): Promise {\n    return this.filesService.updateOne(file, { ...conditions, owner: { id: owner.id } });\n  }\n\n  /**\n   * [description]\n   * @param conditions\n   * @param owner\n   */\n  @Delete(':id')\n  @ApiBearerAuth()\n  @UseGuards(JwtAuthGuard)\n  @UseRole(UserRoleEnum.ADMIN)\n  public async deleteOne(@Param() conditions: ID, @User() owner: UserEntity): Promise {\n    return this.filesService.deleteOne({ ...conditions, owner: { id: owner.id } });\n  }\n\n  /**\n   * [description]\n   * @param rep\n   * @param owner\n   * @param options\n   */\n  @Get('download/:filename')\n  @ApiParam({ name: 'filename', type: String })\n  public async downloadOne(\n    @Res() rep: FastifyReply,\n    @Query() options: DownloadFileDto,\n  ): Promise {\n    return this.filesService.downloadOne(rep, { id: options.id }, options);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/FilesModule.html":{"url":"modules/FilesModule.html","title":"module - FilesModule","body":"\n                   \n\n\n\n\n    Modules\n    FilesModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_FilesModule\n\n\n\ncluster_FilesModule_exports\n\n\n\ncluster_FilesModule_providers\n\n\n\n\nFilesService \n\nFilesService \n\n\n\nFilesModule\n\nFilesModule\n\nFilesService  -->\n\nFilesModule->FilesService \n\n\n\n\n\nFilesService\n\nFilesService\n\nFilesModule -->\n\nFilesService->FilesModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/modules/files/files.module.ts\n        \n\n\n\n        \n            Description\n        \n        \n            [description]\n\n        \n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            FilesService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            FilesController\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            FilesService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { TypeOrmModule } from '@nestjs/typeorm';\nimport { Module } from '@nestjs/common';\n\nimport { FileEntity } from './entities';\n\nimport { FilesController } from './files.controller';\nimport { FilesService } from './files.service';\n\n/**\n * [description]\n */\n@Module({\n  imports: [TypeOrmModule.forFeature([FileEntity])],\n  controllers: [FilesController],\n  providers: [FilesService],\n  exports: [FilesService],\n})\nexport class FilesModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/FilesService.html":{"url":"injectables/FilesService.html","title":"injectable - FilesService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  FilesService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/files/files.service.ts\n        \n\n\n            \n                Description\n            \n            \n                [description]\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                createOne\n                            \n                            \n                                    Public\n                                    Async\n                                deleteOne\n                            \n                            \n                                    Public\n                                    Async\n                                downloadOne\n                            \n                            \n                                    Public\n                                find\n                            \n                            \n                                    Public\n                                    Async\n                                selectAll\n                            \n                            \n                                    Public\n                                    Async\n                                selectOne\n                            \n                            \n                                    Public\n                                    Async\n                                updateOne\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(fileEntityRepository: Repository, storageService: StorageService)\n                    \n                \n                        \n                            \n                                Defined in src/modules/files/files.service.ts:28\n                            \n                        \n\n                \n                    \n                            [description]\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        fileEntityRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        storageService\n                                                  \n                                                        \n                                                                        StorageService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        createOne\n                        \n                    \n                \n            \n            \n                \n                    \n                    createOne(multipart: Multipart, data?: Partial, options: SaveOptions)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/files/files.service.ts:45\n                \n            \n\n\n            \n                \n                    [description]\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    multipart\n                                    \n                                            Multipart\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    data\n                                    \n                                                Partial\n                                    \n\n                                    \n                                        Yes\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    options\n                                    \n                                            SaveOptions\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        { transaction: false }\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        deleteOne\n                        \n                    \n                \n            \n            \n                \n                    \n                    deleteOne(conditions: FindOptionsWhere, options: RemoveOptions)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/files/files.service.ts:154\n                \n            \n\n\n            \n                \n                    [description]\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    conditions\n                                    \n                                                FindOptionsWhere\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    options\n                                    \n                                            RemoveOptions\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        { transaction: false }\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        downloadOne\n                        \n                    \n                \n            \n            \n                \n                    \n                    downloadOne(rep: FastifyReply, conditions: FindOptionsWhere, undefined: DownloadFileDto)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/files/files.service.ts:173\n                \n            \n\n\n            \n                \n                    [description]\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    rep\n                                    \n                                            FastifyReply\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    conditions\n                                    \n                                                FindOptionsWhere\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    \n                                                DownloadFileDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        find\n                        \n                    \n                \n            \n            \n                \n                    \n                    find(optionsOrConditions?: FindManyOptions)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/files/files.service.ts:65\n                \n            \n\n\n            \n                \n                     [description]\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    optionsOrConditions\n                                    \n                                                FindManyOptions\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         SelectQueryBuilder\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        selectAll\n                        \n                    \n                \n            \n            \n                \n                    \n                    selectAll(options: FindManyBracketsOptions)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/files/files.service.ts:90\n                \n            \n\n\n            \n                \n                    [description]\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    options\n                                    \n                                                FindManyBracketsOptions\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        { loadEagerRelations: false }\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        selectOne\n                        \n                    \n                \n            \n            \n                \n                    \n                    selectOne(conditions: FindOptionsWhere, options: FindOneOptions)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/files/files.service.ts:106\n                \n            \n\n\n            \n                \n                    [description]\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    conditions\n                                    \n                                                FindOptionsWhere\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    options\n                                    \n                                                FindOneOptions\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        { loadEagerRelations: false }\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        updateOne\n                        \n                    \n                \n            \n            \n                \n                    \n                    updateOne(file: Multipart, conditions: FindOptionsWhere, options: SaveOptions)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/files/files.service.ts:133\n                \n            \n\n\n            \n                \n                    [description]\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    file\n                                    \n                                            Multipart\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    conditions\n                                    \n                                                FindOptionsWhere\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    options\n                                    \n                                            SaveOptions\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        { transaction: false }\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, ConflictException, NotFoundException } from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { instanceToPlain } from 'class-transformer';\nimport { Multipart } from 'fastify-multipart';\nimport { FastifyReply } from 'fastify';\nimport {\n  Repository,\n  SaveOptions,\n  RemoveOptions,\n  FindOneOptions,\n  FindManyOptions,\n  FindOptionsUtils,\n  FindOptionsWhere,\n  SelectQueryBuilder,\n} from 'typeorm';\n\nimport { FindManyBracketsOptions } from 'src/common/interfaces';\nimport { ErrorTypeEnum } from 'src/common/enums';\nimport { StorageService } from 'src/multipart';\n\nimport { DownloadFileDto, PaginationFilesDto } from './dto';\nimport { FileEntity } from './entities';\n\n/**\n * [description]\n */\n@Injectable()\nexport class FilesService {\n  /**\n   * [description]\n   * @param fileEntityRepository\n   * @param storageService\n   */\n  constructor(\n    @InjectRepository(FileEntity)\n    private readonly fileEntityRepository: Repository,\n    private readonly storageService: StorageService,\n  ) {}\n\n  /**\n   * [description]\n   * @param file\n   * @param options\n   */\n  public async createOne(\n    multipart: Multipart,\n    data?: Partial,\n    options: SaveOptions = { transaction: false },\n  ): Promise {\n    return this.fileEntityRepository.manager.transaction(async () => {\n      const mergeIntoEntity = await this.storageService.createOne(multipart);\n      const entityLike = this.fileEntityRepository.create(mergeIntoEntity);\n      const entity = this.fileEntityRepository.merge(entityLike, data);\n      return this.fileEntityRepository.save(entity, options).catch(() => {\n        this.storageService.deleteOne(entityLike.filename);\n        throw new ConflictException(ErrorTypeEnum.FILE_ALREADY_EXIST);\n      });\n    });\n  }\n\n  /**\n   *  [description]\n   * @param optionsOrConditions\n   */\n  public find(optionsOrConditions?: FindManyOptions): SelectQueryBuilder {\n    const metadata = this.fileEntityRepository.metadata;\n    const qb = this.fileEntityRepository.createQueryBuilder(\n      FindOptionsUtils.extractFindManyOptionsAlias(optionsOrConditions) || metadata.name,\n    );\n\n    if (\n      !FindOptionsUtils.isFindManyOptions(optionsOrConditions) ||\n      optionsOrConditions.loadEagerRelations !== false\n    ) {\n      FindOptionsUtils.joinEagerRelations(qb, qb.alias, metadata);\n\n      /**\n       * Place for common relation\n       * @example qb.leftJoinAndSelect('FileEntity.relation_field', 'FileEntity_relation_field')\n       */\n    }\n\n    return qb.setFindOptions(optionsOrConditions);\n  }\n\n  /**\n   * [description]\n   * @param options\n   */\n  public async selectAll(\n    options: FindManyBracketsOptions = { loadEagerRelations: false },\n  ): Promise {\n    return this.find(options)\n      .getManyAndCount()\n      .then((data) => new PaginationFilesDto(data))\n      .catch(() => {\n        throw new NotFoundException(ErrorTypeEnum.FILES_NOT_FOUND);\n      });\n  }\n\n  /**\n   * [description]\n   * @param conditions\n   * @param options\n   */\n  public async selectOne(\n    conditions: FindOptionsWhere,\n    options: FindOneOptions = { loadEagerRelations: false },\n  ): Promise {\n    const qb = this.find({\n      ...instanceToPlain(options),\n      where: conditions,\n    });\n\n    /**\n     * Check owner of file\n     */\n    /* if (owner && owner['role'] !== UserRoleEnum.ADMIN)\n      qb.andWhere([{ owner: IsNull() }, { owner: { id: owner['id'] } }]);\n    else if (!owner) qb.andWhere({ owner: IsNull() }); */\n\n    return qb.getOneOrFail().catch(() => {\n      throw new NotFoundException(ErrorTypeEnum.FILE_NOT_FOUND);\n    });\n  }\n\n  /**\n   * [description]\n   * @param file\n   * @param conditions\n   * @param options\n   */\n  public async updateOne(\n    file: Multipart,\n    conditions: FindOptionsWhere,\n    options: SaveOptions = { transaction: false },\n  ): Promise {\n    return this.fileEntityRepository.manager.transaction(async () => {\n      const mergeIntoEntity = await this.selectOne(conditions);\n      const entityLike = await this.storageService.createOne(file);\n      const entity = this.fileEntityRepository.merge(mergeIntoEntity, entityLike);\n      return this.fileEntityRepository.save(entity, options).catch(() => {\n        this.storageService.deleteOne(entityLike.filename);\n        throw new ConflictException(ErrorTypeEnum.FILE_ALREADY_EXIST);\n      });\n    });\n  }\n\n  /**\n   * [description]\n   * @param conditions\n   * @param options\n   */\n  public async deleteOne(\n    conditions: FindOptionsWhere,\n    options: RemoveOptions = { transaction: false },\n  ): Promise {\n    return this.fileEntityRepository.manager.transaction(async () => {\n      const entity = await this.selectOne(conditions);\n      this.storageService.deleteOne(entity.filename);\n      return this.fileEntityRepository.remove(entity, options).catch(() => {\n        throw new NotFoundException(ErrorTypeEnum.FILE_NOT_FOUND);\n      });\n    });\n  }\n\n  /**\n   * [description]\n   * @param rep\n   * @param conditions\n   * @param options\n   */\n  public async downloadOne(\n    rep: FastifyReply,\n    conditions: FindOptionsWhere,\n    { download, ...options }: DownloadFileDto,\n  ): Promise {\n    const { filename, title, fileSize, mimetype } = await this.selectOne(conditions);\n    const disposition = download ? 'attachment' : 'inline';\n    if (!rep.request.headers.range)\n      return rep\n        .type(mimetype)\n        .status(200)\n        .headers({\n          'accept-ranges': 'bytes',\n          'content-length': +fileSize,\n          'content-disposition': `${disposition}; filename*=utf-8''${title}`,\n        })\n        .send(await this.storageService.selectOne({ filename }, options));\n\n    const range = rep.request.headers.range.replace(/bytes=/, '').split('-');\n    const end = range[1] ? parseInt(range[1], 10) : +fileSize - 1;\n    const start = range[0] ? parseInt(range[0], 10) : +fileSize - end;\n\n    if (start >= +fileSize || end >= +fileSize)\n      return rep\n        .status(416)\n        .headers({ 'Content-Range': `bytes */${+fileSize}` })\n        .send();\n\n    return rep\n      .type(mimetype)\n      .status(206)\n      .headers({\n        'accept-ranges': 'bytes',\n        'content-length': end - start + 1,\n        'content-disposition': `${disposition}; filename*=utf-8''${title}`,\n        'content-range': `bytes ${start}-${end}/${+fileSize}`,\n      })\n      .send(await this.storageService.selectOne({ filename }, { start, end }));\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/FindManyBracketsOptions.html":{"url":"interfaces/FindManyBracketsOptions.html","title":"interface - FindManyBracketsOptions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  FindManyBracketsOptions\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/interfaces/find-many-brackets.interface.ts\n        \n\n\n            \n                Description\n            \n            \n                [description]\n\n            \n\n            \n                Extends\n            \n            \n                    FindManyOptions\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            whereBrackets\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        whereBrackets\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        whereBrackets:     Brackets\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     Brackets\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    [description]\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { Brackets, FindManyOptions } from 'typeorm';\n\n/**\n * [description]\n */\nexport interface FindManyBracketsOptions extends FindManyOptions {\n  /**\n   * [description]\n   */\n  whereBrackets?: Brackets;\n}\n\n    \n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/FindManyOptionsDto.html":{"url":"classes/FindManyOptionsDto.html","title":"class - FindManyOptionsDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  FindManyOptionsDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/dto/find-many-options/find-many-options.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                [description]\n\n            \n\n            \n                Extends\n            \n            \n                        FindOneOptionsDto\n            \n\n            \n                Implements\n            \n            \n                            FindManyBracketsOptions\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Readonly\n                                    Optional\n                                asc\n                            \n                            \n                                    Public\n                                    Readonly\n                                    Optional\n                                desc\n                            \n                            \n                                    Public\n                                    Readonly\n                                    Optional\n                                page\n                            \n                            \n                                    Public\n                                    Readonly\n                                    Optional\n                                take\n                            \n                            \n                                    Public\n                                    Readonly\n                                    Optional\n                                eager\n                            \n                            \n                                    Public\n                                    Readonly\n                                    Optional\n                                selection\n                            \n                        \n                    \n                \n\n\n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    order\n                                \n                                \n                                    skip\n                                \n                            \n                        \n                    \n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                            Optional\n                        asc\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsArray()@IsOptional()@IsString({each: true})@IsNotEmpty({each: true})@Transform(undefined)@ApiProperty({type: undefined, description: Order, in which entities should be ordered. For order by relation field use elation.field})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/common/dto/find-many-options/find-many-options.dto.ts:29\n                        \n                    \n\n            \n                \n                    Order, in which entities should be ordered\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                            Optional\n                        desc\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsArray()@IsOptional()@IsString({each: true})@IsNotEmpty({each: true})@Transform(undefined)@ApiProperty({type: undefined, description: 'If the same fields are specified for sorting in two directions, the priority is given to DESC'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/common/dto/find-many-options/find-many-options.dto.ts:44\n                        \n                    \n\n            \n                \n                    If the same fields are specified for sorting in two directions, the priority is given to DESC\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                            Optional\n                        page\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 1\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@Min(1)@ApiProperty({type: String, example: 1, description: 'Offset (paginated) where from entities should be taken'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/common/dto/find-many-options/find-many-options.dto.ts:68\n                        \n                    \n\n            \n                \n                    Offset (paginated) where from entities should be taken\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                            Optional\n                        take\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 50\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@Min(1)@Max(100)@ApiProperty({type: String, example: 5, default: 50, description: 'Limit (paginated) - max number of entities should be taken'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/common/dto/find-many-options/find-many-options.dto.ts:82\n                        \n                    \n\n            \n                \n                    Limit (paginated) - max number of entities should be taken\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                            Optional\n                        eager\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsBooleanString()@ApiProperty({type: 'boolean', description: 'Indicates what relations of entity should be loaded'})\n                        \n                    \n                \n                        \n                            \n                                Inherited from         FindOneOptionsDto\n\n                            \n                        \n                    \n                        \n                                Defined in         FindOneOptionsDto:43\n\n                        \n                    \n\n            \n                \n                    Indicates what relations of entity should be loaded (simplified left join form)\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                            Optional\n                        selection\n                        \n                    \n                \n            \n                \n                    \n                        Type :     ()[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsArray()@IsOptional()@IsString({each: true})@IsNotEmpty({each: true})@Transform(undefined)@ApiProperty({type: undefined, example: undefined, description: 'Specifies what columns should be retrieved'})\n                        \n                    \n                \n                        \n                            \n                                Inherited from         FindOneOptionsDto\n\n                            \n                        \n                    \n                        \n                                Defined in         FindOneOptionsDto:24\n\n                        \n                    \n\n            \n                \n                    Specifies what columns should be retrieved\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        order\n                    \n                \n\n                \n                    \n                        getorder()\n                    \n                \n                            \n                                \n                                    Defined in src/common/dto/find-many-options/find-many-options.dto.ts:50\n                                \n                            \n                    \n                        \n                                Getter to form an object of order. Available after calling instanceToPlain\n\n\n                        \n                    \n\n            \n        \n        \n            \n                \n                    \n                        \n                        skip\n                    \n                \n\n                \n                    \n                        getskip()\n                    \n                \n                            \n                                \n                                    Defined in src/common/dto/find-many-options/find-many-options.dto.ts:88\n                                \n                            \n                    \n                        \n                                Getter to form an object of skip. Available after calling instanceToPlain\n\n\n                                \n                                    Returns :         number\n\n                                \n                        \n                    \n\n            \n        \n\n    \n\n\n    \n        import { IsArray, IsString, IsNotEmpty, IsOptional, Min, Max } from 'class-validator';\nimport { Expose, Transform } from 'class-transformer';\nimport { ApiProperty } from '@nestjs/swagger';\nimport { FindManyOptions } from 'typeorm';\n\nimport { FindOneOptionsDto } from '../find-one-options';\nimport { dotNotation } from 'src/common/helpers';\nimport { FindManyBracketsOptions } from 'src/common/interfaces/find-many-brackets.interface';\n\n/**\n * [description]\n */\nexport class FindManyOptionsDto\n  extends FindOneOptionsDto\n  implements FindManyBracketsOptions\n{\n  /**\n   * Order, in which entities should be ordered\n   */\n  @IsArray()\n  @IsOptional()\n  @IsString({ each: true })\n  @IsNotEmpty({ each: true })\n  @Transform(({ value }) => [].concat(value))\n  @ApiProperty({\n    type: [String],\n    description: `Order, in which entities should be ordered. For order by relation field use elation.field`,\n  })\n  public readonly asc?: string[];\n\n  /**\n   * If the same fields are specified for sorting in two directions, the priority is given to DESC\n   */\n  @IsArray()\n  @IsOptional()\n  @IsString({ each: true })\n  @IsNotEmpty({ each: true })\n  @Transform(({ value }) => [].concat(value))\n  @ApiProperty({\n    type: [String],\n    description:\n      'If the same fields are specified for sorting in two directions, the priority is given to DESC',\n  })\n  public readonly desc?: string[];\n\n  /**\n   * Getter to form an object of order. Available after calling instanceToPlain\n   */\n  @Expose({ toPlainOnly: true })\n  public get order(): FindManyOptions['order'] {\n    return Object.assign(\n      {},\n      this.asc && dotNotation(this.asc, 'ASC'),\n      this.desc && dotNotation(this.desc, 'DESC'),\n    );\n  }\n\n  /**\n   * Offset (paginated) where from entities should be taken\n   */\n  @IsOptional()\n  @Min(1)\n  @ApiProperty({\n    type: String,\n    example: 1,\n    description: 'Offset (paginated) where from entities should be taken',\n  })\n  public readonly page?: number = 1;\n\n  /**\n   * Limit (paginated) - max number of entities should be taken\n   */\n  @IsOptional()\n  @Min(1)\n  @Max(100)\n  @ApiProperty({\n    type: String,\n    example: 5,\n    default: 50,\n    description: 'Limit (paginated) - max number of entities should be taken',\n  })\n  public readonly take?: number = 50;\n\n  /**\n   * Getter to form an object of skip. Available after calling instanceToPlain\n   */\n  @Expose({ toPlainOnly: true })\n  public get skip(): number {\n    return this.take * (this.page - 1);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/FindOneOptionsDto.html":{"url":"classes/FindOneOptionsDto.html","title":"class - FindOneOptionsDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  FindOneOptionsDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/dto/find-one-options/find-one-options.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                [description]\n\n            \n\n\n            \n                Implements\n            \n            \n                        FindOneOptions\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Readonly\n                                    Optional\n                                eager\n                            \n                            \n                                    Public\n                                    Readonly\n                                    Optional\n                                selection\n                            \n                        \n                    \n                \n\n\n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    select\n                                \n                                \n                                    loadEagerRelations\n                                \n                            \n                        \n                    \n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                            Optional\n                        eager\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsBooleanString()@ApiProperty({type: 'boolean', description: 'Indicates what relations of entity should be loaded'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/common/dto/find-one-options/find-one-options.dto.ts:43\n                        \n                    \n\n            \n                \n                    Indicates what relations of entity should be loaded (simplified left join form)\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                            Optional\n                        selection\n                        \n                    \n                \n            \n                \n                    \n                        Type :     ()[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsArray()@IsOptional()@IsString({each: true})@IsNotEmpty({each: true})@Transform(undefined)@ApiProperty({type: undefined, example: undefined, description: 'Specifies what columns should be retrieved'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/common/dto/find-one-options/find-one-options.dto.ts:24\n                        \n                    \n\n            \n                \n                    Specifies what columns should be retrieved\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        select\n                    \n                \n\n                \n                    \n                        getselect()\n                    \n                \n                            \n                                \n                                    Defined in src/common/dto/find-one-options/find-one-options.dto.ts:30\n                                \n                            \n                    \n                        \n                                Expose field select, specifies what columns should be retrieved\n\n\n                                \n                                    Returns :     FindOptionsSelect\n\n                                \n                        \n                    \n\n            \n        \n        \n            \n                \n                    \n                        \n                        loadEagerRelations\n                    \n                \n\n                \n                    \n                        getloadEagerRelations()\n                    \n                \n                            \n                                \n                                    Defined in src/common/dto/find-one-options/find-one-options.dto.ts:49\n                                \n                            \n                    \n                        \n                                Getter to form an property of loadEagerRelations. Available after calling instanceToPlain\n\n\n                                \n                                    Returns :         boolean\n\n                                \n                        \n                    \n\n            \n        \n\n    \n\n\n    \n        import { IsArray, IsString, IsNotEmpty, IsOptional, IsBooleanString } from 'class-validator';\nimport { FindOneOptions, FindOptionsSelect } from 'typeorm';\nimport { Expose, Transform } from 'class-transformer';\nimport { ApiProperty } from '@nestjs/swagger';\nimport { dotNotation } from 'src/common/helpers';\n\n/**\n * [description]\n */\nexport class FindOneOptionsDto implements FindOneOptions {\n  /**\n   * Specifies what columns should be retrieved\n   */\n  @IsArray()\n  @IsOptional()\n  @IsString({ each: true })\n  @IsNotEmpty({ each: true })\n  @Transform(({ value }) => [].concat(value))\n  @ApiProperty({\n    type: [String],\n    example: [],\n    description: 'Specifies what columns should be retrieved',\n  })\n  public readonly selection?: (keyof Entity)[];\n\n  /**\n   * Expose field `select`, specifies what columns should be retrieved\n   */\n  @Expose({ toPlainOnly: true })\n  public get select(): FindOptionsSelect {\n    return Object.assign({}, this.selection && dotNotation(this.selection as string[], true));\n  }\n\n  /**\n   * Indicates what relations of entity should be loaded (simplified left join form)\n   */\n  @IsOptional()\n  @IsBooleanString()\n  @ApiProperty({\n    type: 'boolean',\n    description: 'Indicates what relations of entity should be loaded',\n  })\n  public readonly eager?: string;\n\n  /**\n   * Getter to form an property of loadEagerRelations. Available after calling instanceToPlain\n   */\n  @Expose({ toPlainOnly: true })\n  public get loadEagerRelations(): boolean {\n    return !!this.eager ? JSON.parse(this.eager) : true;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/HttpExceptionFilter.html":{"url":"classes/HttpExceptionFilter.html","title":"class - HttpExceptionFilter","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  HttpExceptionFilter\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/filters/http-exception.filter.ts\n        \n\n\n            \n                Description\n            \n            \n                [description]\n\n            \n\n\n            \n                Implements\n            \n            \n                        ExceptionFilter\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                catch\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        catch\n                        \n                    \n                \n            \n            \n                \ncatch(exception: HttpException, host: ArgumentsHost)\n                \n            \n\n\n            \n                \n                    Defined in src/common/filters/http-exception.filter.ts:12\n                \n            \n\n\n            \n                \n                    [description]\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    exception\n                                    \n                                            HttpException\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    host\n                                    \n                                            ArgumentsHost\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     FastifyReply\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { ExceptionFilter, Catch, ArgumentsHost, HttpException } from '@nestjs/common';\nimport { FastifyReply } from 'fastify';\n\n/**\n * [description]\n */\n@Catch(HttpException)\nexport class HttpExceptionFilter implements ExceptionFilter {\n  /**\n   * [description]\n   */\n  catch(exception: HttpException, host: ArgumentsHost): FastifyReply {\n    const ctx = host.switchToHttp();\n    const response = ctx.getResponse();\n    const statusCode = exception.getStatus();\n    const { message, error } = exception.getResponse() as Record;\n    return response.status(statusCode).send({ error, statusCode, message: [].concat(message) });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ID.html":{"url":"classes/ID.html","title":"class - ID","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ID\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/dto/id/id.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                [description]\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Readonly\n                                id\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsUUID()@ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/common/dto/id/id.dto.ts:13\n                        \n                    \n\n            \n                \n                    Entity ID\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport { IsUUID } from 'class-validator';\n\n/**\n * [description]\n */\nexport class ID {\n  /**\n   * Entity ID\n   */\n  @IsUUID()\n  @ApiProperty()\n  public readonly id: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/JwtAccessTokenPayloadDto.html":{"url":"classes/JwtAccessTokenPayloadDto.html","title":"class - JwtAccessTokenPayloadDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  JwtAccessTokenPayloadDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/auth/dto/jwt-tokens.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                [description]\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Readonly\n                                id\n                            \n                            \n                                    Public\n                                    Readonly\n                                refreshTokenId\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/modules/auth/dto/jwt-tokens.dto.ts:32\n                        \n                    \n\n            \n                \n                    [description]\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        refreshTokenId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/modules/auth/dto/jwt-tokens.dto.ts:37\n                        \n                    \n\n            \n                \n                    [description]\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty, PickType } from '@nestjs/swagger';\n\n/**\n * [description]\n */\nexport class JwtTokensDto {\n  /**\n   * [description]\n   */\n  @ApiProperty()\n  public readonly token: string;\n\n  /**\n   * [description]\n   */\n  @ApiProperty()\n  public readonly refreshToken: string;\n}\n\n/**\n * [description]\n */\nexport class JwtRefreshTokenDto extends PickType(JwtTokensDto, ['refreshToken']) {}\n\n/**\n * [description]\n */\nexport class JwtAccessTokenPayloadDto {\n  /**\n   * [description]\n   */\n  public readonly id: string;\n\n  /**\n   * [description]\n   */\n  public readonly refreshTokenId: string;\n}\n\n/**\n * [description]\n */\nexport class JwtRefreshTokenPayloadDto extends JwtAccessTokenPayloadDto {\n  /**\n   * [description]\n   */\n  public readonly ppid: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/JwtAuthGuard.html":{"url":"injectables/JwtAuthGuard.html","title":"injectable - JwtAuthGuard","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  JwtAuthGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/auth/guards/jwt.guard.ts\n        \n\n\n            \n                Description\n            \n            \n                [description]\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                handleRequest\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(reflector: Reflector)\n                    \n                \n                        \n                            \n                                Defined in src/modules/auth/guards/jwt.guard.ts:19\n                            \n                        \n\n                \n                    \n                            [description]\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        reflector\n                                                  \n                                                        \n                                                                    Reflector\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        handleRequest\n                        \n                    \n                \n            \n            \n                \n                    \n                    handleRequest(_err: Error, user: UserEntity, info: Error, ctx: ExecutionContext)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/auth/guards/jwt.guard.ts:35\n                \n            \n\n\n            \n                \n                    [description]\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    _err\n                                    \n                                            Error\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    user\n                                    \n                                                UserEntity\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    info\n                                    \n                                            Error\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    ctx\n                                    \n                                            ExecutionContext\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         UserEntity | any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { AuthGuard } from '@nestjs/passport';\nimport { Reflector } from '@nestjs/core';\nimport {\n  UnauthorizedException,\n  ForbiddenException,\n  ExecutionContext,\n  Injectable,\n} from '@nestjs/common';\n\nimport { ErrorTypeEnum } from 'src/common/enums';\n\nimport { UserEntity } from 'src/modules/users/entities';\nimport { UserRoleEnum } from 'src/modules/users/enums';\n\n/**\n * [description]\n */\n@Injectable()\nexport class JwtAuthGuard extends AuthGuard('jwt') {\n  /**\n   * [description]\n   * @param reflector\n   */\n  constructor(private readonly reflector: Reflector) {\n    super();\n  }\n\n  /**\n   * [description]\n   * @param err\n   * @param user\n   * @param info\n   * @param ctx\n   */\n  public handleRequest(\n    _err: Error,\n    user: UserEntity,\n    info: Error,\n    ctx: ExecutionContext,\n  ): UserEntity | any {\n    if (info) throw new UnauthorizedException(ErrorTypeEnum.AUTH_INVALID_TOKEN);\n    if (!user) throw new UnauthorizedException(ErrorTypeEnum.AUTH_UNAUTHORIZED);\n\n    const roles = this.reflector.get('roles', ctx.getHandler());\n    if (roles && !roles.includes(user.role))\n      throw new ForbiddenException(ErrorTypeEnum.AUTH_FORBIDDEN);\n    return user;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/JwtRefreshGuard.html":{"url":"injectables/JwtRefreshGuard.html","title":"injectable - JwtRefreshGuard","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  JwtRefreshGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/auth/guards/jwt-refresh.guard.ts\n        \n\n\n            \n                Description\n            \n            \n                [description]\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                handleRequest\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/modules/auth/guards/jwt-refresh.guard.ts:12\n                            \n                        \n\n                \n                    \n                            [description]\n\n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        handleRequest\n                        \n                    \n                \n            \n            \n                \n                    \n                    handleRequest(_err: Error, user: UserEntity, info: Error)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/auth/guards/jwt-refresh.guard.ts:27\n                \n            \n\n\n            \n                \n                    [description]\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    _err\n                                    \n                                            Error\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    user\n                                    \n                                                UserEntity\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    info\n                                    \n                                            Error\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         UserEntity | any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { AuthGuard } from '@nestjs/passport';\nimport { Injectable, UnauthorizedException } from '@nestjs/common';\n\nimport { ErrorTypeEnum } from 'src/common/enums';\n\nimport { UserEntity } from '../../users/entities';\n\n/**\n * [description]\n */\n@Injectable()\nexport class JwtRefreshGuard extends AuthGuard('jwt-refresh-token') {\n  /**\n   * [description]\n   */\n  constructor() {\n    super();\n  }\n\n  /**\n   * [description]\n   * @param _err\n   * @param user\n   * @param info\n   * @param ctx\n   */\n  public handleRequest(_err: Error, user: UserEntity, info: Error): UserEntity | any {\n    if (info) throw new UnauthorizedException(ErrorTypeEnum.AUTH_INVALID_REFRESH_TOKEN);\n    if (!user) throw new UnauthorizedException(ErrorTypeEnum.AUTH_UNAUTHORIZED);\n    return user;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/JwtRefreshTokenDto.html":{"url":"classes/JwtRefreshTokenDto.html","title":"class - JwtRefreshTokenDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  JwtRefreshTokenDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/auth/dto/jwt-tokens.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                [description]\n\n            \n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty, PickType } from '@nestjs/swagger';\n\n/**\n * [description]\n */\nexport class JwtTokensDto {\n  /**\n   * [description]\n   */\n  @ApiProperty()\n  public readonly token: string;\n\n  /**\n   * [description]\n   */\n  @ApiProperty()\n  public readonly refreshToken: string;\n}\n\n/**\n * [description]\n */\nexport class JwtRefreshTokenDto extends PickType(JwtTokensDto, ['refreshToken']) {}\n\n/**\n * [description]\n */\nexport class JwtAccessTokenPayloadDto {\n  /**\n   * [description]\n   */\n  public readonly id: string;\n\n  /**\n   * [description]\n   */\n  public readonly refreshTokenId: string;\n}\n\n/**\n * [description]\n */\nexport class JwtRefreshTokenPayloadDto extends JwtAccessTokenPayloadDto {\n  /**\n   * [description]\n   */\n  public readonly ppid: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/JwtRefreshTokenPayloadDto.html":{"url":"classes/JwtRefreshTokenPayloadDto.html","title":"class - JwtRefreshTokenPayloadDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  JwtRefreshTokenPayloadDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/auth/dto/jwt-tokens.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                [description]\n\n            \n\n            \n                Extends\n            \n            \n                        JwtAccessTokenPayloadDto\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Readonly\n                                ppid\n                            \n                            \n                                    Public\n                                    Readonly\n                                id\n                            \n                            \n                                    Public\n                                    Readonly\n                                refreshTokenId\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        ppid\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/modules/auth/dto/jwt-tokens.dto.ts:47\n                        \n                    \n\n            \n                \n                    [description]\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                        \n                            \n                                Inherited from         JwtAccessTokenPayloadDto\n\n                            \n                        \n                    \n                        \n                                Defined in         JwtAccessTokenPayloadDto:32\n\n                        \n                    \n\n            \n                \n                    [description]\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        refreshTokenId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                        \n                            \n                                Inherited from         JwtAccessTokenPayloadDto\n\n                            \n                        \n                    \n                        \n                                Defined in         JwtAccessTokenPayloadDto:37\n\n                        \n                    \n\n            \n                \n                    [description]\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty, PickType } from '@nestjs/swagger';\n\n/**\n * [description]\n */\nexport class JwtTokensDto {\n  /**\n   * [description]\n   */\n  @ApiProperty()\n  public readonly token: string;\n\n  /**\n   * [description]\n   */\n  @ApiProperty()\n  public readonly refreshToken: string;\n}\n\n/**\n * [description]\n */\nexport class JwtRefreshTokenDto extends PickType(JwtTokensDto, ['refreshToken']) {}\n\n/**\n * [description]\n */\nexport class JwtAccessTokenPayloadDto {\n  /**\n   * [description]\n   */\n  public readonly id: string;\n\n  /**\n   * [description]\n   */\n  public readonly refreshTokenId: string;\n}\n\n/**\n * [description]\n */\nexport class JwtRefreshTokenPayloadDto extends JwtAccessTokenPayloadDto {\n  /**\n   * [description]\n   */\n  public readonly ppid: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/JwtRefreshTokenStrategy.html":{"url":"injectables/JwtRefreshTokenStrategy.html","title":"injectable - JwtRefreshTokenStrategy","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  JwtRefreshTokenStrategy\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/auth/strategies/jwt-refresh.strategy.ts\n        \n\n\n            \n                Description\n            \n            \n                [description]\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(configService: ConfigService, authService: AuthService)\n                    \n                \n                        \n                            \n                                Defined in src/modules/auth/strategies/jwt-refresh.strategy.ts:18\n                            \n                        \n\n                \n                    \n                            [description]\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                        ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        authService\n                                                  \n                                                        \n                                                                        AuthService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        validate\n                        \n                    \n                \n            \n            \n                \n                    \n                    validate(undefined: JwtRefreshTokenPayloadDto)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/auth/strategies/jwt-refresh.strategy.ts:38\n                \n            \n\n\n            \n                \n                    [description]\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    \n                                                JwtRefreshTokenPayloadDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { BadRequestException, Injectable } from '@nestjs/common';\nimport { ExtractJwt, Strategy } from 'passport-jwt';\nimport { PassportStrategy } from '@nestjs/passport';\nimport { compare } from 'src/common/helpers';\n\nimport { ErrorTypeEnum } from 'src/common/enums';\nimport { ConfigService } from 'src/config';\n\nimport { UserEntity } from '../../users/entities';\n\nimport { JwtRefreshTokenPayloadDto } from '../dto';\nimport { AuthService } from '../auth.service';\n\n/**\n * [description]\n */\n@Injectable()\nexport class JwtRefreshTokenStrategy extends PassportStrategy(Strategy, 'jwt-refresh-token') {\n  /**\n   * [description]\n   * @param configService\n   * @param authService\n   */\n  constructor(\n    private readonly configService: ConfigService,\n    private readonly authService: AuthService,\n  ) {\n    super({\n      jwtFromRequest: ExtractJwt.fromBodyField('refreshToken'),\n      secretOrKey: configService.get('JWT_SECRET_REFRESH_TOKEN'),\n    });\n  }\n\n  /**\n   * [description]\n   * @param id\n   */\n  public async validate({\n    id,\n    ppid,\n    refreshTokenId,\n  }: JwtRefreshTokenPayloadDto): Promise {\n    const user = await this.authService.validateUser(\n      { id, refreshTokens: { id: refreshTokenId } },\n      { relations: { refreshTokens: true } },\n    );\n    const [refreshToken] = user.refreshTokens;\n    if (!(await compare(ppid, refreshToken.ppid)))\n      throw new BadRequestException(ErrorTypeEnum.AUTH_INCORRECT_CREDENTIALS);\n    return user;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/JwtStrategy.html":{"url":"injectables/JwtStrategy.html","title":"injectable - JwtStrategy","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  JwtStrategy\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/auth/strategies/jwt.strategy.ts\n        \n\n\n            \n                Description\n            \n            \n                [description]\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(configService: ConfigService, authService: AuthService)\n                    \n                \n                        \n                            \n                                Defined in src/modules/auth/strategies/jwt.strategy.ts:16\n                            \n                        \n\n                \n                    \n                            [description]\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                        ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        authService\n                                                  \n                                                        \n                                                                        AuthService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        validate\n                        \n                    \n                \n            \n            \n                \n                    \n                    validate(undefined: JwtAccessTokenPayloadDto)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/auth/strategies/jwt.strategy.ts:36\n                \n            \n\n\n            \n                \n                    [description]\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    \n                                                JwtAccessTokenPayloadDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { ExtractJwt, Strategy } from 'passport-jwt';\nimport { PassportStrategy } from '@nestjs/passport';\nimport { Injectable } from '@nestjs/common';\n\nimport { ConfigService } from 'src/config';\n\nimport { UserEntity } from '../../users/entities';\n\nimport { JwtAccessTokenPayloadDto } from '../dto';\nimport { AuthService } from '../auth.service';\n\n/**\n * [description]\n */\n@Injectable()\nexport class JwtStrategy extends PassportStrategy(Strategy) {\n  /**\n   * [description]\n   * @param configService\n   * @param authService\n   */\n  constructor(\n    private readonly configService: ConfigService,\n    private readonly authService: AuthService,\n  ) {\n    super({\n      jwtFromRequest: ExtractJwt.fromAuthHeaderAsBearerToken(),\n      secretOrKey: configService.get('JWT_SECRET_ACCESS_TOKEN'),\n    });\n  }\n\n  /**\n   * [description]\n   * @param id\n   */\n  public async validate({ id, refreshTokenId }: JwtAccessTokenPayloadDto): Promise {\n    return this.authService.validateUser({ id, refreshTokens: { id: refreshTokenId } });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/JwtTokensDto.html":{"url":"classes/JwtTokensDto.html","title":"class - JwtTokensDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  JwtTokensDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/auth/dto/jwt-tokens.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                [description]\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Readonly\n                                refreshToken\n                            \n                            \n                                    Public\n                                    Readonly\n                                token\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        refreshToken\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/auth/dto/jwt-tokens.dto.ts:17\n                        \n                    \n\n            \n                \n                    [description]\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        token\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/auth/dto/jwt-tokens.dto.ts:11\n                        \n                    \n\n            \n                \n                    [description]\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty, PickType } from '@nestjs/swagger';\n\n/**\n * [description]\n */\nexport class JwtTokensDto {\n  /**\n   * [description]\n   */\n  @ApiProperty()\n  public readonly token: string;\n\n  /**\n   * [description]\n   */\n  @ApiProperty()\n  public readonly refreshToken: string;\n}\n\n/**\n * [description]\n */\nexport class JwtRefreshTokenDto extends PickType(JwtTokensDto, ['refreshToken']) {}\n\n/**\n * [description]\n */\nexport class JwtAccessTokenPayloadDto {\n  /**\n   * [description]\n   */\n  public readonly id: string;\n\n  /**\n   * [description]\n   */\n  public readonly refreshTokenId: string;\n}\n\n/**\n * [description]\n */\nexport class JwtRefreshTokenPayloadDto extends JwtAccessTokenPayloadDto {\n  /**\n   * [description]\n   */\n  public readonly ppid: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/MultipartModule.html":{"url":"modules/MultipartModule.html","title":"module - MultipartModule","body":"\n                   \n\n\n\n\n    Modules\n    MultipartModule\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/multipart/multipart.module.ts\n        \n\n\n\n        \n            Description\n        \n        \n            [description]\n\n        \n\n\n        \n            \n            \n        \n\n        \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        Static\n                        createAsyncOptionsProvider\n                        \n                    \n                \n            \n            \n                \n                    \n                    createAsyncOptionsProvider(options: MultipartModuleAsyncOptions)\n                \n            \n\n\n            \n                \n                    Defined in src/multipart/multipart.module.ts:73\n                \n            \n\n\n            \n                \n                    [description]\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    options\n                                    \n                                                MultipartModuleAsyncOptions\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        [description]\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Provider\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        Static\n                        createAsyncProviders\n                        \n                    \n                \n            \n            \n                \n                    \n                    createAsyncProviders(options: MultipartModuleAsyncOptions)\n                \n            \n\n\n            \n                \n                    Defined in src/multipart/multipart.module.ts:56\n                \n            \n\n\n            \n                \n                    [description]\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    options\n                                    \n                                                MultipartModuleAsyncOptions\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        [description]\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Provider[]\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Static\n                        register\n                        \n                    \n                \n            \n            \n                \n                    \n                    register(options: MultipartModuleOptions)\n                \n            \n\n\n            \n                \n                    Defined in src/multipart/multipart.module.ts:23\n                \n            \n\n\n            \n                \n                    [description]\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                    Description\n                                \n                            \n                            \n                                \n                                    options\n                                    \n                                                MultipartModuleOptions\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        {}\n                                    \n\n                                    \n                                        [description]\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     DynamicModule\n\n                    \n                    \n                        [description]\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Static\n                        registerAsync\n                        \n                    \n                \n            \n            \n                \n                    \n                    registerAsync(options: MultipartModuleAsyncOptions)\n                \n            \n\n\n            \n                \n                    Defined in src/multipart/multipart.module.ts:39\n                \n            \n\n\n            \n                \n                    [description]\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    options\n                                    \n                                                MultipartModuleAsyncOptions\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        [description]\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     DynamicModule\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n    \n\n\n    \n        import { randomStringGenerator } from '@nestjs/common/utils/random-string-generator.util';\nimport { Module, DynamicModule, Provider, Global } from '@nestjs/common';\n\nimport { MULTIPART_MODULE_OPTIONS, MULTIPART_MODULE } from './multipart.constants';\nimport { StorageService } from './storage.service';\nimport {\n  MultipartModuleAsyncOptions,\n  MultipartOptionsFactory,\n  MultipartModuleOptions,\n} from './interfaces';\n\n/**\n * [description]\n */\n@Global()\n@Module({})\nexport class MultipartModule {\n  /**\n   * [description]\n   * @param  options [description]\n   * @return         [description]\n   */\n  static register(options: MultipartModuleOptions = {}): DynamicModule {\n    return {\n      module: MultipartModule,\n      providers: [\n        { provide: MULTIPART_MODULE_OPTIONS, useValue: options },\n        { provide: MULTIPART_MODULE, useValue: randomStringGenerator() },\n        { provide: StorageService, useClass: StorageService },\n      ],\n      exports: [MULTIPART_MODULE, MULTIPART_MODULE_OPTIONS, StorageService],\n    };\n  }\n\n  /**\n   * [description]\n   * @param  options [description]\n   */\n  public static registerAsync(options: MultipartModuleAsyncOptions): DynamicModule {\n    return {\n      module: MultipartModule,\n      imports: options.imports,\n      providers: [\n        ...this.createAsyncProviders(options),\n        { provide: MULTIPART_MODULE, useValue: randomStringGenerator() },\n        { provide: StorageService, useClass: StorageService },\n      ],\n      exports: [MULTIPART_MODULE, MULTIPART_MODULE_OPTIONS, StorageService],\n    };\n  }\n\n  /**\n   * [description]\n   * @param  options [description]\n   */\n  private static createAsyncProviders(options: MultipartModuleAsyncOptions): Provider[] {\n    if (options.useExisting || options.useFactory) {\n      return [this.createAsyncOptionsProvider(options)];\n    }\n    return [\n      this.createAsyncOptionsProvider(options),\n      {\n        provide: options.useClass,\n        useClass: options.useClass,\n      },\n    ];\n  }\n\n  /**\n   * [description]\n   * @param  options [description]\n   */\n  private static createAsyncOptionsProvider(options: MultipartModuleAsyncOptions): Provider {\n    if (options.useFactory) {\n      return {\n        provide: MULTIPART_MODULE_OPTIONS,\n        useFactory: options.useFactory,\n        inject: options.inject || [],\n      };\n    }\n    return {\n      provide: MULTIPART_MODULE_OPTIONS,\n      useFactory: async (optionsFactory: MultipartOptionsFactory) =>\n        optionsFactory.createMultipartOptions(),\n      inject: [options.useExisting || options.useClass],\n    };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/MultipartModuleAsyncOptions.html":{"url":"interfaces/MultipartModuleAsyncOptions.html","title":"interface - MultipartModuleAsyncOptions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  MultipartModuleAsyncOptions\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/multipart/interfaces/multipart-module.interface.ts\n        \n\n\n            \n                Description\n            \n            \n                [description]\n\n            \n\n            \n                Extends\n            \n            \n                    Pick\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            inject\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            useClass\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            useExisting\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            useFactory\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        inject\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        inject:     any[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     any[]\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    [description]\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        useClass\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        useClass:         Type\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Type\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    [description]\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        useExisting\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        useExisting:         Type\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Type\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    [description]\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        useFactory\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        useFactory:         function\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         function\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    [description]\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { FastifyMultipartOptions } from 'fastify-multipart';\nimport { ModuleMetadata } from '@nestjs/common/interfaces';\nimport { Type } from '@nestjs/common';\n\n/**\n * [description]\n */\nexport type MultipartModuleOptions = FastifyMultipartOptions;\n\n/**\n * [description]\n */\nexport interface MultipartOptionsFactory {\n  /**\n   * [description]\n   */\n  createMultipartOptions(): Promise | MultipartModuleOptions;\n}\n\n/**\n * [description]\n */\nexport interface MultipartModuleAsyncOptions extends Pick {\n  /**\n   * [description]\n   */\n  useExisting?: Type;\n\n  /**\n   * [description]\n   */\n  useClass?: Type;\n\n  /**\n   * [description]\n   */\n  useFactory?: (...args: any[]) => Promise | MultipartModuleOptions;\n\n  /**\n   * [description]\n   */\n  inject?: any[];\n}\n\n    \n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/MultipartOptionsFactory.html":{"url":"interfaces/MultipartOptionsFactory.html","title":"interface - MultipartOptionsFactory","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  MultipartOptionsFactory\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/multipart/interfaces/multipart-module.interface.ts\n        \n\n\n            \n                Description\n            \n            \n                [description]\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Methods\n                        \n                    \n                    \n                        \n                            \n                                \n                                    \n                                        createMultipartOptions\n                                    \n                                \n                            \n                        \n                    \n                \n            \n        \n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        createMultipartOptions\n                        \n                    \n                \n            \n            \n                \ncreateMultipartOptions()\n                \n            \n\n\n            \n                \n                    Defined in src/multipart/interfaces/multipart-module.interface.ts:17\n                \n            \n\n\n            \n                \n                    [description]\n\n\n                    \n                        Returns :         Promise | MultipartModuleOptions\n\n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { FastifyMultipartOptions } from 'fastify-multipart';\nimport { ModuleMetadata } from '@nestjs/common/interfaces';\nimport { Type } from '@nestjs/common';\n\n/**\n * [description]\n */\nexport type MultipartModuleOptions = FastifyMultipartOptions;\n\n/**\n * [description]\n */\nexport interface MultipartOptionsFactory {\n  /**\n   * [description]\n   */\n  createMultipartOptions(): Promise | MultipartModuleOptions;\n}\n\n/**\n * [description]\n */\nexport interface MultipartModuleAsyncOptions extends Pick {\n  /**\n   * [description]\n   */\n  useExisting?: Type;\n\n  /**\n   * [description]\n   */\n  useClass?: Type;\n\n  /**\n   * [description]\n   */\n  useFactory?: (...args: any[]) => Promise | MultipartModuleOptions;\n\n  /**\n   * [description]\n   */\n  inject?: any[];\n}\n\n    \n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/NotificationEntity.html":{"url":"classes/NotificationEntity.html","title":"class - NotificationEntity","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  NotificationEntity\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/notifications/entities/notification.entity.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Readonly\n                                createdAt\n                            \n                            \n                                    Public\n                                    Readonly\n                                id\n                            \n                            \n                                    Public\n                                    Readonly\n                                owner\n                            \n                            \n                                    Public\n                                    Readonly\n                                status\n                            \n                            \n                                    Public\n                                    Readonly\n                                title\n                            \n                            \n                                    Public\n                                    Readonly\n                                type\n                            \n                            \n                                    Public\n                                    Readonly\n                                updatedAt\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        createdAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({readOnly: true})@CreateDateColumn({readonly: true, type: 'timestamptz', default: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/notifications/entities/notification.entity.ts:66\n                        \n                    \n\n            \n                \n                    [description]\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({readOnly: true})@PrimaryGeneratedColumn('uuid')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/notifications/entities/notification.entity.ts:23\n                        \n                    \n\n            \n                \n                    [description]\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        owner\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Partial\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @JoinColumn()@ApiHideProperty()@ManyToOne(undefined, {onDelete: 'CASCADE', nullable: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/notifications/entities/notification.entity.ts:48\n                        \n                    \n\n            \n                \n                    [description]\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        status\n                        \n                    \n                \n            \n                \n                    \n                        Type :         NotificationsStatusEnum\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({enum: NotificationsStatusEnum, default: undefined})@Column({type: 'enum', enum: NotificationsStatusEnum, default: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/notifications/entities/notification.entity.ts:30\n                        \n                    \n\n            \n                \n                    [description]\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        title\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({maxLength: 256})@Column({type: 'varchar', length: 256})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/notifications/entities/notification.entity.ts:55\n                        \n                    \n\n            \n                \n                    [description]\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        type\n                        \n                    \n                \n            \n                \n                    \n                        Type :         NotificationsTypeEnum\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({enum: NotificationsTypeEnum})@Column({type: 'enum', enum: NotificationsTypeEnum})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/notifications/entities/notification.entity.ts:37\n                        \n                    \n\n            \n                \n                    [description]\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        updatedAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({readOnly: true})@UpdateDateColumn({readonly: true, type: 'timestamptz', default: undefined, onUpdate: 'CURRENT_TIMESTAMP'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/notifications/entities/notification.entity.ts:78\n                        \n                    \n\n            \n                \n                    [description]\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiHideProperty, ApiProperty } from '@nestjs/swagger';\nimport {\n  PrimaryGeneratedColumn,\n  CreateDateColumn,\n  UpdateDateColumn,\n  JoinColumn,\n  ManyToOne,\n  Entity,\n  Column,\n} from 'typeorm';\n\nimport { UserEntity } from 'src/modules/users/entities';\n\nimport { NotificationsStatusEnum, NotificationsTypeEnum } from '../enums';\n\n@Entity('notifications')\nexport class NotificationEntity {\n  /**\n   * [description]\n   */\n  @ApiProperty({ readOnly: true })\n  @PrimaryGeneratedColumn('uuid')\n  public readonly id: string;\n\n  /**\n   * [description]\n   */\n  @ApiProperty({ enum: NotificationsStatusEnum, default: NotificationsStatusEnum.UNREAD })\n  @Column({ type: 'enum', enum: NotificationsStatusEnum, default: NotificationsStatusEnum.UNREAD })\n  public readonly status: NotificationsStatusEnum;\n\n  /**\n   * [description]\n   */\n  @ApiProperty({ enum: NotificationsTypeEnum })\n  @Column({ type: 'enum', enum: NotificationsTypeEnum })\n  public readonly type: NotificationsTypeEnum;\n\n  /**\n   * [description]\n   */\n  @JoinColumn()\n  @ApiHideProperty()\n  @ManyToOne(() => UserEntity, {\n    onDelete: 'CASCADE',\n    nullable: false,\n  })\n  public readonly owner: Partial;\n\n  /**\n   * [description]\n   */\n  @ApiProperty({ maxLength: 256 })\n  @Column({ type: 'varchar', length: 256 })\n  public readonly title: string;\n\n  /**\n   * [description]\n   */\n  @ApiProperty({ readOnly: true })\n  @CreateDateColumn({\n    readonly: true,\n    type: 'timestamptz',\n    default: () => 'CURRENT_TIMESTAMP',\n  })\n  public readonly createdAt: Date;\n\n  /**\n   * [description]\n   */\n  @ApiProperty({ readOnly: true })\n  @UpdateDateColumn({\n    readonly: true,\n    type: 'timestamptz',\n    default: () => 'CURRENT_TIMESTAMP',\n    onUpdate: 'CURRENT_TIMESTAMP',\n  })\n  public readonly updatedAt: Date;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/NotificationsController.html":{"url":"controllers/NotificationsController.html","title":"controller - NotificationsController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  NotificationsController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/notifications/notifications.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                notifications\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                deleteOne\n                            \n                            \n                                    Public\n                                    Async\n                                selectAll\n                            \n                            \n                                    Public\n                                    Async\n                                selectOne\n                            \n                            \n                                    Public\n                                    Async\n                                sendAndCreateOne\n                            \n                            \n                                    Public\n                                    Async\n                                updateOne\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        deleteOne\n                        \n                    \n                \n            \n            \n                \n                    \n                    deleteOne(conditions: ID, owner: UserEntity)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete(':id')\n                \n            \n\n            \n                \n                    Defined in src/modules/notifications/notifications.controller.ts:104\n                \n            \n\n\n            \n                \n                    [description]\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    conditions\n                                    \n                                                ID\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    owner\n                                    \n                                                UserEntity\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        selectAll\n                        \n                    \n                \n            \n            \n                \n                    \n                    selectAll(options: SelectNotificationsDto, owner: UserEntity)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()\n                \n            \n\n            \n                \n                    Defined in src/modules/notifications/notifications.controller.ts:61\n                \n            \n\n\n            \n                \n                    [description]\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    options\n                                    \n                                                SelectNotificationsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    owner\n                                    \n                                                UserEntity\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        selectOne\n                        \n                    \n                \n            \n            \n                \n                    \n                    selectOne(conditions: ID, owner: UserEntity, options?: FindOneOptionsDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get(':id')\n                \n            \n\n            \n                \n                    Defined in src/modules/notifications/notifications.controller.ts:75\n                \n            \n\n\n            \n                \n                    [description]\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    conditions\n                                    \n                                                ID\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    owner\n                                    \n                                                UserEntity\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    options\n                                    \n                                            FindOneOptionsDto\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        sendAndCreateOne\n                        \n                    \n                \n            \n            \n                \n                    \n                    sendAndCreateOne(data: CreateNotificationDto, owner: UserEntity)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()\n                \n            \n\n            \n                \n                    Defined in src/modules/notifications/notifications.controller.ts:45\n                \n            \n\n\n            \n                \n                    [description]\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    data\n                                    \n                                                CreateNotificationDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    owner\n                                    \n                                                UserEntity\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        updateOne\n                        \n                    \n                \n            \n            \n                \n                    \n                    updateOne(conditions: ID, data: UpdateNotificationDto, owner: UserEntity)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch(':id')\n                \n            \n\n            \n                \n                    Defined in src/modules/notifications/notifications.controller.ts:90\n                \n            \n\n\n            \n                \n                    UpdateNotificationDto\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    conditions\n                                    \n                                                ID\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    data\n                                    \n                                                UpdateNotificationDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    owner\n                                    \n                                                UserEntity\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { ApiBearerAuth, ApiTags } from '@nestjs/swagger';\nimport {\n  ClassSerializerInterceptor,\n  UseInterceptors,\n  Controller,\n  UseGuards,\n  Delete,\n  Patch,\n  Query,\n  Param,\n  Post,\n  Body,\n  Get,\n} from '@nestjs/common';\n\nimport { FindOneOptionsDto, ID } from 'src/common/dto';\nimport { User } from 'src/common/decorators';\n\nimport { UserEntity } from '../users/entities';\nimport { JwtAuthGuard } from '../auth/guards';\n\nimport { NotificationsService } from './services';\nimport { NotificationEntity } from './entities';\nimport {\n  PaginationNotificationsDto,\n  SelectNotificationsDto,\n  CreateNotificationDto,\n  UpdateNotificationDto,\n} from './dto';\n\n@ApiBearerAuth()\n@UseGuards(JwtAuthGuard)\n@ApiTags('notifications')\n@Controller('notifications')\n@UseInterceptors(ClassSerializerInterceptor)\nexport class NotificationsController {\n  constructor(private readonly notificationsService: NotificationsService) {}\n\n  /**\n   * [description]\n   * @param data\n   * @param owner\n   */\n  @Post()\n  public async sendAndCreateOne(\n    @Body() data: CreateNotificationDto,\n    @User() owner: UserEntity,\n  ): Promise {\n    return this.notificationsService.sendAndCreateOneForOne(\n      { owner: { id: owner.id } },\n      { ...data, owner: { id: owner.id } },\n    );\n  }\n\n  /**\n   * [description]\n   * @param options\n   * @param owner\n   */\n  @Get()\n  public async selectAll(\n    @Query() options: SelectNotificationsDto,\n    @User() owner: UserEntity,\n  ): Promise {\n    return this.notificationsService.selectAll(options, owner);\n  }\n\n  /**\n   * [description]\n   * @param conditions\n   * @param owner\n   * @param options\n   */\n  @Get(':id')\n  public async selectOne(\n    @Param() conditions: ID,\n    @User() owner: UserEntity,\n    @Query() options?: FindOneOptionsDto,\n  ): Promise {\n    return this.notificationsService.selectOne({ ...conditions, owner: { id: owner.id } }, options);\n  }\n\n  /**\n   UpdateNotificationDto\n   * @param conditions \n   * @param data \n   * @param owner\n   */\n  @Patch(':id')\n  public async updateOne(\n    @Param() conditions: ID,\n    @Body() data: UpdateNotificationDto,\n    @User() owner: UserEntity,\n  ): Promise {\n    return this.notificationsService.updateOne({ ...conditions, owner: { id: owner.id } }, data);\n  }\n\n  /**\n   * [description]\n   * @param conditions\n   * @param owner\n   */\n  @Delete(':id')\n  public async deleteOne(\n    @Param() conditions: ID,\n    @User() owner: UserEntity,\n  ): Promise {\n    return this.notificationsService.deleteOne({ ...conditions, owner: { id: owner.id } });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/NotificationsModule.html":{"url":"modules/NotificationsModule.html","title":"module - NotificationsModule","body":"\n                   \n\n\n\n\n    Modules\n    NotificationsModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_NotificationsModule\n\n\n\ncluster_NotificationsModule_imports\n\n\n\ncluster_NotificationsModule_exports\n\n\n\ncluster_NotificationsModule_providers\n\n\n\n\nUsersModule\n\nUsersModule\n\n\n\nNotificationsModule\n\nNotificationsModule\n\nNotificationsModule -->\n\nUsersModule->NotificationsModule\n\n\n\n\n\nNotificationsService \n\nNotificationsService \n\nNotificationsService  -->\n\nNotificationsModule->NotificationsService \n\n\n\n\n\nNotificationsService\n\nNotificationsService\n\nNotificationsModule -->\n\nNotificationsService->NotificationsModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/modules/notifications/notifications.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            NotificationsService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            NotificationsController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            UsersModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            NotificationsService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { TypeOrmModule } from '@nestjs/typeorm';\nimport { Module } from '@nestjs/common';\n\nimport { NotificationsController } from './notifications.controller';\nimport { NotificationsService } from './services';\nimport { NotificationEntity } from './entities';\nimport { UsersModule } from '../users';\n\n@Module({\n  imports: [TypeOrmModule.forFeature([NotificationEntity]), UsersModule],\n  controllers: [NotificationsController],\n  providers: [NotificationsService],\n  exports: [NotificationsService],\n})\nexport class NotificationsModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/NotificationsService.html":{"url":"injectables/NotificationsService.html","title":"injectable - NotificationsService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  NotificationsService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/notifications/services/notifications.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Readonly\n                                notificationEntityRepository\n                            \n                            \n                                    Public\n                                    Readonly\n                                userNotificationTokensService\n                            \n                            \n                                    Public\n                                    Readonly\n                                usersService\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                createMany\n                            \n                            \n                                    Public\n                                    Async\n                                createOne\n                            \n                            \n                                    Public\n                                    Async\n                                deleteOne\n                            \n                            \n                                    Public\n                                find\n                            \n                            \n                                    Public\n                                generateNotificationProps\n                            \n                            \n                                    Public\n                                    Async\n                                selectAll\n                            \n                            \n                                    Public\n                                    Async\n                                selectOne\n                            \n                            \n                                    Public\n                                    Async\n                                sendAndCreateOneForMany\n                            \n                            \n                                    Public\n                                    Async\n                                sendAndCreateOneForManyMulticast\n                            \n                            \n                                    Public\n                                    Async\n                                sendAndCreateOneForOne\n                            \n                            \n                                    Public\n                                    Async\n                                updateAll\n                            \n                            \n                                    Public\n                                    Async\n                                updateOne\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(notificationEntityRepository: Repository, userNotificationTokensService: UserNotificationTokensService, usersService: UsersService)\n                    \n                \n                        \n                            \n                                Defined in src/modules/notifications/services/notifications.service.ts:29\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        notificationEntityRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        userNotificationTokensService\n                                                  \n                                                        \n                                                                        UserNotificationTokensService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        usersService\n                                                  \n                                                        \n                                                                        UsersService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        createMany\n                        \n                    \n                \n            \n            \n                \n                    \n                    createMany(entitiesLike: Partial[], options: SaveOptions)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/notifications/services/notifications.service.ts:42\n                \n            \n\n\n            \n                \n                    [description]\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    entitiesLike\n                                    \n                                                Partial[]\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    options\n                                    \n                                            SaveOptions\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        { transaction: false }\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        createOne\n                        \n                    \n                \n            \n            \n                \n                    \n                    createOne(entityLike: Partial, options: SaveOptions)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/notifications/services/notifications.service.ts:59\n                \n            \n\n\n            \n                \n                    [description]\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    entityLike\n                                    \n                                                Partial\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    options\n                                    \n                                            SaveOptions\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        { transaction: false }\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        deleteOne\n                        \n                    \n                \n            \n            \n                \n                    \n                    deleteOne(conditions: FindOptionsWhere, options: RemoveOptions)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/notifications/services/notifications.service.ts:176\n                \n            \n\n\n            \n                \n                    [description]\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    conditions\n                                    \n                                                FindOptionsWhere\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    options\n                                    \n                                            RemoveOptions\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        { transaction: false }\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        find\n                        \n                    \n                \n            \n            \n                \n                    \n                    find(optionsOrConditions?: FindManyOptions)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/notifications/services/notifications.service.ts:75\n                \n            \n\n\n            \n                \n                     [description]\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    optionsOrConditions\n                                    \n                                                FindManyOptions\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         SelectQueryBuilder\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        generateNotificationProps\n                        \n                    \n                \n            \n            \n                \n                    \n                    generateNotificationProps(entity: Partial)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/notifications/services/notifications.service.ts:192\n                \n            \n\n\n            \n                \n                    [description]\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    entity\n                                    \n                                                Partial\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     BaseMessage\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        selectAll\n                        \n                    \n                \n            \n            \n                \n                    \n                    selectAll(options: SelectNotificationsDto, owner?: Partial)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/notifications/services/notifications.service.ts:103\n                \n            \n\n\n            \n                \n                    [description]\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    options\n                                    \n                                                SelectNotificationsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    owner\n                                    \n                                                Partial\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        selectOne\n                        \n                    \n                \n            \n            \n                \n                    \n                    selectOne(conditions: FindOptionsWhere, options: FindOneOptions)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/notifications/services/notifications.service.ts:123\n                \n            \n\n\n            \n                \n                    [description]\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    conditions\n                                    \n                                                FindOptionsWhere\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    options\n                                    \n                                                FindOneOptions\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        { loadEagerRelations: false }\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        sendAndCreateOneForMany\n                        \n                    \n                \n            \n            \n                \n                    \n                    sendAndCreateOneForMany(conditions: FindOptionsWhere, data: Partial)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/notifications/services/notifications.service.ts:227\n                \n            \n\n\n            \n                \n                    [description]\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    conditions\n                                    \n                                                FindOptionsWhere\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    data\n                                    \n                                                Partial\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        sendAndCreateOneForManyMulticast\n                        \n                    \n                \n            \n            \n                \n                    \n                    sendAndCreateOneForManyMulticast(conditions: FindOptionsWhere, data: Partial)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/notifications/services/notifications.service.ts:203\n                \n            \n\n\n            \n                \n                    [description]\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    conditions\n                                    \n                                                FindOptionsWhere\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    data\n                                    \n                                                Partial\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        sendAndCreateOneForOne\n                        \n                    \n                \n            \n            \n                \n                    \n                    sendAndCreateOneForOne(conditions: FindOptionsWhere, data: Partial)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/notifications/services/notifications.service.ts:258\n                \n            \n\n\n            \n                \n                    [description]\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    conditions\n                                    \n                                                FindOptionsWhere\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    data\n                                    \n                                                Partial\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        updateAll\n                        \n                    \n                \n            \n            \n                \n                    \n                    updateAll(conditions: FindOptionsWhere, entityLike: DeepPartial)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/notifications/services/notifications.service.ts:139\n                \n            \n\n\n            \n                \n                    [description]\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    conditions\n                                    \n                                                FindOptionsWhere\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        { status: NotificationsStatusEnum.UNREAD }\n                                    \n\n                                \n                                \n                                    entityLike\n                                    \n                                                DeepPartial\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        { status: NotificationsStatusEnum.READ }\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        updateOne\n                        \n                    \n                \n            \n            \n                \n                    \n                    updateOne(conditions: FindOptionsWhere, entityLike: Partial, options: SaveOptions)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/notifications/services/notifications.service.ts:156\n                \n            \n\n\n            \n                \n                    [description]\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    conditions\n                                    \n                                                FindOptionsWhere\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    entityLike\n                                    \n                                                Partial\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    options\n                                    \n                                            SaveOptions\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        { transaction: false }\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        notificationEntityRepository\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Repository\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @InjectRepository(NotificationEntity)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/notifications/services/notifications.service.ts:32\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        userNotificationTokensService\n                        \n                    \n                \n            \n                \n                    \n                        Type :         UserNotificationTokensService\n\n                    \n                \n                    \n                        \n                                Defined in src/modules/notifications/services/notifications.service.ts:33\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        usersService\n                        \n                    \n                \n            \n                \n                    \n                        Type :         UsersService\n\n                    \n                \n                    \n                        \n                                Defined in src/modules/notifications/services/notifications.service.ts:34\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { Injectable, NotFoundException } from '@nestjs/common';\nimport { instanceToPlain } from 'class-transformer';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { BaseMessage, Message, Notification } from 'firebase-admin/messaging';\nimport { messaging } from 'firebase-admin';\nimport {\n  Repository,\n  DeepPartial,\n  SaveOptions,\n  UpdateResult,\n  RemoveOptions,\n  FindOneOptions,\n  FindManyOptions,\n  FindOptionsWhere,\n  FindOptionsUtils,\n  SelectQueryBuilder,\n} from 'typeorm';\n\nimport { ErrorTypeEnum } from 'src/common/enums';\n\nimport { UserNotificationTokensService, UsersService } from 'src/modules/users/services';\nimport { UserEntity, UserNotificationTokenEntity } from 'src/modules/users/entities';\n\nimport { PaginationNotificationsDto, SelectNotificationsDto } from '../dto';\nimport { NotificationsStatusEnum } from '../enums';\nimport { NotificationEntity } from '../entities';\n\n@Injectable()\nexport class NotificationsService {\n  constructor(\n    @InjectRepository(NotificationEntity)\n    public readonly notificationEntityRepository: Repository,\n    public readonly userNotificationTokensService: UserNotificationTokensService,\n    public readonly usersService: UsersService,\n  ) {}\n\n  /**\n   * [description]\n   * @param entitiesLike\n   * @param options\n   */\n  public async createMany(\n    entitiesLike: Partial[],\n    options: SaveOptions = { transaction: false },\n  ): Promise {\n    return this.notificationEntityRepository.manager.transaction(async () => {\n      const entities = this.notificationEntityRepository.create(entitiesLike);\n      return this.notificationEntityRepository.save(entities, options).catch(() => {\n        throw new NotFoundException(ErrorTypeEnum.NOTIFICATIONS_ALREADY_EXIST);\n      });\n    });\n  }\n\n  /**\n   * [description]\n   * @param entityLike\n   * @param options\n   */\n  public async createOne(\n    entityLike: Partial,\n    options: SaveOptions = { transaction: false },\n  ): Promise {\n    return this.notificationEntityRepository.manager.transaction(async () => {\n      const entity = this.notificationEntityRepository.create(entityLike);\n      return this.notificationEntityRepository.save(entity, options).catch(() => {\n        throw new NotFoundException(ErrorTypeEnum.NOTIFICATION_ALREADY_EXIST);\n      });\n    });\n  }\n\n  /**\n   *  [description]\n   * @param optionsOrConditions\n   */\n  public find(\n    optionsOrConditions?: FindManyOptions,\n  ): SelectQueryBuilder {\n    const metadata = this.notificationEntityRepository.metadata;\n    const qb = this.notificationEntityRepository.createQueryBuilder(\n      FindOptionsUtils.extractFindManyOptionsAlias(optionsOrConditions) || metadata.name,\n    );\n\n    if (\n      !FindOptionsUtils.isFindManyOptions(optionsOrConditions) ||\n      optionsOrConditions.loadEagerRelations !== false\n    ) {\n      FindOptionsUtils.joinEagerRelations(qb, qb.alias, metadata);\n\n      /**\n       * Place for common relation\n       * @example qb.leftJoinAndSelect('NotificationEntity.relation_field', 'NotificationEntity_relation_field')\n       */\n    }\n\n    return qb.setFindOptions(optionsOrConditions);\n  }\n\n  /**\n   * [description]\n   * @param options\n   * @param owner\n   */\n  public async selectAll(\n    options: SelectNotificationsDto,\n    owner?: Partial,\n  ): Promise {\n    const qb = this.find(instanceToPlain(options));\n    if (owner) qb.andWhere({ owner });\n\n    const data = await qb.getManyAndCount().catch(() => {\n      throw new NotFoundException(ErrorTypeEnum.NOTIFICATIONS_NOT_FOUND);\n    });\n    await this.updateAll();\n\n    return new PaginationNotificationsDto(data);\n  }\n\n  /**\n   * [description]\n   * @param conditions\n   * @param options\n   */\n  public async selectOne(\n    conditions: FindOptionsWhere,\n    options: FindOneOptions = { loadEagerRelations: false },\n  ): Promise {\n    return this.find({ ...instanceToPlain(options), where: conditions })\n      .getOneOrFail()\n      .catch(() => {\n        throw new NotFoundException(ErrorTypeEnum.NOTIFICATION_NOT_FOUND);\n      });\n  }\n\n  /**\n   * [description]\n   * @param conditions\n   * @param entityLike\n   */\n  public async updateAll(\n    conditions: FindOptionsWhere = { status: NotificationsStatusEnum.UNREAD },\n    entityLike: DeepPartial = { status: NotificationsStatusEnum.READ },\n  ): Promise {\n    return this.notificationEntityRepository.manager.transaction((transactionalEntityManager) =>\n      transactionalEntityManager.update(NotificationEntity, conditions, entityLike).catch(() => {\n        throw new NotFoundException(ErrorTypeEnum.NOTIFICATIONS_NOT_FOUND);\n      }),\n    );\n  }\n\n  /**\n   * [description]\n   * @param conditions\n   * @param entityLike\n   * @param options\n   */\n  public async updateOne(\n    conditions: FindOptionsWhere,\n    entityLike: Partial,\n    options: SaveOptions = { transaction: false },\n  ): Promise {\n    return this.notificationEntityRepository.manager.transaction(async () => {\n      const mergeIntoEntity = await this.selectOne(conditions);\n      const entity = this.notificationEntityRepository.merge(mergeIntoEntity, entityLike);\n      const { id } = await this.notificationEntityRepository.save(entity, options).catch(() => {\n        throw new NotFoundException(ErrorTypeEnum.NOTIFICATION_NOT_FOUND);\n      });\n      return this.selectOne({ id }, { loadEagerRelations: true });\n    });\n  }\n\n  /**\n   * [description]\n   * @param conditions\n   * @param options\n   */\n  public async deleteOne(\n    conditions: FindOptionsWhere,\n    options: RemoveOptions = { transaction: false },\n  ): Promise {\n    return this.notificationEntityRepository.manager.transaction(async () => {\n      const entity = await this.selectOne(conditions);\n      return this.notificationEntityRepository.remove(entity, options).catch(() => {\n        throw new NotFoundException(ErrorTypeEnum.NOTIFICATION_NOT_FOUND);\n      });\n    });\n  }\n\n  /**\n   * [description]\n   * @param data\n   */\n  public generateNotificationProps(entity: Partial): BaseMessage {\n    const notification: Notification = { title: entity.title };\n    const data = { json: JSON.stringify(entity) };\n    return { notification, data };\n  }\n\n  /**\n   * [description]\n   * @param conditions\n   * @param data\n   */\n  public async sendAndCreateOneForManyMulticast(\n    conditions: FindOptionsWhere,\n    data: Partial,\n  ): Promise {\n    const users = await this.usersService\n      .find({ where: conditions, select: { id: true }, relations: { notificationTokens: true } })\n      .getMany();\n    await this.createMany(users.map((user) => ({ ...data, owner: { id: user.id } })));\n\n    const tokens = users.reduce(\n      (acc, current) => (acc.concat(current.notificationTokens.map((el) => el.token)), acc),\n      [],\n    );\n    return messaging().sendMulticast({\n      ...this.generateNotificationProps(data),\n      tokens,\n    });\n  }\n\n  /**\n   * [description]\n   * @param conditions\n   * @param data\n   */\n  public async sendAndCreateOneForMany(\n    conditions: FindOptionsWhere,\n    data: Partial,\n  ): Promise {\n    const users = await this.usersService\n      .find({ where: conditions, select: { id: true }, relations: { notificationTokens: true } })\n      .getMany();\n    const entities = await this.createMany(\n      users.map((user) => ({ ...data, owner: { id: user.id } })),\n    );\n\n    const messages = users.reduce((acc, current, index) => {\n      if (current.notificationTokens.length) {\n        const entity = entities[index];\n        const data = this.generateNotificationProps(entity);\n        const messages = current.notificationTokens.map((el) => ({\n          ...data,\n          token: el.token,\n        }));\n        acc.concat(messages);\n      }\n      return acc;\n    }, []);\n    return messaging().sendAll(messages);\n  }\n\n  /**\n   * [description]\n   * @param conditions\n   * @param data\n   */\n  public async sendAndCreateOneForOne(\n    conditions: FindOptionsWhere,\n    data: Partial,\n  ): Promise {\n    const entity = await this.createOne(data);\n    const tokens = await this.userNotificationTokensService\n      .selectAll({ where: conditions })\n      .then((data) => data.map((el) => el.token));\n    return messaging().sendMulticast({\n      ...this.generateNotificationProps(entity),\n      tokens,\n    });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PaginationFilesDto.html":{"url":"classes/PaginationFilesDto.html","title":"class - PaginationFilesDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PaginationFilesDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/files/dto/pagination-files.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                [description]\n\n            \n\n\n\n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(undefined: [FileEntity[], number])\n                    \n                \n                        \n                            \n                                Defined in src/modules/files/dto/pagination-files.dto.ts:8\n                            \n                        \n\n                \n                    \n                            [description]\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                  \n                                                        \n                                                                        [FileEntity[], number]\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PaginationMixin } from 'src/common/dto';\n\nimport { FileEntity } from '../entities';\n\n/**\n * [description]\n */\nexport class PaginationFilesDto extends PaginationMixin(FileEntity) {\n  /**\n   * [description]\n   * @param result\n   * @param total\n   */\n  constructor([result, total]: [FileEntity[], number]) {\n    super();\n    Object.assign(this, { result, total });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PaginationNotificationsDto.html":{"url":"classes/PaginationNotificationsDto.html","title":"class - PaginationNotificationsDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PaginationNotificationsDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/notifications/dto/pagination-notifications.dto.ts\n        \n\n\n\n\n\n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(undefined: [NotificationEntity[], number])\n                    \n                \n                        \n                            \n                                Defined in src/modules/notifications/dto/pagination-notifications.dto.ts:5\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                  \n                                                        \n                                                                        [NotificationEntity[], number]\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PaginationMixin } from 'src/common/dto';\n\nimport { NotificationEntity } from '../entities';\n\nexport class PaginationNotificationsDto extends PaginationMixin(NotificationEntity) {\n  constructor([result, count]: [NotificationEntity[], number]) {\n    super();\n    Object.assign(this, { result, count });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PaginationUserNotificationTokensDto.html":{"url":"classes/PaginationUserNotificationTokensDto.html","title":"class - PaginationUserNotificationTokensDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PaginationUserNotificationTokensDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/users/dto/pagination-user-notification-tokens.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                [description]\n\n            \n\n\n\n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(undefined: [UserNotificationTokenEntity[], number])\n                    \n                \n                        \n                            \n                                Defined in src/modules/users/dto/pagination-user-notification-tokens.dto.ts:10\n                            \n                        \n\n                \n                    \n                            [description]\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                  \n                                                        \n                                                                        [UserNotificationTokenEntity[], number]\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PaginationMixin } from 'src/common/dto';\n\nimport { UserNotificationTokenEntity } from '../entities';\n\n/**\n * [description]\n */\nexport class PaginationUserNotificationTokensDto extends PaginationMixin(\n  UserNotificationTokenEntity,\n) {\n  /**\n   * [description]\n   * @param result\n   * @param count\n   */\n  constructor([result, count]: [UserNotificationTokenEntity[], number]) {\n    super();\n    Object.assign(this, { result, count });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PaginationUsersDto.html":{"url":"classes/PaginationUsersDto.html","title":"class - PaginationUsersDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PaginationUsersDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/users/dto/pagination-users.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                [description]\n\n            \n\n\n\n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(undefined: [UserEntity[], number])\n                    \n                \n                        \n                            \n                                Defined in src/modules/users/dto/pagination-users.dto.ts:8\n                            \n                        \n\n                \n                    \n                            [description]\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                  \n                                                        \n                                                                        [UserEntity[], number]\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PaginationMixin } from 'src/common/dto';\n\nimport { UserEntity } from '../entities';\n\n/**\n * [description]\n */\nexport class PaginationUsersDto extends PaginationMixin(UserEntity) {\n  /**\n   * [description]\n   * @param result\n   * @param count\n   */\n  constructor([result, count]: [UserEntity[], number]) {\n    super();\n    Object.assign(this, { result, count });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ResetPasswordDto.html":{"url":"classes/ResetPasswordDto.html","title":"class - ResetPasswordDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ResetPasswordDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/auth/dto/reset-password.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                [description]\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Readonly\n                                code\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        code\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@Length(6)@ApiProperty({example: '123456', maxLength: 6})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/auth/dto/reset-password.dto.ts:15\n                        \n                    \n\n            \n                \n                    [description]\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { CreateUserDto } from '../../users/dto';\nimport { ApiProperty, PickType } from '@nestjs/swagger';\nimport { IsString, Length } from 'class-validator';\n\n/**\n * [description]\n */\nexport class ResetPasswordDto extends PickType(CreateUserDto, ['email', 'password']) {\n  /**\n   * [description]\n   */\n  @IsString()\n  @Length(6)\n  @ApiProperty({ example: '123456', maxLength: 6 })\n  public readonly code: string;\n}\n\n/**\n * [description]\n */\nexport class SendResetPasswordDto extends PickType(CreateUserDto, ['email']) {}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/Response.html":{"url":"interfaces/Response.html","title":"interface - Response","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  Response\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/interceptors/transform.interceptor.ts\n        \n\n\n            \n                Description\n            \n            \n                [description]\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            data\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        data\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        data:     string[] | T\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     string[] | T\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { map } from 'rxjs/operators';\nimport { Observable } from 'rxjs';\nimport { Injectable, CallHandler, NestInterceptor, ExecutionContext } from '@nestjs/common';\n\n/**\n * [description]\n */\nexport interface Response {\n  data: string[] | T;\n}\n\n/**\n * [description]\n */\n@Injectable()\nexport class TransformInterceptor implements NestInterceptor> {\n  /**\n   * [description]\n   * @param context\n   * @param next\n   */\n  intercept(context: ExecutionContext, next: CallHandler): Observable> {\n    return next.handle().pipe(map((data) => ({ data })));\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/SelectFileDto.html":{"url":"classes/SelectFileDto.html","title":"class - SelectFileDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  SelectFileDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/files/dto/select.file.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                [description]\n\n            \n\n            \n                Extends\n            \n            \n                        FindOneOptionsDto\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Readonly\n                                    Optional\n                                eager\n                            \n                            \n                                    Public\n                                    Readonly\n                                    Optional\n                                selection\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                            Optional\n                        eager\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsBooleanString()@ApiProperty({type: 'boolean', description: 'Indicates what relations of entity should be loaded'})\n                        \n                    \n                \n                        \n                            \n                                Inherited from         FindOneOptionsDto\n\n                            \n                        \n                    \n                        \n                                Defined in         FindOneOptionsDto:43\n\n                        \n                    \n\n            \n                \n                    Indicates what relations of entity should be loaded (simplified left join form)\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                            Optional\n                        selection\n                        \n                    \n                \n            \n                \n                    \n                        Type :     ()[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsArray()@IsOptional()@IsString({each: true})@IsNotEmpty({each: true})@Transform(undefined)@ApiProperty({type: undefined, example: undefined, description: 'Specifies what columns should be retrieved'})\n                        \n                    \n                \n                        \n                            \n                                Inherited from         FindOneOptionsDto\n\n                            \n                        \n                    \n                        \n                                Defined in         FindOneOptionsDto:24\n\n                        \n                    \n\n            \n                \n                    Specifies what columns should be retrieved\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { FindOneOptionsDto } from 'src/common/dto';\n\nimport { FileEntity } from '../entities';\n\n/**\n * [description]\n */\nexport class SelectFileDto extends FindOneOptionsDto {}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/SelectFilesDto.html":{"url":"classes/SelectFilesDto.html","title":"class - SelectFilesDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  SelectFilesDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/files/dto/select.files.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                [description]\n\n            \n\n            \n                Extends\n            \n            \n                        FindManyOptionsDto\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Readonly\n                                    Optional\n                                title\n                            \n                            \n                                    Public\n                                    Readonly\n                                    Optional\n                                asc\n                            \n                            \n                                    Public\n                                    Readonly\n                                    Optional\n                                desc\n                            \n                            \n                                    Public\n                                    Readonly\n                                    Optional\n                                page\n                            \n                            \n                                    Public\n                                    Readonly\n                                    Optional\n                                take\n                            \n                            \n                                    Public\n                                    Readonly\n                                    Optional\n                                eager\n                            \n                            \n                                    Public\n                                    Readonly\n                                    Optional\n                                selection\n                            \n                        \n                    \n                \n\n\n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    where\n                                \n                            \n                        \n                    \n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                            Optional\n                        title\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@MinLength(1)@MaxLength(256)@ApiProperty({example: 'example.md'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/files/dto/select.files.dto.ts:20\n                        \n                    \n\n            \n                \n                    [description]\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                            Optional\n                        asc\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsArray()@IsOptional()@IsString({each: true})@IsNotEmpty({each: true})@Transform(undefined)@ApiProperty({type: undefined, description: Order, in which entities should be ordered. For order by relation field use elation.field})\n                        \n                    \n                \n                        \n                            \n                                Inherited from         FindManyOptionsDto\n\n                            \n                        \n                    \n                        \n                                Defined in         FindManyOptionsDto:29\n\n                        \n                    \n\n            \n                \n                    Order, in which entities should be ordered\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                            Optional\n                        desc\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsArray()@IsOptional()@IsString({each: true})@IsNotEmpty({each: true})@Transform(undefined)@ApiProperty({type: undefined, description: 'If the same fields are specified for sorting in two directions, the priority is given to DESC'})\n                        \n                    \n                \n                        \n                            \n                                Inherited from         FindManyOptionsDto\n\n                            \n                        \n                    \n                        \n                                Defined in         FindManyOptionsDto:44\n\n                        \n                    \n\n            \n                \n                    If the same fields are specified for sorting in two directions, the priority is given to DESC\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                            Optional\n                        page\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 1\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@Min(1)@ApiProperty({type: String, example: 1, description: 'Offset (paginated) where from entities should be taken'})\n                        \n                    \n                \n                        \n                            \n                                Inherited from         FindManyOptionsDto\n\n                            \n                        \n                    \n                        \n                                Defined in         FindManyOptionsDto:68\n\n                        \n                    \n\n            \n                \n                    Offset (paginated) where from entities should be taken\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                            Optional\n                        take\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 50\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@Min(1)@Max(100)@ApiProperty({type: String, example: 5, default: 50, description: 'Limit (paginated) - max number of entities should be taken'})\n                        \n                    \n                \n                        \n                            \n                                Inherited from         FindManyOptionsDto\n\n                            \n                        \n                    \n                        \n                                Defined in         FindManyOptionsDto:82\n\n                        \n                    \n\n            \n                \n                    Limit (paginated) - max number of entities should be taken\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                            Optional\n                        eager\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsBooleanString()@ApiProperty({type: 'boolean', description: 'Indicates what relations of entity should be loaded'})\n                        \n                    \n                \n                        \n                            \n                                Inherited from         FindOneOptionsDto\n\n                            \n                        \n                    \n                        \n                                Defined in         FindOneOptionsDto:43\n\n                        \n                    \n\n            \n                \n                    Indicates what relations of entity should be loaded (simplified left join form)\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                            Optional\n                        selection\n                        \n                    \n                \n            \n                \n                    \n                        Type :     ()[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsArray()@IsOptional()@IsString({each: true})@IsNotEmpty({each: true})@Transform(undefined)@ApiProperty({type: undefined, example: undefined, description: 'Specifies what columns should be retrieved'})\n                        \n                    \n                \n                        \n                            \n                                Inherited from         FindOneOptionsDto\n\n                            \n                        \n                    \n                        \n                                Defined in         FindOneOptionsDto:24\n\n                        \n                    \n\n            \n                \n                    Specifies what columns should be retrieved\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        where\n                    \n                \n\n                \n                    \n                        getwhere()\n                    \n                \n                            \n                                \n                                    Defined in src/modules/files/dto/select.files.dto.ts:25\n                                \n                            \n                    \n                        \n                                [description]\n\n\n                        \n                    \n\n            \n        \n\n    \n\n\n    \n        import { IsOptional, MaxLength, MinLength } from 'class-validator';\nimport { FindOneOptions, ILike } from 'typeorm';\nimport { ApiProperty } from '@nestjs/swagger';\n\nimport { FindManyOptionsDto } from 'src/common/dto';\n\nimport { FileEntity } from '../entities';\n\n/**\n * [description]\n */\nexport class SelectFilesDto extends FindManyOptionsDto {\n  /**\n   * [description]\n   */\n  @IsOptional()\n  @MinLength(1)\n  @MaxLength(256)\n  @ApiProperty({ example: 'example.md' })\n  public readonly title?: string;\n\n  /**\n   * [description]\n   */\n  public get where(): FindOneOptions['where'] {\n    const { title } = this;\n    return Object.assign(\n      {},\n      title && {\n        title: ILike(`%${title}%`),\n      },\n    );\n  }\n\n  /**\n   * [description]\n   */\n  /* public get whereBrackets(): Brackets {\n    const { title } = this;\n    return new Brackets((qb) => {\n      if (title) qb.andWhere({ title: ILike(`%${title}%`) });\n    });\n  } */\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/SelectNotificationsDto.html":{"url":"classes/SelectNotificationsDto.html","title":"class - SelectNotificationsDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  SelectNotificationsDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/notifications/dto/select-notifications.dto.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        FindManyOptionsDto\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Readonly\n                                    Optional\n                                status\n                            \n                            \n                                    Public\n                                    Readonly\n                                    Optional\n                                asc\n                            \n                            \n                                    Public\n                                    Readonly\n                                    Optional\n                                desc\n                            \n                            \n                                    Public\n                                    Readonly\n                                    Optional\n                                page\n                            \n                            \n                                    Public\n                                    Readonly\n                                    Optional\n                                take\n                            \n                            \n                                    Public\n                                    Readonly\n                                    Optional\n                                eager\n                            \n                            \n                                    Public\n                                    Readonly\n                                    Optional\n                                selection\n                            \n                        \n                    \n                \n\n\n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    where\n                                \n                            \n                        \n                    \n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                            Optional\n                        status\n                        \n                    \n                \n            \n                \n                    \n                        Type :         NotificationsStatusEnum\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsEnum(NotificationsStatusEnum)@ApiProperty({enum: NotificationsStatusEnum})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/notifications/dto/select-notifications.dto.ts:14\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                            Optional\n                        asc\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsArray()@IsOptional()@IsString({each: true})@IsNotEmpty({each: true})@Transform(undefined)@ApiProperty({type: undefined, description: Order, in which entities should be ordered. For order by relation field use elation.field})\n                        \n                    \n                \n                        \n                            \n                                Inherited from         FindManyOptionsDto\n\n                            \n                        \n                    \n                        \n                                Defined in         FindManyOptionsDto:29\n\n                        \n                    \n\n            \n                \n                    Order, in which entities should be ordered\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                            Optional\n                        desc\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsArray()@IsOptional()@IsString({each: true})@IsNotEmpty({each: true})@Transform(undefined)@ApiProperty({type: undefined, description: 'If the same fields are specified for sorting in two directions, the priority is given to DESC'})\n                        \n                    \n                \n                        \n                            \n                                Inherited from         FindManyOptionsDto\n\n                            \n                        \n                    \n                        \n                                Defined in         FindManyOptionsDto:44\n\n                        \n                    \n\n            \n                \n                    If the same fields are specified for sorting in two directions, the priority is given to DESC\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                            Optional\n                        page\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 1\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@Min(1)@ApiProperty({type: String, example: 1, description: 'Offset (paginated) where from entities should be taken'})\n                        \n                    \n                \n                        \n                            \n                                Inherited from         FindManyOptionsDto\n\n                            \n                        \n                    \n                        \n                                Defined in         FindManyOptionsDto:68\n\n                        \n                    \n\n            \n                \n                    Offset (paginated) where from entities should be taken\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                            Optional\n                        take\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 50\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@Min(1)@Max(100)@ApiProperty({type: String, example: 5, default: 50, description: 'Limit (paginated) - max number of entities should be taken'})\n                        \n                    \n                \n                        \n                            \n                                Inherited from         FindManyOptionsDto\n\n                            \n                        \n                    \n                        \n                                Defined in         FindManyOptionsDto:82\n\n                        \n                    \n\n            \n                \n                    Limit (paginated) - max number of entities should be taken\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                            Optional\n                        eager\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsBooleanString()@ApiProperty({type: 'boolean', description: 'Indicates what relations of entity should be loaded'})\n                        \n                    \n                \n                        \n                            \n                                Inherited from         FindOneOptionsDto\n\n                            \n                        \n                    \n                        \n                                Defined in         FindOneOptionsDto:43\n\n                        \n                    \n\n            \n                \n                    Indicates what relations of entity should be loaded (simplified left join form)\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                            Optional\n                        selection\n                        \n                    \n                \n            \n                \n                    \n                        Type :     ()[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsArray()@IsOptional()@IsString({each: true})@IsNotEmpty({each: true})@Transform(undefined)@ApiProperty({type: undefined, example: undefined, description: 'Specifies what columns should be retrieved'})\n                        \n                    \n                \n                        \n                            \n                                Inherited from         FindOneOptionsDto\n\n                            \n                        \n                    \n                        \n                                Defined in         FindOneOptionsDto:24\n\n                        \n                    \n\n            \n                \n                    Specifies what columns should be retrieved\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        where\n                    \n                \n\n                \n                    \n                        getwhere()\n                    \n                \n                            \n                                \n                                    Defined in src/modules/notifications/dto/select-notifications.dto.ts:16\n                                \n                            \n\n            \n        \n\n    \n\n\n    \n        import { IsOptional, IsEnum } from 'class-validator';\nimport { ApiProperty } from '@nestjs/swagger';\nimport { Brackets, Equal } from 'typeorm';\n\nimport { FindManyOptionsDto } from 'src/common/dto';\n\nimport { NotificationsStatusEnum } from '../enums';\nimport { NotificationEntity } from '../entities';\n\nexport class SelectNotificationsDto extends FindManyOptionsDto {\n  @IsOptional()\n  @IsEnum(NotificationsStatusEnum)\n  @ApiProperty({ enum: NotificationsStatusEnum })\n  public readonly status?: NotificationsStatusEnum;\n\n  public get where(): Brackets {\n    const { status, ...other } = this;\n\n    const callback = (key) => !Object.keys(other).includes(key);\n    const filtersAreEmpty = Object.keys(this).filter(callback).length  {\n      qb.where(Object.assign({}, status && { status: Equal(status) }));\n    });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/SelectProfileDto.html":{"url":"classes/SelectProfileDto.html","title":"class - SelectProfileDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  SelectProfileDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/auth/dto/select-profile.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                [description]\n\n            \n\n            \n                Extends\n            \n            \n                        FindOneOptionsDto\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Readonly\n                                    Optional\n                                eager\n                            \n                            \n                                    Public\n                                    Readonly\n                                    Optional\n                                selection\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                            Optional\n                        eager\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsBooleanString()@ApiProperty({type: 'boolean', description: 'Indicates what relations of entity should be loaded'})\n                        \n                    \n                \n                        \n                            \n                                Inherited from         FindOneOptionsDto\n\n                            \n                        \n                    \n                        \n                                Defined in         FindOneOptionsDto:43\n\n                        \n                    \n\n            \n                \n                    Indicates what relations of entity should be loaded (simplified left join form)\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                            Optional\n                        selection\n                        \n                    \n                \n            \n                \n                    \n                        Type :     ()[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsArray()@IsOptional()@IsString({each: true})@IsNotEmpty({each: true})@Transform(undefined)@ApiProperty({type: undefined, example: undefined, description: 'Specifies what columns should be retrieved'})\n                        \n                    \n                \n                        \n                            \n                                Inherited from         FindOneOptionsDto\n\n                            \n                        \n                    \n                        \n                                Defined in         FindOneOptionsDto:24\n\n                        \n                    \n\n            \n                \n                    Specifies what columns should be retrieved\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { FindOneOptionsDto } from 'src/common/dto';\nimport { UserEntity } from 'src/modules/users/entities';\n\n/**\n * [description]\n */\nexport class SelectProfileDto extends FindOneOptionsDto {}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/SelectUserDto.html":{"url":"classes/SelectUserDto.html","title":"class - SelectUserDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  SelectUserDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/users/dto/select-user.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                [description]\n\n            \n\n            \n                Extends\n            \n            \n                        FindOneOptionsDto\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Readonly\n                                    Optional\n                                eager\n                            \n                            \n                                    Public\n                                    Readonly\n                                    Optional\n                                selection\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                            Optional\n                        eager\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsBooleanString()@ApiProperty({type: 'boolean', description: 'Indicates what relations of entity should be loaded'})\n                        \n                    \n                \n                        \n                            \n                                Inherited from         FindOneOptionsDto\n\n                            \n                        \n                    \n                        \n                                Defined in         FindOneOptionsDto:43\n\n                        \n                    \n\n            \n                \n                    Indicates what relations of entity should be loaded (simplified left join form)\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                            Optional\n                        selection\n                        \n                    \n                \n            \n                \n                    \n                        Type :     ()[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsArray()@IsOptional()@IsString({each: true})@IsNotEmpty({each: true})@Transform(undefined)@ApiProperty({type: undefined, example: undefined, description: 'Specifies what columns should be retrieved'})\n                        \n                    \n                \n                        \n                            \n                                Inherited from         FindOneOptionsDto\n\n                            \n                        \n                    \n                        \n                                Defined in         FindOneOptionsDto:24\n\n                        \n                    \n\n            \n                \n                    Specifies what columns should be retrieved\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { FindOneOptionsDto } from 'src/common/dto';\nimport { UserEntity } from '../entities';\n\n/**\n * [description]\n */\nexport class SelectUserDto extends FindOneOptionsDto {}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/SelectUserNotificationTokenDto.html":{"url":"classes/SelectUserNotificationTokenDto.html","title":"class - SelectUserNotificationTokenDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  SelectUserNotificationTokenDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/users/dto/select-user-notification-token.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                [description]\n\n            \n\n            \n                Extends\n            \n            \n                        FindOneOptionsDto\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Readonly\n                                    Optional\n                                eager\n                            \n                            \n                                    Public\n                                    Readonly\n                                    Optional\n                                selection\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                            Optional\n                        eager\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsBooleanString()@ApiProperty({type: 'boolean', description: 'Indicates what relations of entity should be loaded'})\n                        \n                    \n                \n                        \n                            \n                                Inherited from         FindOneOptionsDto\n\n                            \n                        \n                    \n                        \n                                Defined in         FindOneOptionsDto:43\n\n                        \n                    \n\n            \n                \n                    Indicates what relations of entity should be loaded (simplified left join form)\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                            Optional\n                        selection\n                        \n                    \n                \n            \n                \n                    \n                        Type :     ()[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsArray()@IsOptional()@IsString({each: true})@IsNotEmpty({each: true})@Transform(undefined)@ApiProperty({type: undefined, example: undefined, description: 'Specifies what columns should be retrieved'})\n                        \n                    \n                \n                        \n                            \n                                Inherited from         FindOneOptionsDto\n\n                            \n                        \n                    \n                        \n                                Defined in         FindOneOptionsDto:24\n\n                        \n                    \n\n            \n                \n                    Specifies what columns should be retrieved\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { FindOneOptionsDto } from 'src/common/dto';\nimport { UserNotificationTokenEntity } from '../entities';\n\n/**\n * [description]\n */\nexport class SelectUserNotificationTokenDto extends FindOneOptionsDto {}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/SelectUserNotificationTokensDto.html":{"url":"classes/SelectUserNotificationTokensDto.html","title":"class - SelectUserNotificationTokensDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  SelectUserNotificationTokensDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/users/dto/select-user-notification-tokens.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                [description]\n\n            \n\n            \n                Extends\n            \n            \n                        FindManyOptionsDto\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Readonly\n                                    Optional\n                                asc\n                            \n                            \n                                    Public\n                                    Readonly\n                                    Optional\n                                desc\n                            \n                            \n                                    Public\n                                    Readonly\n                                    Optional\n                                page\n                            \n                            \n                                    Public\n                                    Readonly\n                                    Optional\n                                take\n                            \n                            \n                                    Public\n                                    Readonly\n                                    Optional\n                                eager\n                            \n                            \n                                    Public\n                                    Readonly\n                                    Optional\n                                selection\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                            Optional\n                        asc\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsArray()@IsOptional()@IsString({each: true})@IsNotEmpty({each: true})@Transform(undefined)@ApiProperty({type: undefined, description: Order, in which entities should be ordered. For order by relation field use elation.field})\n                        \n                    \n                \n                        \n                            \n                                Inherited from         FindManyOptionsDto\n\n                            \n                        \n                    \n                        \n                                Defined in         FindManyOptionsDto:29\n\n                        \n                    \n\n            \n                \n                    Order, in which entities should be ordered\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                            Optional\n                        desc\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsArray()@IsOptional()@IsString({each: true})@IsNotEmpty({each: true})@Transform(undefined)@ApiProperty({type: undefined, description: 'If the same fields are specified for sorting in two directions, the priority is given to DESC'})\n                        \n                    \n                \n                        \n                            \n                                Inherited from         FindManyOptionsDto\n\n                            \n                        \n                    \n                        \n                                Defined in         FindManyOptionsDto:44\n\n                        \n                    \n\n            \n                \n                    If the same fields are specified for sorting in two directions, the priority is given to DESC\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                            Optional\n                        page\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 1\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@Min(1)@ApiProperty({type: String, example: 1, description: 'Offset (paginated) where from entities should be taken'})\n                        \n                    \n                \n                        \n                            \n                                Inherited from         FindManyOptionsDto\n\n                            \n                        \n                    \n                        \n                                Defined in         FindManyOptionsDto:68\n\n                        \n                    \n\n            \n                \n                    Offset (paginated) where from entities should be taken\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                            Optional\n                        take\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 50\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@Min(1)@Max(100)@ApiProperty({type: String, example: 5, default: 50, description: 'Limit (paginated) - max number of entities should be taken'})\n                        \n                    \n                \n                        \n                            \n                                Inherited from         FindManyOptionsDto\n\n                            \n                        \n                    \n                        \n                                Defined in         FindManyOptionsDto:82\n\n                        \n                    \n\n            \n                \n                    Limit (paginated) - max number of entities should be taken\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                            Optional\n                        eager\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsBooleanString()@ApiProperty({type: 'boolean', description: 'Indicates what relations of entity should be loaded'})\n                        \n                    \n                \n                        \n                            \n                                Inherited from         FindOneOptionsDto\n\n                            \n                        \n                    \n                        \n                                Defined in         FindOneOptionsDto:43\n\n                        \n                    \n\n            \n                \n                    Indicates what relations of entity should be loaded (simplified left join form)\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                            Optional\n                        selection\n                        \n                    \n                \n            \n                \n                    \n                        Type :     ()[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsArray()@IsOptional()@IsString({each: true})@IsNotEmpty({each: true})@Transform(undefined)@ApiProperty({type: undefined, example: undefined, description: 'Specifies what columns should be retrieved'})\n                        \n                    \n                \n                        \n                            \n                                Inherited from         FindOneOptionsDto\n\n                            \n                        \n                    \n                        \n                                Defined in         FindOneOptionsDto:24\n\n                        \n                    \n\n            \n                \n                    Specifies what columns should be retrieved\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { FindManyOptionsDto } from 'src/common/dto';\n\nimport { UserNotificationTokenEntity } from '../entities';\n\n/**\n * [description]\n */\nexport class SelectUserNotificationTokensDto extends FindManyOptionsDto {}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/SelectUsersDto.html":{"url":"classes/SelectUsersDto.html","title":"class - SelectUsersDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  SelectUsersDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/users/dto/select-users.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                [description]\n\n            \n\n            \n                Extends\n            \n            \n                        FindManyOptionsDto\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Readonly\n                                    Optional\n                                asc\n                            \n                            \n                                    Public\n                                    Readonly\n                                    Optional\n                                desc\n                            \n                            \n                                    Public\n                                    Readonly\n                                    Optional\n                                page\n                            \n                            \n                                    Public\n                                    Readonly\n                                    Optional\n                                take\n                            \n                            \n                                    Public\n                                    Readonly\n                                    Optional\n                                eager\n                            \n                            \n                                    Public\n                                    Readonly\n                                    Optional\n                                selection\n                            \n                        \n                    \n                \n\n\n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    where\n                                \n                            \n                        \n                    \n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                            Optional\n                        asc\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsArray()@IsOptional()@IsString({each: true})@IsNotEmpty({each: true})@Transform(undefined)@ApiProperty({type: undefined, description: Order, in which entities should be ordered. For order by relation field use elation.field})\n                        \n                    \n                \n                        \n                            \n                                Inherited from         FindManyOptionsDto\n\n                            \n                        \n                    \n                        \n                                Defined in         FindManyOptionsDto:29\n\n                        \n                    \n\n            \n                \n                    Order, in which entities should be ordered\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                            Optional\n                        desc\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsArray()@IsOptional()@IsString({each: true})@IsNotEmpty({each: true})@Transform(undefined)@ApiProperty({type: undefined, description: 'If the same fields are specified for sorting in two directions, the priority is given to DESC'})\n                        \n                    \n                \n                        \n                            \n                                Inherited from         FindManyOptionsDto\n\n                            \n                        \n                    \n                        \n                                Defined in         FindManyOptionsDto:44\n\n                        \n                    \n\n            \n                \n                    If the same fields are specified for sorting in two directions, the priority is given to DESC\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                            Optional\n                        page\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 1\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@Min(1)@ApiProperty({type: String, example: 1, description: 'Offset (paginated) where from entities should be taken'})\n                        \n                    \n                \n                        \n                            \n                                Inherited from         FindManyOptionsDto\n\n                            \n                        \n                    \n                        \n                                Defined in         FindManyOptionsDto:68\n\n                        \n                    \n\n            \n                \n                    Offset (paginated) where from entities should be taken\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                            Optional\n                        take\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 50\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@Min(1)@Max(100)@ApiProperty({type: String, example: 5, default: 50, description: 'Limit (paginated) - max number of entities should be taken'})\n                        \n                    \n                \n                        \n                            \n                                Inherited from         FindManyOptionsDto\n\n                            \n                        \n                    \n                        \n                                Defined in         FindManyOptionsDto:82\n\n                        \n                    \n\n            \n                \n                    Limit (paginated) - max number of entities should be taken\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                            Optional\n                        eager\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsBooleanString()@ApiProperty({type: 'boolean', description: 'Indicates what relations of entity should be loaded'})\n                        \n                    \n                \n                        \n                            \n                                Inherited from         FindOneOptionsDto\n\n                            \n                        \n                    \n                        \n                                Defined in         FindOneOptionsDto:43\n\n                        \n                    \n\n            \n                \n                    Indicates what relations of entity should be loaded (simplified left join form)\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                            Optional\n                        selection\n                        \n                    \n                \n            \n                \n                    \n                        Type :     ()[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsArray()@IsOptional()@IsString({each: true})@IsNotEmpty({each: true})@Transform(undefined)@ApiProperty({type: undefined, example: undefined, description: 'Specifies what columns should be retrieved'})\n                        \n                    \n                \n                        \n                            \n                                Inherited from         FindOneOptionsDto\n\n                            \n                        \n                    \n                        \n                                Defined in         FindOneOptionsDto:24\n\n                        \n                    \n\n            \n                \n                    Specifies what columns should be retrieved\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        where\n                    \n                \n\n                \n                    \n                        getwhere()\n                    \n                \n                            \n                                \n                                    Defined in src/modules/users/dto/select-users.dto.ts:14\n                                \n                            \n                    \n                        \n                                [description]\n\n\n                        \n                    \n\n            \n        \n\n    \n\n\n    \n        import { FindManyOptionsDto } from 'src/common/dto';\nimport { FindOneOptions } from 'typeorm';\n\nimport { UserEntity } from '../entities';\nimport { UserStatusEnum } from '../enums';\n\n/**\n * [description]\n */\nexport class SelectUsersDto extends FindManyOptionsDto {\n  /**\n   * [description]\n   */\n  public get where(): FindOneOptions['where'] {\n    return {\n      status: UserStatusEnum.ACTIVATED,\n    };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/SendGridModule.html":{"url":"modules/SendGridModule.html","title":"module - SendGridModule","body":"\n                   \n\n\n\n\n    Modules\n    SendGridModule\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/sendgrid/sendgrid.module.ts\n        \n\n\n\n\n\n        \n            \n            \n        \n\n        \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        Static\n                        createAsyncOptionsProvider\n                        \n                    \n                \n            \n            \n                \n                    \n                    createAsyncOptionsProvider(options: SendGridModuleAsyncOptions)\n                \n            \n\n\n            \n                \n                    Defined in src/sendgrid/sendgrid.module.ts:73\n                \n            \n\n\n            \n                \n                    [createAsyncOptionsProvider description]\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    options\n                                    \n                                                SendGridModuleAsyncOptions\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        [description]\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Provider\n\n                    \n                    \n                        [description]\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        Static\n                        createAsyncProviders\n                        \n                    \n                \n            \n            \n                \n                    \n                    createAsyncProviders(options: SendGridModuleAsyncOptions)\n                \n            \n\n\n            \n                \n                    Defined in src/sendgrid/sendgrid.module.ts:55\n                \n            \n\n\n            \n                \n                    [createAsyncProviders description]\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    options\n                                    \n                                                SendGridModuleAsyncOptions\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        [description]\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Provider[]\n\n                    \n                    \n                        [description]\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Static\n                        register\n                        \n                    \n                \n            \n            \n                \n                    \n                    register(options?: SendGridModuleOptions)\n                \n            \n\n\n            \n                \n                    Defined in src/sendgrid/sendgrid.module.ts:20\n                \n            \n\n\n            \n                \n                    [register description]\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    options\n                                    \n                                                SendGridModuleOptions\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                    \n                                        [description]\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     DynamicModule\n\n                    \n                    \n                        [description]\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Static\n                        registerAsync\n                        \n                    \n                \n            \n            \n                \n                    \n                    registerAsync(options: SendGridModuleAsyncOptions)\n                \n            \n\n\n            \n                \n                    Defined in src/sendgrid/sendgrid.module.ts:37\n                \n            \n\n\n            \n                \n                    [registerAsync description]\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    options\n                                    \n                                                SendGridModuleAsyncOptions\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        [description]\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     DynamicModule\n\n                    \n                    \n                        [description]\n\n                    \n                \n            \n        \n    \n\n    \n\n\n    \n        import { randomStringGenerator } from '@nestjs/common/utils/random-string-generator.util';\nimport { Module, DynamicModule, Provider, Global } from '@nestjs/common';\n\nimport { SENDGRID_MODULE_OPTIONS, SENDGRID_MODULE } from './sendgrid.constants';\nimport { SendGridService } from './sendgrid.service';\nimport {\n  SendGridModuleAsyncOptions,\n  SendGridOptionsFactory,\n  SendGridModuleOptions,\n} from './interfaces';\n\n@Global()\n@Module({})\nexport class SendGridModule {\n  /**\n   * [register description]\n   * @param  options [description]\n   * @return         [description]\n   */\n  static register(options?: SendGridModuleOptions): DynamicModule {\n    return {\n      module: SendGridModule,\n      providers: [\n        { provide: SENDGRID_MODULE, useValue: randomStringGenerator() },\n        { provide: SENDGRID_MODULE_OPTIONS, useValue: options },\n        { provide: SendGridService, useClass: SendGridService },\n      ],\n      exports: [SENDGRID_MODULE, SENDGRID_MODULE_OPTIONS, SendGridService],\n    };\n  }\n\n  /**\n   * [registerAsync description]\n   * @param  options [description]\n   * @return         [description]\n   */\n  public static registerAsync(options: SendGridModuleAsyncOptions): DynamicModule {\n    return {\n      module: SendGridModule,\n      imports: options.imports,\n      providers: [\n        ...this.createAsyncProviders(options),\n        { provide: SENDGRID_MODULE, useValue: randomStringGenerator() },\n        { provide: SendGridService, useClass: SendGridService },\n      ],\n      exports: [SENDGRID_MODULE, SENDGRID_MODULE_OPTIONS, SendGridService],\n    };\n  }\n\n  /**\n   * [createAsyncProviders description]\n   * @param  options [description]\n   * @return         [description]\n   */\n  private static createAsyncProviders(options: SendGridModuleAsyncOptions): Provider[] {\n    if (options.useExisting || options.useFactory) {\n      return [this.createAsyncOptionsProvider(options)];\n    }\n    return [\n      this.createAsyncOptionsProvider(options),\n      {\n        provide: options.useClass,\n        useClass: options.useClass,\n      },\n    ];\n  }\n\n  /**\n   * [createAsyncOptionsProvider description]\n   * @param  options [description]\n   * @return         [description]\n   */\n  private static createAsyncOptionsProvider(options: SendGridModuleAsyncOptions): Provider {\n    if (options.useFactory) {\n      return {\n        provide: SENDGRID_MODULE_OPTIONS,\n        useFactory: options.useFactory,\n        inject: options.inject || [],\n      };\n    }\n    return {\n      provide: SENDGRID_MODULE_OPTIONS,\n      useFactory: async (optionsFactory: SendGridOptionsFactory) =>\n        optionsFactory.createSendGridOptions(),\n      inject: [options.useExisting || options.useClass],\n    };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/SendGridModuleAsyncOptions.html":{"url":"interfaces/SendGridModuleAsyncOptions.html","title":"interface - SendGridModuleAsyncOptions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  SendGridModuleAsyncOptions\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/sendgrid/interfaces/sendgrid-module.interface.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                    Pick\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            inject\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            useClass\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            useExisting\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            useFactory\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        inject\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        inject:     any[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     any[]\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        useClass\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        useClass:         Type\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Type\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        useExisting\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        useExisting:         Type\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Type\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        useFactory\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        useFactory:         function\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         function\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { MailDataRequired } from '@sendgrid/helpers/classes/mail';\nimport { ModuleMetadata } from '@nestjs/common/interfaces';\nimport { Type } from '@nestjs/common';\n\nexport interface SendGridModuleOptions {\n  apiKey: string;\n  timeout?: number;\n  substitutionWrappers?: { left: string; right: string };\n  default?: Partial;\n}\n\nexport interface SendGridOptionsFactory {\n  createSendGridOptions(): Promise | SendGridModuleOptions;\n}\n\nexport interface SendGridModuleAsyncOptions extends Pick {\n  useExisting?: Type;\n  useClass?: Type;\n  useFactory?: (...args: any[]) => Promise | SendGridModuleOptions;\n  inject?: any[];\n}\n\n    \n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/SendGridModuleOptions.html":{"url":"interfaces/SendGridModuleOptions.html","title":"interface - SendGridModuleOptions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  SendGridModuleOptions\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/sendgrid/interfaces/sendgrid-module.interface.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            apiKey\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            default\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            substitutionWrappers\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            timeout\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        apiKey\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        apiKey:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        default\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        default:     Partial\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     Partial\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        substitutionWrappers\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        substitutionWrappers:     literal type\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     literal type\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        timeout\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        timeout:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { MailDataRequired } from '@sendgrid/helpers/classes/mail';\nimport { ModuleMetadata } from '@nestjs/common/interfaces';\nimport { Type } from '@nestjs/common';\n\nexport interface SendGridModuleOptions {\n  apiKey: string;\n  timeout?: number;\n  substitutionWrappers?: { left: string; right: string };\n  default?: Partial;\n}\n\nexport interface SendGridOptionsFactory {\n  createSendGridOptions(): Promise | SendGridModuleOptions;\n}\n\nexport interface SendGridModuleAsyncOptions extends Pick {\n  useExisting?: Type;\n  useClass?: Type;\n  useFactory?: (...args: any[]) => Promise | SendGridModuleOptions;\n  inject?: any[];\n}\n\n    \n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/SendGridOptionsFactory.html":{"url":"interfaces/SendGridOptionsFactory.html","title":"interface - SendGridOptionsFactory","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  SendGridOptionsFactory\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/sendgrid/interfaces/sendgrid-module.interface.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Methods\n                        \n                    \n                    \n                        \n                            \n                                \n                                    \n                                        createSendGridOptions\n                                    \n                                \n                            \n                        \n                    \n                \n            \n        \n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        createSendGridOptions\n                        \n                    \n                \n            \n            \n                \ncreateSendGridOptions()\n                \n            \n\n\n            \n                \n                    Defined in src/sendgrid/interfaces/sendgrid-module.interface.ts:13\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         Promise | SendGridModuleOptions\n\n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { MailDataRequired } from '@sendgrid/helpers/classes/mail';\nimport { ModuleMetadata } from '@nestjs/common/interfaces';\nimport { Type } from '@nestjs/common';\n\nexport interface SendGridModuleOptions {\n  apiKey: string;\n  timeout?: number;\n  substitutionWrappers?: { left: string; right: string };\n  default?: Partial;\n}\n\nexport interface SendGridOptionsFactory {\n  createSendGridOptions(): Promise | SendGridModuleOptions;\n}\n\nexport interface SendGridModuleAsyncOptions extends Pick {\n  useExisting?: Type;\n  useClass?: Type;\n  useFactory?: (...args: any[]) => Promise | SendGridModuleOptions;\n  inject?: any[];\n}\n\n    \n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/SendGridService.html":{"url":"injectables/SendGridService.html","title":"injectable - SendGridService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  SendGridService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/sendgrid/sendgrid.service.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                    MailService\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                logger\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                mergeWithDefaultMailData\n                            \n                            \n                                    Public\n                                    Async\n                                sendMail\n                            \n                            \n                                    Public\n                                    Async\n                                sendMultipleMail\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(options: SendGridModuleOptions)\n                    \n                \n                        \n                            \n                                Defined in src/sendgrid/sendgrid.service.ts:19\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        options\n                                                  \n                                                        \n                                                                        SendGridModuleOptions\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        mergeWithDefaultMailData\n                        \n                    \n                \n            \n            \n                \n                    \n                    mergeWithDefaultMailData(data: Partial)\n                \n            \n\n\n            \n                \n                    Defined in src/sendgrid/sendgrid.service.ts:16\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    data\n                                    \n                                            Partial\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     MailDataRequired\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        sendMail\n                        \n                    \n                \n            \n            \n                \n                    \n                    sendMail(data: Partial)\n                \n            \n\n\n            \n                \n                    Defined in src/sendgrid/sendgrid.service.ts:38\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    data\n                                    \n                                            Partial\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise<>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        sendMultipleMail\n                        \n                    \n                \n            \n            \n                \n                    \n                    sendMultipleMail(data: Partial)\n                \n            \n\n\n            \n                \n                    Defined in src/sendgrid/sendgrid.service.ts:48\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    data\n                                    \n                                            Partial\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise<>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        logger\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new Logger(SendGridService.name)\n                    \n                \n                    \n                        \n                                Defined in src/sendgrid/sendgrid.service.ts:14\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { BadGatewayException, Inject, Injectable, Logger } from '@nestjs/common';\nimport { MailDataRequired } from '@sendgrid/helpers/classes/mail';\nimport { ClientResponse } from '@sendgrid/client/src/response';\nimport { MailService } from '@sendgrid/mail';\n\nimport * as deepmerge from 'deepmerge';\n\nimport { SendGridModuleOptions } from './interfaces';\n\nimport { SENDGRID_MODULE_OPTIONS } from './sendgrid.constants';\n\n@Injectable()\nexport class SendGridService extends MailService {\n  private readonly logger = new Logger(SendGridService.name);\n\n  private mergeWithDefaultMailData(data: Partial): MailDataRequired {\n    if (!this.options.default) return data as MailDataRequired;\n    return deepmerge(this.options.default, data);\n  }\n\n  constructor(\n    @Inject(SENDGRID_MODULE_OPTIONS)\n    private readonly options: SendGridModuleOptions,\n  ) {\n    super();\n\n    if (!options.apiKey) throw new Error('SendGrid API Key not found');\n    if (options.timeout) this.setTimeout(options.timeout);\n    if (options.substitutionWrappers)\n      this.setSubstitutionWrappers(\n        options.substitutionWrappers.left,\n        options.substitutionWrappers.right,\n      );\n\n    this.setApiKey(options.apiKey);\n  }\n\n  public async sendMail(\n    data: Partial,\n  ): Promise]> {\n    return this.send(this.mergeWithDefaultMailData(data)).catch(({ response }) => {\n      const [error] = response.body.errors;\n      this.logger.error(error.message);\n      throw new BadGatewayException();\n    });\n  }\n\n  public async sendMultipleMail(\n    data: Partial,\n  ): Promise]> {\n    return this.sendMultiple(this.mergeWithDefaultMailData(data)).catch(({ response }) => {\n      const [error] = response.body.errors;\n      this.logger.error(error.message);\n      throw new BadGatewayException();\n    });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/SendResetPasswordDto.html":{"url":"classes/SendResetPasswordDto.html","title":"class - SendResetPasswordDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  SendResetPasswordDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/auth/dto/reset-password.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                [description]\n\n            \n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { CreateUserDto } from '../../users/dto';\nimport { ApiProperty, PickType } from '@nestjs/swagger';\nimport { IsString, Length } from 'class-validator';\n\n/**\n * [description]\n */\nexport class ResetPasswordDto extends PickType(CreateUserDto, ['email', 'password']) {\n  /**\n   * [description]\n   */\n  @IsString()\n  @Length(6)\n  @ApiProperty({ example: '123456', maxLength: 6 })\n  public readonly code: string;\n}\n\n/**\n * [description]\n */\nexport class SendResetPasswordDto extends PickType(CreateUserDto, ['email']) {}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/StorageS3Service.html":{"url":"injectables/StorageS3Service.html","title":"injectable - StorageS3Service","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  StorageS3Service\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/multipart/storage-s3.service.ts\n        \n\n\n            \n                Description\n            \n            \n                [description]\n\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                bucket\n                            \n                            \n                                    Private\n                                    Readonly\n                                s3\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                createOne\n                            \n                            \n                                    Public\n                                    Async\n                                deleteOne\n                            \n                            \n                                    Public\n                                generateName\n                            \n                            \n                                    Public\n                                    Async\n                                selectHeadOne\n                            \n                            \n                                    Public\n                                    Async\n                                uploadOne\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(configService: ConfigService)\n                    \n                \n                        \n                            \n                                Defined in src/multipart/storage-s3.service.ts:23\n                            \n                        \n\n                \n                    \n                            [description]\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                        ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        createOne\n                        \n                    \n                \n            \n            \n                \n                    \n                    createOne(multipart: Multipart)\n                \n            \n\n\n            \n                \n                    Defined in src/multipart/storage-s3.service.ts:67\n                \n            \n\n\n            \n                \n                    [description]\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    multipart\n                                    \n                                            Multipart\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        deleteOne\n                        \n                    \n                \n            \n            \n                \n                    \n                    deleteOne(Key: S3.ObjectKey)\n                \n            \n\n\n            \n                \n                    Defined in src/multipart/storage-s3.service.ts:94\n                \n            \n\n\n            \n                \n                    [description]\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    Key\n                                    \n                                            S3.ObjectKey\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        generateName\n                        \n                    \n                \n            \n            \n                \n                    \n                    generateName()\n                \n            \n\n\n            \n                \n                    Defined in src/multipart/storage-s3.service.ts:37\n                \n            \n\n\n            \n                \n                    [description]\n\n\n                    \n                        Returns :         string\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        selectHeadOne\n                        \n                    \n                \n            \n            \n                \n                    \n                    selectHeadOne(options: HeadObjectRequest)\n                \n            \n\n\n            \n                \n                    Defined in src/multipart/storage-s3.service.ts:57\n                \n            \n\n\n            \n                \n                    [description]\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    options\n                                    \n                                                HeadObjectRequest\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        uploadOne\n                        \n                    \n                \n            \n            \n                \n                    \n                    uploadOne(options: PutObjectRequest)\n                \n            \n\n\n            \n                \n                    Defined in src/multipart/storage-s3.service.ts:49\n                \n            \n\n\n            \n                \n                    [description]\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    options\n                                    \n                                                PutObjectRequest\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        bucket\n                        \n                    \n                \n            \n                \n                    \n                        Type :     S3.BucketName\n\n                    \n                \n                    \n                        \n                                Defined in src/multipart/storage-s3.service.ts:23\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        s3\n                        \n                    \n                \n            \n                \n                    \n                        Type :     S3\n\n                    \n                \n                    \n                        \n                                Defined in src/multipart/storage-s3.service.ts:22\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { Injectable, NotFoundException } from '@nestjs/common';\nimport { PromiseResult } from 'aws-sdk/lib/request';\nimport { extname as extName } from 'node:path';\nimport { Multipart } from 'fastify-multipart';\nimport { AWSError } from 'aws-sdk/lib/error';\nimport { randomBytes } from 'node:crypto';\nimport S3 from 'aws-sdk/clients/s3';\n\nimport { ErrorTypeEnum } from 'src/common/enums';\nimport { ConfigService } from 'src/config';\n\nimport { UploadedFile } from './dto';\n\ntype PutObjectRequest = Omit;\ntype HeadObjectRequest = Omit;\n\n/**\n * [description]\n */\n@Injectable()\nexport class StorageS3Service {\n  private readonly s3: S3;\n  private readonly bucket: S3.BucketName;\n\n  /**\n   * [description]\n   * @param configService\n   */\n  constructor(private readonly configService: ConfigService) {\n    this.s3 = new S3();\n    this.bucket = this.configService.get('AWS_S3_BUCKET');\n  }\n\n  /**\n   * [description]\n   */\n  public generateName(): string {\n    const filename = randomBytes(16).toString('hex');\n    const now = new Date();\n    const year = now.getFullYear();\n    const month = (now.getMonth() + 1).toString().padStart(2, '0');\n    return `${year}/${month}/${filename}`;\n  }\n\n  /**\n   * [description]\n   * @param options\n   */\n  public async uploadOne(options: PutObjectRequest): Promise {\n    return this.s3.upload({ ...options, Bucket: this.bucket }).promise();\n  }\n\n  /**\n   * [description]\n   * @param options\n   */\n  public async selectHeadOne(\n    options: HeadObjectRequest,\n  ): Promise> {\n    return this.s3.headObject({ ...options, Bucket: this.bucket }).promise();\n  }\n\n  /**\n   * [description]\n   * @param multipart\n   */\n  public async createOne(multipart: Multipart): Promise {\n    const { file, encoding, mimetype } = multipart;\n    const extname = extName(multipart.filename);\n    const filename = this.generateName();\n\n    try {\n      const Key = filename + extname;\n      await this.uploadOne({ Key, Body: file, ContentType: mimetype });\n      const { ContentLength: size } = await this.selectHeadOne({ Key });\n\n      return new UploadedFile({\n        filename,\n        mimetype,\n        encoding,\n        extname,\n        title: multipart.filename,\n        fileSize: size.toString(),\n      });\n    } catch {\n      this.deleteOne(filename);\n    }\n  }\n\n  /**\n   * [description]\n   * @param Key\n   */\n  public async deleteOne(\n    Key: S3.ObjectKey,\n  ): Promise> {\n    return this.s3\n      .deleteObject({ Key, Bucket: this.bucket })\n      .promise()\n      .catch(() => {\n        throw new NotFoundException(ErrorTypeEnum.FILE_NOT_FOUND);\n      });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/StorageService.html":{"url":"injectables/StorageService.html","title":"injectable - StorageService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  StorageService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/multipart/storage.service.ts\n        \n\n\n            \n                Description\n            \n            \n                [description]\n\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Readonly\n                                    Optional\n                                busboyConfig\n                            \n                            \n                                    Private\n                                    Readonly\n                                destination\n                            \n                            \n                                    Private\n                                    Readonly\n                                options\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                createOne\n                            \n                            \n                                    Public\n                                    Async\n                                deleteOne\n                            \n                            \n                                    Public\n                                generateName\n                            \n                            \n                                    Public\n                                    Async\n                                onModuleInit\n                            \n                            \n                                    Public\n                                    Async\n                                selectOne\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(configService: ConfigService, busboyConfig?: BusboyConfig)\n                    \n                \n                        \n                            \n                                Defined in src/multipart/storage.service.ts:31\n                            \n                        \n\n                \n                    \n                            [description]\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                        ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                [description]\n\n                                                        \n                                                \n                                                \n                                                        busboyConfig\n                                                  \n                                                        \n                                                                    BusboyConfig\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                        \n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        createOne\n                        \n                    \n                \n            \n            \n                \n                    \n                    createOne(multipart: Multipart)\n                \n            \n\n\n            \n                \n                    Defined in src/multipart/storage.service.ts:69\n                \n            \n\n\n            \n                \n                    [description]\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    multipart\n                                    \n                                            Multipart\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        deleteOne\n                        \n                    \n                \n            \n            \n                \n                    \n                    deleteOne(filename: string)\n                \n            \n\n\n            \n                \n                    Defined in src/multipart/storage.service.ts:112\n                \n            \n\n\n            \n                \n                    [description]\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    filename\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        [description]\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        generateName\n                        \n                    \n                \n            \n            \n                \n                    \n                    generateName()\n                \n            \n\n\n            \n                \n                    Defined in src/multipart/storage.service.ts:56\n                \n            \n\n\n            \n                \n                    [description]\n\n\n                    \n                        Returns :     literal type\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        onModuleInit\n                        \n                    \n                \n            \n            \n                \n                    \n                    onModuleInit()\n                \n            \n\n\n            \n                \n                    Defined in src/multipart/storage.service.ts:49\n                \n            \n\n\n            \n                \n                    [description]\n\n\n                    \n                        Returns :     Promise\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        selectOne\n                        \n                    \n                \n            \n            \n                \n                    \n                    selectOne(file: Partial, options: any)\n                \n            \n\n\n            \n                \n                    Defined in src/multipart/storage.service.ts:97\n                \n            \n\n\n            \n                \n                    [description]\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                    Description\n                                \n                            \n                            \n                                \n                                    file\n                                    \n                                            Partial\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                    \n                                        [description]\n\n                                    \n                                \n                                \n                                    options\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        {}\n                                    \n\n                                    \n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                            Optional\n                        busboyConfig\n                        \n                    \n                \n            \n                \n                    \n                        Type :     BusboyConfig\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Inject(MULTIPART_MODULE_OPTIONS)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/multipart/storage.service.ts:41\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        destination\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/multipart/storage.service.ts:31\n                        \n                    \n\n            \n                \n                    [description]\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        options\n                        \n                    \n                \n            \n                \n                    \n                        Type :         object\n\n                    \n                \n                \n                    \n                        Default value : {\n    mode: parseInt('0700', 8),\n  }\n                    \n                \n                    \n                        \n                                Defined in src/multipart/storage.service.ts:24\n                        \n                    \n\n            \n                \n                    [description]\n\n                \n            \n\n        \n    \n\n\n    \n\n\n    \n        import { Inject, Injectable, NotFoundException, OnModuleInit } from '@nestjs/common';\nimport { ReadStream, createWriteStream, createReadStream } from 'fs';\nimport { stat, mkdir, unlink } from 'fs/promises';\nimport { Multipart } from 'fastify-multipart';\nimport { pipeline } from 'stream/promises';\nimport { BusboyConfig } from 'busboy';\nimport { randomBytes } from 'crypto';\nimport { join, extname } from 'path';\n\nimport { ErrorTypeEnum } from 'src/common/enums';\nimport { ConfigService } from 'src/config';\n\nimport { MULTIPART_MODULE_OPTIONS } from './multipart.constants';\nimport { UploadedFile } from './dto';\n\n/**\n * [description]\n */\n@Injectable()\nexport class StorageService implements OnModuleInit {\n  /**\n   * [description]\n   */\n  private readonly options = {\n    mode: parseInt('0700', 8),\n  };\n\n  /**\n   * [description]\n   */\n  private readonly destination: string;\n\n  /**\n   * [description]\n   * @param configService [description]\n   * @param busboyConfig\n   */\n  constructor(\n    private readonly configService: ConfigService,\n    @Inject(MULTIPART_MODULE_OPTIONS)\n    public readonly busboyConfig?: BusboyConfig,\n  ) {\n    this.destination = this.configService.getDest('STORE_DEST');\n  }\n\n  /**\n   * [description]\n   */\n  public async onModuleInit(): Promise {\n    if (await !stat(this.destination)) await mkdir(this.destination, this.options);\n  }\n\n  /**\n   * [description]\n   */\n  public generateName(): { prefix: string; filename: string } {\n    const filename = randomBytes(16).toString('hex');\n    const now = new Date();\n    const year = now.getFullYear();\n    const month = (now.getMonth() + 1).toString().padStart(2, '0');\n    const prefix = `${year}/${month}`;\n    return { prefix, filename: `${prefix}/${filename}` };\n  }\n\n  /**\n   * [description]\n   * @param multipart\n   */\n  public async createOne(multipart: Multipart): Promise {\n    const { file, encoding, mimetype } = multipart;\n    const { prefix, filename } = this.generateName();\n    const filePath = join(this.destination, filename);\n    const ext = extname(multipart.filename);\n\n    try {\n      await mkdir(join(this.destination, prefix), { recursive: true });\n      await pipeline(file, createWriteStream(filePath, this.options));\n      const { size } = await stat(filePath);\n      return new UploadedFile({\n        filename,\n        mimetype,\n        encoding,\n        extname: ext,\n        title: multipart.filename,\n        fileSize: size.toString(),\n      });\n    } catch {\n      this.deleteOne(filename);\n    }\n  }\n\n  /**\n   * [description]\n   * @param file    [description]\n   * @param options\n   */\n  public async selectOne(file: Partial, options: any = {}): Promise {\n    try {\n      const fileDest = join(this.destination, file.filename);\n      await stat(fileDest);\n      return createReadStream(fileDest, { emitClose: false, ...options });\n    } catch {\n      throw new NotFoundException(ErrorTypeEnum.FILE_NOT_FOUND);\n    }\n  }\n\n  /**\n   * [description]\n   * @param filename {string} [description]\n   * @return {void}\n   */\n  public async deleteOne(filename: string): Promise {\n    const fileDest = join(this.destination, filename);\n    return unlink(fileDest).catch(() => {\n      throw new NotFoundException(ErrorTypeEnum.FILE_NOT_FOUND);\n    });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/TransformInterceptor.html":{"url":"injectables/TransformInterceptor.html","title":"injectable - TransformInterceptor","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  TransformInterceptor\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/interceptors/transform.interceptor.ts\n        \n\n\n            \n                Description\n            \n            \n                [description]\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                intercept\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        intercept\n                        \n                    \n                \n            \n            \n                \nintercept(context: ExecutionContext, next: CallHandler)\n                \n            \n\n\n            \n                \n                    Defined in src/common/interceptors/transform.interceptor.ts:22\n                \n            \n\n\n            \n                \n                    [description]\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    context\n                                    \n                                            ExecutionContext\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    next\n                                    \n                                            CallHandler\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Observable>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { map } from 'rxjs/operators';\nimport { Observable } from 'rxjs';\nimport { Injectable, CallHandler, NestInterceptor, ExecutionContext } from '@nestjs/common';\n\n/**\n * [description]\n */\nexport interface Response {\n  data: string[] | T;\n}\n\n/**\n * [description]\n */\n@Injectable()\nexport class TransformInterceptor implements NestInterceptor> {\n  /**\n   * [description]\n   * @param context\n   * @param next\n   */\n  intercept(context: ExecutionContext, next: CallHandler): Observable> {\n    return next.handle().pipe(map((data) => ({ data })));\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateEmailDto.html":{"url":"classes/UpdateEmailDto.html","title":"class - UpdateEmailDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateEmailDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/auth/dto/update-profile.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                [description]\n\n            \n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty, OmitType, PickType } from '@nestjs/swagger';\nimport { MaxLength, MinLength } from 'class-validator';\nimport { UpdateUserDto } from '../../users/dto';\n\n/**\n * [description]\n */\nexport class UpdateProfileDto extends OmitType(UpdateUserDto, ['password', 'email']) {}\n\n/**\n * [description]\n */\nexport class UpdateEmailDto extends PickType(UpdateUserDto, ['email', 'password']) {}\n\n/**\n * [description]\n */\nexport class UpdatePasswordDto extends PickType(UpdateUserDto, ['password']) {\n  /**\n   * [description]\n   */\n  @MinLength(8)\n  @MaxLength(64)\n  @ApiProperty({ minLength: 8, maxLength: 64, example: 'password' })\n  public readonly oldPassword: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateNotificationDto.html":{"url":"classes/UpdateNotificationDto.html","title":"class - UpdateNotificationDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateNotificationDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/notifications/dto/update-notification.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Readonly\n                                    Optional\n                                status\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                            Optional\n                        status\n                        \n                    \n                \n            \n                \n                    \n                        Type :         NotificationsStatusEnum\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsEnum(NotificationsStatusEnum)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/notifications/dto/update-notification.dto.ts:10\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsEnum, IsOptional } from 'class-validator';\nimport { PartialType } from '@nestjs/swagger';\n\nimport { CreateNotificationDto } from './create-notification.dto';\nimport { NotificationsStatusEnum } from '../enums';\n\nexport class UpdateNotificationDto extends PartialType(CreateNotificationDto) {\n  @IsOptional()\n  @IsEnum(NotificationsStatusEnum)\n  public readonly status?: NotificationsStatusEnum;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdatePasswordDto.html":{"url":"classes/UpdatePasswordDto.html","title":"class - UpdatePasswordDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdatePasswordDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/auth/dto/update-profile.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                [description]\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Readonly\n                                oldPassword\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        oldPassword\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @MinLength(8)@MaxLength(64)@ApiProperty({minLength: 8, maxLength: 64, example: 'password'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/auth/dto/update-profile.dto.ts:25\n                        \n                    \n\n            \n                \n                    [description]\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty, OmitType, PickType } from '@nestjs/swagger';\nimport { MaxLength, MinLength } from 'class-validator';\nimport { UpdateUserDto } from '../../users/dto';\n\n/**\n * [description]\n */\nexport class UpdateProfileDto extends OmitType(UpdateUserDto, ['password', 'email']) {}\n\n/**\n * [description]\n */\nexport class UpdateEmailDto extends PickType(UpdateUserDto, ['email', 'password']) {}\n\n/**\n * [description]\n */\nexport class UpdatePasswordDto extends PickType(UpdateUserDto, ['password']) {\n  /**\n   * [description]\n   */\n  @MinLength(8)\n  @MaxLength(64)\n  @ApiProperty({ minLength: 8, maxLength: 64, example: 'password' })\n  public readonly oldPassword: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateProfileDto.html":{"url":"classes/UpdateProfileDto.html","title":"class - UpdateProfileDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateProfileDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/auth/dto/update-profile.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                [description]\n\n            \n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty, OmitType, PickType } from '@nestjs/swagger';\nimport { MaxLength, MinLength } from 'class-validator';\nimport { UpdateUserDto } from '../../users/dto';\n\n/**\n * [description]\n */\nexport class UpdateProfileDto extends OmitType(UpdateUserDto, ['password', 'email']) {}\n\n/**\n * [description]\n */\nexport class UpdateEmailDto extends PickType(UpdateUserDto, ['email', 'password']) {}\n\n/**\n * [description]\n */\nexport class UpdatePasswordDto extends PickType(UpdateUserDto, ['password']) {\n  /**\n   * [description]\n   */\n  @MinLength(8)\n  @MaxLength(64)\n  @ApiProperty({ minLength: 8, maxLength: 64, example: 'password' })\n  public readonly oldPassword: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateUserDto.html":{"url":"classes/UpdateUserDto.html","title":"class - UpdateUserDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateUserDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/users/dto/update-user.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                [description]\n\n            \n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PartialType } from '@nestjs/swagger';\n\nimport { CreateUserDto } from './create-user.dto';\n\n/**\n * [description]\n */\nexport class UpdateUserDto extends PartialType(CreateUserDto) {}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateUserNotificationTokenDto.html":{"url":"classes/UpdateUserNotificationTokenDto.html","title":"class - UpdateUserNotificationTokenDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateUserNotificationTokenDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/users/dto/update-user-notification-token.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                [description]\n\n            \n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PartialType } from '@nestjs/swagger';\n\nimport { CreateUserNotificationTokenDto } from './create-user-notification-token.dto';\n\n/**\n * [description]\n */\nexport class UpdateUserNotificationTokenDto extends PartialType(CreateUserNotificationTokenDto) {}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UploadedFile.html":{"url":"classes/UploadedFile.html","title":"class - UploadedFile","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UploadedFile\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/multipart/dto/uploaded-file.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                [description]\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Readonly\n                                encoding\n                            \n                            \n                                    Public\n                                    Readonly\n                                extname\n                            \n                            \n                                    Public\n                                    Readonly\n                                filename\n                            \n                            \n                                    Public\n                                    Readonly\n                                fileSize\n                            \n                            \n                                    Public\n                                    Readonly\n                                mimetype\n                            \n                            \n                                    Public\n                                    Readonly\n                                title\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(data: Partial)\n                    \n                \n                        \n                            \n                                Defined in src/multipart/dto/uploaded-file.dto.ts:4\n                            \n                        \n\n                \n                    \n                            description]\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        data\n                                                  \n                                                        \n                                                                        Partial\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                [description]\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        encoding\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/multipart/dto/uploaded-file.dto.ts:36\n                        \n                    \n\n            \n                \n                    [description]\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        extname\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/multipart/dto/uploaded-file.dto.ts:41\n                        \n                    \n\n            \n                \n                    [description]\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        filename\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/multipart/dto/uploaded-file.dto.ts:21\n                        \n                    \n\n            \n                \n                    [description]\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        fileSize\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/multipart/dto/uploaded-file.dto.ts:26\n                        \n                    \n\n            \n                \n                    [description]\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        mimetype\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/multipart/dto/uploaded-file.dto.ts:31\n                        \n                    \n\n            \n                \n                    [description]\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        title\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/multipart/dto/uploaded-file.dto.ts:16\n                        \n                    \n\n            \n                \n                    [description]\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class UploadedFile {\n  /**\n   * description]\n   * @param data [description]\n   */\n  constructor(data: Partial) {\n    Object.assign(this, data);\n  }\n\n  /**\n   * [description]\n   */\n  public readonly title: string;\n\n  /**\n   * [description]\n   */\n  public readonly filename: string;\n\n  /**\n   * [description]\n   */\n  public readonly fileSize: string;\n\n  /**\n   * [description]\n   */\n  public readonly mimetype: string;\n\n  /**\n   * [description]\n   */\n  public readonly encoding: string;\n\n  /**\n   * [description]\n   */\n  public readonly extname: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UserEntity.html":{"url":"classes/UserEntity.html","title":"class - UserEntity","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UserEntity\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/users/entities/user.entity.ts\n        \n\n\n            \n                Description\n            \n            \n                [description]\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Readonly\n                                cover\n                            \n                            \n                                    Public\n                                    Readonly\n                                createdAt\n                            \n                            \n                                    Public\n                                    Readonly\n                                deletedAt\n                            \n                            \n                                    Public\n                                    Readonly\n                                email\n                            \n                            \n                                    Public\n                                    Readonly\n                                id\n                            \n                            \n                                    Public\n                                    Readonly\n                                notificationTokens\n                            \n                            \n                                    Public\n                                password\n                            \n                            \n                                    Public\n                                    Readonly\n                                refreshTokens\n                            \n                            \n                                    Public\n                                    Readonly\n                                role\n                            \n                            \n                                    Public\n                                    Readonly\n                                status\n                            \n                            \n                                    Public\n                                    Readonly\n                                updatedAt\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                hashPassword\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        cover\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Partial\n\n                    \n                \n                \n                    \n                        Default value : new FileEntity()\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @JoinColumn()@ApiProperty({type: undefined})@Transform(undefined)@ManyToOne(undefined, {onDelete: 'SET NULL', nullable: true, eager: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/users/entities/user.entity.ts:85\n                        \n                    \n\n            \n                \n                    [description]\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        createdAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({readOnly: true})@CreateDateColumn({type: 'timestamptz', default: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/users/entities/user.entity.ts:109\n                        \n                    \n\n            \n                \n                    [description]\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        deletedAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({readOnly: true})@DeleteDateColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/users/entities/user.entity.ts:126\n                        \n                    \n\n            \n                \n                    [description]\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({maxLength: 320, uniqueItems: true})@Column({type: 'varchar', length: 320, unique: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/users/entities/user.entity.ts:54\n                        \n                    \n\n            \n                \n                    [description]\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({readOnly: true})@PrimaryGeneratedColumn('uuid')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/users/entities/user.entity.ts:33\n                        \n                    \n\n            \n                \n                    [description]\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        notificationTokens\n                        \n                    \n                \n            \n                \n                    \n                        Type :         UserNotificationTokenEntity[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiHideProperty()@OneToMany(undefined, undefined)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/users/entities/user.entity.ts:99\n                        \n                    \n\n            \n                \n                    [description]\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiHideProperty()@Column({type: 'varchar', length: 149, select: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/users/entities/user.entity.ts:61\n                        \n                    \n\n            \n                \n                    [description]\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        refreshTokens\n                        \n                    \n                \n            \n                \n                    \n                        Type :         UserRefreshTokenEntity[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiHideProperty()@OneToMany(undefined, undefined)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/users/entities/user.entity.ts:92\n                        \n                    \n\n            \n                \n                    [description]\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        role\n                        \n                    \n                \n            \n                \n                    \n                        Type :         UserRoleEnum\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({enum: UserRoleEnum, default: undefined})@Column({type: 'enum', enum: UserRoleEnum, default: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/users/entities/user.entity.ts:47\n                        \n                    \n\n            \n                \n                    [description]\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        status\n                        \n                    \n                \n            \n                \n                    \n                        Type :         UserStatusEnum\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({enum: UserStatusEnum, default: undefined})@Column({type: 'enum', enum: UserStatusEnum, default: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/users/entities/user.entity.ts:40\n                        \n                    \n\n            \n                \n                    [description]\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        updatedAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({readOnly: true})@UpdateDateColumn({type: 'timestamptz', default: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/users/entities/user.entity.ts:119\n                        \n                    \n\n            \n                \n                    [description]\n\n                \n            \n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        hashPassword\n                        \n                    \n                \n            \n            \n                \n                    \n                    hashPassword()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @BeforeInsert()@BeforeUpdate()\n                \n            \n\n            \n                \n                    Defined in src/modules/users/entities/user.entity.ts:68\n                \n            \n\n\n            \n                \n                    [description]\n\n\n                    \n                        Returns :     Promise\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { FileEntity, FileEntityPreview } from 'src/modules/files/entities';\nimport { ApiHideProperty, ApiProperty } from '@nestjs/swagger';\nimport { Transform } from 'class-transformer';\nimport { hash } from 'src/common/helpers';\nimport {\n  Column,\n  Entity,\n  OneToMany,\n  ManyToOne,\n  JoinColumn,\n  BeforeInsert,\n  BeforeUpdate,\n  CreateDateColumn,\n  UpdateDateColumn,\n  DeleteDateColumn,\n  PrimaryGeneratedColumn,\n} from 'typeorm';\n\nimport { UserNotificationTokenEntity } from './user-notification-token.entity';\nimport { UserRefreshTokenEntity } from './user-refresh-token.entity';\nimport { UserRoleEnum, UserStatusEnum } from '../enums';\n\n/**\n * [description]\n */\n@Entity('users')\nexport class UserEntity {\n  /**\n   * [description]\n   */\n  @ApiProperty({ readOnly: true })\n  @PrimaryGeneratedColumn('uuid')\n  public readonly id: string;\n\n  /**\n   * [description]\n   */\n  @ApiProperty({ enum: UserStatusEnum, default: UserStatusEnum.ACTIVATED })\n  @Column({ type: 'enum', enum: UserStatusEnum, default: UserStatusEnum.ACTIVATED })\n  public readonly status: UserStatusEnum;\n\n  /**\n   * [description]\n   */\n  @ApiProperty({ enum: UserRoleEnum, default: UserRoleEnum.USER })\n  @Column({ type: 'enum', enum: UserRoleEnum, default: UserRoleEnum.USER })\n  public readonly role: UserRoleEnum;\n\n  /**\n   * [description]\n   */\n  @ApiProperty({ maxLength: 320, uniqueItems: true })\n  @Column({ type: 'varchar', length: 320, unique: true })\n  public readonly email: string;\n\n  /**\n   * [description]\n   */\n  @ApiHideProperty()\n  @Column({ type: 'varchar', length: 149, select: false })\n  public password: string;\n\n  /**\n   * [description]\n   */\n  @BeforeInsert()\n  @BeforeUpdate()\n  public async hashPassword(): Promise {\n    if (!this.password) return;\n    this.password = await hash(this.password);\n  }\n\n  /**\n   * [description]\n   */\n  @JoinColumn()\n  @ApiProperty({ type: () => FileEntityPreview })\n  @Transform(({ value }) => value && new FileEntityPreview(value))\n  @ManyToOne(() => FileEntity, {\n    onDelete: 'SET NULL',\n    nullable: true,\n    // cascade: true, // Turned off cause have 'Cyclic dependency' on FileEntity {owner}; Choose one of these\n    eager: true,\n  })\n  public readonly cover: Partial = new FileEntity();\n\n  /**\n   * [description]\n   */\n  @ApiHideProperty()\n  @OneToMany(() => UserRefreshTokenEntity, ({ owner }) => owner)\n  public readonly refreshTokens: UserRefreshTokenEntity[];\n\n  /**\n   * [description]\n   */\n  @ApiHideProperty()\n  @OneToMany(() => UserNotificationTokenEntity, ({ owner }) => owner)\n  public readonly notificationTokens: UserNotificationTokenEntity[];\n\n  /**\n   * [description]\n   */\n  @ApiProperty({ readOnly: true })\n  @CreateDateColumn({\n    type: 'timestamptz',\n    default: () => 'CURRENT_TIMESTAMP',\n  })\n  public readonly createdAt: Date;\n\n  /**\n   * [description]\n   */\n  @ApiProperty({ readOnly: true })\n  @UpdateDateColumn({\n    type: 'timestamptz',\n    default: () => 'CURRENT_TIMESTAMP',\n  })\n  public readonly updatedAt: Date;\n\n  /**\n   * [description]\n   */\n  @ApiProperty({ readOnly: true })\n  @DeleteDateColumn()\n  public readonly deletedAt: Date;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UserNotificationTokenEntity.html":{"url":"classes/UserNotificationTokenEntity.html","title":"class - UserNotificationTokenEntity","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UserNotificationTokenEntity\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/users/entities/user-notification-token.entity.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Readonly\n                                createdAt\n                            \n                            \n                                    Public\n                                    Readonly\n                                id\n                            \n                            \n                                    Public\n                                    Readonly\n                                owner\n                            \n                            \n                                    Public\n                                    Readonly\n                                token\n                            \n                            \n                                    Public\n                                    Readonly\n                                updatedAt\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        createdAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({readOnly: true})@CreateDateColumn({type: 'timestamptz', default: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/users/entities/user-notification-token.entity.ts:49\n                        \n                    \n\n            \n                \n                    [description]\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({readOnly: true})@PrimaryGeneratedColumn('uuid')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/users/entities/user-notification-token.entity.ts:21\n                        \n                    \n\n            \n                \n                    [description]\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        owner\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Partial\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @JoinColumn()@ApiHideProperty()@ManyToOne(undefined, undefined, {onDelete: 'CASCADE', nullable: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/users/entities/user-notification-token.entity.ts:39\n                        \n                    \n\n            \n                \n                    [description]\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        token\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({maxLength: 256})@Column({type: 'varchar', length: 256, nullable: false, unique: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/users/entities/user-notification-token.entity.ts:28\n                        \n                    \n\n            \n                \n                    [description]\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        updatedAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({readOnly: true})@UpdateDateColumn({type: 'timestamptz', default: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/users/entities/user-notification-token.entity.ts:59\n                        \n                    \n\n            \n                \n                    [description]\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {\n  Column,\n  Entity,\n  ManyToOne,\n  JoinColumn,\n  CreateDateColumn,\n  UpdateDateColumn,\n  PrimaryGeneratedColumn,\n} from 'typeorm';\nimport { ApiHideProperty, ApiProperty } from '@nestjs/swagger';\n\nimport { UserEntity } from 'src/modules/users/entities';\n\n@Entity('user_notification_tokens')\nexport class UserNotificationTokenEntity {\n  /**\n   * [description]\n   */\n  @ApiProperty({ readOnly: true })\n  @PrimaryGeneratedColumn('uuid')\n  public readonly id: string;\n\n  /**\n   * [description]\n   */\n  @ApiProperty({ maxLength: 256 })\n  @Column({ type: 'varchar', length: 256, nullable: false, unique: true })\n  public readonly token: string;\n\n  /**\n   * [description]\n   */\n  @JoinColumn()\n  @ApiHideProperty()\n  @ManyToOne(() => UserEntity, ({ notificationTokens }) => notificationTokens, {\n    onDelete: 'CASCADE',\n    nullable: false,\n  })\n  public readonly owner: Partial;\n\n  /**\n   * [description]\n   */\n  @ApiProperty({ readOnly: true })\n  @CreateDateColumn({\n    type: 'timestamptz',\n    default: () => 'CURRENT_TIMESTAMP',\n  })\n  public readonly createdAt: Date;\n\n  /**\n   * [description]\n   */\n  @ApiProperty({ readOnly: true })\n  @UpdateDateColumn({\n    type: 'timestamptz',\n    default: () => 'CURRENT_TIMESTAMP',\n  })\n  public readonly updatedAt: Date;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/UserNotificationTokensController.html":{"url":"controllers/UserNotificationTokensController.html","title":"controller - UserNotificationTokensController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  UserNotificationTokensController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/users/controllers/user-notification-tokens.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                users/notification-tokens\n            \n\n\n            \n                Description\n            \n            \n                [description]\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                createOne\n                            \n                            \n                                    Public\n                                    Async\n                                deleteOne\n                            \n                            \n                                    Public\n                                    Async\n                                deleteOneByToken\n                            \n                            \n                                    Public\n                                    Async\n                                selectAll\n                            \n                            \n                                    Public\n                                    Async\n                                selectOne\n                            \n                            \n                                    Public\n                                    Async\n                                updateOne\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        createOne\n                        \n                    \n                \n            \n            \n                \n                    \n                    createOne(data: CreateUserNotificationTokenDto, owner: UserEntity)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()\n                \n            \n\n            \n                \n                    Defined in src/modules/users/controllers/user-notification-tokens.controller.ts:52\n                \n            \n\n\n            \n                \n                    [description]\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    data\n                                    \n                                                CreateUserNotificationTokenDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    owner\n                                    \n                                                UserEntity\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        deleteOne\n                        \n                    \n                \n            \n            \n                \n                    \n                    deleteOne(conditions: ID, owner: UserEntity)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete(':id')\n                \n            \n\n            \n                \n                    Defined in src/modules/users/controllers/user-notification-tokens.controller.ts:119\n                \n            \n\n\n            \n                \n                    [description]\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    conditions\n                                    \n                                                ID\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    owner\n                                    \n                                                UserEntity\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        deleteOneByToken\n                        \n                    \n                \n            \n            \n                \n                    \n                    deleteOneByToken(conditions: DeleteUserNotificationTokenDto, owner: UserEntity)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete('')\n                \n            \n\n            \n                \n                    Defined in src/modules/users/controllers/user-notification-tokens.controller.ts:107\n                \n            \n\n\n            \n                \n                    [description]\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    conditions\n                                    \n                                                DeleteUserNotificationTokenDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    owner\n                                    \n                                                UserEntity\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        selectAll\n                        \n                    \n                \n            \n            \n                \n                    \n                    selectAll(options: SelectUsersDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()\n                \n            \n\n            \n                \n                    Defined in src/modules/users/controllers/user-notification-tokens.controller.ts:64\n                \n            \n\n\n            \n                \n                    [description]\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    options\n                                    \n                                                SelectUsersDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        selectOne\n                        \n                    \n                \n            \n            \n                \n                    \n                    selectOne(conditions: ID, options: SelectUserNotificationTokenDto, owner: UserEntity)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get(':id')\n                \n            \n\n            \n                \n                    Defined in src/modules/users/controllers/user-notification-tokens.controller.ts:74\n                \n            \n\n\n            \n                \n                    [description]\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    conditions\n                                    \n                                                ID\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    options\n                                    \n                                                SelectUserNotificationTokenDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    owner\n                                    \n                                                UserEntity\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        updateOne\n                        \n                    \n                \n            \n            \n                \n                    \n                    updateOne(conditions: ID, data: UpdateUserNotificationTokenDto, owner: UserEntity)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch(':id')\n                \n            \n\n            \n                \n                    Defined in src/modules/users/controllers/user-notification-tokens.controller.ts:91\n                \n            \n\n\n            \n                \n                    [description]\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    conditions\n                                    \n                                                ID\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    data\n                                    \n                                                UpdateUserNotificationTokenDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    owner\n                                    \n                                                UserEntity\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { ApiBearerAuth, ApiTags } from '@nestjs/swagger';\nimport {\n  Get,\n  Post,\n  Body,\n  Param,\n  Patch,\n  Query,\n  Delete,\n  UseGuards,\n  Controller,\n  UseInterceptors,\n  ClassSerializerInterceptor,\n} from '@nestjs/common';\n\nimport { User } from 'src/common/decorators';\nimport { ID } from 'src/common/dto';\n\nimport { JwtAuthGuard } from 'src/modules/auth/guards';\n\nimport { UserNotificationTokensService } from '../services';\nimport { UserEntity, UserNotificationTokenEntity } from '../entities';\nimport {\n  SelectUsersDto,\n  PaginationUsersDto,\n  CreateUserNotificationTokenDto,\n  SelectUserNotificationTokenDto,\n  UpdateUserNotificationTokenDto,\n  DeleteUserNotificationTokenDto,\n} from '../dto';\n\n/**\n * [description]\n */\n@ApiBearerAuth()\n@UseGuards(JwtAuthGuard)\n@ApiTags('users/notification-tokens')\n@Controller('users/notification-tokens')\n@UseInterceptors(ClassSerializerInterceptor)\nexport class UserNotificationTokensController {\n  /**\n   * [description]\n   * @param userNotificationTokensService\n   */\n  constructor(private readonly userNotificationTokensService: UserNotificationTokensService) {}\n\n  /**\n   * [description]\n   * @param data\n   */\n  @Post()\n  public async createOne(\n    @Body() data: CreateUserNotificationTokenDto,\n    @User() owner: UserEntity,\n  ): Promise {\n    return this.userNotificationTokensService.createOne({ ...data, owner: { id: owner.id } });\n  }\n\n  /**\n   * [description]\n   * @param options\n   */\n  @Get()\n  public async selectAll(@Query() options: SelectUsersDto): Promise {\n    return this.userNotificationTokensService.selectAll(options);\n  }\n\n  /**\n   * [description]\n   * @param conditions\n   * @param options\n   */\n  @Get(':id')\n  public async selectOne(\n    @Param() conditions: ID,\n    @Query() options: SelectUserNotificationTokenDto,\n    @User() owner: UserEntity,\n  ): Promise {\n    return this.userNotificationTokensService.selectOne(\n      { ...conditions, owner: { id: owner.id } },\n      options,\n    );\n  }\n\n  /**\n   * [description]\n   * @param conditions\n   * @param data\n   */\n  @Patch(':id')\n  public async updateOne(\n    @Param() conditions: ID,\n    @Body() data: UpdateUserNotificationTokenDto,\n    @User() owner: UserEntity,\n  ): Promise {\n    return this.userNotificationTokensService.updateOne(\n      { ...conditions, owner: { id: owner.id } },\n      data,\n    );\n  }\n\n  /**\n   * [description]\n   * @param conditions\n   */\n  @Delete('')\n  public async deleteOneByToken(\n    @Query() conditions: DeleteUserNotificationTokenDto,\n    @User() owner: UserEntity,\n  ): Promise {\n    return this.userNotificationTokensService.deleteOne({ ...conditions, owner: { id: owner.id } });\n  }\n\n  /**\n   * [description]\n   * @param conditions\n   */\n  @Delete(':id')\n  public async deleteOne(\n    @Param() conditions: ID,\n    @User() owner: UserEntity,\n  ): Promise {\n    return this.userNotificationTokensService.deleteOne({ ...conditions, owner: { id: owner.id } });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/UserNotificationTokensService.html":{"url":"injectables/UserNotificationTokensService.html","title":"injectable - UserNotificationTokensService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  UserNotificationTokensService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/users/services/user-notification-tokens.service.ts\n        \n\n\n            \n                Description\n            \n            \n                [description]\n\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Readonly\n                                userNotificationTokenEntityRepository\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                createOne\n                            \n                            \n                                    Public\n                                    Async\n                                deleteOne\n                            \n                            \n                                    Public\n                                find\n                            \n                            \n                                    Public\n                                    Async\n                                selectAll\n                            \n                            \n                                    Public\n                                    Async\n                                selectOne\n                            \n                            \n                                    Public\n                                    Async\n                                updateOne\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(userNotificationTokenEntityRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/modules/users/services/user-notification-tokens.service.ts:23\n                            \n                        \n\n                \n                    \n                            [description]\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        userNotificationTokenEntityRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        createOne\n                        \n                    \n                \n            \n            \n                \n                    \n                    createOne(entityLike: Partial, options: SaveOptions)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/users/services/user-notification-tokens.service.ts:38\n                \n            \n\n\n            \n                \n                    [description]\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    entityLike\n                                    \n                                                Partial\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    options\n                                    \n                                            SaveOptions\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        { transaction: false }\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        deleteOne\n                        \n                    \n                \n            \n            \n                \n                    \n                    deleteOne(conditions: FindOptionsWhere, options: RemoveOptions)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/users/services/user-notification-tokens.service.ts:119\n                \n            \n\n\n            \n                \n                    [description]\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    conditions\n                                    \n                                                FindOptionsWhere\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    options\n                                    \n                                            RemoveOptions\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        { transaction: false }\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        find\n                        \n                    \n                \n            \n            \n                \n                    \n                    find(optionsOrConditions?: FindManyOptions)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/users/services/user-notification-tokens.service.ts:54\n                \n            \n\n\n            \n                \n                     [description]\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    optionsOrConditions\n                                    \n                                                FindManyOptions\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         SelectQueryBuilder\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        selectAll\n                        \n                    \n                \n            \n            \n                \n                    \n                    selectAll(options: FindManyOptions)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/users/services/user-notification-tokens.service.ts:69\n                \n            \n\n\n            \n                \n                    [description]\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    options\n                                    \n                                                FindManyOptions\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        { loadEagerRelations: false }\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        selectOne\n                        \n                    \n                \n            \n            \n                \n                    \n                    selectOne(conditions: FindOptionsWhere, options: FindOneOptions)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/users/services/user-notification-tokens.service.ts:83\n                \n            \n\n\n            \n                \n                    [description]\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    conditions\n                                    \n                                                FindOptionsWhere\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    options\n                                    \n                                                FindOneOptions\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        { loadEagerRelations: false }\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        updateOne\n                        \n                    \n                \n            \n            \n                \n                    \n                    updateOne(conditions: FindOptionsWhere, entityLike: Partial, options: SaveOptions)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/users/services/user-notification-tokens.service.ts:100\n                \n            \n\n\n            \n                \n                    [description]\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    conditions\n                                    \n                                                FindOptionsWhere\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    entityLike\n                                    \n                                                Partial\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    options\n                                    \n                                            SaveOptions\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        { transaction: false }\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        userNotificationTokenEntityRepository\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Repository\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @InjectRepository(UserNotificationTokenEntity)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/users/services/user-notification-tokens.service.ts:30\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { ConflictException, Injectable, NotFoundException } from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { instanceToPlain } from 'class-transformer';\nimport {\n  Repository,\n  SaveOptions,\n  RemoveOptions,\n  FindOneOptions,\n  FindManyOptions,\n  FindOptionsWhere,\n  FindOptionsUtils,\n  SelectQueryBuilder,\n} from 'typeorm';\n\nimport { ErrorTypeEnum } from 'src/common/enums';\n\nimport { UserNotificationTokenEntity } from '../entities';\n\n/**\n * [description]\n */\n@Injectable()\nexport class UserNotificationTokensService {\n  /**\n   * [description]\n   * @param userNotificationTokenEntityRepository\n   */\n  constructor(\n    @InjectRepository(UserNotificationTokenEntity)\n    public readonly userNotificationTokenEntityRepository: Repository,\n  ) {}\n\n  /**\n   * [description]\n   * @param entityLike\n   * @param options\n   */\n  public async createOne(\n    entityLike: Partial,\n    options: SaveOptions = { transaction: false },\n  ): Promise {\n    return this.userNotificationTokenEntityRepository.manager.transaction(async () => {\n      const entity = this.userNotificationTokenEntityRepository.create(entityLike);\n      return this.userNotificationTokenEntityRepository.save(entity, options).catch(() => {\n        throw new ConflictException(ErrorTypeEnum.USER_NOTIFICATION_TOKEN_ALREADY_EXIST);\n      });\n    });\n  }\n\n  /**\n   *  [description]\n   * @param optionsOrConditions\n   */\n  public find(\n    optionsOrConditions?: FindManyOptions,\n  ): SelectQueryBuilder {\n    const metadata = this.userNotificationTokenEntityRepository.metadata;\n    return this.userNotificationTokenEntityRepository\n      .createQueryBuilder(\n        FindOptionsUtils.extractFindManyOptionsAlias(optionsOrConditions) || metadata.name,\n      )\n      .setFindOptions(optionsOrConditions);\n  }\n\n  /**\n   * [description]\n   * @param options\n   */\n  public async selectAll(\n    options: FindManyOptions = { loadEagerRelations: false },\n  ): Promise {\n    const qb = this.find(instanceToPlain(options));\n    return qb.getMany().catch(() => {\n      throw new NotFoundException(ErrorTypeEnum.USER_NOTIFICATION_TOKENS_NOT_FOUND);\n    });\n  }\n\n  /**\n   * [description]\n   * @param conditions\n   * @param options\n   */\n  public async selectOne(\n    conditions: FindOptionsWhere,\n    options: FindOneOptions = { loadEagerRelations: false },\n  ): Promise {\n    return this.find({ ...instanceToPlain(options), where: conditions })\n      .getOneOrFail()\n      .catch(() => {\n        throw new NotFoundException(ErrorTypeEnum.USER_NOTIFICATION_TOKEN_NOT_FOUND);\n      });\n  }\n\n  /**\n   * [description]\n   * @param conditions\n   * @param entityLike\n   * @param options\n   */\n  public async updateOne(\n    conditions: FindOptionsWhere,\n    entityLike: Partial,\n    options: SaveOptions = { transaction: false },\n  ): Promise {\n    return this.userNotificationTokenEntityRepository.manager.transaction(async () => {\n      const mergeIntoEntity = await this.selectOne(conditions);\n      const entity = this.userNotificationTokenEntityRepository.merge(mergeIntoEntity, entityLike);\n      return this.userNotificationTokenEntityRepository.save(entity, options).catch(() => {\n        throw new ConflictException(ErrorTypeEnum.USER_NOTIFICATION_TOKEN_ALREADY_EXIST);\n      });\n    });\n  }\n\n  /**\n   * [description]\n   * @param conditions\n   * @param options\n   */\n  public async deleteOne(\n    conditions: FindOptionsWhere,\n    options: RemoveOptions = { transaction: false },\n  ): Promise {\n    return this.userNotificationTokenEntityRepository.manager.transaction(async () => {\n      const entity = await this.selectOne(conditions);\n      return this.userNotificationTokenEntityRepository.remove(entity, options).catch(() => {\n        throw new NotFoundException(ErrorTypeEnum.USER_NOTIFICATION_TOKEN_NOT_FOUND);\n      });\n    });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UserRefreshTokenEntity.html":{"url":"classes/UserRefreshTokenEntity.html","title":"class - UserRefreshTokenEntity","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UserRefreshTokenEntity\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/users/entities/user-refresh-token.entity.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Readonly\n                                createdAt\n                            \n                            \n                                    Public\n                                    Readonly\n                                id\n                            \n                            \n                                    Public\n                                    Readonly\n                                owner\n                            \n                            \n                                    Public\n                                ppid\n                            \n                            \n                                    Public\n                                    Readonly\n                                updatedAt\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        createdAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({readOnly: true})@CreateDateColumn({type: 'timestamptz', default: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/users/entities/user-refresh-token.entity.ts:48\n                        \n                    \n\n            \n                \n                    [description]\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({readOnly: true})@PrimaryGeneratedColumn('uuid')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/users/entities/user-refresh-token.entity.ts:21\n                        \n                    \n\n            \n                \n                    [description]\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        owner\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Partial\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiHideProperty()@ManyToOne(undefined, undefined, {onDelete: 'CASCADE'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/users/entities/user-refresh-token.entity.ts:38\n                        \n                    \n\n            \n                \n                    [description]\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        ppid\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Exclude()@ApiHideProperty()@Column({type: 'varchar', length: 149})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/users/entities/user-refresh-token.entity.ts:29\n                        \n                    \n\n            \n                \n                    [description]\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        updatedAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({readOnly: true})@UpdateDateColumn({type: 'timestamptz', default: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/users/entities/user-refresh-token.entity.ts:58\n                        \n                    \n\n            \n                \n                    [description]\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiHideProperty, ApiProperty } from '@nestjs/swagger';\nimport {\n  Entity,\n  Column,\n  ManyToOne,\n  CreateDateColumn,\n  UpdateDateColumn,\n  PrimaryGeneratedColumn,\n} from 'typeorm';\n\nimport { UserEntity } from './user.entity';\nimport { Exclude } from 'class-transformer';\n\n@Entity('user_refresh_tokens')\nexport class UserRefreshTokenEntity {\n  /**\n   * [description]\n   */\n  @ApiProperty({ readOnly: true })\n  @PrimaryGeneratedColumn('uuid')\n  public readonly id: string;\n\n  /**\n   * [description]\n   */\n  @Exclude()\n  @ApiHideProperty()\n  @Column({ type: 'varchar', length: 149 })\n  public ppid: string;\n\n  /**\n   * [description]\n   */\n  @ApiHideProperty()\n  @ManyToOne(() => UserEntity, ({ refreshTokens }) => refreshTokens, {\n    onDelete: 'CASCADE',\n  })\n  public readonly owner: Partial;\n\n  /**\n   * [description]\n   */\n  @ApiProperty({ readOnly: true })\n  @CreateDateColumn({\n    type: 'timestamptz',\n    default: () => 'CURRENT_TIMESTAMP',\n  })\n  public readonly createdAt: Date;\n\n  /**\n   * [description]\n   */\n  @ApiProperty({ readOnly: true })\n  @UpdateDateColumn({\n    type: 'timestamptz',\n    default: () => 'CURRENT_TIMESTAMP',\n  })\n  public readonly updatedAt: Date;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/UserRefreshTokensService.html":{"url":"injectables/UserRefreshTokensService.html","title":"injectable - UserRefreshTokensService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  UserRefreshTokensService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/users/services/user-refresh-tokens.service.ts\n        \n\n\n            \n                Description\n            \n            \n                [description]\n\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Readonly\n                                userRefreshTokenEntityRepository\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                createOne\n                            \n                            \n                                    Public\n                                    Async\n                                deleteOne\n                            \n                            \n                                    Public\n                                find\n                            \n                            \n                                    Public\n                                    Async\n                                generateAndCreateOne\n                            \n                            \n                                    Public\n                                    Async\n                                selectAll\n                            \n                            \n                                    Public\n                                    Async\n                                selectOne\n                            \n                            \n                                    Public\n                                    Async\n                                updateOne\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(userRefreshTokenEntityRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/modules/users/services/user-refresh-tokens.service.ts:25\n                            \n                        \n\n                \n                    \n                            [description]\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        userRefreshTokenEntityRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        createOne\n                        \n                    \n                \n            \n            \n                \n                    \n                    createOne(entityLike: Partial, options: SaveOptions)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/users/services/user-refresh-tokens.service.ts:55\n                \n            \n\n\n            \n                \n                    [description]\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    entityLike\n                                    \n                                                Partial\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    options\n                                    \n                                            SaveOptions\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        { transaction: false }\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        deleteOne\n                        \n                    \n                \n            \n            \n                \n                    \n                    deleteOne(conditions: FindOptionsWhere, options: RemoveOptions)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/users/services/user-refresh-tokens.service.ts:136\n                \n            \n\n\n            \n                \n                    [description]\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    conditions\n                                    \n                                                FindOptionsWhere\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    options\n                                    \n                                            RemoveOptions\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        { transaction: false }\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        find\n                        \n                    \n                \n            \n            \n                \n                    \n                    find(optionsOrConditions?: FindManyOptions)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/users/services/user-refresh-tokens.service.ts:71\n                \n            \n\n\n            \n                \n                     [description]\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    optionsOrConditions\n                                    \n                                                FindManyOptions\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         SelectQueryBuilder\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        generateAndCreateOne\n                        \n                    \n                \n            \n            \n                \n                    \n                    generateAndCreateOne(entityLike: Partial, options: SaveOptions)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/users/services/user-refresh-tokens.service.ts:40\n                \n            \n\n\n            \n                \n                    [description]\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    entityLike\n                                    \n                                                Partial\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    options\n                                    \n                                            SaveOptions\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        { transaction: false }\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        selectAll\n                        \n                    \n                \n            \n            \n                \n                    \n                    selectAll(options: FindManyOptions)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/users/services/user-refresh-tokens.service.ts:86\n                \n            \n\n\n            \n                \n                    [description]\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    options\n                                    \n                                                FindManyOptions\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        { loadEagerRelations: false }\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        selectOne\n                        \n                    \n                \n            \n            \n                \n                    \n                    selectOne(conditions: FindOptionsWhere, options: FindOneOptions)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/users/services/user-refresh-tokens.service.ts:100\n                \n            \n\n\n            \n                \n                    [description]\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    conditions\n                                    \n                                                FindOptionsWhere\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    options\n                                    \n                                                FindOneOptions\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        { loadEagerRelations: false }\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        updateOne\n                        \n                    \n                \n            \n            \n                \n                    \n                    updateOne(conditions: FindOptionsWhere, entityLike: Partial, options: SaveOptions)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/users/services/user-refresh-tokens.service.ts:117\n                \n            \n\n\n            \n                \n                    [description]\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    conditions\n                                    \n                                                FindOptionsWhere\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    entityLike\n                                    \n                                                Partial\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    options\n                                    \n                                            SaveOptions\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        { transaction: false }\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        userRefreshTokenEntityRepository\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Repository\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @InjectRepository(UserRefreshTokenEntity)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/users/services/user-refresh-tokens.service.ts:32\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { ConflictException, Injectable, NotFoundException } from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { instanceToPlain } from 'class-transformer';\nimport { randomBytes } from 'crypto';\nimport { hash } from 'src/common/helpers';\nimport {\n  Repository,\n  SaveOptions,\n  RemoveOptions,\n  FindOneOptions,\n  FindManyOptions,\n  FindOptionsWhere,\n  FindOptionsUtils,\n  SelectQueryBuilder,\n} from 'typeorm';\n\nimport { ErrorTypeEnum } from 'src/common/enums';\n\nimport { UserRefreshTokenEntity } from '../entities';\n\n/**\n * [description]\n */\n@Injectable()\nexport class UserRefreshTokensService {\n  /**\n   * [description]\n   * @param userRefreshTokenEntityRepository\n   */\n  constructor(\n    @InjectRepository(UserRefreshTokenEntity)\n    public readonly userRefreshTokenEntityRepository: Repository,\n  ) {}\n\n  /**\n   * [description]\n   * @param entityLike\n   * @param options\n   */\n  public async generateAndCreateOne(\n    entityLike: Partial,\n    options: SaveOptions = { transaction: false },\n  ): Promise {\n    const refreshIdentifier = randomBytes(16).toString('hex');\n    const refreshHash = await hash(refreshIdentifier);\n    const entity = await this.createOne({ ...entityLike, ppid: refreshHash }, options);\n    return { ...entity, ppid: refreshIdentifier };\n  }\n\n  /**\n   * [description]\n   * @param entityLike\n   * @param options\n   */\n  public async createOne(\n    entityLike: Partial,\n    options: SaveOptions = { transaction: false },\n  ): Promise {\n    return this.userRefreshTokenEntityRepository.manager.transaction(async () => {\n      const entity = this.userRefreshTokenEntityRepository.create(entityLike);\n      return this.userRefreshTokenEntityRepository.save(entity, options).catch(() => {\n        throw new ConflictException(ErrorTypeEnum.USER_REFRESH_TOKEN_ALREADY_EXIST);\n      });\n    });\n  }\n\n  /**\n   *  [description]\n   * @param optionsOrConditions\n   */\n  public find(\n    optionsOrConditions?: FindManyOptions,\n  ): SelectQueryBuilder {\n    const metadata = this.userRefreshTokenEntityRepository.metadata;\n    return this.userRefreshTokenEntityRepository\n      .createQueryBuilder(\n        FindOptionsUtils.extractFindManyOptionsAlias(optionsOrConditions) || metadata.name,\n      )\n      .setFindOptions(optionsOrConditions);\n  }\n\n  /**\n   * [description]\n   * @param options\n   */\n  public async selectAll(\n    options: FindManyOptions = { loadEagerRelations: false },\n  ): Promise {\n    const qb = this.find(instanceToPlain(options));\n    return qb.getMany().catch(() => {\n      throw new NotFoundException(ErrorTypeEnum.USER_REFRESH_TOKENS_NOT_FOUND);\n    });\n  }\n\n  /**\n   * [description]\n   * @param conditions\n   * @param options\n   */\n  public async selectOne(\n    conditions: FindOptionsWhere,\n    options: FindOneOptions = { loadEagerRelations: false },\n  ): Promise {\n    return this.find({ ...instanceToPlain(options), where: conditions })\n      .getOneOrFail()\n      .catch(() => {\n        throw new NotFoundException(ErrorTypeEnum.USER_REFRESH_TOKEN_NOT_FOUND);\n      });\n  }\n\n  /**\n   * [description]\n   * @param conditions\n   * @param entityLike\n   * @param options\n   */\n  public async updateOne(\n    conditions: FindOptionsWhere,\n    entityLike: Partial,\n    options: SaveOptions = { transaction: false },\n  ): Promise {\n    return this.userRefreshTokenEntityRepository.manager.transaction(async () => {\n      const mergeIntoEntity = await this.selectOne(conditions);\n      const entity = this.userRefreshTokenEntityRepository.merge(mergeIntoEntity, entityLike);\n      return this.userRefreshTokenEntityRepository.save(entity, options).catch(() => {\n        throw new ConflictException(ErrorTypeEnum.USER_REFRESH_TOKEN_ALREADY_EXIST);\n      });\n    });\n  }\n\n  /**\n   * [description]\n   * @param conditions\n   * @param options\n   */\n  public async deleteOne(\n    conditions: FindOptionsWhere,\n    options: RemoveOptions = { transaction: false },\n  ): Promise {\n    return this.userRefreshTokenEntityRepository.manager.transaction(async () => {\n      const entity = await this.selectOne(conditions, options);\n      return this.userRefreshTokenEntityRepository.remove(entity).catch(() => {\n        throw new NotFoundException(ErrorTypeEnum.USER_REFRESH_TOKEN_NOT_FOUND);\n      });\n    });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/UsersController.html":{"url":"controllers/UsersController.html","title":"controller - UsersController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  UsersController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/users/controllers/users.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                users\n            \n\n\n            \n                Description\n            \n            \n                [description]\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                createOne\n                            \n                            \n                                    Public\n                                    Async\n                                deleteOne\n                            \n                            \n                                    Public\n                                    Async\n                                selectAll\n                            \n                            \n                                    Public\n                                    Async\n                                selectOne\n                            \n                            \n                                    Public\n                                    Async\n                                updateOne\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        createOne\n                        \n                    \n                \n            \n            \n                \n                    \n                    createOne(data: CreateUserDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()@UseRole(UserRoleEnum.ADMIN)\n                \n            \n\n            \n                \n                    Defined in src/modules/users/controllers/users.controller.ts:53\n                \n            \n\n\n            \n                \n                    [description]\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    data\n                                    \n                                                CreateUserDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        deleteOne\n                        \n                    \n                \n            \n            \n                \n                    \n                    deleteOne(conditions: ID)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete(':id')@UseRole(UserRoleEnum.ADMIN)\n                \n            \n\n            \n                \n                    Defined in src/modules/users/controllers/users.controller.ts:100\n                \n            \n\n\n            \n                \n                    [description]\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    conditions\n                                    \n                                                ID\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        selectAll\n                        \n                    \n                \n            \n            \n                \n                    \n                    selectAll(options: SelectUsersDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()@UseRole(UserRoleEnum.ADMIN)\n                \n            \n\n            \n                \n                    Defined in src/modules/users/controllers/users.controller.ts:63\n                \n            \n\n\n            \n                \n                    [description]\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    options\n                                    \n                                                SelectUsersDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        selectOne\n                        \n                    \n                \n            \n            \n                \n                    \n                    selectOne(conditions: ID, options: SelectUserDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get(':id')\n                \n            \n\n            \n                \n                    Defined in src/modules/users/controllers/users.controller.ts:73\n                \n            \n\n\n            \n                \n                    [description]\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    conditions\n                                    \n                                                ID\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    options\n                                    \n                                                SelectUserDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        updateOne\n                        \n                    \n                \n            \n            \n                \n                    \n                    updateOne(conditions: ID, data: UpdateUserDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch(':id')@UseRole(UserRoleEnum.ADMIN)\n                \n            \n\n            \n                \n                    Defined in src/modules/users/controllers/users.controller.ts:87\n                \n            \n\n\n            \n                \n                    [description]\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    conditions\n                                    \n                                                ID\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    data\n                                    \n                                                UpdateUserDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { ApiBearerAuth, ApiTags } from '@nestjs/swagger';\nimport {\n  Get,\n  Post,\n  Body,\n  Param,\n  Patch,\n  Query,\n  Delete,\n  UseGuards,\n  Controller,\n  UseInterceptors,\n  ClassSerializerInterceptor,\n} from '@nestjs/common';\n\nimport { UseRole } from 'src/common/decorators';\nimport { ID } from 'src/common/dto';\n\nimport { JwtAuthGuard } from 'src/modules/auth/guards';\n\nimport { UsersService } from '../services';\nimport { UserEntity } from '../entities';\nimport { UserRoleEnum } from '../enums';\nimport {\n  PaginationUsersDto,\n  SelectUsersDto,\n  CreateUserDto,\n  SelectUserDto,\n  UpdateUserDto,\n} from '../dto';\n\n/**\n * [description]\n */\n@ApiBearerAuth()\n@ApiTags('users')\n@Controller('users')\n@UseGuards(JwtAuthGuard)\n@UseInterceptors(ClassSerializerInterceptor)\nexport class UsersController {\n  /**\n   * [description]\n   * @param usersService\n   */\n  constructor(private readonly usersService: UsersService) {}\n\n  /**\n   * [description]\n   * @param data\n   */\n  @Post()\n  @UseRole(UserRoleEnum.ADMIN)\n  public async createOne(@Body() data: CreateUserDto): Promise {\n    return this.usersService.createOne(data);\n  }\n\n  /**\n   * [description]\n   * @param options\n   */\n  @Get()\n  @UseRole(UserRoleEnum.ADMIN)\n  public async selectAll(@Query() options: SelectUsersDto): Promise {\n    return this.usersService.selectAll(options);\n  }\n\n  /**\n   * [description]\n   * @param conditions\n   * @param options\n   */\n  @Get(':id')\n  public async selectOne(\n    @Param() conditions: ID,\n    @Query() options: SelectUserDto,\n  ): Promise {\n    return this.usersService.selectOne(conditions, options);\n  }\n\n  /**\n   * [description]\n   * @param conditions\n   * @param data\n   */\n  @Patch(':id')\n  @UseRole(UserRoleEnum.ADMIN)\n  public async updateOne(\n    @Param() conditions: ID,\n    @Body() data: UpdateUserDto,\n  ): Promise {\n    return this.usersService.updateOne(conditions, data);\n  }\n\n  /**\n   * [description]\n   * @param conditions\n   */\n  @Delete(':id')\n  @UseRole(UserRoleEnum.ADMIN)\n  public async deleteOne(@Param() conditions: ID): Promise {\n    return this.usersService.deleteOne(conditions);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/UsersModule.html":{"url":"modules/UsersModule.html","title":"module - UsersModule","body":"\n                   \n\n\n\n\n    Modules\n    UsersModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_UsersModule\n\n\n\ncluster_UsersModule_exports\n\n\n\ncluster_UsersModule_providers\n\n\n\n\nUserNotificationTokensService \n\nUserNotificationTokensService \n\n\n\nUserRefreshTokensService \n\nUserRefreshTokensService \n\n\n\nUsersService \n\nUsersService \n\n\n\nUsersModule\n\nUsersModule\n\nUserNotificationTokensService  -->\n\nUsersModule->UserNotificationTokensService \n\n\n\nUserRefreshTokensService  -->\n\nUsersModule->UserRefreshTokensService \n\n\n\nUsersService  -->\n\nUsersModule->UsersService \n\n\n\n\n\nUserNotificationTokensService\n\nUserNotificationTokensService\n\nUsersModule -->\n\nUserNotificationTokensService->UsersModule\n\n\n\n\n\nUserRefreshTokensService\n\nUserRefreshTokensService\n\nUsersModule -->\n\nUserRefreshTokensService->UsersModule\n\n\n\n\n\nUsersService\n\nUsersService\n\nUsersModule -->\n\nUsersService->UsersModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/modules/users/users.module.ts\n        \n\n\n\n        \n            Description\n        \n        \n            [description]\n\n        \n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            UserNotificationTokensService\n                        \n                        \n                            UserRefreshTokensService\n                        \n                        \n                            UsersService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            UsersController\n                        \n                        \n                            UserNotificationTokensController\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            UserNotificationTokensService\n                        \n                        \n                            UserRefreshTokensService\n                        \n                        \n                            UsersService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { TypeOrmModule } from '@nestjs/typeorm';\nimport { Module } from '@nestjs/common';\n\nimport { UserNotificationTokensService, UserRefreshTokensService, UsersService } from './services';\nimport { UserEntity, UserNotificationTokenEntity, UserRefreshTokenEntity } from './entities';\nimport { UsersController, UserNotificationTokensController } from './controllers';\n\n/**\n * [description]\n */\n@Module({\n  imports: [\n    TypeOrmModule.forFeature([UserEntity, UserRefreshTokenEntity, UserNotificationTokenEntity]),\n  ],\n  controllers: [UsersController, UserNotificationTokensController],\n  providers: [UsersService, UserRefreshTokensService, UserNotificationTokensService],\n  exports: [UsersService, UserRefreshTokensService, UserNotificationTokensService],\n})\nexport class UsersModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/UsersService.html":{"url":"injectables/UsersService.html","title":"injectable - UsersService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  UsersService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/users/services/users.service.ts\n        \n\n\n            \n                Description\n            \n            \n                [description]\n\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Readonly\n                                userEntityRepository\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                createOne\n                            \n                            \n                                    Public\n                                    Async\n                                deleteOne\n                            \n                            \n                                    Public\n                                find\n                            \n                            \n                                    Public\n                                    Async\n                                selectAll\n                            \n                            \n                                    Public\n                                    Async\n                                selectOne\n                            \n                            \n                                    Public\n                                    Async\n                                updateOne\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(userEntityRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/modules/users/services/users.service.ts:24\n                            \n                        \n\n                \n                    \n                            [description]\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        userEntityRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        createOne\n                        \n                    \n                \n            \n            \n                \n                    \n                    createOne(entityLike: Partial, options: SaveOptions)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/users/services/users.service.ts:39\n                \n            \n\n\n            \n                \n                    [description]\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    entityLike\n                                    \n                                                Partial\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    options\n                                    \n                                            SaveOptions\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        { transaction: false }\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        deleteOne\n                        \n                    \n                \n            \n            \n                \n                    \n                    deleteOne(conditions: FindOptionsWhere, options: RemoveOptions)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/users/services/users.service.ts:147\n                \n            \n\n\n            \n                \n                    [description]\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    conditions\n                                    \n                                                FindOptionsWhere\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    options\n                                    \n                                            RemoveOptions\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        { transaction: false }\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        find\n                        \n                    \n                \n            \n            \n                \n                    \n                    find(optionsOrConditions?: FindManyOptions)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/users/services/users.service.ts:57\n                \n            \n\n\n            \n                \n                     [description]\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    optionsOrConditions\n                                    \n                                                FindManyOptions\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         SelectQueryBuilder\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        selectAll\n                        \n                    \n                \n            \n            \n                \n                    \n                    selectAll(options: FindManyOptions)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/users/services/users.service.ts:90\n                \n            \n\n\n            \n                \n                    [description]\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    options\n                                    \n                                                FindManyOptions\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        { loadEagerRelations: false }\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        selectOne\n                        \n                    \n                \n            \n            \n                \n                    \n                    selectOne(conditions: FindOptionsWhere, options: FindOneOptions)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/users/services/users.service.ts:106\n                \n            \n\n\n            \n                \n                    [description]\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    conditions\n                                    \n                                                FindOptionsWhere\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    options\n                                    \n                                                FindOneOptions\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        { loadEagerRelations: false }\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        updateOne\n                        \n                    \n                \n            \n            \n                \n                    \n                    updateOne(conditions: FindOptionsWhere, entityLike: Partial, options: SaveOptions)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/users/services/users.service.ts:126\n                \n            \n\n\n            \n                \n                    [description]\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    conditions\n                                    \n                                                FindOptionsWhere\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    entityLike\n                                    \n                                                Partial\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    options\n                                    \n                                            SaveOptions\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        { transaction: false }\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        userEntityRepository\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Repository\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @InjectRepository(UserEntity)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/users/services/users.service.ts:31\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { ConflictException, Injectable, NotFoundException } from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { instanceToPlain } from 'class-transformer';\nimport {\n  Repository,\n  SaveOptions,\n  RemoveOptions,\n  FindOneOptions,\n  FindManyOptions,\n  FindOptionsWhere,\n  FindOptionsUtils,\n  SelectQueryBuilder,\n} from 'typeorm';\n\nimport { ErrorTypeEnum } from 'src/common/enums';\n\nimport { UserEntity } from '../entities';\nimport { PaginationUsersDto } from '../dto';\n\n/**\n * [description]\n */\n@Injectable()\nexport class UsersService {\n  /**\n   * [description]\n   * @param userEntityRepository\n   */\n  constructor(\n    @InjectRepository(UserEntity)\n    public readonly userEntityRepository: Repository,\n  ) {}\n\n  /**\n   * [description]\n   * @param entityLike\n   * @param options\n   */\n  public async createOne(\n    entityLike: Partial,\n    options: SaveOptions = { transaction: false },\n  ): Promise {\n    return this.userEntityRepository.manager.transaction(async () => {\n      const entity = this.userEntityRepository.create(entityLike);\n      const { id } = await this.userEntityRepository.save(entity, options).catch(() => {\n        throw new ConflictException(ErrorTypeEnum.USER_ALREADY_EXIST);\n      });\n\n      return this.selectOne({ id }, { loadEagerRelations: true });\n    });\n  }\n\n  /**\n   *  [description]\n   * @param optionsOrConditions\n   */\n  public find(optionsOrConditions?: FindManyOptions): SelectQueryBuilder {\n    const metadata = this.userEntityRepository.metadata;\n    const qb = this.userEntityRepository.createQueryBuilder(\n      FindOptionsUtils.extractFindManyOptionsAlias(optionsOrConditions) || metadata.name,\n    );\n\n    /**\n     * Place for add custom order\n     * qb.addSelect('__custom') and then\n     * order by it from property order from options\n     * @example\n     */\n    /* if (optionsOrConditions.order)\n      optionsOrConditions.order = setFindOrder(qb, optionsOrConditions.order); */\n\n    /**\n     * Place for common relation\n     * @example\n     */\n    /* if (\n      !FindOptionsUtils.isFindManyOptions(optionsOrConditions) ||\n      optionsOrConditions.loadEagerRelations !== false\n    ) {\n      qb.leftJoinAndSelect('Entity.relation_field', 'Entity_relation_field')\n    } */\n\n    return qb.setFindOptions(optionsOrConditions);\n  }\n\n  /**\n   * [description]\n   * @param options\n   */\n  public async selectAll(\n    options: FindManyOptions = { loadEagerRelations: false },\n  ): Promise {\n    return this.find(options)\n      .getManyAndCount()\n      .then((data) => new PaginationUsersDto(data))\n      .catch(() => {\n        throw new NotFoundException(ErrorTypeEnum.USERS_NOT_FOUND);\n      });\n  }\n\n  /**\n   * [description]\n   * @param conditions\n   * @param options\n   */\n  public async selectOne(\n    conditions: FindOptionsWhere,\n    options: FindOneOptions = { loadEagerRelations: false },\n  ): Promise {\n    return this.find({\n      ...instanceToPlain(options),\n      where: conditions,\n    })\n      .getOneOrFail()\n      .catch(() => {\n        throw new NotFoundException(ErrorTypeEnum.USER_NOT_FOUND);\n      });\n  }\n\n  /**\n   * [description]\n   * @param conditions\n   * @param entityLike\n   * @param options\n   */\n  public async updateOne(\n    conditions: FindOptionsWhere,\n    entityLike: Partial,\n    options: SaveOptions = { transaction: false },\n  ): Promise {\n    return this.userEntityRepository.manager.transaction(async () => {\n      const mergeIntoEntity = await this.selectOne(conditions);\n      const entity = this.userEntityRepository.merge(mergeIntoEntity, entityLike);\n      const { id } = await this.userEntityRepository.save(entity, options).catch(() => {\n        throw new ConflictException(ErrorTypeEnum.USER_ALREADY_EXIST);\n      });\n\n      return this.selectOne({ id }, { loadEagerRelations: true });\n    });\n  }\n\n  /**\n   * [description]\n   * @param conditions\n   * @param options\n   */\n  public async deleteOne(\n    conditions: FindOptionsWhere,\n    options: RemoveOptions = { transaction: false },\n  ): Promise {\n    return this.userEntityRepository.manager.transaction(async () => {\n      const entity = await this.selectOne(conditions);\n      return this.userEntityRepository.remove(entity, options).catch(() => {\n        throw new NotFoundException(ErrorTypeEnum.USER_NOT_FOUND);\n      });\n    });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"changelog.html":{"url":"changelog.html","title":"getting-started - changelog","body":"\n                   \n\n0.1.0 (2022-05-11)\nFeatures\n\nnotifications: implemented push notifications (c6f5ec4)\n\n0.0.1 (2022-05-06)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                src/app.controller.ts\n            \n            controller\n            AppController\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/common/decorators/roles.decorator.ts\n            \n            variable\n            UseRole\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/common/decorators/user.decorator.ts\n            \n            variable\n            User\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/common/dto/find-many-options/find-many-options.dto.ts\n            \n            class\n            FindManyOptionsDto\n            \n                100 %\n                (7/7)\n            \n        \n        \n            \n                \n                src/common/dto/find-one-options/find-one-options.dto.ts\n            \n            class\n            FindOneOptionsDto\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/common/dto/id/id.dto.ts\n            \n            class\n            ID\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/common/dto/pagination/pagination.dto.ts\n            \n            function\n            PaginationMixin\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/common/filters/all-exception.filter.ts\n            \n            class\n            AllExceptionFilter\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/common/filters/http-exception.filter.ts\n            \n            class\n            HttpExceptionFilter\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/common/helpers/crypto.helper.ts\n            \n            variable\n            compare\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/common/helpers/crypto.helper.ts\n            \n            variable\n            hash\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/common/helpers/crypto.helper.ts\n            \n            variable\n            keyLength\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/common/helpers/crypto.helper.ts\n            \n            variable\n            saltRounds\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/common/helpers/crypto.helper.ts\n            \n            variable\n            scrypt\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/common/helpers/dot-notation.helper.ts\n            \n            variable\n            dotNotation\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/common/helpers/number.helper.ts\n            \n            variable\n            floatToInt\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/common/helpers/query-order.helper.ts\n            \n            variable\n            setFindOrder\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/common/helpers/query-search.helper.ts\n            \n            function\n            querySearch\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/common/interceptors/transform.interceptor.ts\n            \n            injectable\n            TransformInterceptor\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/common/interceptors/transform.interceptor.ts\n            \n            interface\n            Response\n            \n                50 %\n                (1/2)\n            \n        \n        \n            \n                \n                src/common/interfaces/find-many-brackets.interface.ts\n            \n            interface\n            FindManyBracketsOptions\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/config/config.service.ts\n            \n            injectable\n            ConfigService\n            \n                100 %\n                (5/5)\n            \n        \n        \n            \n                \n                src/database/migrations/1615673396368-user.migration.ts\n            \n            class\n            user1615673396368\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/database/migrations/1615673396368-user.migration.ts\n            \n            variable\n            data\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/database/migrations/1615673396368-user.migration.ts\n            \n            variable\n            password\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/database/transformers/float-int-column.transformer.ts\n            \n            variable\n            FloatIntColumnTransformer\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/main.ts\n            \n            function\n            bootstrap\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/modules/auth/auth.constants.ts\n            \n            variable\n            CACHE_AUTH_PREFIX\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/modules/auth/auth.controller.ts\n            \n            controller\n            AuthController\n            \n                100 %\n                (12/12)\n            \n        \n        \n            \n                \n                src/modules/auth/auth.service.ts\n            \n            injectable\n            AuthService\n            \n                78 %\n                (15/19)\n            \n        \n        \n            \n                \n                src/modules/auth/dto/confirmation-email.dto.ts\n            \n            class\n            ConfirmationEmailDto\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/modules/auth/dto/create-profile.dto.ts\n            \n            class\n            CreateProfileDto\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/modules/auth/dto/credentials.dto.ts\n            \n            class\n            CredentialsDto\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/modules/auth/dto/jwt-tokens.dto.ts\n            \n            class\n            JwtAccessTokenPayloadDto\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/modules/auth/dto/jwt-tokens.dto.ts\n            \n            class\n            JwtRefreshTokenDto\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/modules/auth/dto/jwt-tokens.dto.ts\n            \n            class\n            JwtRefreshTokenPayloadDto\n            \n                100 %\n                (4/4)\n            \n        \n        \n            \n                \n                src/modules/auth/dto/jwt-tokens.dto.ts\n            \n            class\n            JwtTokensDto\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/modules/auth/dto/reset-password.dto.ts\n            \n            class\n            ResetPasswordDto\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/modules/auth/dto/reset-password.dto.ts\n            \n            class\n            SendResetPasswordDto\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/modules/auth/dto/select-profile.dto.ts\n            \n            class\n            SelectProfileDto\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/modules/auth/dto/update-profile.dto.ts\n            \n            class\n            UpdateEmailDto\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/modules/auth/dto/update-profile.dto.ts\n            \n            class\n            UpdatePasswordDto\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/modules/auth/dto/update-profile.dto.ts\n            \n            class\n            UpdateProfileDto\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/modules/auth/guards/jwt-refresh.guard.ts\n            \n            injectable\n            JwtRefreshGuard\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/modules/auth/guards/jwt.guard.ts\n            \n            injectable\n            JwtAuthGuard\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/modules/auth/strategies/jwt-refresh.strategy.ts\n            \n            injectable\n            JwtRefreshTokenStrategy\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/modules/auth/strategies/jwt.strategy.ts\n            \n            injectable\n            JwtStrategy\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/modules/files/dto/create-file.dto.ts\n            \n            class\n            CreateFileDto\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/modules/files/dto/download-file.dto.ts\n            \n            class\n            DownloadFileDto\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/modules/files/dto/pagination-files.dto.ts\n            \n            class\n            PaginationFilesDto\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/modules/files/dto/select.file.dto.ts\n            \n            class\n            SelectFileDto\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/modules/files/dto/select.files.dto.ts\n            \n            class\n            SelectFilesDto\n            \n                100 %\n                (8/8)\n            \n        \n        \n            \n                \n                src/modules/files/entities/file.entity.ts\n            \n            class\n            FileEntity\n            \n                100 %\n                (11/11)\n            \n        \n        \n            \n                \n                src/modules/files/entities/file.entity.ts\n            \n            class\n            FileEntityPreview\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/modules/files/files.controller.ts\n            \n            controller\n            FilesController\n            \n                100 %\n                (7/7)\n            \n        \n        \n            \n                \n                src/modules/files/files.service.ts\n            \n            injectable\n            FilesService\n            \n                100 %\n                (9/9)\n            \n        \n        \n            \n                \n                src/modules/notifications/dto/create-notification.dto.ts\n            \n            class\n            CreateNotificationDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/modules/notifications/dto/pagination-notifications.dto.ts\n            \n            class\n            PaginationNotificationsDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/modules/notifications/dto/select-notifications.dto.ts\n            \n            class\n            SelectNotificationsDto\n            \n                75 %\n                (6/8)\n            \n        \n        \n            \n                \n                src/modules/notifications/dto/update-notification.dto.ts\n            \n            class\n            UpdateNotificationDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/modules/notifications/entities/notification.entity.ts\n            \n            class\n            NotificationEntity\n            \n                87 %\n                (7/8)\n            \n        \n        \n            \n                \n                src/modules/notifications/notifications.controller.ts\n            \n            controller\n            NotificationsController\n            \n                83 %\n                (5/6)\n            \n        \n        \n            \n                \n                src/modules/notifications/services/notifications.service.ts\n            \n            injectable\n            NotificationsService\n            \n                70 %\n                (12/17)\n            \n        \n        \n            \n                \n                src/modules/users/controllers/user-notification-tokens.controller.ts\n            \n            controller\n            UserNotificationTokensController\n            \n                100 %\n                (7/7)\n            \n        \n        \n            \n                \n                src/modules/users/controllers/users.controller.ts\n            \n            controller\n            UsersController\n            \n                100 %\n                (6/6)\n            \n        \n        \n            \n                \n                src/modules/users/dto/create-user-notification-token.dto.ts\n            \n            class\n            CreateUserNotificationTokenDto\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/modules/users/dto/create-user.dto.ts\n            \n            class\n            CreateUserDto\n            \n                100 %\n                (4/4)\n            \n        \n        \n            \n                \n                src/modules/users/dto/delete-user-notification-token.dto.ts\n            \n            class\n            DeleteUserNotificationTokenDto\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/modules/users/dto/pagination-user-notification-tokens.dto.ts\n            \n            class\n            PaginationUserNotificationTokensDto\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/modules/users/dto/pagination-users.dto.ts\n            \n            class\n            PaginationUsersDto\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/modules/users/dto/select-user-notification-token.dto.ts\n            \n            class\n            SelectUserNotificationTokenDto\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/modules/users/dto/select-user-notification-tokens.dto.ts\n            \n            class\n            SelectUserNotificationTokensDto\n            \n                100 %\n                (7/7)\n            \n        \n        \n            \n                \n                src/modules/users/dto/select-user.dto.ts\n            \n            class\n            SelectUserDto\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/modules/users/dto/select-users.dto.ts\n            \n            class\n            SelectUsersDto\n            \n                100 %\n                (7/7)\n            \n        \n        \n            \n                \n                src/modules/users/dto/update-user-notification-token.dto.ts\n            \n            class\n            UpdateUserNotificationTokenDto\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/modules/users/dto/update-user.dto.ts\n            \n            class\n            UpdateUserDto\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/modules/users/entities/user-notification-token.entity.ts\n            \n            class\n            UserNotificationTokenEntity\n            \n                83 %\n                (5/6)\n            \n        \n        \n            \n                \n                src/modules/users/entities/user-refresh-token.entity.ts\n            \n            class\n            UserRefreshTokenEntity\n            \n                83 %\n                (5/6)\n            \n        \n        \n            \n                \n                src/modules/users/entities/user.entity.ts\n            \n            class\n            UserEntity\n            \n                100 %\n                (13/13)\n            \n        \n        \n            \n                \n                src/modules/users/services/user-notification-tokens.service.ts\n            \n            injectable\n            UserNotificationTokensService\n            \n                88 %\n                (8/9)\n            \n        \n        \n            \n                \n                src/modules/users/services/user-refresh-tokens.service.ts\n            \n            injectable\n            UserRefreshTokensService\n            \n                90 %\n                (9/10)\n            \n        \n        \n            \n                \n                src/modules/users/services/users.service.ts\n            \n            injectable\n            UsersService\n            \n                88 %\n                (8/9)\n            \n        \n        \n            \n                \n                src/multipart/decorators/file.decorator.ts\n            \n            variable\n            File\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/multipart/decorators/file.decorator.ts\n            \n            variable\n            FileDecorator\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/multipart/dto/uploaded-file.dto.ts\n            \n            class\n            UploadedFile\n            \n                100 %\n                (8/8)\n            \n        \n        \n            \n                \n                src/multipart/interfaces/multipart-module.interface.ts\n            \n            interface\n            MultipartModuleAsyncOptions\n            \n                100 %\n                (5/5)\n            \n        \n        \n            \n                \n                src/multipart/interfaces/multipart-module.interface.ts\n            \n            interface\n            MultipartOptionsFactory\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/multipart/multipart.constants.ts\n            \n            variable\n            MULTIPART_MODULE\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/multipart/multipart.constants.ts\n            \n            variable\n            MULTIPART_MODULE_OPTIONS\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/multipart/pipes/file-validation.pipe.ts\n            \n            injectable\n            FileValidationPipe\n            \n                100 %\n                (4/4)\n            \n        \n        \n            \n                \n                src/multipart/storage-s3.service.ts\n            \n            injectable\n            StorageS3Service\n            \n                77 %\n                (7/9)\n            \n        \n        \n            \n                \n                src/multipart/storage.service.ts\n            \n            injectable\n            StorageService\n            \n                90 %\n                (9/10)\n            \n        \n        \n            \n                \n                src/sendgrid/interfaces/sendgrid-module.interface.ts\n            \n            interface\n            SendGridModuleAsyncOptions\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/sendgrid/interfaces/sendgrid-module.interface.ts\n            \n            interface\n            SendGridModuleOptions\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/sendgrid/interfaces/sendgrid-module.interface.ts\n            \n            interface\n            SendGridOptionsFactory\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/sendgrid/sendgrid.constants.ts\n            \n            variable\n            SENDGRID_MODULE\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/sendgrid/sendgrid.constants.ts\n            \n            variable\n            SENDGRID_MODULE_OPTIONS\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/sendgrid/sendgrid.service.ts\n            \n            injectable\n            SendGridService\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                test/utils/mock-fastify.util.ts\n            \n            function\n            createRepMock\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                test/utils/mock-file.util.ts\n            \n            interface\n            CreateMockFileReturn\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                test/utils/mock-file.util.ts\n            \n            function\n            createMockFile\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                test/utils/mock-file.util.ts\n            \n            function\n            createMockFileMeta\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                test/utils/mock-file.util.ts\n            \n            variable\n            configService\n            \n                0 %\n                (0/1)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @nestjs/bull : ^0.5.3\n        \n            @nestjs/common : ^8.0.8\n        \n            @nestjs/core : ^8.0.8\n        \n            @nestjs/jwt : ^8.0.0\n        \n            @nestjs/microservices : ^8.4.1\n        \n            @nestjs/passport : ^8.0.1\n        \n            @nestjs/platform-fastify : ^8.0.8\n        \n            @nestjs/swagger : ^5.1.0\n        \n            @nestjs/terminus : ^8.0.1\n        \n            @nestjs/throttler : ^2.0.0\n        \n            @nestjs/typeorm : ^8.0.2\n        \n            @sendgrid/mail : ^7.6.1\n        \n            aws-sdk : ^2.1125.0\n        \n            axios : ^0.26.1\n        \n            cache-manager : ^3.6.1\n        \n            cache-manager-redis-store : ^2.0.0\n        \n            class-transformer : ^0.5.1\n        \n            class-validator : ^0.13.1\n        \n            cross-env : ^7.0.3\n        \n            dotenv : ^16.0.0\n        \n            fastify-compress : ^4.0.1\n        \n            fastify-helmet : ^7.0.1\n        \n            fastify-multipart : ^5.3.1\n        \n            fastify-swagger : ^5.1.0\n        \n            firebase-admin : ^10.2.0\n        \n            passport : ^0.4.1\n        \n            passport-jwt : ^4.0.0\n        \n            pg : ^8.7.1\n        \n            reflect-metadata : ^0.1.13\n        \n            rxjs : ^7.3.0\n        \n            typeorm : ^0.3.6\n    \n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/enumerations.html":{"url":"miscellaneous/enumerations.html","title":"miscellaneous-enumerations - enumerations","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Enumerations\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            ConfigMode   (src/.../config.interface.ts)\n                        \n                        \n                            ErrorTypeEnum   (src/.../error-type.enum.ts)\n                        \n                        \n                            NotificationsStatusEnum   (src/.../notifications-status.enum.ts)\n                        \n                        \n                            NotificationsTitleEnum   (src/.../notifications-title.enum.ts)\n                        \n                        \n                            NotificationsTypeEnum   (src/.../notifications-type.enum.ts)\n                        \n                        \n                            UserRoleEnum   (src/.../user-role.enum.ts)\n                        \n                        \n                            UserStatusEnum   (src/.../user-status.enum.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/config/interfaces/config.interface.ts\n    \n        \n            \n                \n                    \n                        \n                        ConfigMode\n                    \n                \n                    \n                        \n                            Type of application operating modes, defined as: poduction, development, test\n\n                        \n                    \n                        \n                            \n                                 production\n                            \n                        \n                        \n                            \n                                Value : production\n                            \n                        \n                        \n                            \n                                 development\n                            \n                        \n                        \n                            \n                                Value : development\n                            \n                        \n                        \n                            \n                                 test\n                            \n                        \n                        \n                            \n                                Value : test\n                            \n                        \n            \n        \n\n    src/common/enums/error-type.enum.ts\n    \n        \n            \n                \n                    \n                        \n                        ErrorTypeEnum\n                    \n                \n                    \n                        \n                            [description]\n\n                        \n                    \n                        \n                            \n                                 INTERNAL_SERVER_ERROR\n                            \n                        \n                        \n                            \n                                Value : INTERNAL_SERVER_ERROR\n                            \n                        \n                        \n                            \n                                 FILE_UNSUPPORTED_TYPE\n                            \n                        \n                        \n                            \n                                Value : FILE_UNSUPPORTED_TYPE\n                            \n                        \n                        \n                            \n                                 FILE_ALREADY_EXIST\n                            \n                        \n                        \n                            \n                                Value : FILE_ALREADY_EXIST\n                            \n                        \n                        \n                            \n                                 FILES_NOT_FOUND\n                            \n                        \n                        \n                            \n                                Value : FILES_NOT_FOUND\n                            \n                        \n                        \n                            \n                                 FILE_NOT_FOUND\n                            \n                        \n                        \n                            \n                                Value : FILE_NOT_FOUND\n                            \n                        \n                        \n                            \n                                 FILE_TOO_LARGE\n                            \n                        \n                        \n                            \n                                Value : FILE_TOO_LARGE\n                            \n                        \n                        \n                            \n                                 AUTH_INCORRECT_CREDENTIALS\n                            \n                        \n                        \n                            \n                                Value : AUTH_INCORRECT_CREDENTIALS\n                            \n                        \n                        \n                            \n                                 AUTH_INVALID_REFRESH_TOKEN\n                            \n                        \n                        \n                            \n                                Value : AUTH_INVALID_REFRESH_TOKEN\n                            \n                        \n                        \n                            \n                                 AUTH_INVALID_TOKEN\n                            \n                        \n                        \n                            \n                                Value : AUTH_INVALID_TOKEN\n                            \n                        \n                        \n                            \n                                 AUTH_UNAUTHORIZED\n                            \n                        \n                        \n                            \n                                Value : AUTH_UNAUTHORIZED\n                            \n                        \n                        \n                            \n                                 AUTH_FORBIDDEN\n                            \n                        \n                        \n                            \n                                Value : AUTH_FORBIDDEN\n                            \n                        \n                        \n                            \n                                 NEW_PASSWORD_AND_OLD_PASSWORD_CANNOT_BE_SAME\n                            \n                        \n                        \n                            \n                                Value : NEW_PASSWORD_AND_OLD_PASSWORD_CANNOT_BE_SAME\n                            \n                        \n                        \n                            \n                                 AUTH_INCORRECT_CONFIRMATION_EMAIL_CODE\n                            \n                        \n                        \n                            \n                                Value : AUTH_INCORRECT_CONFIRMATION_EMAIL_CODE\n                            \n                        \n                        \n                            \n                                 AUTH_PASSWORDS_DO_NOT_MATCH\n                            \n                        \n                        \n                            \n                                Value : AUTH_PASSWORDS_DO_NOT_MATCH\n                            \n                        \n                        \n                            \n                                 USER_ALREADY_EXIST\n                            \n                        \n                        \n                            \n                                Value : USER_ALREADY_EXISTS\n                            \n                        \n                        \n                            \n                                 USERS_NOT_FOUND\n                            \n                        \n                        \n                            \n                                Value : USERS_NOT_FOUND\n                            \n                        \n                        \n                            \n                                 USER_NOT_FOUND\n                            \n                        \n                        \n                            \n                                Value : USER_NOT_FOUND\n                            \n                        \n                        \n                            \n                                 USER_REFRESH_TOKEN_ALREADY_EXIST\n                            \n                        \n                        \n                            \n                                Value : USER_REFRESH_TOKEN_ALREADY_EXIST\n                            \n                        \n                        \n                            \n                                 USER_REFRESH_TOKENS_NOT_FOUND\n                            \n                        \n                        \n                            \n                                Value : USER_REFRESH_TOKENS_NOT_FOUND\n                            \n                        \n                        \n                            \n                                 USER_REFRESH_TOKEN_NOT_FOUND\n                            \n                        \n                        \n                            \n                                Value : USER_REFRESH_TOKEN_NOT_FOUND\n                            \n                        \n                        \n                            \n                                 USER_NOTIFICATION_TOKEN_ALREADY_EXIST\n                            \n                        \n                        \n                            \n                                Value : USER_NOTIFICATION_TOKEN_ALREADY_EXIST\n                            \n                        \n                        \n                            \n                                 USER_NOTIFICATION_TOKENS_NOT_FOUND\n                            \n                        \n                        \n                            \n                                Value : USER_NOTIFICATION_TOKENS_NOT_FOUND\n                            \n                        \n                        \n                            \n                                 USER_NOTIFICATION_TOKEN_NOT_FOUND\n                            \n                        \n                        \n                            \n                                Value : USER_NOTIFICATION_TOKEN_NOT_FOUND\n                            \n                        \n                        \n                            \n                                 NOTIFICATIONS_ALREADY_EXIST\n                            \n                        \n                        \n                            \n                                Value : NOTIFICATIONS_ALREADY_EXIST\n                            \n                        \n                        \n                            \n                                 NOTIFICATION_ALREADY_EXIST\n                            \n                        \n                        \n                            \n                                Value : NOTIFICATION_ALREADY_EXIST\n                            \n                        \n                        \n                            \n                                 NOTIFICATIONS_NOT_FOUND\n                            \n                        \n                        \n                            \n                                Value : NOTIFICATIONS_NOT_FOUND\n                            \n                        \n                        \n                            \n                                 NOTIFICATION_NOT_FOUND\n                            \n                        \n                        \n                            \n                                Value : NOTIFICATION_NOT_FOUND\n                            \n                        \n            \n        \n\n    src/modules/notifications/enums/notifications-status.enum.ts\n    \n        \n            \n                \n                    \n                        \n                        NotificationsStatusEnum\n                    \n                \n                        \n                            \n                                 UNREAD\n                            \n                        \n                        \n                            \n                                Value : UNREAD\n                            \n                        \n                        \n                            \n                                 READ\n                            \n                        \n                        \n                            \n                                Value : READ\n                            \n                        \n            \n        \n\n    src/modules/notifications/enums/notifications-title.enum.ts\n    \n        \n            \n                \n                    \n                        \n                        NotificationsTitleEnum\n                    \n                \n                        \n                            \n                                 COLLABORATION_FEEDBACK\n                            \n                        \n                        \n                            \n                                Value : You're working with %s for 1 month. Please, leave a feedback.\n                            \n                        \n                        \n                            \n                                 COLLABORATION_ARTIST_DEACTIVATED\n                            \n                        \n                        \n                            \n                                Value : %s deactivated his account.\n                            \n                        \n                        \n                            \n                                 COLLABORATION_AGENT_DEACTIVATED\n                            \n                        \n                        \n                            \n                                Value : Your agent has just deactivated their account\n                            \n                        \n                        \n                            \n                                 VERIFICATION_ACCEPTED\n                            \n                        \n                        \n                            \n                                Value : Your account has been verified!\n                            \n                        \n                        \n                            \n                                 VERIFICATION_DECLINED\n                            \n                        \n                        \n                            \n                                Value : Your account has not been verified. Go through it again, or contact support if you have any questions.\n                            \n                        \n                        \n                            \n                                 EVENT_BOOKING_ACCEPTED\n                            \n                        \n                        \n                            \n                                Value : Your request for private event %s has accepted by %s\n                            \n                        \n                        \n                            \n                                 EVENT_CANCELLED_BY_ARTIST\n                            \n                        \n                        \n                            \n                                Value : Event %s was canceled by artist. The entire amount paid by you will be returned within 24 hours. Sorry for the inconvenience!\n                            \n                        \n                        \n                            \n                                 EVENT_REMINDER_1_HOUR\n                            \n                        \n                        \n                            \n                                Value : Event %s will start in 1 hour. Don't forget to join.\n                            \n                        \n                        \n                            \n                                 EVENT_REMINDER_15_MINUTES\n                            \n                        \n                        \n                            \n                                Value : Event %s will start in 15 minutes.\n                            \n                        \n                        \n                            \n                                 PAYMENT_REFUND\n                            \n                        \n                        \n                            \n                                Value : Your payment was refunded\n                            \n                        \n                        \n                            \n                                 PAYMENT_ARTIST_DEACTIVATED\n                            \n                        \n                        \n                            \n                                Value : %s deactivated account. The entire amount paid by you for all events will be returned within 24 hours. Sorry for the inconvenience!\n                            \n                        \n                        \n                            \n                                 PROMOTION_EXPIRE_1_HOUR\n                            \n                        \n                        \n                            \n                                Value : Your promotion subscription will expire in 1 hour.\n                            \n                        \n            \n        \n\n    src/modules/notifications/enums/notifications-type.enum.ts\n    \n        \n            \n                \n                    \n                        \n                        NotificationsTypeEnum\n                    \n                \n                        \n                            \n                                 COLLABORATION_ARTIST_DEACTIVATED\n                            \n                        \n                        \n                            \n                                Value : COLLABORATION_ARTIST_DEACTIVATED\n                            \n                        \n                        \n                            \n                                 COLLABORATION_AGENT_DEACTIVATED\n                            \n                        \n                        \n                            \n                                Value : COLLABORATION_AGENT_DEACTIVATED\n                            \n                        \n                        \n                            \n                                 COLLABORATION_FEEDBACK\n                            \n                        \n                        \n                            \n                                Value : COLLABORATION_FEEDBACK\n                            \n                        \n                        \n                            \n                                 VERIFICATION_ACCEPTED\n                            \n                        \n                        \n                            \n                                Value : VERIFICATION_ACCEPTED\n                            \n                        \n                        \n                            \n                                 VERIFICATION_DECLINED\n                            \n                        \n                        \n                            \n                                Value : VERIFICATION_DECLINED\n                            \n                        \n                        \n                            \n                                 EVENT_BOOKING_ACCEPTED\n                            \n                        \n                        \n                            \n                                Value : EVENT_BOOKING_ACCEPTED\n                            \n                        \n                        \n                            \n                                 EVENT_CANCELLED_AFTER_15_MIN\n                            \n                        \n                        \n                            \n                                Value : EVENT_CANCELLED_AFTER_15_MIN\n                            \n                        \n                        \n                            \n                                 EVENT_CANCELLED_BY_ARTIST\n                            \n                        \n                        \n                            \n                                Value : EVENT_CANCELLED_BY_ARTIST\n                            \n                        \n                        \n                            \n                                 EVENT_REMINDER_15_MINUTES\n                            \n                        \n                        \n                            \n                                Value : EVENT_REMINDER_15_MINUTES\n                            \n                        \n                        \n                            \n                                 EVENT_REMINDER_1_HOUR\n                            \n                        \n                        \n                            \n                                Value : EVENT_REMINDER_1_HOUR\n                            \n                        \n                        \n                            \n                                 EVENT_WAS_PROLONG\n                            \n                        \n                        \n                            \n                                Value : EVENT_WAS_PROLONG\n                            \n                        \n                        \n                            \n                                 EVENT_REMINDER\n                            \n                        \n                        \n                            \n                                Value : EVENT_REMINDER\n                            \n                        \n                        \n                            \n                                 EVENT_ENDED\n                            \n                        \n                        \n                            \n                                Value : EVENT_ENDED\n                            \n                        \n                        \n                            \n                                 PAYMENT_ARTIST_DEACTIVATED\n                            \n                        \n                        \n                            \n                                Value : PAYMENT_ARTIST_DEACTIVATED\n                            \n                        \n                        \n                            \n                                 PAYMENT_REFUND\n                            \n                        \n                        \n                            \n                                Value : PAYMENT_REFUND\n                            \n                        \n                        \n                            \n                                 PROMOTION_EXPIRE_1_HOUR\n                            \n                        \n                        \n                            \n                                Value : PROMOTION_EXPIRE_1_HOUR\n                            \n                        \n                        \n                            \n                                 PROMOTION_EXPIRE\n                            \n                        \n                        \n                            \n                                Value : PROMOTION_EXPIRE\n                            \n                        \n            \n        \n\n    src/modules/users/enums/user-role.enum.ts\n    \n        \n            \n                \n                    \n                        \n                        UserRoleEnum\n                    \n                \n                    \n                        \n                            [description]\n\n                        \n                    \n                        \n                            \n                                 ADMIN\n                            \n                        \n                        \n                            \n                                Value : ADMIN\n                            \n                        \n                        \n                            \n                                 USER\n                            \n                        \n                        \n                            \n                                Value : USER\n                            \n                        \n            \n        \n\n    src/modules/users/enums/user-status.enum.ts\n    \n        \n            \n                \n                    \n                        \n                        UserStatusEnum\n                    \n                \n                        \n                            \n                                 DEACIVATED\n                            \n                        \n                        \n                            \n                                Value : DEACIVATED\n                            \n                        \n                        \n                            \n                                 ACTIVATED\n                            \n                        \n                        \n                            \n                                Value : ACTIVATED\n                            \n                        \n            \n        \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            bootstrap   (src/.../main.ts)\n                        \n                        \n                            createMockFile   (test/.../mock-file.util.ts)\n                        \n                        \n                            createMockFileMeta   (test/.../mock-file.util.ts)\n                        \n                        \n                            createRepMock   (test/.../mock-fastify.util.ts)\n                        \n                        \n                            PaginationMixin   (src/.../pagination.dto.ts)\n                        \n                        \n                            querySearch   (src/.../query-search.helper.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/main.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        bootstrap\n                        \n                    \n                \n            \n            \n                \nbootstrap()\n                \n            \n\n\n\n\n            \n                \n                    [description]\n\n\n                \n            \n        \n    \n    test/utils/mock-file.util.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        createMockFile\n                        \n                    \n                \n            \n            \n                \ncreateMockFile(data?: Partial)\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    data\n                                    \n                                            Partial\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         CreateMockFileReturn\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        createMockFileMeta\n                        \n                    \n                \n            \n            \n                \ncreateMockFileMeta(data?: Partial)\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    data\n                                    \n                                            Partial\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         CreateMockFileReturn\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    test/utils/mock-fastify.util.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        createRepMock\n                        \n                    \n                \n            \n            \n                \ncreateRepMock(code?: number, mimetype?: string, headers?: any)\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    code\n                                    \n                                                number\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                                \n                                    mimetype\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                                \n                                    headers\n                                    \n                                                any\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    src/common/dto/pagination/pagination.dto.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        PaginationMixin\n                        \n                    \n                \n            \n            \n                \nPaginationMixin(classRef: Type)\n                \n            \n\n\n\n\n            \n                \n                    [description]\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    classRef\n                                    \n                                                Type\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    src/common/helpers/query-search.helper.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        querySearch\n                        \n                    \n                \n            \n            \n                \nquerySearch(field: string, searchAlias: string)\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    field\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    searchAlias\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        '%:search%'\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\n\n  \n\n\n  \n\n\n\n  \n\n\nCommit Message Guidelines\nhttps://www.conventionalcommits.org/en/v1.0.0/\nhttps://github.com/angular/angular/blob/22b96b9/CONTRIBUTING.md#-commit-message-guidelines\nInstallation\n$ npm installPrepare\nset up .env.development, .env.production, .env.test files in env folder like .env.example\nRunning the app\n# development\n$ npm run start\n\n# watch mode\n$ npm run start:dev\n\n# production mode\n$ npm run start:prodTest\n# unit tests\n$ npm run test\n\n# e2e tests\n$ npm run test:e2e\n\n# test coverage\n$ npm run test:cov\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        AppModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        AuthModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        ConfigModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        DatabaseModule\n                    \n                    \n                                \n                                    No graph available.\n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        FilesModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        MultipartModule\n                    \n                    \n                                \n                                    No graph available.\n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        NotificationsModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        SendGridModule\n                    \n                    \n                                \n                                    No graph available.\n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        UsersModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n  \n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_imports\n\n\n\ncluster_AuthModule_exports\n\n\n\ncluster_AuthModule_providers\n\n\n\ncluster_ConfigModule\n\n\n\ncluster_ConfigModule_exports\n\n\n\ncluster_ConfigModule_providers\n\n\n\ncluster_FilesModule\n\n\n\ncluster_FilesModule_exports\n\n\n\ncluster_FilesModule_providers\n\n\n\ncluster_NotificationsModule\n\n\n\ncluster_NotificationsModule_exports\n\n\n\ncluster_NotificationsModule_providers\n\n\n\ncluster_UsersModule\n\n\n\ncluster_UsersModule_exports\n\n\n\ncluster_UsersModule_providers\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nAuthService \n\nAuthService \n\nAuthService  -->\n\nAuthModule->AuthService \n\n\n\n\n\nConfigModule\n\nConfigModule\n\nAppModule -->\n\nConfigModule->AppModule\n\n\n\n\n\nConfigService \n\nConfigService \n\nConfigService  -->\n\nConfigModule->ConfigService \n\n\n\n\n\nDatabaseModule\n\nDatabaseModule\n\nAppModule -->\n\nDatabaseModule->AppModule\n\n\n\n\n\nFilesModule\n\nFilesModule\n\nAppModule -->\n\nFilesModule->AppModule\n\n\n\n\n\nFilesService \n\nFilesService \n\nFilesService  -->\n\nFilesModule->FilesService \n\n\n\n\n\nMultipartModule\n\nMultipartModule\n\nAppModule -->\n\nMultipartModule->AppModule\n\n\n\n\n\nNotificationsModule\n\nNotificationsModule\n\nAppModule -->\n\nNotificationsModule->AppModule\n\n\n\n\n\nNotificationsService \n\nNotificationsService \n\nNotificationsService  -->\n\nNotificationsModule->NotificationsService \n\n\n\n\n\nUsersModule\n\nUsersModule\n\nAuthModule -->\n\nUsersModule->AuthModule\n\n\n\nNotificationsModule -->\n\nUsersModule->NotificationsModule\n\n\n\nAppModule -->\n\nUsersModule->AppModule\n\n\n\n\n\nUserNotificationTokensService \n\nUserNotificationTokensService \n\nUserNotificationTokensService  -->\n\nUsersModule->UserNotificationTokensService \n\n\n\n\n\nUserRefreshTokensService \n\nUserRefreshTokensService \n\nUserRefreshTokensService  -->\n\nUsersModule->UserRefreshTokensService \n\n\n\n\n\nUsersService \n\nUsersService \n\nUsersService  -->\n\nUsersModule->UsersService \n\n\n\n\n\nSendGridModule\n\nSendGridModule\n\nAuthModule -->\n\nSendGridModule->AuthModule\n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\nJwtRefreshTokenStrategy\n\nJwtRefreshTokenStrategy\n\nAuthModule -->\n\nJwtRefreshTokenStrategy->AuthModule\n\n\n\n\n\nJwtStrategy\n\nJwtStrategy\n\nAuthModule -->\n\nJwtStrategy->AuthModule\n\n\n\n\n\nConfigService\n\nConfigService\n\nConfigModule -->\n\nConfigService->ConfigModule\n\n\n\n\n\nFilesService\n\nFilesService\n\nFilesModule -->\n\nFilesService->FilesModule\n\n\n\n\n\nNotificationsService\n\nNotificationsService\n\nNotificationsModule -->\n\nNotificationsService->NotificationsModule\n\n\n\n\n\nUserNotificationTokensService\n\nUserNotificationTokensService\n\nUsersModule -->\n\nUserNotificationTokensService->UsersModule\n\n\n\n\n\nUserRefreshTokensService\n\nUserRefreshTokensService\n\nUsersModule -->\n\nUserRefreshTokensService->UsersModule\n\n\n\n\n\nUsersService\n\nUsersService\n\nUsersModule -->\n\nUsersService->UsersModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n  \n\n    \n        \n            \n                \n                    \n                    \n                        9 Modules\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    6 Controllers\n                \n            \n        \n        \n            \n                \n                    \n                    16 Injectables\n                \n            \n        \n        \n            \n                \n                    \n                    46 Classes\n                \n            \n        \n        \n            \n                \n                    \n                    8 Interfaces\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/typealiases.html":{"url":"miscellaneous/typealiases.html","title":"miscellaneous-typealiases - typealiases","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Type aliases\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            HeadObjectRequest   (src/.../storage-s3.service.ts)\n                        \n                        \n                            MultipartModuleOptions   (src/.../multipart-module.interface.ts)\n                        \n                        \n                            PutObjectRequest   (src/.../storage-s3.service.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/multipart/storage-s3.service.ts\n    \n    \n        \n            \n                \n                    \n                    HeadObjectRequest\n                \n            \n            \n                \n                            Omit\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    PutObjectRequest\n                \n            \n            \n                \n                            Omit\n\n                \n            \n        \n    \n    src/multipart/interfaces/multipart-module.interface.ts\n    \n    \n        \n            \n                \n                    \n                    MultipartModuleOptions\n                \n            \n            \n                \n                    [description]\n\n                \n            \n            \n                \n                        FastifyMultipartOptions\n\n                \n            \n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"unit-test.html":{"url":"unit-test.html","title":"unit-test - unit-test","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Unit test coverage\n\n\n\n    \n    \n    \n    \n\n\n\n    \n        \n            File\n            Statements\n            Branches\n            Functions\n            Lines\n        \n    \n    \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/user1615673396368.html":{"url":"classes/user1615673396368.html","title":"class - user1615673396368","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  user1615673396368\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/database/migrations/1615673396368-user.migration.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                        MigrationInterface\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                down\n                            \n                            \n                                    Public\n                                    Async\n                                up\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        down\n                        \n                    \n                \n            \n            \n                \n                    \n                    down(undefined: QueryRunner)\n                \n            \n\n\n            \n                \n                    Defined in src/database/migrations/1615673396368-user.migration.ts:24\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    \n                                            QueryRunner\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        up\n                        \n                    \n                \n            \n            \n                \n                    \n                    up(undefined: QueryRunner)\n                \n            \n\n\n            \n                \n                    Defined in src/database/migrations/1615673396368-user.migration.ts:18\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    \n                                            QueryRunner\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { MigrationInterface, QueryRunner } from 'typeorm';\n\nimport { UserEntity } from 'src/modules/users/entities';\nimport { UserRoleEnum } from 'src/modules/users/enums';\n\nconst password =\n  '357fa5484137ddfd5a5b:32e0569e0c7e1ac0fd902a3db866904098e08cf1e1a1e8cd7fa8e5941b7f7c46866a9d577ece5778a32ce4b2c812e547607d111da263d51d63f9ba5135a3a421'; // password\nconst data: Partial[] = [\n  {\n    id: '067f2f3e-b936-4029-93d6-b2f58ae4f489',\n    email: 'admin@gmail.com',\n    role: UserRoleEnum.ADMIN,\n    password,\n  },\n];\n\nexport class user1615673396368 implements MigrationInterface {\n  public async up({ connection }: QueryRunner): Promise {\n    await connection.synchronize();\n    const repository = connection.getRepository(UserEntity);\n    await repository.save(data).catch((e) => console.error(e));\n  }\n\n  public async down({ connection }: QueryRunner): Promise {\n    await connection.getRepository(UserEntity).delete(data.map(({ id }) => id));\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/variables.html":{"url":"miscellaneous/variables.html","title":"miscellaneous-variables - variables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            CACHE_AUTH_PREFIX   (src/.../auth.constants.ts)\n                        \n                        \n                            compare   (src/.../crypto.helper.ts)\n                        \n                        \n                            configService   (test/.../mock-file.util.ts)\n                        \n                        \n                            data   (src/.../1615673396368-user.migration.ts)\n                        \n                        \n                            dotNotation   (src/.../dot-notation.helper.ts)\n                        \n                        \n                            File   (src/.../file.decorator.ts)\n                        \n                        \n                            FileDecorator   (src/.../file.decorator.ts)\n                        \n                        \n                            FloatIntColumnTransformer   (src/.../float-int-column.transformer.ts)\n                        \n                        \n                            floatToInt   (src/.../number.helper.ts)\n                        \n                        \n                            hash   (src/.../crypto.helper.ts)\n                        \n                        \n                            keyLength   (src/.../crypto.helper.ts)\n                        \n                        \n                            MULTIPART_MODULE   (src/.../multipart.constants.ts)\n                        \n                        \n                            MULTIPART_MODULE_OPTIONS   (src/.../multipart.constants.ts)\n                        \n                        \n                            password   (src/.../1615673396368-user.migration.ts)\n                        \n                        \n                            saltRounds   (src/.../crypto.helper.ts)\n                        \n                        \n                            scrypt   (src/.../crypto.helper.ts)\n                        \n                        \n                            SENDGRID_MODULE   (src/.../sendgrid.constants.ts)\n                        \n                        \n                            SENDGRID_MODULE_OPTIONS   (src/.../sendgrid.constants.ts)\n                        \n                        \n                            setFindOrder   (src/.../query-order.helper.ts)\n                        \n                        \n                            User   (src/.../user.decorator.ts)\n                        \n                        \n                            UseRole   (src/.../roles.decorator.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/modules/auth/auth.constants.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        CACHE_AUTH_PREFIX\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'AUTH:'\n                    \n                \n\n            \n                \n                    [description]\n\n                \n            \n\n        \n    \n\n    src/common/helpers/crypto.helper.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        compare\n                        \n                    \n                \n            \n                \n                    \n                        Default value : async (password: string, encrypted: string): Promise => {\n  const [salt, key] = encrypted.split(':');\n  const keyBuffer = Buffer.from(key, 'hex');\n  const derivedKey = await scrypt(password, salt, keyLength);\n  return timingSafeEqual(keyBuffer, derivedKey);\n}\n                    \n                \n\n            \n                \n                    [description]\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        hash\n                        \n                    \n                \n            \n                \n                    \n                        Default value : async (password: string): Promise => {\n  const salt = randomBytes(saltRounds).toString('hex');\n  const derivedKey = await scrypt(password, salt, keyLength);\n  return salt + ':' + derivedKey.toString('hex');\n}\n                    \n                \n\n            \n                \n                    [description]\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        keyLength\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 64\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        saltRounds\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 10\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        scrypt\n                        \n                    \n                \n            \n                \n                    \n                        Default value : promisify(scryptCallback)\n                    \n                \n\n\n        \n    \n\n    test/utils/mock-file.util.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        configService\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new ConfigService()\n                    \n                \n\n\n        \n    \n\n    src/database/migrations/1615673396368-user.migration.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        data\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Partial[]\n\n                    \n                \n                \n                    \n                        Default value : [\n  {\n    id: '067f2f3e-b936-4029-93d6-b2f58ae4f489',\n    email: 'admin@gmail.com',\n    role: UserRoleEnum.ADMIN,\n    password,\n  },\n]\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : '357fa5484137ddfd5a5b:32e0569e0c7e1ac0fd902a3db866904098e08cf1e1a1e8cd7fa8e5941b7f7c46866a9d577ece5778a32ce4b2c812e547607d111da263d51d63f9ba5135a3a421'\n                    \n                \n\n\n        \n    \n\n    src/common/helpers/dot-notation.helper.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        dotNotation\n                        \n                    \n                \n            \n                \n                    \n                        Default value : (\n  array: string[],\n  initialValue: any = true,\n  initialObject: any = {},\n): any =>\n  array.reduce((result, objectPath) => {\n    const parts = objectPath.split('.');\n    let target = result;\n\n    while (parts.length > 1) {\n      const part = parts.shift();\n      target = target[part] = typeof target[part] === 'object' ? target[part] : {};\n    }\n\n    target[parts[0]] = initialValue;\n    return result;\n  }, initialObject)\n                    \n                \n\n            \n                \n                    Transform array of string dot-notation to object\n['foo.bar', 'foo.other', 'foo.bar.sub'] =>\n{\n foo: {\n   other: true,\n   bar: {\n     sub: true\n   }\n }\n}\n\n                \n            \n\n        \n    \n\n    src/multipart/decorators/file.decorator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        File\n                        \n                    \n                \n            \n                \n                    \n                        Default value : (options: Omit = { limits: { fileSize: 5e6 } }) =>\n  FileDecorator(options, FileValidationPipe)\n                    \n                \n\n            \n                \n                    [description]\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        FileDecorator\n                        \n                    \n                \n            \n                \n                    \n                        Default value : createParamDecorator(\n  async (\n    options: Omit = { limits: { fileSize: 5e6 } },\n    ctx: ExecutionContext,\n  ): Promise => {\n    const request = ctx.switchToHttp().getRequest();\n    return request.file(options).catch(() => {\n      throw new PayloadTooLargeException(ErrorTypeEnum.FILE_TOO_LARGE);\n    });\n  },\n)\n                    \n                \n\n            \n                \n                    [description]\n\n                \n            \n\n        \n    \n\n    src/database/transformers/float-int-column.transformer.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        FloatIntColumnTransformer\n                        \n                    \n                \n            \n                \n                    \n                        Type :     ValueTransformer\n\n                    \n                \n                \n                    \n                        Default value : {\n  to: (value: number): number => value && floatToInt(value),\n  from: (value: number) => value / 100,\n}\n                    \n                \n\n\n        \n    \n\n    src/common/helpers/number.helper.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        floatToInt\n                        \n                    \n                \n            \n                \n                    \n                        Default value : (value) => parseInt((parseFloat(value.toFixed(2)) * 100).toString())\n                    \n                \n\n            \n                \n                    [description]\n\n                \n            \n\n        \n    \n\n    src/multipart/multipart.constants.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        MULTIPART_MODULE\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'MULTIPART_MODULE'\n                    \n                \n\n            \n                \n                    [description]\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        MULTIPART_MODULE_OPTIONS\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'MULTIPART_MODULE_OPTIONS'\n                    \n                \n\n            \n                \n                    [description]\n\n                \n            \n\n        \n    \n\n    src/sendgrid/sendgrid.constants.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        SENDGRID_MODULE\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'SENDGRID_MODULE'\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        SENDGRID_MODULE_OPTIONS\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'SENDGRID_MODULE_OPTIONS'\n                    \n                \n\n\n        \n    \n\n    src/common/helpers/query-order.helper.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        setFindOrder\n                        \n                    \n                \n            \n                \n                    \n                        Default value : (\n  qb: SelectQueryBuilder,\n  order: FindOptionsOrder,\n): FindOptionsOrder => {\n  Object.entries(order)\n    .filter(([key]) => key.startsWith('__'))\n    .forEach(([key, value]: [string, 'ASC' | 'DESC']) => qb.addOrderBy(key, value, 'NULLS LAST'));\n\n  return Object.keys(order)\n    .filter((key) => !key.startsWith('__'))\n    .reduce((acc, key) => ((acc[key] = order[key]), acc), {});\n}\n                    \n                \n\n\n        \n    \n\n    src/common/decorators/user.decorator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        User\n                        \n                    \n                \n            \n                \n                    \n                        Default value : createParamDecorator((data: string, ctx: ExecutionContext): UserEntity => {\n  const request = ctx.switchToHttp().getRequest();\n  return data ? request.user && request.user[data] : request.user;\n})\n                    \n                \n\n            \n                \n                    [description]\n\n                \n            \n\n        \n    \n\n    src/common/decorators/roles.decorator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        UseRole\n                        \n                    \n                \n            \n                \n                    \n                        Default value : (...roles: UserRoleEnum[]) =>\n  /**\n   *\n   * @param target      [description]\n   * @param key         [description]\n   * @param descriptor  [description]\n   */\n  (\n    target: Record,\n    key?: string | symbol,\n    descriptor?: TypedPropertyDescriptor,\n  ): void => {\n    const operation: OperationObject = Reflect.getMetadata(\n      DECORATORS.API_OPERATION,\n      descriptor.value,\n    );\n\n    if (!operation) ApiOperation({ summary: `[ROLE: ${roles}]` })(target, key, descriptor);\n    else operation.summary = `[ROLE: ${roles}]${operation.summary && ': ' + operation.summary}`;\n\n    SetMetadata('roles', roles)(target, key, descriptor);\n    ApiBearerAuth()(target, key, descriptor);\n  }\n                    \n                \n\n            \n                \n                    [description]\n\n                \n            \n\n        \n    \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
