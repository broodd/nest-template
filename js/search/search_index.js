var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/classes/AllExceptionFilter.html",[0,0.228,1,3.578]],["body/classes/AllExceptionFilter.html",[0,0.256,1,5.302,2,0.865,3,0.128,4,0.128,5,0.086,6,6.491,7,3.744,8,3.268,9,6.491,10,0.396,11,1.058,12,2.947,13,0.844,14,7.353,15,1.81,16,3.519,17,0.367,18,0.009,19,1.41,20,1.551,21,2.334,22,6.579,23,0.503,24,5.003,25,5.302,26,5.257,27,4.43,28,6.293,29,5.003,30,1.092,31,1.067,32,0.675,33,5.924,34,1.254,35,5.501,36,0.217,37,5.003,38,5.924,39,1.043,40,4.621,41,5.003,42,2.403,43,2.063,44,2.255,45,0.128,46,2.396,47,3.514,48,4.418,49,4.032,50,5.003,51,3.323,52,4.418,53,6.491,54,5.809,55,4.418,56,5.003,57,3.878,58,4.032,59,3.323,60,6.579,61,5.003,62,5.003,63,5.003,64,4.418,65,5.003,66,5.003,67,5.003,68,3.159,69,5.003,70,3.159,71,5.003,72,1.669,73,4.418,74,5.003,75,1.118,76,4.418,77,4.418,78,0.006,79,0.006]],["title/controllers/AppController.html",[80,2.064,81,3.322]],["body/controllers/AppController.html",[0,0.246,3,0.123,4,0.123,5,0.082,10,0.38,12,3.422,13,0.964,15,1.761,18,0.009,23,0.367,27,2.892,34,1.203,36,0.223,39,1,45,0.123,75,1.072,78,0.006,79,0.006,80,2.231,81,4.789,82,2.305,83,4.237,84,2.77,85,4.268,86,0.271,87,0.737,88,0.933,89,4.799,90,4.799,91,2.083,92,5.651,93,4.799,94,4.237,95,3.029,96,0.977,97,6.4,98,4.799,99,6.4,100,6.4,101,6.4,102,6.4,103,6.4,104,3.867,105,3.168,106,3.591,107,4.799,108,4.799,109,4.789,110,4.237,111,1.872,112,1.984,113,6.4,114,6.4,115,6.4,116,1.32,117,4.799,118,4.799,119,4.799,120,4.799,121,4.799,122,2.231,123,4.799,124,6.4,125,4.799,126,4.799,127,4.799,128,4.799,129,4.799,130,4.799,131,1.822,132,3.029,133,4.799,134,3.37,135,4.799,136,4.799,137,4.237,138,4.799,139,4.237,140,3.867,141,1.979]],["title/modules/AppModule.html",[142,1.685,143,3.322]],["body/modules/AppModule.html",[0,0.23,3,0.115,4,0.115,5,0.077,18,0.009,27,2.7,36,0.248,39,0.934,45,0.115,78,0.006,79,0.006,81,5.203,82,2.934,86,0.224,104,3.61,105,3.404,106,3.352,134,3.147,142,2.319,143,6.831,144,2.152,145,3.142,146,3.956,147,3.956,148,5.665,149,5.665,150,5.665,151,5.665,152,5.665,153,5.489,154,5.665,155,5.357,156,4.861,157,3.386,158,2.39,159,2.39,160,4.48,161,3.386,162,6.11,163,4.48,164,3.956,165,6.11,166,4.48,167,3.956,168,6.11,169,3.61,170,2.304,171,3.956,172,4.48,173,4.48,174,4.48,175,4.48,176,4.48,177,4.48,178,4.48,179,4.48,180,3.386,181,3.682,182,3.956,183,4.48,184,2.7,185,4.48,186,4.48,187,1.495,188,3.61,189,3.956,190,3.956,191,1.959,192,3.956,193,3.956,194,1.796,195,4.48,196,2.483,197,3.956,198,3.352]],["title/controllers/AuthController.html",[80,2.064,199,3.322]],["body/controllers/AuthController.html",[0,0.13,3,0.065,4,0.065,5,0.044,10,0.202,12,2.001,13,0.573,15,1.107,17,0.441,18,0.009,23,0.587,30,1.674,31,1.636,32,1.034,34,1.923,36,0.198,39,0.53,45,0.065,46,1.474,68,2.54,70,3.58,72,2.872,75,1.64,78,0.004,79,0.004,80,1.183,82,1.222,84,1.469,86,0.28,87,0.906,88,1.491,91,2.776,95,1.606,96,0.518,111,1.931,116,0.7,131,2.345,159,1.357,187,2.956,191,1.759,199,3.011,200,2.247,201,2.051,202,4.023,203,3.552,204,3.552,205,4.023,206,2.826,207,3.552,208,4.99,209,3.552,210,4.99,211,4.99,212,4.99,213,2.545,214,3.983,215,4.023,216,2.545,217,3.294,218,2.545,219,3.983,220,4.023,221,2.545,222,2.247,223,3.983,224,4.023,225,2.545,226,2.545,227,2.306,228,4.023,229,2.545,230,3.899,231,2.545,232,2.545,233,4.023,234,2.545,235,2.545,236,2.247,237,3.766,238,5.671,239,2.545,240,2.545,241,4.244,242,2.545,243,2.545,244,2.247,245,3.766,246,4.023,247,2.545,248,2.545,249,3.766,250,2.545,251,2.545,252,2.545,253,3.58,254,2.545,255,2.545,256,2.545,257,3.58,258,2.545,259,2.545,260,4.102,261,4.406,262,1.69,263,1.787,264,1.69,265,1.69,266,1.69,267,1.606,268,1.469,269,3.15,270,3.143,271,2.051,272,1.533,273,1.08,274,3.417,275,1.904,276,1.904,277,1.469,278,2.545,279,2.545,280,2.545,281,1.69,282,2.545,283,2.545,284,2.545,285,2.545,286,4.023,287,2.545,288,3.15,289,3.552,290,2.058,291,2.545,292,1.63,293,2.545,294,1.759,295,3.15,296,2.051,297,2.545,298,2.545,299,2.247,300,2.545,301,2.545,302,2.545,303,2.545,304,2.545,305,2.545,306,2.545,307,2.545,308,2.545,309,3.766,310,2.051,311,2.545,312,2.247,313,2.545,314,2.545,315,2.545,316,2.545]],["title/modules/AuthModule.html",[142,1.685,148,3.118]],["body/modules/AuthModule.html",[0,0.246,3,0.123,4,0.123,5,0.082,18,0.009,27,2.887,36,0.245,39,0.999,45,0.123,78,0.006,79,0.006,82,3.07,84,2.765,86,0.232,105,3.165,132,3.024,134,3.364,137,4.23,139,4.23,140,3.86,141,1.976,142,2.427,144,2.301,145,3.287,148,6.322,156,4.957,157,3.543,158,2.555,159,2.555,161,3.543,180,2.655,181,2.887,182,4.23,188,3.86,189,4.23,190,4.23,192,4.23,193,4.23,196,3.543,199,5.383,274,5.34,275,3.585,317,4.23,318,4.23,319,4.23,320,4.23,321,5.777,322,5.777,323,5.777,324,4.79,325,3.689,326,4.79,327,6.392,328,6.392,329,3.585,330,3.86,331,5.151,332,7.194,333,3.181,334,5.644,335,3.364,336,2.555,337,3.364,338,4.79,339,5.151,340,4.79,341,4.79,342,4.23,343,4.79,344,4.79,345,4.79,346,4.79]],["title/injectables/AuthService.html",[274,2.675,347,1.039]],["body/injectables/AuthService.html",[0,0.097,3,0.048,4,0.048,5,0.032,10,0.149,11,0.506,12,3.136,13,0.888,15,0.867,16,0.849,17,0.414,18,0.009,19,0.531,20,0.976,21,1.924,23,0.598,30,1.622,31,1.585,32,1.002,34,1.831,36,0.207,39,0.393,40,1.323,43,0.777,45,0.048,46,2.286,72,2.479,75,1.563,78,0.003,79,0.003,86,0.274,87,0.889,91,2.546,105,2.619,111,1.93,112,0.584,116,0.867,131,2.004,141,1.674,180,1.044,187,2.782,191,2.776,194,1.263,203,3.584,204,2.781,207,2.781,209,2.781,214,3.332,217,2.902,219,3.332,222,2.781,223,3.332,227,1.874,236,2.781,237,3.15,244,2.781,245,3.15,253,2.995,257,2.995,268,1.087,269,3.602,270,3.52,271,1.518,272,2.446,273,0.8,274,1.898,288,3.602,290,3.111,292,1.788,294,1.377,295,2.995,299,2.781,310,1.518,312,3.584,329,3.949,330,1.518,335,1.323,336,1.005,342,1.663,347,0.737,348,0.735,349,1.663,350,4.059,351,4.059,352,4.059,353,4.059,354,4.059,355,3.15,356,4.059,357,3.15,358,3.15,359,4.059,360,3.15,361,3.15,362,4.059,363,1.884,364,4.023,365,5.607,366,4.059,367,3.15,368,1.884,369,1.884,370,1.884,371,1.884,372,4.3,373,1.884,374,1.179,375,3.15,376,2.013,377,3.823,378,1.884,379,4.059,380,2.357,381,2.781,382,1.884,383,1.884,384,3.15,385,6.35,386,1.884,387,1.884,388,1.884,389,3.15,390,1.857,391,1.884,392,1.884,393,1.884,394,3.15,395,1.884,396,3.15,397,4.188,398,1.884,399,1.884,400,2.738,401,2.714,402,1.884,403,1.887,404,0.936,405,1.884,406,1.884,407,1.884,408,1.663,409,1.884,410,1.41,411,1.41,412,1.41,413,1.189,414,0.849,415,1.898,416,1.898,417,1.663,418,1.884,419,1.663,420,1.884,421,1.884,422,3.15,423,1.884,424,3.15,425,1.884,426,3.15,427,1.884,428,3.15,429,1.884,430,2.995,431,3.15,432,3.15,433,2.781,434,2.781,435,1.898,436,1.62,437,1.884,438,1.884,439,1.663,440,1.884,441,1.884,442,1.518,443,1.884,444,1.323,445,2.834,446,1.884,447,1.884,448,4.059,449,2.571,450,2.781,451,3.15,452,1.663,453,1.884,454,2.695,455,2.109,456,1.41,457,2.087,458,1.663,459,0.936,460,1.884,461,1.884,462,1.884,463,4.059,464,4.008,465,3.15,466,1.884,467,1.884,468,1.884,469,1.884,470,1.884,471,1.884,472,3.15,473,1.884,474,1.518,475,1.884,476,1.518,477,1.884,478,3.15,479,1.884,480,1.884,481,3.15,482,1.884]],["title/entities/ChatEntity.html",[483,1.063,484,2.001]],["body/entities/ChatEntity.html",[0,0.28,3,0.098,4,0.098,5,0.065,10,0.303,11,0.879,13,1.039,17,0.471,18,0.009,19,1.963,20,1.694,23,0.618,32,0.737,36,0.213,45,0.098,78,0.005,79,0.005,86,0.272,87,0.924,88,1.57,96,0.778,112,1.184,227,1.051,292,1.459,374,0.9,376,2.32,390,2.628,455,3.039,483,0.915,484,2.463,485,0.778,486,3.373,487,3.537,488,5.636,489,5.144,490,5.636,491,6.509,492,5.636,493,3.684,494,3.716,495,3.846,496,2.683,497,4.021,498,4.398,499,3.82,500,2.302,501,3.82,502,3.373,503,3.155,504,4.405,505,3.839,506,3.294,507,3.82,508,4.826,509,3.428,510,3.82,511,2.16,512,3.82,513,3.82,514,3.82,515,5.466,516,3.155,517,3.82,518,2.537,519,3.82,520,4.255,521,3.294,522,1.576,523,2.205,524,3.155,525,3.155,526,5.636,527,3.155,528,1.835,529,3.294,530,3.82,531,3.282,532,3.82,533,3.82,534,2.205,535,3.82]],["title/entities/ChatMessageEntity.html",[483,1.063,531,2.283]],["body/entities/ChatMessageEntity.html",[0,0.162,3,0.081,4,0.081,5,0.109,10,0.25,11,0.763,13,1.04,17,0.486,18,0.009,19,2.311,23,0.61,36,0.199,40,2.213,44,1.42,45,0.081,78,0.005,79,0.005,85,3.044,86,0.268,87,0.92,88,1.55,96,0.642,112,0.977,141,2.62,194,1.903,227,1.306,292,1.305,294,2.495,374,1.179,390,2.489,455,3.147,483,0.754,484,2.138,485,0.642,487,3.163,489,4.6,493,3.294,494,3.388,495,3.44,496,2.213,497,3.666,498,4.01,500,1.899,503,4.413,506,4.944,509,2.654,511,2.154,516,4.601,518,2.092,520,3.666,523,1.819,524,2.739,525,2.739,527,3.932,528,1.513,531,2.935,534,1.819,536,6.525,537,2.782,538,4.6,539,4.271,540,4.009,541,3.151,542,3.151,543,2.782,544,1.544,545,3.151,546,2.279,547,3.151,548,3.151,549,3.151,550,3.151,551,5.218,552,3.824,553,3.824,554,5.032,555,3.151,556,2.358,557,4.745,558,2.782,559,2.996,560,2.531,561,3.151,562,5.56,563,3.151,564,3.151,565,4.301,566,3.828,567,2.44,568,3.151,569,2.782,570,3.151,571,3.824,572,3.824,573,1.299,574,4.745]],["title/injectables/ChatMessagesService.html",[347,1.039,575,2.803]],["body/injectables/ChatMessagesService.html",[0,0.19,3,0.059,4,0.059,5,0.039,10,0.182,12,1.489,13,0.426,15,1.022,16,2.414,17,0.396,18,0.009,19,1.655,20,1.821,21,2.184,23,0.543,30,1.55,31,1.515,32,0.957,34,1.724,36,0.203,39,0.48,43,0.949,44,1.037,45,0.059,46,2.031,72,2.096,75,1.697,78,0.004,79,0.004,85,2.49,86,0.269,87,0.868,91,2.548,111,1.925,112,0.713,116,1.022,131,3.167,141,3.074,187,2.784,227,0.633,273,0.977,290,2.591,292,1.511,294,1.623,295,1.453,347,0.869,348,0.898,390,2.657,400,4.455,401,2.754,403,3.59,404,1.143,414,1.037,449,2.805,455,0.851,457,3.022,459,1.143,483,1.117,484,1.037,485,0.469,488,2.032,509,2.921,522,0.949,528,1.105,529,2.813,531,1.184,544,0.749,551,1.616,572,2.992,575,2.344,576,5.875,577,2.032,578,2.242,579,2.17,580,2.694,581,2.318,582,3.279,583,2.242,584,4.121,585,2.4,586,2.302,587,2.968,588,4.144,589,2.302,590,4.667,591,1.453,592,3.982,593,2.302,594,4.455,595,3.786,596,1.143,597,3.227,598,2.302,599,1.387,600,3.662,601,2.302,602,2.813,603,2.694,604,1.143,605,2.302,606,3.279,607,2.302,608,2.302,609,2.032,610,2.302,611,1.276,612,2.302,613,1.276,614,1.453,615,1.387,616,1.105,617,1.228,618,1.387,619,1.616,620,1.453,621,2.032,622,2.302,623,5.356,624,2.302,625,3.713,626,2.238,627,4.667,628,2.302,629,2.302,630,1.616,631,2.143,632,2.302,633,1.328,634,2.302,635,1.387,636,1.387,637,1.528,638,1.528,639,1.616,640,1.616,641,1.528,642,1.528,643,1.143,644,2.302,645,2.302,646,2.302,647,2.302,648,2.302,649,2.302,650,2.302,651,2.302,652,2.302,653,2.302,654,2.302,655,2.302,656,2.302,657,2.302,658,2.302,659,1.528,660,2.032,661,2.608,662,1.616,663,2.302,664,1.722,665,2.302,666,2.032,667,3.279,668,2.032,669,2.032,670,2.302,671,1.387,672,1.387,673,1.453,674,4.667,675,3.713,676,1.855,677,2.032,678,2.302,679,2.302,680,2.302,681,2.608,682,2.302,683,2.032,684,1.528,685,2.032,686,1.387,687,2.238,688,2.302,689,2.302]],["title/entities/ChatParticipantEntity.html",[483,1.063,529,2.675]],["body/entities/ChatParticipantEntity.html",[0,0.202,3,0.101,4,0.101,5,0.067,10,0.442,11,0.898,13,1.042,17,0.478,18,0.009,19,1.99,23,0.609,36,0.197,45,0.101,72,2.356,78,0.005,79,0.005,86,0.271,87,0.919,88,1.549,96,0.802,112,1.22,141,3.357,227,1.537,292,1.484,374,1.276,390,2.299,455,2.863,483,0.943,484,2.517,485,0.802,487,3.597,493,3.746,494,3.767,495,3.911,496,2.765,497,4.076,498,4.459,500,2.373,503,4.076,506,4.905,509,3.284,511,2.182,516,4.076,518,2.615,520,3.746,523,2.272,524,3.223,525,3.223,527,3.746,528,1.891,529,3.366,534,2.272,536,6.559,540,3.923,565,4.097,566,3.911,569,3.477,681,4.558,690,3.477,691,6.49,692,3.937,693,5.585,694,7.063,695,3.937,696,3.937,697,3.937,698,3.937,699,3.937,700,3.937,701,3.937,702,3.937,703,3.173]],["title/injectables/ChatParticipantsService.html",[347,1.039,704,2.803]],["body/injectables/ChatParticipantsService.html",[0,0.206,3,0.065,4,0.065,5,0.044,10,0.202,12,1.02,13,0.292,15,1.107,16,2.249,17,0.409,18,0.009,19,1.85,20,2.035,21,2.184,23,0.562,30,1.603,31,1.566,32,0.99,34,1.788,36,0.191,39,0.53,43,1.049,45,0.065,46,2.032,75,1.713,78,0.004,79,0.004,86,0.274,87,0.881,91,2.609,111,1.875,112,0.789,116,1.107,122,1.183,131,3.268,141,3.264,187,2.83,273,1.08,290,2.058,292,1.141,347,0.941,348,0.993,374,0.822,390,2.137,400,4.339,401,2.916,403,3.496,404,1.264,414,1.147,449,2.788,454,2.672,455,0.941,457,3.537,459,1.264,483,1.194,484,1.147,485,0.518,522,1.049,529,1.533,544,0.828,576,6.059,578,2.396,579,2.32,580,2.88,581,2.478,583,2.396,585,2.566,587,3.143,591,1.606,592,4.145,594,4.116,595,3.958,596,1.264,597,3.417,599,1.533,600,4.167,602,3.007,603,2.88,604,1.264,611,1.41,613,1.41,614,1.606,615,1.533,616,1.222,617,1.357,618,1.533,620,1.606,626,1.533,630,1.787,631,2.322,633,1.469,635,1.533,636,1.533,637,1.69,638,1.69,639,1.787,640,1.787,641,1.69,642,1.69,643,1.264,659,1.69,662,2.826,664,1.904,671,1.533,672,1.533,673,1.606,681,2.826,684,2.672,686,1.533,687,2.425,704,2.54,705,2.247,706,4.99,707,3.552,708,2.545,709,2.545,710,4.99,711,2.545,712,2.545,713,2.545,714,2.545,715,2.545,716,2.545,717,2.545,718,3.552,719,2.545,720,5.007,721,2.545,722,1.904,723,2.545,724,4.99,725,2.545,726,4.023,727,2.545,728,2.545,729,2.545,730,4.023,731,2.545,732,2.545,733,2.545,734,2.545,735,2.247,736,2.545,737,2.545,738,4.023,739,2.545,740,4.023,741,2.545,742,2.545,743,2.545,744,2.247,745,2.545,746,2.247,747,2.545,748,2.545,749,2.545,750,2.545,751,2.545]],["title/classes/ChatReadMessageDto.html",[0,0.228,752,2.948]],["body/classes/ChatReadMessageDto.html",[0,0.38,2,0.881,3,0.131,4,0.131,5,0.087,10,0.404,11,1.071,13,0.979,17,0.455,18,0.009,23,0.51,36,0.219,45,0.171,57,3.308,78,0.006,79,0.006,86,0.282,87,0.872,88,1.295,96,1.038,111,1.193,217,2.528,292,2.073,374,0.84,390,2.168,483,1.22,484,2.298,485,1.038,509,3.795,511,2.216,531,2.622,752,4.423,753,5.368,754,4.984,755,3.581,756,1.421,757,4.501,758,5.098,759,4.108,760,2.371,761,4.501,762,4.205,763,4.423,764,1.836,765,1.659,766,3.385,767,3.581,768,2.448]],["title/classes/ChatReadMessageResponseDto.html",[0,0.228,766,2.948]],["body/classes/ChatReadMessageResponseDto.html",[0,0.374,2,0.853,3,0.127,4,0.127,5,0.085,10,0.391,11,1.049,13,0.971,17,0.479,18,0.009,23,0.559,30,1.078,31,1.054,32,0.666,36,0.216,45,0.167,57,3.859,78,0.006,79,0.006,86,0.285,87,0.866,88,1.268,96,1.006,111,1.155,116,1.359,217,2.773,292,2.035,390,2.123,484,2.226,485,1.006,509,3.756,511,2.189,531,2.54,752,3.28,753,6.261,754,5.814,755,3.469,756,1.054,762,4.118,763,4.332,764,1.779,765,1.608,766,4.332,767,4.582,768,2.372,769,4.882,770,6.523,771,3.133,772,4.939]],["title/classes/ChatReceiveMessageDto.html",[0,0.228,773,2.948]],["body/classes/ChatReceiveMessageDto.html",[0,0.35,2,0.746,3,0.111,4,0.111,5,0.102,10,0.342,11,0.957,13,0.992,17,0.482,18,0.009,19,1.216,23,0.522,30,0.942,31,0.921,32,0.582,36,0.215,44,1.945,45,0.153,57,3.651,78,0.006,79,0.006,86,0.286,87,0.884,88,1.158,96,0.879,111,1.009,116,1.187,217,2.588,292,1.868,374,0.711,390,2.596,484,3.073,485,0.879,509,3.93,511,2.302,531,3.506,538,3.478,539,3.229,554,2.724,562,4.456,571,5.495,573,1.78,755,3.031,762,4.641,763,4.882,764,1.554,765,1.404,767,4.182,768,2.072,769,4.456,771,2.86,773,3.954,774,5.501,775,5.955,776,4.315,777,3.81,778,4.074,779,3.759,780,3.031,781,2.866,782,3.81,783,3.81,784,5.258,785,5.258,786,3.81]],["title/controllers/ChatsController.html",[80,2.064,787,3.322]],["body/controllers/ChatsController.html",[0,0.172,3,0.086,4,0.086,5,0.057,10,0.265,12,2.372,13,0.679,15,1.366,17,0.39,18,0.009,23,0.535,30,1.526,31,1.491,32,0.943,34,1.752,36,0.225,39,0.698,45,0.086,46,0.988,68,3.735,70,3.133,72,2.973,75,1.636,78,0.005,79,0.005,80,1.556,82,1.607,84,1.931,86,0.273,87,0.874,88,1.359,91,2.633,95,2.113,96,0.682,111,2.012,116,0.921,131,2.955,187,2.849,227,2.31,260,3.296,262,3.929,264,2.222,265,2.222,266,2.222,267,2.113,268,1.931,273,2.778,277,1.931,281,2.222,290,2.047,292,1.85,295,3.133,309,2.222,403,2.751,455,1.237,457,1.721,484,1.508,485,0.682,492,2.955,509,2.751,575,4.131,578,2.841,579,2.308,581,2.938,582,4.382,588,3.944,596,1.662,604,1.662,606,2.955,619,2.35,620,2.113,668,2.955,704,4.131,752,3.296,766,3.296,773,3.296,781,3.296,787,3.714,788,2.955,789,3.346,790,5.916,791,3.346,792,4.897,793,3.346,794,2.955,795,3.346,796,4.596,797,3.346,798,3.346,799,4.897,800,4.963,801,3.346,802,6.544,803,4.963,804,3.346,805,4.963,806,2.222,807,2.35,808,2.697,809,3.346,810,2.113,811,2.017,812,2.955,813,3.346,814,3.346,815,3.346,816,3.346,817,3.346,818,3.346,819,3.346,820,3.346,821,2.35,822,2.697,823,2.697,824,3.346,825,4.963,826,2.955,827,3.346,828,3.346,829,3.346]],["title/classes/ChatsGateway.html",[0,0.228,830,3.322]],["body/classes/ChatsGateway.html",[0,0.259,2,0.592,3,0.088,4,0.088,5,0.059,10,0.272,11,0.812,12,3.062,13,0.877,15,1.39,17,0.369,18,0.009,21,1.604,23,0.506,30,1.31,31,1.28,32,0.809,34,1.266,36,0.239,39,0.714,44,1.545,45,0.088,46,2.182,57,2.98,72,2.753,78,0.005,79,0.005,85,1.828,86,0.266,87,0.755,88,1.166,91,2.155,111,1.834,112,1.062,116,1.39,187,2.464,227,2.101,267,2.164,273,1.455,290,3.15,292,1.688,294,2.209,295,3.787,403,3.079,509,3.721,522,1.413,528,1.646,551,2.407,575,4.948,588,4.602,594,3.821,617,1.828,621,3.026,667,3.026,669,3.026,704,4.948,752,4.397,766,3.355,773,3.355,781,4.397,826,4.46,830,3.78,831,3.026,832,7.385,833,5.999,834,5.999,835,3.427,836,4.948,837,5.052,838,5.999,839,3.427,840,5.052,841,3.427,842,3.427,843,5.052,844,3.427,845,3.026,846,3.026,847,2.407,848,3.427,849,4.46,850,5.999,851,2.565,852,2.407,853,3.026,854,3.427,855,4.835,856,2.565,857,3.427,858,3.026,859,3.427,860,3.427,861,3.026,862,3.026,863,3.026,864,3.026,865,3.026,866,3.026,867,3.427,868,3.026,869,5.052,870,5.052,871,5.052,872,3.427,873,3.427,874,5.052,875,5.052,876,5.052,877,3.427,878,3.427,879,3.427,880,5.052,881,3.427,882,3.427,883,3.427,884,3.427]],["title/modules/ChatsModule.html",[142,1.685,149,3.118]],["body/modules/ChatsModule.html",[0,0.272,3,0.136,4,0.136,5,0.091,18,0.009,36,0.236,39,1.107,45,0.136,78,0.007,79,0.007,82,3.284,86,0.244,142,2.596,144,2.55,145,3.516,149,6.4,155,5.62,157,3.79,158,2.832,159,2.832,161,3.79,196,3.79,325,3.946,484,2.392,485,1.081,529,4.121,531,3.516,575,5.68,588,5.422,616,2.55,704,5.68,787,5.66,810,3.351,830,5.117,885,4.687,886,4.687,887,5.309,888,4.687,889,5.309,890,3.729,891,5.309,892,5.309,893,5.309]],["title/injectables/ChatsService.html",[347,1.039,588,2.675]],["body/injectables/ChatsService.html",[0,0.159,3,0.048,4,0.048,5,0.032,10,0.147,12,0.744,13,0.213,15,0.856,16,1.809,17,0.397,18,0.009,19,1.595,20,1.755,21,2.004,23,0.545,30,1.555,31,1.52,32,0.961,34,1.745,36,0.183,39,0.387,43,0.765,44,0.836,45,0.048,46,2.147,57,1.544,59,1.232,72,2.651,75,1.678,78,0.003,79,0.003,85,2.506,86,0.268,87,0.872,91,2.586,111,1.888,112,0.575,116,0.856,122,1.446,131,3.124,141,2.998,187,2.813,217,2.283,227,0.51,273,0.787,290,2.335,292,1.294,294,0.811,295,2.966,347,0.727,348,0.724,374,0.661,390,2.627,400,4.395,401,3.093,403,3.585,404,0.921,414,0.836,444,1.303,449,2.553,455,1.737,457,3.093,459,0.921,483,0.961,484,2.711,485,0.378,490,2.746,522,0.765,528,0.891,544,0.604,551,1.303,572,2.506,578,1.928,579,1.867,580,1.795,581,1.994,583,1.928,585,2.065,587,2.604,588,1.874,591,1.171,592,3.625,594,4.195,595,3.412,596,0.921,597,2.831,599,1.874,600,2.604,602,1.874,603,2.317,604,0.921,611,1.028,613,1.028,614,1.171,615,1.118,616,0.891,617,0.99,618,1.118,620,1.171,626,1.874,630,1.303,631,1.795,633,2.317,635,1.118,636,1.118,637,1.232,638,1.232,639,1.303,640,1.303,641,1.232,642,1.232,643,0.921,659,1.232,660,1.638,661,2.184,671,2.831,672,1.874,673,1.963,677,1.638,681,3.675,683,2.746,684,2.666,685,1.638,686,1.118,687,1.874,707,2.746,718,2.746,720,4.148,744,1.638,746,1.638,796,3.3,894,1.638,895,4.015,896,4.015,897,4.015,898,4.015,899,1.855,900,1.855,901,4.015,902,1.855,903,1.855,904,1.855,905,1.855,906,1.855,907,1.855,908,1.855,909,1.855,910,1.855,911,1.855,912,1.855,913,4.698,914,1.855,915,1.855,916,1.855,917,1.855,918,4.698,919,1.855,920,3.11,921,4.015,922,1.855,923,1.855,924,1.855,925,1.855,926,3.11,927,4.015,928,3.11,929,3.11,930,3.11,931,3.11,932,3.11,933,1.855,934,5.233,935,4.015,936,1.855,937,1.855,938,1.855,939,1.855,940,3.11,941,1.855,942,1.495,943,1.855,944,1.855,945,1.855,946,1.855,947,1.855,948,3.11,949,1.855,950,1.855,951,1.855,952,3.545,953,1.855,954,2.221,955,2.746,956,1.855,957,3.11,958,1.495,959,1.855,960,4.698,961,3.11,962,3.11,963,2.506,964,1.855,965,3.11,966,1.855,967,1.855,968,1.855,969,1.855,970,3.11,971,1.855,972,1.855,973,1.028,974,2.746,975,1.855,976,1.855,977,1.855,978,1.855,979,1.855,980,1.638,981,1.855,982,1.795,983,1.855,984,1.638,985,1.855,986,1.855,987,1.855,988,4.015,989,1.855,990,1.855,991,1.855,992,1.855,993,1.855,994,1.855,995,1.855,996,1.855,997,3.11,998,1.855,999,1.855,1000,1.855,1001,1.855,1002,1.855,1003,1.855,1004,1.855]],["title/modules/ConfigModule.html",[142,1.685,150,3.118]],["body/modules/ConfigModule.html",[0,0.32,3,0.16,4,0.16,5,0.107,18,0.009,36,0.211,39,1.301,45,0.16,78,0.007,79,0.007,86,0.263,105,3.79,142,2.872,144,2.998,145,3.891,150,6.263,157,4.193,158,3.329,159,3.329,196,4.193,325,4.367,1005,5.512,1006,5.512,1007,5.512,1008,6.242,1009,6.681,1010,6.242]],["title/injectables/ConfigService.html",[105,1.831,347,1.039]],["body/injectables/ConfigService.html",[0,0.197,3,0.099,4,0.099,5,0.135,10,0.304,15,1.51,16,1.732,17,0.429,18,0.009,20,2.165,23,0.534,26,4.042,30,1.525,31,1.576,32,0.996,34,2.064,36,0.194,39,0.801,45,0.099,46,1.621,64,6.784,75,1.767,78,0.005,79,0.005,86,0.225,87,0.842,105,2.263,106,5.227,109,5.75,111,1.634,116,2.033,194,1.54,347,1.284,348,1.499,374,1.466,404,1.908,449,2.33,554,3.465,954,1.631,1011,3.392,1012,6.985,1013,6.985,1014,5.488,1015,5.488,1016,3.842,1017,5.654,1018,5.488,1019,3.842,1020,4.791,1021,4.423,1022,7.462,1023,8.087,1024,6.634,1025,5.227,1026,5.488,1027,5.488,1028,4.107,1029,4.846,1030,5.488,1031,5.488,1032,4.565,1033,3.842,1034,8.087,1035,4.846,1036,5.488,1037,5.488,1038,5.488,1039,6.784,1040,3.842,1041,5.488,1042,4.846,1043,4.846,1044,6.167,1045,5.954,1046,5.488,1047,3.355,1048,3.842,1049,3.842,1050,3.842,1051,3.842,1052,3.842,1053,3.842,1054,3.842,1055,3.842,1056,2.875,1057,3.842]],["title/classes/ConfirmationEmailDto.html",[0,0.228,214,3.118]],["body/classes/ConfirmationEmailDto.html",[0,0.379,2,1.04,3,0.154,4,0.154,5,0.103,10,0.477,11,1.189,13,0.92,17,0.336,18,0.009,23,0.46,36,0.223,45,0.154,78,0.007,79,0.007,86,0.277,87,0.82,88,1.17,96,1.226,214,5.198,374,1.219,380,5.538,445,2.989,464,5.628,511,2.085,544,1.959,560,3.211,573,3.052,756,1.284,764,2.168,779,4.672,1058,6.534,1059,5.315,1060,6.019,1061,5.964,1062,6.019,1063,3.336,1064,3.627,1065,2.891,1066,4.228,1067,4.851]],["title/classes/CreateChatDto.html",[0,0.228,792,3.322]],["body/classes/CreateChatDto.html",[0,0.383,2,1.054,3,0.156,4,0.156,5,0.104,10,0.483,11,1.199,13,0.925,17,0.416,18,0.009,23,0.467,36,0.224,45,0.156,78,0.007,79,0.007,86,0.278,87,0.825,88,1.186,96,1.243,292,1.969,491,7.118,511,2.102,763,4.955,764,2.197,765,1.986,774,5.584,792,5.584,1068,5.387,1069,6.101,1070,6.101]],["title/classes/CreateChatMessageDto.html",[0,0.228,781,2.948]],["body/classes/CreateChatMessageDto.html",[0,0.335,2,0.689,3,0.102,4,0.102,5,0.122,10,0.316,11,0.906,13,1.018,17,0.479,18,0.009,19,1.842,20,1.237,23,0.573,32,1.049,36,0.209,44,1.798,45,0.145,57,2.8,78,0.005,79,0.005,86,0.286,87,0.907,88,1.457,96,0.813,111,0.933,194,1.6,217,2.14,292,1.965,374,0.928,390,2.312,484,2.541,485,0.813,509,3.959,511,2.253,531,2.899,538,5.268,539,4.892,554,2.519,562,4.892,571,5.725,573,1.645,755,2.802,757,3.523,762,4.485,763,4.718,764,1.437,765,1.299,767,2.802,768,1.916,773,2.65,774,5.821,777,3.523,778,3.937,779,3.559,780,2.802,781,3.744,782,3.523,783,3.523,784,4.978,785,4.978,786,3.523,1071,3.99,1072,5.637,1073,3.99,1074,3.99,1075,3.99,1076,3.99,1077,3.99,1078,3.99,1079,3.99]],["title/classes/CreateFileDto.html",[0,0.228,1080,3.322]],["body/classes/CreateFileDto.html",[0,0.376,2,1.026,3,0.152,4,0.152,5,0.149,10,0.471,11,1.18,13,0.914,17,0.409,18,0.009,23,0.454,36,0.222,42,3.525,45,0.152,78,0.007,79,0.007,86,0.276,87,0.815,88,1.155,96,1.21,170,4.279,374,1.209,511,2.068,762,4.634,764,2.139,1080,5.493,1081,6.481,1082,4.445,1083,5.29,1084,5.94,1085,7.34,1086,7.34,1087,4.068,1088,5.94,1089,7.34,1090,5.245]],["title/interfaces/CreateMockFileReturn.html",[1091,2.283,1092,3.322]],["body/interfaces/CreateMockFileReturn.html",[3,0.129,4,0.129,5,0.146,10,0.398,11,1.06,17,0.465,18,0.009,21,1.595,32,0.889,36,0.218,45,0.189,46,2.546,75,1.473,78,0.006,79,0.006,105,3.037,132,4.164,217,2.504,336,2.679,374,1.47,390,2.147,411,4.935,439,7.881,1028,4.935,1032,5.033,1091,2.583,1092,5.852,1093,3.17,1094,3.758,1095,3.758,1096,5.725,1097,7.612,1098,5.195,1099,7.364,1100,6.595,1101,5.823,1102,4.434,1103,5.022,1104,5.022,1105,5.022,1106,5.022,1107,5.022,1108,5.022,1109,5.022,1110,4.434,1111,4.047,1112,5.022,1113,5.022]],["title/classes/CreateNotificationDto.html",[0,0.228,1114,3.118]],["body/classes/CreateNotificationDto.html",[0,0.38,2,1.042,3,0.155,4,0.155,5,0.103,10,0.478,11,1.191,13,1.003,17,0.479,18,0.009,23,0.567,36,0.223,44,2.719,45,0.155,78,0.007,79,0.007,87,0.894,88,1.441,96,1.229,374,1.22,511,2.26,573,2.488,764,2.173,780,4.237,1114,5.205,1115,7.082,1116,4.862,1117,4.445,1118,6.033,1119,5.327,1120,6.464,1121,6.033,1122,6.033,1123,3.808,1124,5.327,1125,4.862,1126,6.033]],["title/classes/CreateProfileDto.html",[0,0.228,223,3.118]],["body/classes/CreateProfileDto.html",[0,0.344,2,1.159,3,0.172,4,0.172,5,0.115,18,0.009,36,0.22,45,0.172,78,0.008,79,0.008,86,0.271,96,1.366,191,2.933,223,5.548,445,3.331,756,1.431,1063,3.718,1064,4.042,1065,3.222,1066,4.711,1127,5.923,1128,4.454]],["title/classes/CreateUserDto.html",[0,0.228,1063,2.461]],["body/classes/CreateUserDto.html",[0,0.38,2,0.878,3,0.13,4,0.13,5,0.087,10,0.402,11,1.068,13,1.003,17,0.466,18,0.009,23,0.566,32,0.896,36,0.219,45,0.13,78,0.006,79,0.006,86,0.282,87,0.894,88,1.44,96,1.034,191,3.564,292,1.912,374,1.293,445,3.677,511,2.213,522,2.095,544,2.41,573,3.362,763,4.412,764,1.829,765,1.653,778,3.682,963,5.967,1063,3.682,1123,4.194,1129,6.33,1130,3.801,1131,5.079,1132,5.079,1133,5.079,1134,5.354,1135,5.866,1136,5.079,1137,4.484,1138,4.412,1139,4.666,1140,5.079,1141,6.644,1142,3.801,1143,3.801]],["title/classes/CreateUserNotificationTokenDto.html",[0,0.228,1144,2.948]],["body/classes/CreateUserNotificationTokenDto.html",[0,0.385,2,1.066,3,0.158,4,0.158,5,0.106,10,0.489,11,1.208,13,0.93,17,0.344,18,0.009,23,0.472,36,0.209,45,0.158,72,2.507,78,0.007,79,0.007,86,0.279,87,0.829,88,1.2,96,1.257,374,1.237,436,4.166,511,2.117,573,3.099,764,2.222,1129,6.055,1144,4.99,1145,3.864,1146,4.334,1147,5.449,1148,6.634,1149,6.171,1150,6.171]],["title/classes/CredentialsDto.html",[0,0.228,219,3.118]],["body/classes/CredentialsDto.html",[0,0.345,2,1.162,3,0.172,4,0.172,5,0.115,18,0.009,36,0.22,45,0.172,78,0.008,79,0.008,86,0.271,96,1.37,191,2.94,219,5.556,445,3.34,756,1.435,1063,3.727,1064,4.052,1065,3.23,1066,4.723,1151,5.938]],["title/modules/DatabaseModule.html",[142,1.685,151,3.118]],["body/modules/DatabaseModule.html",[0,0.291,3,0.146,4,0.146,5,0.097,17,0.317,18,0.009,27,3.421,31,1.211,36,0.235,39,1.183,45,0.146,46,1.677,75,1.268,78,0.007,79,0.007,86,0.252,105,3.377,109,4.248,134,3.987,140,4.575,141,2.341,142,2.709,144,2.727,151,5.012,161,3.146,171,5.013,180,3.146,181,3.421,191,2.482,329,4.248,336,3.028,485,1.156,616,2.727,890,3.987,1152,5.677,1153,7.136,1154,5.677,1155,7.136,1156,5.677,1157,5.677,1158,7.136,1159,5.677,1160,5.677,1161,5.677,1162,5.677,1163,5.677,1164,5.677,1165,5.677,1166,5.677,1167,5.677,1168,5.677,1169,5.677,1170,5.677,1171,5.677,1172,5.677,1173,5.677,1174,5.677,1175,5.677,1176,5.677,1177,5.677,1178,5.677,1179,5.677,1180,5.013,1181,5.677]],["title/classes/DeleteUserNotificationTokenDto.html",[0,0.228,1182,3.322]],["body/classes/DeleteUserNotificationTokenDto.html",[0,0.327,2,1.102,3,0.164,4,0.164,5,0.109,10,0.505,11,1.232,13,0.879,17,0.356,18,0.009,23,0.488,36,0.177,45,0.164,72,2.557,78,0.007,79,0.007,86,0.275,87,0.784,88,1.239,374,1.05,436,3.941,756,1.635,760,2.964,1144,5.661,1145,3.941,1146,4.477,1147,5.629,1148,5.629,1182,5.734,1183,5.629,1184,6.375,1185,4.77,1186,5.629]],["title/classes/DownloadFileDto.html",[0,0.228,1187,3.118]],["body/classes/DownloadFileDto.html",[0,0.376,2,1.026,3,0.152,4,0.152,5,0.102,10,0.471,11,1.18,13,0.981,17,0.409,18,0.009,23,0.561,32,0.99,36,0.204,45,0.152,78,0.007,79,0.007,86,0.276,87,0.875,88,1.427,292,2.018,374,0.978,483,1.422,756,1.566,759,4.787,760,2.762,761,5.245,764,2.139,765,1.933,778,4.068,1047,3.525,1082,4.445,1187,5.155,1188,6.481,1189,7.034,1190,5.94,1191,5.94,1192,7.34]],["title/entities/FileEntity.html",[483,1.063,567,2.283]],["body/entities/FileEntity.html",[0,0.273,3,0.072,4,0.072,5,0.048,8,1.403,10,0.224,11,0.702,13,1.049,17,0.478,18,0.009,19,1.691,21,0.897,23,0.592,36,0.191,40,1.984,42,1.356,45,0.112,46,0.834,75,1.192,78,0.004,79,0.004,86,0.284,87,0.91,88,1.506,96,0.575,111,1.248,112,0.875,116,0.777,122,2.03,170,2.245,227,1.201,292,1.635,294,2.332,374,1.363,390,1.954,455,3.354,483,0.676,485,0.575,487,2.957,493,3.079,494,3.201,495,3.215,496,1.984,497,3.464,500,1.702,503,2.519,505,1.984,506,5.298,511,2.221,516,2.519,520,2.519,522,1.165,523,1.63,524,2.519,525,2.519,527,2.519,528,1.356,534,1.63,540,1.984,544,0.919,559,4.889,560,4.131,565,2.756,566,4.31,567,2.245,573,2.676,756,0.603,768,1.356,954,1.199,1032,3.079,1065,1.356,1096,3.543,1098,3.215,1117,2.957,1193,2.276,1194,3.747,1195,3.789,1196,4.491,1197,2.824,1198,6.859,1199,4.837,1200,6.489,1201,2.824,1202,6.249,1203,2.824,1204,2.824,1205,3.854,1206,2.824,1207,3.854,1208,2.824,1209,2.824,1210,2.824,1211,2.824,1212,2.824,1213,2.494,1214,2.824,1215,3.266,1216,2.276,1217,2.494,1218,2.276,1219,2.494,1220,2.494,1221,5.729,1222,2.494,1223,2.494,1224,2.494,1225,2.494,1226,2.494,1227,2.494,1228,1.984,1229,2.494,1230,1.403]],["title/classes/FileEntityPreview.html",[0,0.228,1228,3.118]],["body/classes/FileEntityPreview.html",[0,0.32,2,0.634,3,0.094,4,0.094,5,0.063,8,1.822,13,1.027,17,0.454,18,0.009,19,1.496,21,1.165,23,0.281,30,0.801,31,0.783,32,0.495,36,0.211,40,2.577,42,1.762,45,0.136,46,1.084,75,1.394,78,0.005,79,0.005,86,0.283,87,0.846,96,0.747,111,1.46,112,1.137,116,1.461,122,1.706,170,2.731,227,1.461,292,1.659,294,1.604,374,1.316,390,2.362,455,3.342,483,0.878,487,2.034,493,2.118,494,2.832,497,3.065,503,2.118,505,2.577,506,5.147,511,2.359,516,2.118,520,3.065,522,1.513,523,2.118,524,3.065,525,3.065,527,3.065,528,1.762,534,2.118,544,1.194,559,4.581,560,3.871,565,3.352,566,4.701,567,1.887,573,2.993,756,0.783,768,1.762,954,1.558,1032,2.118,1065,1.762,1096,2.437,1098,2.211,1117,2.034,1193,2.957,1194,2.577,1195,3.352,1196,3.974,1199,4.279,1202,5.978,1205,3.24,1207,3.24,1215,3.974,1216,2.957,1217,3.24,1218,2.957,1219,3.24,1220,3.24,1221,6.407,1222,3.24,1223,3.24,1224,3.24,1225,3.24,1226,3.24,1227,3.24,1228,3.73,1229,3.24,1230,1.822,1231,2.211,1232,3.67]],["title/injectables/FileValidationPipe.html",[347,1.039,1233,3.322]],["body/injectables/FileValidationPipe.html",[0,0.273,3,0.137,4,0.137,5,0.091,8,2.647,10,0.422,11,1.102,12,3.038,13,0.918,15,1.886,17,0.423,18,0.009,20,2.349,21,1.693,23,0.58,30,1.497,31,1.462,32,0.924,34,1.336,36,0.223,39,1.111,42,2.56,43,2.198,45,0.137,75,1.191,78,0.007,79,0.007,86,0.284,105,3.554,111,1.604,116,1.467,170,4.357,336,2.843,347,1.604,348,2.079,374,1.129,414,2.402,449,2.262,521,4.131,1233,5.13,1234,7.064,1235,4.706,1236,7.578,1237,3.743,1238,6.855,1239,6.855,1240,5.33,1241,6.855,1242,5.33,1243,3.212,1244,5.33,1245,5.33,1246,5.33,1247,5.33]],["title/controllers/FilesController.html",[80,2.064,1248,3.322]],["body/controllers/FilesController.html",[0,0.154,3,0.077,4,0.077,5,0.132,10,0.239,13,0.346,15,1.262,17,0.44,18,0.009,23,0.538,30,1.537,31,1.561,32,0.949,34,1.765,35,4.646,36,0.229,39,0.628,42,2.203,45,0.077,68,3.507,72,2.229,75,1.572,78,0.004,79,0.004,80,1.401,82,1.447,84,1.739,86,0.273,87,0.876,88,1.368,91,2.644,95,1.903,96,0.614,111,2.003,131,3.121,170,3.879,187,2.857,217,2.357,227,2.262,260,4.674,261,4.905,262,3.047,263,2.117,264,2.001,265,2.001,266,2.001,267,1.903,268,1.739,273,1.279,277,1.739,281,2.001,292,1.916,294,3.803,309,4.437,374,0.756,403,3.823,459,1.497,485,0.614,567,1.55,578,2.203,579,2.133,581,2.278,583,2.668,585,2.857,596,1.497,604,1.497,765,0.981,806,2.001,807,2.117,808,2.429,811,1.816,812,2.661,821,2.117,822,4.477,823,2.429,1032,2.648,1080,4.157,1187,4.361,1243,1.816,1248,3.433,1249,2.661,1250,2.661,1251,4.905,1252,3.014,1253,3.014,1254,4.588,1255,3.014,1256,3.014,1257,3.014,1258,2.661,1259,3.014,1260,3.014,1261,4.905,1262,4.646,1263,3.014,1264,3.014,1265,4.646,1266,3.014,1267,3.014,1268,2.661,1269,3.014,1270,3.014,1271,3.014,1272,4.588,1273,4.588,1274,3.014,1275,2.117,1276,4.123,1277,2.661,1278,3.014,1279,3.014,1280,4.588,1281,3.014,1282,3.014,1283,5.004,1284,2.661,1285,3.014,1286,2.255,1287,3.014,1288,2.255,1289,3.014,1290,3.014,1291,3.014,1292,3.014,1293,3.014]],["title/modules/FilesModule.html",[142,1.685,152,3.118]],["body/modules/FilesModule.html",[0,0.307,3,0.153,4,0.153,5,0.102,18,0.009,36,0.238,39,1.246,45,0.153,78,0.007,79,0.007,82,3.54,86,0.258,142,2.798,144,2.872,145,3.79,152,6.208,157,4.085,158,3.189,159,3.189,161,3.314,196,4.085,325,4.254,485,1.218,567,3.075,616,2.872,890,4.2,1248,5.979,1276,6.071,1277,5.28,1294,5.28,1295,5.28,1296,5.28,1297,5.979,1298,5.979,1299,5.979]],["title/injectables/FilesService.html",[347,1.039,1276,2.948]],["body/injectables/FilesService.html",[0,0.19,3,0.059,4,0.059,5,0.108,10,0.182,12,1.488,13,0.426,15,1.021,16,1.036,17,0.383,18,0.009,19,1.654,20,1.82,21,1.994,23,0.526,30,1.501,31,1.466,32,0.927,34,1.656,35,4.006,36,0.207,39,0.479,42,1.782,43,0.948,45,0.059,46,2.341,75,1.696,78,0.004,79,0.004,86,0.265,87,0.853,91,2.472,111,1.874,112,0.713,116,1.021,122,1.725,131,3.186,141,3.073,170,3.748,187,2.724,194,0.922,217,2.032,273,0.976,290,2.422,292,0.526,294,2.745,347,0.868,348,0.897,390,1.518,400,4.454,401,2.753,403,3.685,404,1.843,414,1.036,442,2.99,449,2.493,457,2.753,459,1.142,483,1.117,485,0.468,522,0.948,544,0.748,560,1.979,567,1.183,578,2.24,579,2.169,580,2.142,581,2.317,583,2.24,585,2.399,587,2.967,592,3.981,594,2.692,595,3.784,596,1.142,597,3.226,599,2.236,600,2.967,602,2.236,603,2.692,604,1.142,613,1.274,614,1.452,615,1.386,616,1.104,617,1.227,618,1.386,626,2.811,631,2.142,633,2.142,635,1.386,636,1.386,637,1.527,638,1.527,639,1.615,640,1.615,641,1.527,642,1.527,643,1.142,659,1.527,664,1.721,671,1.386,672,1.386,684,1.527,686,2.236,687,2.811,980,5.186,1032,2.692,1090,2.03,1098,1.386,1117,1.274,1187,3.76,1189,3.276,1195,4.17,1251,4.119,1258,2.03,1261,5.545,1268,2.03,1275,1.615,1276,2.464,1300,2.03,1301,2.3,1302,4.828,1303,2.3,1304,4.665,1305,1.853,1306,2.3,1307,2.3,1308,2.3,1309,2.3,1310,3.76,1311,2.3,1312,2.3,1313,2.3,1314,2.03,1315,2.3,1316,4.665,1317,2.3,1318,2.3,1319,2.3,1320,3.711,1321,3.711,1322,3.711,1323,2.3,1324,2.3,1325,2.3,1326,2.3,1327,2.03,1328,2.3,1329,2.3,1330,2.3,1331,2.3,1332,1.853,1333,2.99,1334,3.711,1335,2.3,1336,2.3,1337,2.99,1338,2.3,1339,2.3,1340,2.3,1341,2.3,1342,5.873,1343,2.3,1344,2.3,1345,2.3,1346,3.711,1347,2.3,1348,4.119,1349,3.711,1350,3.711,1351,5.353,1352,6.279,1353,3.711,1354,3.711,1355,3.711,1356,3.711,1357,4.665,1358,2.3,1359,2.3,1360,2.3,1361,2.3,1362,4.733,1363,2.3,1364,2.3,1365,2.3,1366,2.3,1367,2.3,1368,2.3]],["title/interfaces/FindManyBracketsOptions.html",[1091,2.283,1310,3.118]],["body/interfaces/FindManyBracketsOptions.html",[3,0.165,4,0.165,5,0.11,10,0.51,11,1.239,17,0.359,18,0.009,32,1.039,36,0.179,45,0.165,78,0.007,79,0.007,86,0.282,112,1.995,600,4.572,756,1.644,1091,3.31,1093,4.063,1310,5.413,1369,5.683,1370,5.187,1371,5.683,1372,6.891,1373,6.399]],["title/classes/FindManyOptionsDto.html",[0,0.228,1374,2.562]],["body/classes/FindManyOptionsDto.html",[0,0.283,2,0.515,3,0.076,4,0.076,5,0.051,8,2.259,10,0.236,11,0.731,13,0.968,17,0.438,18,0.009,19,1.739,20,1.913,23,0.575,32,1.093,34,0.747,36,0.203,45,0.076,75,1.016,78,0.004,79,0.004,86,0.265,87,0.874,88,1.363,96,0.607,112,0.924,122,3.092,131,1.131,132,1.882,184,3.72,194,2.475,374,1.316,376,3.335,413,1.882,455,2.591,483,1.089,485,1.65,511,1.873,521,3.325,522,1.229,544,2.164,546,2.185,580,1.72,600,1.652,617,3.293,643,2.259,756,0.97,760,2.115,762,3.483,764,1.073,771,2.65,778,3.685,779,3.483,954,1.265,973,4.428,982,4.338,1025,4.62,1047,1.431,1087,2.521,1215,4.128,1310,3.875,1314,2.632,1370,6.679,1374,2.625,1375,5.874,1376,5.874,1377,2.402,1378,3.092,1379,3.72,1380,3.483,1381,3.483,1382,2.339,1383,3.021,1384,6.649,1385,2.837,1386,2.837,1387,2.837,1388,3.897,1389,2.872,1390,2.872,1391,2.632,1392,3.897,1393,3.897,1394,3.897,1395,3.897,1396,3.897,1397,3.897,1398,3.897,1399,3.897,1400,2.98,1401,1.882,1402,3.897,1403,4.745,1404,4.745,1405,2.98,1406,3.72,1407,1.882,1408,2.741,1409,4.197,1410,2.98,1411,1.533,1412,2.339,1413,2.185,1414,2.339,1415,1.59,1416,1.533,1417,1.533,1418,3.419,1419,2.339,1420,2.339,1421,2.339,1422,1.59,1423,2.98,1424,2.98,1425,5.451,1426,4.975,1427,5.451,1428,2.98,1429,2.98,1430,4.871,1431,2.98,1432,2.23,1433,2.23,1434,5.451,1435,4.017,1436,4.017,1437,2.98,1438,2.98,1439,2.98,1440,2.98,1441,2.98,1442,4.549,1443,2.98,1444,2.98,1445,2.98]],["title/classes/FindOneOptionsDto.html",[0,0.228,1378,2.064]],["body/classes/FindOneOptionsDto.html",[0,0.342,2,0.716,3,0.106,4,0.106,5,0.071,8,2.875,10,0.328,11,0.93,13,0.904,17,0.403,18,0.009,20,1.284,23,0.553,32,0.974,34,1.451,36,0.212,45,0.106,75,1.293,78,0.006,79,0.006,86,0.261,87,0.843,88,1.125,96,0.844,112,1.284,132,2.615,194,2.321,374,1.19,401,3.431,413,2.615,454,5.047,455,2.911,457,3.909,483,1.819,511,1.88,521,3.488,522,1.709,544,1.884,546,3.204,617,3.088,762,3.654,764,1.492,771,1.99,778,3.698,779,3.654,954,2.457,1047,3.469,1087,3.208,1215,5.687,1375,6.125,1376,6.125,1377,3.339,1378,2.692,1382,3.431,1383,3.844,1385,2.131,1386,2.131,1387,2.131,1391,3.658,1411,2.131,1412,3.715,1413,3.469,1414,3.715,1416,2.977,1417,2.977,1418,3.715,1419,4.049,1420,4.049,1421,4.049,1425,5.111,1426,4.665,1427,5.111,1430,5.111,1432,3.1,1433,6.35,1434,5.111,1435,3.658,1436,5.111,1446,4.143,1447,4.143,1448,4.143,1449,6.672,1450,4.143,1451,4.143,1452,5.111,1453,5.789,1454,3.658,1455,4.143,1456,4.143,1457,4.143,1458,4.143]],["title/classes/HttpExceptionFilter.html",[0,0.228,1459,3.578]],["body/classes/HttpExceptionFilter.html",[0,0.294,2,0.991,3,0.147,4,0.147,5,0.098,7,4.294,8,3.568,9,6.924,10,0.455,15,1.977,16,3.534,17,0.32,18,0.009,23,0.439,25,5.789,26,4.535,27,4.726,28,6.624,30,1.253,31,1.224,32,0.774,33,4.624,34,1.438,35,5.869,36,0.2,38,6.624,39,1.196,42,2.756,45,0.147,46,2.428,47,4.03,48,5.066,51,3.81,52,5.066,53,6.343,55,5.066,57,3.568,58,4.624,59,3.81,75,1.282,76,5.066,77,5.066,78,0.007,79,0.007,86,0.273,1459,5.789,1460,6.343,1461,5.738,1462,5.738]],["title/classes/ID.html",[0,0.228,292,1.015]],["body/classes/ID.html",[0,0.39,2,1.086,3,0.161,4,0.161,5,0.108,10,0.498,11,1.221,13,0.937,17,0.351,18,0.009,23,0.481,36,0.211,45,0.161,78,0.007,79,0.007,86,0.263,87,0.835,88,1.222,96,1.28,292,2.041,374,1.251,483,1.819,511,2.14,759,5.066,764,2.264,1463,5.55,1464,6.286,1465,6.709]],["title/classes/JwtAccessTokenPayloadDto.html",[0,0.228,415,2.675]],["body/classes/JwtAccessTokenPayloadDto.html",[0,0.413,2,0.938,3,0.139,4,0.139,5,0.093,10,0.43,11,1.115,13,1.015,17,0.387,18,0.009,23,0.53,36,0.151,45,0.207,78,0.007,79,0.007,86,0.292,87,0.905,96,1.105,230,3.425,272,3.27,288,4.378,292,1.747,374,1.425,415,4.605,416,3.27,430,4.825,435,3.27,436,2.791,511,2.153,756,1.479,1065,2.606,1466,5.368,1467,3.425,1468,5.426,1469,5.426,1470,4.06]],["title/injectables/JwtAuthGuard.html",[277,2.562,347,1.039]],["body/injectables/JwtAuthGuard.html",[0,0.257,3,0.214,4,0.129,5,0.086,10,0.397,13,0.575,15,1.813,17,0.367,18,0.009,21,2.337,23,0.504,26,5.26,30,1.438,31,1.405,32,0.888,34,1.257,36,0.232,39,1.045,43,2.067,45,0.129,46,1.481,47,5.488,72,2.78,75,1.12,78,0.006,79,0.006,86,0.274,87,0.753,111,1.899,116,1.379,169,4.04,227,2.293,277,3.802,333,3.329,347,1.541,348,1.955,414,2.259,449,3.123,528,2.408,756,1.069,811,3.021,1230,2.49,1243,3.021,1471,4.426,1472,6.496,1473,5.013,1474,8.492,1475,5.013,1476,4.426,1477,5.848,1478,5.013,1479,5.816,1480,4.426,1481,4.426,1482,5.013,1483,4.426,1484,4.426,1485,5.013,1486,5.013,1487,4.426,1488,5.816,1489,5.013,1490,5.013,1491,5.013,1492,5.013]],["title/injectables/JwtRefreshGuard.html",[276,3.322,347,1.039]],["body/injectables/JwtRefreshGuard.html",[0,0.278,3,0.218,4,0.139,5,0.093,10,0.429,15,1.906,17,0.302,18,0.009,21,2.199,23,0.53,26,5.37,30,1.182,31,1.155,32,0.73,34,1.358,36,0.224,39,1.129,43,2.233,45,0.139,47,3.803,72,2.838,75,1.21,78,0.007,79,0.007,86,0.279,87,0.781,111,1.883,116,2.101,227,2.341,268,3.125,276,5.182,333,3.596,347,1.62,348,2.112,414,2.441,436,2.785,449,2.94,756,1.155,1230,2.689,1472,6.115,1476,6.115,1479,6.115,1480,4.781,1481,4.781,1484,4.781,1487,4.781,1493,6.742,1494,4.781,1495,5.415,1496,5.415,1497,3.596,1498,5.415]],["title/classes/JwtRefreshTokenDto.html",[0,0.228,230,2.803]],["body/classes/JwtRefreshTokenDto.html",[0,0.422,2,0.996,3,0.148,4,0.148,5,0.099,13,0.973,18,0.009,36,0.16,45,0.211,78,0.007,79,0.007,86,0.292,87,0.867,96,1.174,230,4.547,272,3.472,288,4.547,292,1.317,374,1.396,415,4.341,416,3.472,430,3.638,435,3.472,436,2.963,511,2.214,756,1.537,1065,2.767,1466,4.047,1467,3.638,1470,4.312]],["title/classes/JwtRefreshTokenPayloadDto.html",[0,0.228,416,2.675]],["body/classes/JwtRefreshTokenPayloadDto.html",[0,0.408,2,0.907,3,0.135,4,0.135,5,0.09,10,0.416,11,1.091,13,1.025,17,0.42,18,0.009,23,0.575,36,0.146,45,0.204,78,0.007,79,0.007,86,0.292,87,0.913,96,1.069,230,3.312,272,3.162,288,4.284,292,1.719,374,1.433,415,4.963,416,4.089,430,4.748,435,4.533,436,2.698,511,2.119,756,1.605,760,3.155,1065,2.52,1466,4.766,1467,3.312,1470,3.926,1499,5.247,1500,5.247,1501,5.247]],["title/injectables/JwtRefreshTokenStrategy.html",[322,3.118,347,1.039]],["body/injectables/JwtRefreshTokenStrategy.html",[0,0.245,3,0.123,4,0.123,5,0.082,10,0.379,12,2.56,13,0.733,15,1.757,17,0.356,18,0.009,21,1.519,23,0.488,30,1.394,31,1.362,32,0.861,34,1.199,36,0.24,39,0.997,43,1.972,45,0.123,46,1.886,72,2.13,75,1.068,78,0.006,79,0.006,86,0.271,87,0.735,91,2.078,105,3.462,111,1.681,116,1.757,187,2.398,206,4.484,227,1.316,268,2.76,273,2.03,274,5.14,275,3.578,288,3.019,289,4.222,290,2.633,292,1.753,322,4.484,333,3.175,336,2.55,347,1.494,348,1.865,408,4.222,412,3.578,413,3.019,414,2.155,416,4.622,430,4.031,435,2.882,436,2.459,449,2.03,450,4.222,455,1.768,756,1.02,1230,2.375,1237,3.358,1413,2.297,1497,3.175,1502,6.346,1503,4.222,1504,6.346,1505,4.782,1506,4.222,1507,4.782,1508,4.222,1509,4.222,1510,3.854,1511,5.145,1512,4.222,1513,4.222,1514,4.222,1515,4.782,1516,4.222,1517,4.782,1518,4.222,1519,4.782,1520,4.782]],["title/injectables/JwtStrategy.html",[323,3.118,347,1.039]],["body/injectables/JwtStrategy.html",[0,0.265,3,0.133,4,0.133,5,0.088,10,0.409,12,2.694,13,0.771,15,1.849,17,0.375,18,0.009,23,0.514,30,1.467,31,1.433,32,0.906,34,1.295,36,0.238,39,1.077,45,0.133,75,1.154,78,0.007,79,0.007,86,0.276,87,0.764,91,2.187,105,3.528,111,1.747,116,1.849,187,2.491,206,3.629,227,1.422,268,2.982,273,2.193,274,5.226,275,3.866,292,1.807,323,4.719,333,3.431,336,2.756,347,1.572,348,2.015,415,4.764,430,4.241,756,1.102,1230,2.566,1237,3.629,1504,6.592,1506,4.562,1508,4.562,1509,4.562,1510,4.163,1511,4.163,1512,4.562,1513,4.562,1514,4.562,1516,4.562,1518,4.562,1521,4.562,1522,5.166,1523,5.166,1524,5.166,1525,4.562]],["title/classes/JwtTokensDto.html",[0,0.228,272,2.675]],["body/classes/JwtTokensDto.html",[0,0.411,2,0.926,3,0.138,4,0.138,5,0.092,10,0.425,11,1.106,13,1.013,17,0.384,18,0.009,23,0.526,36,0.149,45,0.206,78,0.007,79,0.007,86,0.292,87,0.903,88,1.338,96,1.092,230,3.385,272,4.147,288,5.062,292,1.226,374,1.421,415,4.147,416,3.231,430,3.385,435,3.231,436,3.908,511,2.336,756,1.468,1065,2.575,1466,5.337,1467,3.385,1470,4.012,1526,5.361,1527,5.361]],["title/modules/MultipartModule.html",[142,1.685,153,3.118]],["body/modules/MultipartModule.html",[0,0.205,3,0.103,4,0.103,5,0.069,12,2.854,15,1.103,17,0.397,18,0.009,19,1.129,20,1.242,23,0.545,30,1.554,31,1.519,32,0.96,34,1.785,36,0.209,39,0.835,45,0.103,75,1.789,78,0.006,79,0.006,86,0.293,87,0.41,111,1.665,131,3.156,142,2.702,144,1.925,153,5,161,2.221,180,3.134,181,3.408,187,1.337,196,3.134,197,7.22,198,4.904,325,3.264,374,0.66,1009,4.993,1093,2.53,1302,5.623,1528,4.007,1529,8.176,1530,4.007,1531,5.655,1532,5.919,1533,4.007,1534,7.507,1535,4.007,1536,5.655,1537,4.007,1538,4.007,1539,5.655,1540,5.327,1541,4.007,1542,7.507,1543,4.007,1544,5.655,1545,4.007,1546,6.553,1547,4.007,1548,4.007,1549,5.83,1550,6.05,1551,3.539,1552,4.007,1553,3.972,1554,6.553,1555,4.007,1556,4.007,1557,5.655,1558,6.553,1559,5.655,1560,6.553,1561,4.007,1562,4.007,1563,4.007]],["title/interfaces/MultipartModuleAsyncOptions.html",[1091,2.283,1532,3.118]],["body/interfaces/MultipartModuleAsyncOptions.html",[3,0.138,4,0.138,5,0.092,10,0.425,11,1.106,17,0.503,18,0.009,32,1.178,36,0.212,39,1.118,42,2.575,45,0.195,78,0.007,79,0.007,86,0.293,91,2.24,170,2.757,180,4.444,181,4.832,198,6,756,1.468,1028,5.149,1091,3.539,1093,3.385,1532,4.833,1540,5.687,1553,3.766,1564,4.012,1565,4.012,1566,6.076,1567,7.079,1568,5.546,1569,4.734,1570,4.734,1571,4.734,1572,4.734]],["title/interfaces/MultipartOptionsFactory.html",[1091,2.283,1553,3.118]],["body/interfaces/MultipartOptionsFactory.html",[3,0.146,4,0.146,5,0.097,10,0.45,15,1.964,17,0.457,18,0.009,23,0.434,34,1.423,36,0.217,39,1.183,42,2.727,45,0.2,78,0.007,79,0.007,86,0.291,91,2.54,170,2.92,180,3.146,181,3.421,198,4.248,756,1.211,1091,3.67,1093,3.584,1532,3.987,1540,6.127,1553,5.012,1564,5.34,1565,4.248,1566,5.013,1567,5.013,1568,5.751,1569,5.013,1570,5.013,1571,7.23,1572,5.013,1573,5.677]],["title/entities/NotificationEntity.html",[483,1.063,1574,2.675]],["body/entities/NotificationEntity.html",[0,0.199,3,0.1,4,0.1,5,0.067,10,0.308,11,0.889,13,1.043,17,0.493,18,0.009,19,2.285,23,0.607,36,0.195,44,1.751,45,0.1,78,0.005,79,0.005,85,3.437,86,0.28,87,0.918,88,1.543,96,0.792,112,1.205,141,2.282,194,1.558,227,1.523,292,1.473,294,2.817,374,1.156,390,1.801,455,2.934,483,0.93,485,0.792,487,3.571,493,3.719,494,3.745,495,3.883,496,2.73,497,4.052,498,4.869,500,2.342,503,3.194,506,3.335,511,2.236,516,3.194,520,3.194,523,2.243,524,3.194,525,3.194,527,3.194,528,1.866,534,2.243,540,2.73,552,4.459,553,3.132,554,5.285,556,2.908,559,3.493,560,2.951,565,3.493,566,4.231,573,1.603,1117,3.571,1120,6.215,1202,4.822,1213,3.431,1574,3.335,1575,3.431,1576,3.886,1577,3.886,1578,3.886,1579,5.574,1580,3.886,1581,3.431,1582,3.886,1583,3.886,1584,3.886,1585,5.533,1586,3.886,1587,3.886,1588,4.886]],["title/controllers/NotificationsController.html",[80,2.064,1589,3.322]],["body/controllers/NotificationsController.html",[0,0.176,3,0.088,4,0.088,5,0.059,10,0.273,13,0.395,15,1.394,17,0.394,18,0.009,23,0.541,30,1.543,31,1.508,32,0.953,34,1.773,36,0.223,39,0.717,45,0.088,68,3.796,70,3.796,72,2.468,75,1.579,78,0.005,79,0.005,80,1.6,82,1.652,84,1.986,86,0.253,87,0.878,88,1.375,91,2.651,95,2.172,96,0.701,111,2.02,131,2.979,187,2.862,217,3.041,227,2.376,260,3.364,262,3.993,263,2.416,264,2.285,265,2.285,266,2.285,267,2.172,268,1.986,273,1.46,277,1.986,281,2.285,292,1.961,294,3.928,309,2.285,403,3.886,404,1.709,459,1.709,485,0.701,579,2.796,581,2.986,583,2.888,585,3.092,596,1.709,604,1.709,611,1.907,765,1.12,806,2.285,808,2.772,810,2.172,821,3.558,1114,4.659,1243,2.073,1283,5.698,1286,3.791,1288,3.791,1378,3.084,1574,2.073,1589,3.791,1590,3.038,1591,3.038,1592,6.013,1593,3.44,1594,4.659,1595,3.44,1596,3.44,1597,3.44,1598,3.44,1599,5.534,1600,3.44,1601,3.993,1602,2.416,1603,3.44,1604,3.44,1605,3.44,1606,3.44,1607,3.44,1608,3.44,1609,3.44]],["title/modules/NotificationsModule.html",[142,1.685,154,3.118]],["body/modules/NotificationsModule.html",[0,0.301,3,0.15,4,0.15,5,0.1,18,0.009,36,0.242,39,1.222,45,0.15,78,0.007,79,0.007,82,3.497,142,2.764,144,2.816,145,3.744,154,6.298,156,5.231,157,4.035,158,3.127,159,3.127,161,4.035,196,4.035,325,4.202,337,4.117,485,1.194,616,2.816,810,3.701,890,4.117,1574,3.533,1589,5.926,1601,6.056,1610,5.176,1611,5.176,1612,5.862,1613,5.176,1614,5.862,1615,5.862,1616,5.862]],["title/injectables/NotificationsService.html",[347,1.039,1601,2.948]],["body/injectables/NotificationsService.html",[0,0.156,3,0.046,4,0.046,5,0.031,10,0.241,11,0.489,13,0.745,15,0.836,16,0.814,17,0.422,18,0.009,19,1.573,20,1.731,21,1.981,23,0.578,30,1.574,31,1.538,32,0.972,34,1.77,36,0.197,39,0.376,43,0.745,44,0.814,45,0.046,46,2.371,57,0.897,75,1.711,78,0.003,79,0.003,85,2.463,86,0.263,87,0.896,88,0.351,91,2.571,111,1.891,112,0.56,116,0.836,131,3.069,141,2.844,187,2.801,217,2.971,227,0.497,270,3.717,273,0.766,290,2.844,292,1.277,294,2.727,295,1.919,296,3.721,337,2.135,347,0.711,348,0.704,390,2.649,400,4.633,401,2.375,403,3.83,404,1.51,414,0.814,436,0.929,449,2.521,454,2.019,455,1.905,457,2.024,458,2.684,459,0.897,483,1.422,485,0.802,489,2.45,522,0.745,528,0.867,544,0.588,578,1.891,579,1.83,580,2.974,581,2.293,583,1.891,584,3.476,585,2.024,587,2.856,591,1.14,592,4.042,594,4.076,595,3.758,596,0.897,597,2.783,599,1.088,600,2.559,602,2.372,603,2.272,604,0.897,609,1.594,611,1.001,613,1.001,615,1.088,616,0.867,617,0.963,618,1.088,626,2.783,630,1.268,631,1.754,633,1.754,635,1.088,636,1.088,637,1.199,638,1.199,639,1.268,640,1.268,641,1.199,642,1.199,643,0.897,659,1.199,662,1.268,666,1.594,671,1.088,672,1.088,673,1.14,684,1.199,686,1.088,687,1.832,735,2.684,942,3.172,958,2.45,984,1.594,1117,1.001,1145,2.375,1333,1.455,1413,1.46,1574,1.088,1579,1.268,1588,2.684,1594,3.243,1601,2.019,1602,1.268,1617,1.594,1618,4.618,1619,4.234,1620,3.936,1621,3.04,1622,3.936,1623,3.936,1624,3.936,1625,1.806,1626,1.806,1627,1.806,1628,1.806,1629,3.936,1630,1.806,1631,1.806,1632,1.806,1633,3.04,1634,1.806,1635,3.936,1636,1.806,1637,1.806,1638,1.806,1639,1.806,1640,1.806,1641,1.806,1642,1.806,1643,1.806,1644,4.618,1645,1.806,1646,3.04,1647,1.806,1648,3.04,1649,1.806,1650,1.806,1651,1.806,1652,2.684,1653,1.806,1654,1.806,1655,1.455,1656,1.806,1657,1.806,1658,0.963,1659,4.618,1660,1.806,1661,1.806,1662,1.806,1663,1.806,1664,3.04,1665,1.806,1666,1.806,1667,1.806,1668,1.806,1669,1.806,1670,3.04,1671,1.806,1672,3.936,1673,1.806,1674,1.806,1675,1.806,1676,1.806,1677,1.806,1678,1.806,1679,1.806,1680,1.806,1681,2.45,1682,1.806,1683,1.806,1684,1.806,1685,3.936,1686,3.04,1687,1.806,1688,1.806,1689,1.806,1690,1.806,1691,1.806,1692,1.806,1693,3.04,1694,1.806,1695,1.806,1696,1.806,1697,1.806,1698,1.806,1699,1.806]],["title/classes/PaginationChatMessagesDto.html",[0,0.228,619,3.118]],["body/classes/PaginationChatMessagesDto.html",[0,0.322,2,1.086,3,0.161,4,0.161,5,0.108,17,0.351,18,0.009,23,0.481,30,1.372,31,1.341,32,0.848,36,0.211,45,0.161,78,0.007,79,0.007,86,0.263,116,1.73,376,3.467,485,1.28,509,3.533,531,4.363,619,5.337,756,1.341,765,2.046,768,3.019,1230,3.122,1231,3.788,1700,5.686,1701,5.066,1702,6.286,1703,3.628,1704,6.286,1705,3.968,1706,5.686,1707,3.788]],["title/classes/PaginationChatParticipantsDto.html",[0,0.228,722,3.322]],["body/classes/PaginationChatParticipantsDto.html",[0,0.322,2,1.086,3,0.161,4,0.161,5,0.108,17,0.351,18,0.009,23,0.481,30,1.372,31,1.341,32,0.848,36,0.211,45,0.161,78,0.007,79,0.007,86,0.263,116,1.73,376,3.467,485,1.28,509,3.533,529,5.113,722,5.686,756,1.341,765,2.046,768,3.019,1230,3.122,1231,3.788,1700,5.686,1703,3.628,1705,3.968,1706,5.686,1707,3.788,1708,5.55,1709,6.286,1710,6.286]],["title/classes/PaginationChatsDto.html",[0,0.228,620,2.803]],["body/classes/PaginationChatsDto.html",[0,0.324,2,1.091,3,0.162,4,0.162,5,0.108,17,0.352,18,0.009,23,0.483,30,1.379,31,1.347,32,0.852,36,0.212,45,0.162,78,0.007,79,0.007,86,0.264,116,1.738,376,3.474,484,3.83,485,1.286,620,4.81,756,1.347,765,2.055,768,3.033,1230,3.136,1231,3.806,1700,5.702,1703,3.645,1705,3.987,1706,5.702,1707,3.806,1711,5.089,1712,6.315,1713,6.315]],["title/classes/PaginationFilesDto.html",[0,0.228,1275,3.118]],["body/classes/PaginationFilesDto.html",[0,0.316,2,1.064,3,0.158,4,0.158,5,0.105,17,0.343,18,0.009,23,0.471,30,1.344,31,1.313,32,0.83,36,0.209,45,0.158,78,0.007,79,0.007,86,0.279,111,1.755,116,1.694,376,3.435,485,1.254,567,4.333,756,1.313,765,2.004,768,2.957,1230,3.058,1231,3.71,1275,5.27,1703,3.553,1705,3.887,1706,6.056,1707,4.522,1714,6.625,1715,5.436,1716,6.157,1717,6.157]],["title/classes/PaginationNotificationsDto.html",[0,0.228,1602,3.118]],["body/classes/PaginationNotificationsDto.html",[0,0.328,2,1.107,3,0.164,4,0.164,5,0.11,17,0.357,18,0.009,23,0.49,30,1.398,31,1.366,32,0.864,36,0.214,45,0.164,78,0.007,79,0.007,116,1.762,376,3.495,485,1.305,661,5.397,756,1.366,765,2.085,768,3.076,1230,3.181,1231,3.86,1574,5.145,1602,5.397,1703,3.697,1705,4.044,1707,3.86,1718,6.786,1719,5.162,1720,6.405,1721,6.405]],["title/classes/PaginationUserNotificationTokensDto.html",[0,0.228,1722,3.322]],["body/classes/PaginationUserNotificationTokensDto.html",[0,0.311,2,1.049,3,0.156,4,0.156,5,0.104,17,0.339,18,0.009,23,0.465,30,1.326,31,1.296,32,0.819,36,0.207,45,0.156,72,2.483,78,0.007,79,0.007,86,0.278,111,1.741,116,1.671,376,3.415,485,1.237,661,5.65,756,1.296,765,1.977,768,2.917,1145,3.827,1230,3.016,1231,3.66,1467,3.834,1658,4.589,1703,4.295,1705,3.834,1707,4.484,1722,5.568,1723,5.997,1724,6.073]],["title/classes/PaginationUsersDto.html",[0,0.228,1725,3.118]],["body/classes/PaginationUsersDto.html",[0,0.316,2,1.064,3,0.158,4,0.158,5,0.105,17,0.343,18,0.009,23,0.471,30,1.344,31,1.313,32,0.83,36,0.209,45,0.158,78,0.007,79,0.007,86,0.279,111,1.755,116,1.694,227,2.318,376,3.435,485,1.254,661,5.684,756,1.313,765,2.004,768,2.957,1230,3.058,1231,3.71,1703,3.553,1705,3.887,1707,4.522,1723,6.047,1725,5.27,1726,4.962,1727,6.157,1728,6.157]],["title/classes/ResetPasswordDto.html",[0,0.228,237,2.948]],["body/classes/ResetPasswordDto.html",[0,0.406,2,1.013,3,0.15,4,0.15,5,0.1,10,0.464,11,1.17,13,0.909,17,0.327,18,0.009,23,0.448,36,0.22,45,0.187,78,0.007,79,0.007,86,0.28,87,0.81,88,1.14,96,1.194,191,2.563,237,4.835,245,3.893,374,1.199,380,5.448,445,3.616,464,5.562,511,2.051,544,1.908,560,3.127,573,3.003,756,1.553,764,2.111,779,4.596,1061,5.867,1063,3.249,1064,3.533,1065,2.816,1066,5.113,1067,4.724,1729,5.867,1730,4.724,1731,5.862,1732,5.862]],["title/interfaces/Response.html",[51,2.948,1091,2.283]],["body/interfaces/Response.html",[0,0.301,3,0.151,4,0.151,5,0.101,8,2.918,10,0.465,11,1.172,17,0.328,18,0.009,36,0.221,39,1.225,45,0.187,51,4.841,75,1.312,78,0.007,79,0.007,86,0.275,111,1.705,217,3.235,347,1.705,374,1.305,476,4.735,1020,5.932,1091,3.021,1093,3.709,1477,5.455,1733,4.735,1734,5.188,1735,5.188,1736,6.437,1737,4.735,1738,6.437,1739,6.437,1740,4.396,1741,6.437,1742,5.188,1743,5.188]],["title/classes/SelectChatMessagesDto.html",[0,0.228,799,3.322]],["body/classes/SelectChatMessagesDto.html",[0,0.212,2,0.715,3,0.106,4,0.106,5,0.071,10,0.328,11,0.929,13,1,17,0.451,18,0.009,19,2.217,20,2.066,23,0.602,32,1.167,36,0.186,45,0.106,78,0.006,79,0.006,86,0.279,87,0.892,88,1.53,96,0.843,122,2.689,184,3.485,194,3.155,374,1.251,376,3.064,483,1.384,485,1.645,487,4.001,509,1.923,511,1.629,531,2.974,544,2.472,546,2.777,643,2.054,756,1.234,760,3.66,765,1.346,771,3.202,799,4.327,954,1.756,973,3.695,982,4.384,1047,1.987,1087,2.293,1374,4.662,1378,2.689,1379,3.485,1380,3.65,1381,3.65,1382,2.974,1385,2.974,1386,2.974,1387,2.974,1388,3.65,1389,2.611,1390,2.611,1392,3.65,1393,3.65,1394,3.65,1395,3.65,1396,3.65,1397,3.65,1398,3.65,1399,3.65,1401,2.611,1402,3.65,1403,4.557,1404,4.557,1406,3.485,1407,2.611,1408,2.493,1409,3.65,1411,2.127,1412,2.974,1413,2.777,1414,2.974,1415,2.206,1416,2.127,1417,2.127,1418,2.127,1419,2.974,1420,2.974,1421,2.974,1422,2.206,1454,3.652,1701,3.334,1744,3.334,1745,4.137,1746,2.747,1747,2.747,1748,2.747]],["title/classes/SelectChatsDto.html",[0,0.228,796,3.118]],["body/classes/SelectChatsDto.html",[0,0.312,2,0.608,3,0.09,4,0.09,5,0.06,10,0.279,11,0.828,13,1.006,17,0.441,18,0.009,19,1.717,20,2.079,21,1.118,23,0.616,32,1.169,34,0.883,36,0.214,45,0.09,46,1.04,75,0.787,78,0.005,79,0.005,86,0.273,87,0.901,88,1.536,96,0.717,112,1.091,122,2.396,184,3.105,194,2.689,374,1.327,376,2.847,413,2.223,483,1.234,484,1.587,485,1.569,509,2.396,521,3.105,522,1.452,544,1.984,546,2.475,573,1.452,643,1.749,756,1.099,760,3.467,764,1.268,765,1.146,771,2.927,778,3.378,796,3.619,952,5.381,954,1.495,973,3.378,974,4.55,982,3.871,1047,1.691,1087,1.951,1123,2.223,1125,2.838,1372,4.911,1373,4.561,1374,4.446,1378,2.396,1379,3.105,1380,3.253,1381,3.253,1382,2.65,1383,3.422,1385,3.134,1386,3.134,1387,3.134,1388,3.253,1389,2.223,1390,2.223,1392,3.253,1393,3.253,1394,3.253,1395,3.253,1396,3.253,1397,3.253,1398,3.253,1399,3.253,1401,2.223,1402,3.253,1403,4.234,1404,4.234,1406,3.105,1407,2.223,1408,2.122,1409,3.253,1411,1.811,1412,2.65,1413,2.475,1414,2.65,1415,1.878,1416,1.811,1417,1.811,1418,1.811,1419,2.65,1420,2.65,1421,2.65,1422,1.878,1465,4.55,1711,2.838,1744,5.405,1746,2.338,1747,2.338,1748,2.338,1749,6.801,1750,3.521,1751,3.521,1752,5.153,1753,5.153,1754,5.153,1755,3.521,1756,3.521,1757,2.473,1758,3.521,1759,3.521,1760,6.094,1761,2.838,1762,3.521,1763,3.521,1764,2.838,1765,3.521]],["title/classes/SelectFileDto.html",[0,0.228,1265,3.322]],["body/classes/SelectFileDto.html",[0,0.295,2,0.996,3,0.148,4,0.148,5,0.099,10,0.457,11,1.158,13,0.945,17,0.402,18,0.009,23,0.551,32,1.11,36,0.2,45,0.148,78,0.007,79,0.007,86,0.273,87,0.842,88,1.4,194,2.888,374,0.949,483,1.724,485,1.174,544,1.875,546,3.459,567,2.963,756,1.537,760,3.349,765,1.875,771,2.767,954,2.446,1047,2.767,1265,5.39,1378,3.94,1382,3.704,1385,2.963,1386,2.963,1387,2.963,1411,2.963,1412,3.704,1413,3.459,1414,3.704,1415,3.073,1416,2.963,1417,2.963,1418,2.963,1419,3.704,1420,3.704,1421,3.704,1422,3.073,1766,5.088]],["title/classes/SelectFilesDto.html",[0,0.228,1262,3.322]],["body/classes/SelectFilesDto.html",[0,0.274,2,0.64,3,0.095,4,0.095,5,0.063,10,0.294,11,0.859,13,0.996,17,0.436,18,0.009,19,1.767,20,1.657,21,1.177,23,0.613,32,1.163,36,0.203,45,0.095,46,1.579,75,1.195,78,0.005,79,0.005,86,0.278,87,0.898,88,1.521,96,0.755,112,1.148,122,2.486,132,2.339,184,3.222,194,2.754,374,1.289,376,2.916,401,1.905,483,1.28,485,1.594,511,1.506,544,2.236,546,2.568,567,1.905,573,1.528,643,1.84,756,1.141,760,3.529,764,1.334,765,1.206,771,3.013,778,2.963,954,1.573,973,3.477,982,3.965,1047,1.779,1087,2.053,1117,4.522,1123,2.339,1124,3.271,1125,2.986,1262,4.001,1333,2.986,1372,2.986,1373,2.772,1374,4.516,1378,2.486,1379,3.222,1380,3.376,1381,3.376,1382,2.75,1383,3.551,1385,3.227,1386,3.227,1387,3.227,1388,3.376,1389,2.339,1390,2.339,1392,3.376,1393,3.376,1394,3.376,1395,3.376,1396,3.376,1397,3.376,1398,3.376,1399,3.376,1401,2.339,1402,3.376,1403,4.337,1404,4.337,1406,3.222,1407,2.339,1408,2.233,1409,3.376,1411,1.905,1412,2.75,1413,2.568,1414,2.75,1415,1.976,1416,1.905,1417,1.905,1418,1.905,1419,2.75,1420,2.75,1421,2.75,1422,1.976,1746,2.46,1747,2.46,1748,2.46,1757,2.602,1764,2.986,1767,3.271,1768,3.705,1769,5.347,1770,3.705,1771,2.986,1772,3.705,1773,3.705,1774,3.271,1775,5.347]],["title/classes/SelectNotificationsDto.html",[0,0.228,1594,3.118]],["body/classes/SelectNotificationsDto.html",[0,0.284,2,0.673,3,0.1,4,0.1,5,0.067,10,0.309,11,0.891,13,1.004,17,0.443,18,0.009,19,1.818,20,1.719,21,1.238,23,0.621,32,1.172,36,0.215,44,1.757,45,0.1,46,1.151,75,0.871,78,0.005,79,0.005,85,4.118,86,0.249,87,0.9,88,1.544,96,0.794,112,1.208,122,2.578,184,3.341,194,2.819,374,1.223,376,2.984,483,1.327,485,1.618,511,1.562,544,2.101,546,2.663,554,2.46,643,1.936,756,1.183,760,3.59,764,1.404,765,1.269,771,3.1,778,3.073,780,2.737,954,1.654,973,3.577,982,4.058,1047,1.872,1087,2.16,1373,4.149,1374,4.584,1378,2.578,1379,3.341,1380,3.5,1381,3.5,1382,2.852,1383,3.682,1385,3.319,1386,3.319,1387,3.319,1388,3.5,1389,2.46,1390,2.46,1392,3.5,1393,3.5,1394,3.5,1395,3.5,1396,3.5,1397,3.5,1398,3.5,1399,3.5,1401,2.46,1402,3.5,1403,4.438,1404,4.438,1406,3.341,1407,2.46,1408,2.349,1409,3.5,1411,2.004,1412,2.852,1413,2.663,1414,2.852,1415,2.079,1416,2.004,1417,2.004,1418,2.004,1419,2.852,1420,2.852,1421,2.852,1422,2.079,1574,2.349,1579,5.217,1594,3.894,1719,3.141,1746,2.588,1747,2.588,1748,2.588,1757,2.737,1764,3.141,1771,3.141,1776,5.699,1777,3.897,1778,3.897,1779,3.897,1780,3.441,1781,3.897]],["title/classes/SelectProfileDto.html",[0,0.228,241,3.322]],["body/classes/SelectProfileDto.html",[0,0.295,2,0.994,3,0.147,4,0.147,5,0.098,10,0.456,11,1.156,13,0.944,17,0.401,18,0.009,23,0.55,32,1.109,36,0.2,45,0.147,78,0.007,79,0.007,86,0.273,87,0.841,88,1.399,194,2.884,227,1.582,241,5.383,374,0.947,483,1.722,528,2.762,544,1.871,546,3.455,756,1.534,760,3.345,765,1.871,771,2.762,954,2.441,1047,2.762,1128,3.818,1378,3.938,1382,3.699,1385,2.957,1386,2.957,1387,2.957,1411,2.957,1412,3.699,1413,3.455,1414,3.699,1415,3.067,1416,2.957,1417,2.957,1418,2.957,1419,3.699,1420,3.699,1421,3.699,1422,3.067,1782,5.077]],["title/classes/SelectUserDto.html",[0,0.228,1783,3.322]],["body/classes/SelectUserDto.html",[0,0.295,2,0.994,3,0.147,4,0.147,5,0.098,10,0.456,11,1.156,13,0.944,17,0.401,18,0.009,23,0.55,32,1.109,36,0.2,45,0.147,78,0.007,79,0.007,86,0.273,87,0.841,88,1.399,194,2.884,227,1.582,374,0.947,483,1.722,485,1.171,544,1.871,546,3.455,756,1.534,760,3.345,765,1.871,771,2.762,954,2.441,1047,2.762,1130,4.303,1378,3.938,1382,3.699,1385,2.957,1386,2.957,1387,2.957,1411,2.957,1412,3.699,1413,3.455,1414,3.699,1415,3.067,1416,2.957,1417,2.957,1418,2.957,1419,3.699,1420,3.699,1421,3.699,1422,3.067,1783,5.383,1784,4.038]],["title/classes/SelectUserNotificationTokenDto.html",[0,0.228,1785,3.322]],["body/classes/SelectUserNotificationTokenDto.html",[0,0.294,2,0.989,3,0.147,4,0.147,5,0.098,10,0.454,11,1.153,13,0.943,17,0.4,18,0.009,23,0.549,32,1.107,36,0.2,45,0.147,72,1.91,78,0.007,79,0.007,86,0.273,87,0.84,88,1.395,194,2.876,374,0.943,483,1.717,485,1.166,544,1.864,546,3.446,756,1.53,760,3.336,765,1.864,771,2.75,954,2.43,1047,2.75,1145,2.945,1146,4.021,1378,3.933,1382,3.689,1385,2.945,1386,2.945,1387,2.945,1411,2.945,1412,3.689,1413,3.446,1414,3.689,1415,3.054,1416,2.945,1417,2.945,1418,2.945,1419,3.689,1420,3.689,1421,3.689,1422,3.054,1658,3.054,1784,4.021,1785,5.368]],["title/classes/SelectUserNotificationTokensDto.html",[0,0.228,1786,3.322]],["body/classes/SelectUserNotificationTokensDto.html",[0,0.222,2,0.749,3,0.111,4,0.111,5,0.074,10,0.344,11,0.96,13,1.001,17,0.445,18,0.009,19,1.926,20,1.852,23,0.611,32,1.176,36,0.166,45,0.111,72,1.447,78,0.006,79,0.006,86,0.273,87,0.892,88,1.553,122,2.778,184,3.6,194,2.954,374,1.272,376,3.127,483,1.43,485,1.667,544,2.225,546,2.869,643,2.153,756,1.275,760,3.714,765,1.411,771,3.283,954,1.84,973,3.788,982,4.251,1047,2.082,1087,2.403,1145,2.23,1374,4.723,1378,2.778,1379,3.6,1380,3.772,1381,3.772,1382,3.073,1385,3.515,1386,3.515,1387,3.515,1388,3.772,1389,2.737,1390,2.737,1392,3.772,1393,3.772,1394,3.772,1395,3.772,1396,3.772,1397,3.772,1398,3.772,1399,3.772,1401,2.737,1402,3.772,1403,4.65,1404,4.65,1406,3.6,1407,2.737,1408,2.613,1409,3.772,1411,2.23,1412,3.073,1413,2.869,1414,3.073,1415,2.313,1416,2.23,1417,2.23,1418,2.23,1419,3.073,1420,3.073,1421,3.073,1422,2.313,1467,2.737,1658,2.313,1746,2.879,1747,2.879,1748,2.879,1757,3.045,1784,3.045,1786,4.471]],["title/classes/SelectUsersDto.html",[0,0.228,1787,3.322]],["body/classes/SelectUsersDto.html",[0,0.212,2,0.716,3,0.106,4,0.106,5,0.071,10,0.328,11,0.93,13,0.993,17,0.439,18,0.009,19,1.88,20,1.794,23,0.618,32,1.167,36,0.201,44,1.867,45,0.106,75,0.926,78,0.006,79,0.006,85,2.21,86,0.277,87,0.892,88,1.531,112,1.284,122,2.692,184,3.488,194,2.896,227,1.14,374,1.252,376,3.066,401,2.131,483,1.386,485,1.646,544,2.172,546,2.78,643,2.058,756,1.235,760,3.661,765,1.348,771,3.204,954,1.759,973,3.698,982,4.169,1047,1.99,1087,2.296,1374,4.664,1378,2.692,1379,3.488,1380,3.654,1381,3.654,1382,2.977,1383,3.844,1385,3.431,1386,3.431,1387,3.431,1388,3.654,1389,2.615,1390,2.615,1392,3.654,1393,3.654,1394,3.654,1395,3.654,1396,3.654,1397,3.654,1398,3.654,1399,3.654,1401,2.615,1402,3.654,1403,4.56,1404,4.56,1406,3.488,1407,2.615,1408,2.497,1409,3.654,1411,2.131,1412,2.977,1413,2.78,1414,2.977,1415,2.21,1416,2.131,1417,2.131,1418,2.131,1419,2.977,1420,2.977,1421,2.977,1422,2.21,1726,3.339,1746,2.751,1747,2.751,1748,2.751,1757,2.91,1771,3.339,1774,3.658,1784,4.066,1787,4.332,1788,4.143,1789,3.339,1790,3.658]],["title/modules/SendMailModule.html",[142,1.685,321,3.118]],["body/modules/SendMailModule.html",[0,0.284,3,0.142,4,0.142,5,0.095,18,0.009,21,1.759,27,3.337,36,0.233,39,1.154,45,0.142,72,1.848,78,0.007,79,0.007,92,4.889,105,3.182,106,4.144,131,2.102,134,3.889,142,2.667,144,2.66,145,3.613,157,3.893,158,2.954,159,2.954,161,3.069,180,3.069,181,3.337,196,3.893,201,4.463,321,6.105,325,4.054,336,2.954,364,6.01,455,2.047,474,4.463,1180,4.889,1791,4.889,1792,4.889,1793,4.889,1794,5.537,1795,7.024,1796,5.661,1797,5.537,1798,5.537,1799,4.463,1800,5.537,1801,5.537,1802,5.537,1803,5.537,1804,5.537,1805,5.537,1806,5.537,1807,5.537,1808,5.537,1809,5.537,1810,5.537,1811,5.537,1812,5.537]],["title/injectables/SendMailService.html",[347,1.039,364,2.948]],["body/injectables/SendMailService.html",[0,0.271,3,0.136,4,0.136,5,0.091,10,0.419,11,1.096,12,3.027,13,0.915,14,7.043,15,1.877,17,0.421,18,0.009,19,1.49,20,1.639,21,2.398,23,0.578,30,1.648,31,1.455,32,0.92,34,1.326,36,0.21,39,1.102,45,0.136,75,1.181,78,0.007,79,0.007,86,0.284,87,0.772,91,2.22,111,1.596,116,1.455,187,2.519,217,2.589,347,1.596,348,2.062,364,4.529,449,2.245,1020,5.969,1029,4.669,1243,3.187,1796,4.261,1799,4.261,1813,4.669,1814,6.82,1815,5.288,1816,8.601,1817,6.82,1818,6.82,1819,5.288,1820,6.82,1821,6.82,1822,4.669,1823,4.669,1824,5.288,1825,5.288]],["title/classes/SendResetPasswordDto.html",[0,0.228,245,2.948]],["body/classes/SendResetPasswordDto.html",[0,0.415,2,1.064,3,0.158,4,0.158,5,0.105,13,0.707,18,0.009,36,0.225,45,0.192,78,0.007,79,0.007,86,0.279,87,0.63,96,1.254,191,2.692,237,4.089,245,4.983,374,1.014,380,4.607,445,3.726,464,4.324,511,2.114,544,2.004,560,3.284,573,2.539,756,1.601,764,2.217,779,4.737,1061,4.962,1063,3.412,1064,3.71,1065,2.957,1066,5.27,1067,4.962,1729,4.962,1730,4.962]],["title/classes/SocketsExceptionFilter.html",[0,0.228,852,3.118]],["body/classes/SocketsExceptionFilter.html",[0,0.249,2,0.838,3,0.124,4,0.124,5,0.083,7,3.63,8,3.201,10,0.384,15,1.774,16,3.476,17,0.36,18,0.009,23,0.493,25,5.194,26,5.401,27,4.362,28,6.217,30,1.407,31,1.375,32,0.869,33,6.895,34,1.616,36,0.215,38,6.895,39,1.011,43,2,44,2.186,45,0.124,46,1.904,54,5.691,57,3.831,58,3.909,59,3.221,78,0.006,79,0.006,86,0.272,87,0.741,847,3.407,851,3.63,852,4.527,1826,6.392,1827,7.239,1828,6.445,1829,8.556,1830,4.85,1831,5.772,1832,6.445,1833,5.772,1834,4.85,1835,6.445,1836,4.85,1837,4.85,1838,7.239,1839,4.85,1840,4.85]],["title/classes/SocketsGateway.html",[0,0.228,1841,3.322]],["body/classes/SocketsGateway.html",[0,0.214,2,0.723,3,0.107,4,0.107,5,0.072,8,2.894,10,0.331,12,2.688,13,0.77,15,1.603,16,1.884,17,0.374,18,0.009,23,0.513,26,2.64,30,1.464,31,1.43,32,0.904,34,1.461,36,0.234,39,0.872,43,1.724,45,0.107,46,2.142,57,2.077,72,1.395,78,0.006,79,0.006,86,0.271,87,0.808,91,2.36,111,1.784,116,1.603,141,1.724,187,2.635,227,1.151,268,2.413,270,4.58,271,3.37,290,1.724,292,1.743,310,3.37,335,2.937,365,7.154,414,1.884,436,2.996,454,2.777,455,1.546,457,2.15,521,2.52,836,5.217,845,3.692,846,3.692,847,2.937,849,5.144,851,3.129,852,2.937,853,3.692,856,4.36,861,3.692,862,3.692,863,3.692,864,3.692,865,3.692,866,3.692,868,3.692,1056,3.129,1833,6.577,1841,4.36,1842,3.692,1843,6.705,1844,6.705,1845,5.826,1846,5.826,1847,4.181,1848,4.181,1849,4.181,1850,4.181,1851,4.181,1852,4.181,1853,4.181,1854,3.692,1855,4.181,1856,4.181,1857,5.826,1858,5.826,1859,4.181,1860,4.181,1861,4.181,1862,4.181,1863,4.181,1864,4.181,1865,4.181,1866,4.181]],["title/modules/SocketsModule.html",[142,1.685,155,2.948]],["body/modules/SocketsModule.html",[0,0.282,3,0.141,4,0.141,5,0.094,18,0.009,36,0.238,39,1.147,45,0.141,46,1.626,75,1.229,78,0.007,79,0.007,86,0.248,105,3.339,132,3.474,142,2.656,144,2.643,145,3.599,155,5.89,156,5.148,157,3.878,158,2.935,159,2.935,161,3.878,180,3.05,181,3.317,196,3.878,325,4.038,334,4.86,335,3.865,336,2.935,337,3.865,433,6.793,434,4.86,836,5.708,1525,4.86,1841,5.236,1854,4.86,1867,4.86,1868,4.86,1869,5.504,1870,4.86,1871,5.504,1872,5.504,1873,5.504,1874,5.504,1875,5.504]],["title/injectables/SocketsService.html",[347,1.039,836,2.803]],["body/injectables/SocketsService.html",[0,0.206,3,0.103,4,0.103,5,0.069,10,0.318,11,0.911,12,2.632,15,1.559,17,0.435,18,0.009,19,1.132,20,1.246,23,0.597,30,1.641,31,1.603,32,1.013,34,1.884,36,0.158,39,0.838,45,0.103,46,1.187,59,3.763,72,1.891,75,1.742,78,0.006,79,0.006,86,0.284,87,0.899,111,1.914,292,1.629,331,3.239,347,1.326,348,1.568,374,1.498,505,2.823,583,2.722,681,5.843,806,3.763,836,3.578,847,2.823,958,3.239,1831,5.334,1833,6.577,1876,3.549,1877,6.564,1878,5.667,1879,5.667,1880,5.667,1881,5.667,1882,5.667,1883,4.019,1884,5.667,1885,8.183,1886,4.019,1887,5.667,1888,4.019,1889,4.019,1890,5.667,1891,4.019,1892,5.667,1893,4.019,1894,4.019,1895,7.798,1896,4.019,1897,4.019,1898,4.019,1899,4.019,1900,5.667,1901,4.019]],["title/injectables/StorageS3Service.html",[347,1.039,1902,3.578]],["body/injectables/StorageS3Service.html",[0,0.173,3,0.086,4,0.086,5,0.102,10,0.267,11,0.802,12,2.944,13,0.872,15,1.373,16,2.249,17,0.444,18,0.009,21,2.086,23,0.597,30,1.531,31,1.496,32,0.945,34,1.758,36,0.226,39,0.703,42,1.619,43,1.39,45,0.086,46,2.353,70,2.128,75,1.566,78,0.005,79,0.005,86,0.276,87,0.875,91,2.676,105,3.133,111,1.64,116,0.928,131,2.884,170,4.012,187,2.777,273,1.431,290,2.058,336,1.798,347,1.168,348,1.315,374,0.822,377,2.717,410,2.523,414,1.519,444,2.368,449,1.431,494,1.798,578,2.397,579,2.763,613,1.869,1024,6.123,1032,3.791,1056,2.523,1083,3.314,1096,3.314,1098,3.581,1117,1.869,1194,4.924,1195,2.128,1196,2.523,1216,2.717,1218,6.123,1237,2.368,1243,2.032,1305,4.022,1337,2.717,1902,4.022,1903,6.421,1904,2.717,1905,7.342,1906,5.8,1907,5.942,1908,4.991,1909,4.991,1910,3.371,1911,3.371,1912,5.942,1913,3.371,1914,3.371,1915,3.371,1916,5.8,1917,3.371,1918,4.991,1919,5.8,1920,3.371,1921,4.991,1922,3.371,1923,3.371,1924,5.247,1925,3.371,1926,3.371,1927,3.371,1928,3.371,1929,3.371,1930,4.022,1931,4.991,1932,6.568,1933,3.371,1934,2.717,1935,2.977,1936,2.977,1937,2.717,1938,2.977,1939,2.977,1940,3.371,1941,3.371,1942,3.371,1943,2.977,1944,2.977,1945,3.371,1946,3.371,1947,3.371,1948,3.371,1949,2.977,1950,2.977,1951,2.977,1952,3.371]],["title/injectables/StorageService.html",[347,1.039,1302,3.118]],["body/injectables/StorageService.html",[0,0.156,3,0.078,4,0.078,5,0.107,8,1.507,10,0.24,11,0.741,12,2.941,13,0.906,15,1.269,16,2.078,17,0.422,18,0.009,19,1.299,20,1.429,21,1.979,23,0.592,30,1.36,31,1.329,32,0.952,34,1.68,36,0.226,39,0.632,42,1.457,43,1.251,45,0.078,46,2.403,75,1.497,78,0.004,79,0.004,84,3.868,86,0.288,87,0.877,88,0.59,91,2.46,105,3.025,109,2.27,110,2.679,111,1.651,116,1.269,131,2.869,141,1.251,170,3.887,180,1.682,187,2.714,273,1.288,290,2.91,336,1.618,347,1.079,348,1.183,374,1.245,377,2.445,390,1.815,404,1.507,410,2.27,411,2.27,414,1.367,444,2.131,449,1.957,455,1.122,494,1.618,578,2.215,579,2.144,583,2.215,613,1.682,769,2.27,954,1.288,1025,2.27,1032,4.468,1045,3.716,1056,3.451,1083,3.062,1096,3.062,1097,2.679,1098,2.779,1101,2.679,1117,1.682,1138,3.062,1194,3.239,1195,1.915,1196,2.27,1237,2.131,1302,3.239,1305,3.716,1337,3.716,1549,2.27,1551,2.679,1831,2.27,1906,5.502,1934,2.445,1935,2.679,1936,2.679,1937,2.445,1938,2.679,1939,2.679,1943,2.679,1944,2.679,1949,2.679,1950,2.679,1951,2.679,1953,2.679,1954,8.024,1955,5.578,1956,7.057,1957,4.611,1958,3.034,1959,4.611,1960,3.034,1961,3.034,1962,3.034,1963,4.611,1964,3.034,1965,4.611,1966,3.034,1967,4.611,1968,3.034,1969,3.034,1970,3.034,1971,3.034,1972,3.034,1973,3.034,1974,3.034,1975,3.034,1976,3.034,1977,3.034,1978,3.034,1979,3.034,1980,3.034,1981,3.034,1982,4.611,1983,3.034,1984,3.034,1985,5.578,1986,4.611,1987,3.034,1988,3.034,1989,3.034,1990,3.034,1991,3.034,1992,4.611,1993,3.034,1994,3.034,1995,3.034,1996,3.034,1997,3.034]],["title/injectables/TransformInterceptor.html",[347,1.039,1740,3.322]],["body/injectables/TransformInterceptor.html",[0,0.295,3,0.147,4,0.147,5,0.098,8,2.856,10,0.456,15,1.979,17,0.321,18,0.009,23,0.44,30,1.255,31,1.227,32,0.775,34,1.442,36,0.218,39,1.199,45,0.185,51,3.818,75,1.285,78,0.007,79,0.007,86,0.279,111,1.683,217,2.731,347,1.683,348,2.243,374,0.947,476,5.797,1020,4.303,1091,2.957,1477,6.155,1733,4.634,1734,5.077,1735,5.077,1736,6.931,1737,4.634,1738,7.263,1739,6.351,1740,5.383,1741,7.263,1742,6.351,1743,5.077,1998,7.193,1999,5.75]],["title/classes/UpdateEmailDto.html",[0,0.228,253,2.803]],["body/classes/UpdateEmailDto.html",[0,0.427,2,1.029,3,0.153,4,0.153,5,0.102,13,0.683,18,0.009,36,0.222,45,0.205,78,0.007,79,0.007,86,0.281,87,0.609,96,1.212,191,3.641,249,3.953,253,4.64,257,3.758,374,0.98,445,3.65,511,2.071,544,1.938,573,3.031,756,1.701,764,2.144,1064,3.587,1065,2.859,1123,4.64,1128,3.953,1138,3.953,1139,4.181,1142,4.455,1143,4.455,2000,4.455,2001,4.797,2002,3.758,2003,4.797,2004,5.923,2005,4.797]],["title/classes/UpdateNotificationDto.html",[0,0.228,1599,3.322]],["body/classes/UpdateNotificationDto.html",[0,0.387,2,1.074,3,0.159,4,0.159,5,0.106,10,0.492,11,1.213,13,0.933,17,0.347,18,0.009,23,0.475,32,1.017,36,0.235,44,2.8,45,0.159,78,0.007,79,0.007,85,4.334,87,0.831,88,1.208,96,1.266,756,1.325,764,2.238,778,4.182,780,4.364,1114,4.364,1116,5.007,1119,5.486,1185,4.65,1579,5.707,1599,5.646,1780,5.486,2006,6.662,2007,6.213,2008,5.007,2009,6.213,2010,6.213]],["title/classes/UpdatePasswordDto.html",[0,0.228,257,2.803]],["body/classes/UpdatePasswordDto.html",[0,0.419,2,0.977,3,0.145,4,0.145,5,0.097,10,0.448,11,1.144,13,0.894,17,0.315,18,0.009,23,0.432,36,0.217,45,0.2,78,0.007,79,0.007,86,0.282,87,0.797,88,1.099,96,1.152,191,3.684,249,3.754,253,3.569,257,4.493,374,1.172,445,3.535,511,2.005,544,2.316,573,3.212,756,1.662,764,2.036,1064,3.407,1065,2.715,1123,4.493,1128,3.754,1137,4.992,1138,4.726,1139,4.999,1142,4.231,1143,4.231,2000,5.326,2001,4.556,2002,3.569,2003,4.556,2004,5.736,2005,6.277,2011,5.653]],["title/classes/UpdateProfileDto.html",[0,0.228,249,2.948]],["body/classes/UpdateProfileDto.html",[0,0.427,2,1.029,3,0.153,4,0.153,5,0.102,13,0.683,18,0.009,36,0.222,45,0.205,78,0.007,79,0.007,86,0.281,87,0.609,96,1.212,191,3.641,249,4.881,253,3.758,257,3.758,374,0.98,445,3.65,511,2.071,544,1.938,573,3.031,756,1.701,764,2.144,1064,3.587,1065,2.859,1123,4.64,1128,3.953,1138,3.953,1139,4.181,1142,4.455,1143,4.455,2000,4.455,2001,4.797,2002,3.758,2003,4.797,2004,5.923,2005,4.797]],["title/classes/UpdateUserDto.html",[0,0.228,2002,2.803]],["body/classes/UpdateUserDto.html",[0,0.345,2,1.162,3,0.172,4,0.172,5,0.115,18,0.009,36,0.22,45,0.172,78,0.008,79,0.008,86,0.271,96,1.37,756,1.435,1063,3.727,1130,5.032,1185,5.032,2002,4.994,2008,5.419,2012,5.419,2013,6.724,2014,6.724]],["title/classes/UpdateUserNotificationTokenDto.html",[0,0.228,2015,3.322]],["body/classes/UpdateUserNotificationTokenDto.html",[0,0.341,2,1.15,3,0.171,4,0.171,5,0.114,18,0.009,36,0.219,45,0.171,72,2.624,78,0.008,79,0.008,86,0.27,96,1.356,756,1.42,1144,4.422,1145,4.044,1146,4.676,1185,4.982,1186,5.879,2008,5.366,2012,5.366,2015,5.885,2016,6.658]],["title/classes/UploadedFile.html",[0,0.228,1083,2.948]],["body/classes/UploadedFile.html",[0,0.254,2,0.857,3,0.127,4,0.127,5,0.085,10,0.393,11,1.051,13,1.048,17,0.472,18,0.009,23,0.648,30,1.082,31,1.058,32,0.668,45,0.127,78,0.006,79,0.006,86,0.295,87,0.934,111,1.16,116,1.364,217,2.778,374,1.467,390,2.382,767,4.593,768,2.381,1032,4.223,1082,3.71,1083,4.343,1096,4.859,1098,4.41,1117,4.056,1194,5.139,1195,4.62,2017,7.59,2018,4.957,2019,4.957,2020,4.957,2021,4.957,2022,4.957,2023,4.957,2024,4.957]],["title/entities/UserEntity.html",[227,1.222,483,1.063]],["body/entities/UserEntity.html",[0,0.229,3,0.075,4,0.075,5,0.05,10,0.231,11,0.718,13,1.032,17,0.475,18,0.009,19,2.299,20,1.685,21,1.726,23,0.608,36,0.208,44,1.311,45,0.075,72,1.49,75,0.65,78,0.004,79,0.004,85,2.899,86,0.285,87,0.92,88,1.544,91,0.947,96,0.593,112,0.902,141,1.842,187,0.971,191,2.376,194,1.791,206,3.818,227,1.229,290,1.2,292,1.243,294,3.16,372,3.849,374,1.143,390,1.454,413,1.837,445,2.699,454,2.966,455,2.979,456,4.067,483,0.697,485,0.593,487,3.012,493,3.137,494,3.703,495,3.674,497,3.519,498,3.849,500,1.753,503,2.578,504,3.599,505,3.137,506,2.691,508,3.944,511,2.155,516,1.679,518,1.932,520,3.519,521,2.691,522,1.2,523,1.679,524,2.578,525,2.578,526,4.799,527,2.578,534,1.679,543,2.569,546,2.145,552,3.599,553,3.599,554,4.929,556,2.177,558,2.569,559,3.849,560,3.252,565,2.82,566,3.964,567,3.383,573,1.2,703,3.599,811,4.356,963,4.38,1135,5.383,1145,1.496,1228,3.137,1433,2.177,1497,1.932,1658,3.252,1681,4.38,1789,5.825,1790,3.944,2025,2.569,2026,5.435,2027,2.91,2028,2.91,2029,2.91,2030,2.345,2031,2.91,2032,2.91,2033,2.91,2034,4.466,2035,2.91,2036,2.91,2037,2.91,2038,2.91,2039,3.944,2040,2.91,2041,2.91,2042,2.91,2043,2.91,2044,2.91,2045,2.91,2046,2.177,2047,4.466,2048,4.466,2049,4.466,2050,4.466,2051,2.91,2052,4.466,2053,2.91,2054,4.466,2055,2.91,2056,2.91,2057,2.91,2058,2.91,2059,2.91,2060,2.91,2061,2.91]],["title/entities/UserNotificationTokenEntity.html",[483,1.063,1658,2.368]],["body/entities/UserNotificationTokenEntity.html",[0,0.221,3,0.11,4,0.11,5,0.074,10,0.341,11,0.955,13,1.032,17,0.464,18,0.009,19,2.068,23,0.589,36,0.189,45,0.11,78,0.006,79,0.006,86,0.283,87,0.908,88,1.498,96,0.876,112,1.333,141,3.028,227,1.635,292,1.556,294,2.976,374,1.209,390,1.934,436,3.501,455,2.848,483,1.03,485,0.876,487,3.772,493,3.929,494,3.916,495,4.102,497,4.237,498,4.635,500,2.592,503,3.429,506,4.424,511,2.17,516,3.429,518,2.856,520,3.429,523,2.483,524,3.429,525,3.429,527,3.429,528,2.066,534,2.483,540,3.021,556,3.219,559,3.751,560,3.169,565,3.751,566,3.581,573,1.774,703,4.788,1145,4.097,1202,5.094,1581,3.798,1658,3.169,1681,5.486,2030,3.466,2062,6.42,2063,3.466,2064,4.301,2065,3.798,2066,4.301,2067,4.301,2068,4.301,2069,4.301]],["title/controllers/UserNotificationTokensController.html",[80,2.064,2070,3.322]],["body/controllers/UserNotificationTokensController.html",[0,0.164,3,0.082,4,0.082,5,0.055,10,0.254,13,0.368,15,1.323,17,0.402,18,0.009,23,0.551,30,1.574,31,1.538,32,0.972,34,1.807,36,0.214,39,0.669,45,0.082,68,4.046,70,3.642,72,2.405,75,1.61,78,0.005,79,0.005,80,1.491,82,1.54,84,1.851,86,0.275,87,0.884,88,1.401,91,2.68,95,2.025,96,0.653,111,1.948,131,2.918,187,2.885,217,2.984,227,2.35,260,3.193,262,3.831,263,2.253,264,2.13,265,2.13,266,2.13,267,2.025,273,1.361,277,1.851,281,2.13,292,1.938,294,3.818,296,4.649,309,2.13,403,3.971,459,1.593,485,0.653,578,2.771,579,2.682,581,2.865,583,2.771,585,2.967,596,1.593,604,1.593,611,1.777,765,1.044,806,3.831,810,2.025,821,3.377,1144,4.256,1145,3.844,1182,4.795,1243,1.933,1283,5.533,1286,3.598,1288,3.598,1619,4.046,1658,1.711,1722,2.4,1785,4.795,1786,4.795,2015,4.795,2070,3.598,2071,6.599,2072,2.832,2073,3.207,2074,5.769,2075,2.832,2076,3.207,2077,3.207,2078,3.207,2079,3.207,2080,3.207,2081,3.207,2082,3.207,2083,2.832,2084,3.207,2085,3.207,2086,3.207,2087,3.207,2088,3.207,2089,3.207,2090,4.808]],["title/injectables/UserNotificationTokensService.html",[347,1.039,1619,2.803]],["body/injectables/UserNotificationTokensService.html",[0,0.231,3,0.076,4,0.076,5,0.05,10,0.234,11,0.725,13,0.629,15,1.241,16,1.329,17,0.418,18,0.009,19,1.864,20,2.051,21,2.101,23,0.573,30,1.585,31,1.549,32,0.979,34,1.749,36,0.194,39,0.614,43,1.216,45,0.076,46,2.061,75,1.715,78,0.004,79,0.004,86,0.273,87,0.887,88,0.573,91,2.55,111,1.891,112,0.914,116,1.241,131,3.259,141,3.231,187,2.785,290,1.86,347,1.055,348,1.15,390,2.271,400,4.522,401,3.157,403,3.643,404,1.464,414,1.329,449,2.808,457,3.157,459,1.464,483,1.312,485,0.6,522,1.216,578,2.632,579,2.548,580,3.163,581,2.721,583,2.632,585,2.818,587,3.667,591,1.861,592,4.376,594,4.323,595,4.205,596,1.464,597,3.699,599,1.776,600,4.024,602,3.302,603,3.163,604,1.464,611,1.634,613,1.634,614,1.861,615,1.776,616,1.416,617,1.572,618,1.776,626,3.302,631,1.701,633,1.701,635,1.776,636,1.776,662,2.07,671,1.776,672,1.776,673,1.861,676,2.376,686,1.776,687,2.718,1145,3.948,1619,2.848,1658,1.572,2091,6.187,2092,2.376,2093,6.616,2094,2.948,2095,2.948,2096,2.948,2097,2.948,2098,2.948,2099,2.948,2100,2.948,2101,2.603,2102,4.511,2103,2.948,2104,5.48,2105,2.948,2106,4.511,2107,4.511,2108,2.948,2109,2.948,2110,2.603,2111,2.603,2112,2.948,2113,4.511,2114,2.948,2115,2.948]],["title/entities/UserRefreshTokenEntity.html",[372,2.803,483,1.063]],["body/entities/UserRefreshTokenEntity.html",[0,0.309,3,0.113,4,0.113,5,0.075,10,0.349,11,0.97,13,1.022,17,0.467,18,0.009,19,2.088,23,0.594,36,0.206,45,0.113,78,0.006,79,0.006,86,0.284,87,0.911,88,1.51,96,0.896,112,1.364,206,4.838,227,1.661,292,1.575,294,3.011,372,3.81,374,1.221,390,1.964,435,4.151,455,2.546,483,1.053,485,0.896,487,3.817,493,3.975,494,3.953,495,4.151,497,4.278,498,4.679,500,2.651,502,3.885,503,3.483,511,2.088,516,3.483,518,2.922,520,3.975,522,1.814,523,2.539,524,3.483,525,3.483,527,3.483,534,2.539,559,3.81,560,3.219,566,3.637,1497,5.327,2030,3.546,2039,5.328,2062,6.465,2063,3.546,2065,3.885,2116,4.4,2117,4.4,2118,4.4,2119,4.4,2120,4.4,2121,4.4,2122,6.035,2123,4.4]],["title/injectables/UserRefreshTokensService.html",[269,2.803,347,1.039]],["body/injectables/UserRefreshTokensService.html",[0,0.214,3,0.069,4,0.069,5,0.046,10,0.212,11,0.672,13,0.591,15,1.151,16,1.205,17,0.416,18,0.009,19,1.889,20,2.078,21,2.008,23,0.57,30,1.583,31,1.547,32,0.978,34,1.757,36,0.202,39,0.557,43,1.102,45,0.069,46,2.202,75,1.704,78,0.004,79,0.004,86,0.273,87,0.887,88,0.52,91,2.57,111,1.896,112,0.829,116,1.151,131,3.303,141,3.257,187,2.801,269,2.64,290,2.403,347,0.978,348,1.043,372,1.688,390,2.427,400,4.402,401,2.997,403,3.546,404,1.328,410,2,411,2,413,1.688,414,1.205,435,2.52,449,2.685,457,2.997,459,1.328,483,1.514,485,0.544,522,1.102,578,2.474,579,2.396,580,2.973,581,2.559,583,2.474,585,2.649,587,3.505,591,1.688,592,4.596,594,4.558,595,4.371,596,1.328,597,3.512,599,1.611,600,3.884,602,3.105,603,2.973,604,1.328,611,1.482,613,1.482,614,1.688,615,1.611,616,1.284,617,1.426,618,1.611,626,2.52,631,1.543,633,1.543,635,1.611,636,1.611,662,1.878,671,1.611,672,1.611,673,1.688,676,2.154,686,1.611,687,2.52,1497,5.065,1934,2.154,2046,2,2091,6.146,2092,2.154,2101,2.36,2110,2.36,2111,2.36,2124,6.324,2125,5.152,2126,2.673,2127,2.673,2128,2.673,2129,2.673,2130,2.673,2131,2.673,2132,2.673,2133,2.673,2134,2.673,2135,4.182,2136,2.673,2137,4.182,2138,4.182,2139,2.673,2140,2.673,2141,5.152,2142,2.673,2143,4.182,2144,4.182,2145,2.673,2146,2.673,2147,2.673,2148,4.182,2149,2.673,2150,2.673]],["title/controllers/UsersController.html",[80,2.064,2151,3.322]],["body/controllers/UsersController.html",[0,0.195,3,0.098,4,0.098,5,0.065,10,0.302,13,0.437,15,1.501,17,0.411,18,0.009,23,0.563,30,1.608,31,1.571,32,0.993,34,1.846,36,0.229,39,0.794,44,1.717,45,0.098,68,3.444,70,3.444,75,1.645,78,0.005,79,0.005,80,1.771,82,1.83,84,2.199,86,0.279,87,0.892,88,1.432,91,2.713,95,2.405,96,0.776,111,1.974,131,3.063,187,2.909,217,3.063,227,1.048,260,3.623,262,3.623,263,2.676,264,2.53,265,2.53,266,2.53,267,2.405,270,3.856,273,1.617,277,2.199,281,2.53,292,1.906,309,2.53,337,2.676,403,3.82,452,3.364,459,1.892,485,0.776,578,2.62,579,2.537,581,2.709,583,3.061,585,3.277,596,1.892,604,1.892,611,2.111,765,1.24,794,3.364,806,2.53,807,2.676,810,2.405,811,2.296,821,2.676,822,5.607,823,3.07,1063,3.856,1243,2.296,1284,3.364,1286,4.082,1288,2.851,1725,2.676,1783,5.207,1787,5.207,2002,4.392,2075,3.364,2083,3.364,2151,4.082,2152,3.364,2153,3.809,2154,3.809,2155,3.809,2156,3.809,2157,3.809,2158,3.809,2159,3.809,2160,3.809,2161,3.809,2162,3.809,2163,3.809,2164,3.809,2165,3.809,2166,3.809,2167,3.809]],["title/modules/UsersModule.html",[142,1.685,156,2.675]],["body/modules/UsersModule.html",[0,0.28,3,0.14,4,0.14,5,0.093,18,0.009,36,0.232,39,1.138,45,0.14,78,0.007,79,0.007,82,3.681,86,0.247,142,2.643,144,2.622,145,3.58,156,5.468,157,3.858,158,2.912,159,2.912,161,3.026,196,3.858,227,1.502,269,5.702,270,5.006,325,4.018,372,4.395,485,1.112,616,2.622,810,3.446,890,3.834,1619,5.702,1658,3.713,2070,5.735,2151,5.735,2168,4.82,2169,4.82,2170,4.82,2171,5.459,2172,5.459]],["title/injectables/UsersService.html",[270,2.461,347,1.039]],["body/injectables/UsersService.html",[0,0.22,3,0.071,4,0.071,5,0.047,10,0.219,11,0.691,13,0.605,15,1.183,16,1.937,17,0.409,18,0.009,19,1.811,20,1.993,21,2.161,23,0.561,30,1.55,31,1.515,32,0.957,34,1.706,36,0.198,39,0.577,43,1.142,45,0.071,46,2.168,75,1.684,78,0.004,79,0.004,86,0.271,87,0.879,88,0.538,91,2.507,111,1.863,112,0.858,116,1.183,131,3.245,141,3.235,187,2.752,227,0.762,270,2.383,273,1.175,290,2.449,292,1.358,347,1.006,348,1.08,390,2.215,400,4.446,401,3.054,403,3.582,404,1.375,414,1.248,449,2.729,455,1.589,457,3.5,459,1.375,483,1.261,485,0.564,522,1.142,544,1.399,578,2.531,579,2.45,580,2.481,581,2.617,583,2.531,585,2.71,587,3.564,591,1.748,592,4.279,594,4.236,595,4.101,596,1.375,597,3.579,599,2.591,600,3.935,602,2.591,603,3.041,604,1.375,611,1.535,613,1.535,614,1.748,615,1.669,616,1.33,617,1.477,618,1.669,626,3.175,630,3.019,631,1.598,633,1.598,635,1.669,636,1.669,637,1.839,638,1.839,641,2.855,642,1.839,643,1.375,659,1.839,664,2.072,671,1.669,672,1.669,673,1.748,684,1.839,686,1.669,687,2.591,973,2.92,1327,2.445,1452,2.445,1725,1.945,2173,2.445,2174,6.43,2175,2.769,2176,2.769,2177,2.769,2178,2.769,2179,2.769,2180,2.769,2181,2.769,2182,2.769,2183,4.299,2184,2.769,2185,5.269,2186,2.769,2187,4.299,2188,4.299,2189,2.769,2190,2.769,2191,2.769,2192,2.769,2193,2.769,2194,5.269,2195,2.769,2196,2.769,2197,2.769,2198,2.769,2199,2.769,2200,4.299,2201,2.769,2202,2.769]],["title/changelog.html",[1021,2.983,2203,3.268,2204,3.701]],["body/changelog.html",[18,0.008,78,0.008,79,0.008,1591,7.11,2205,6.121,2206,8.51,2207,8.51,2208,6.932,2209,6.932,2210,6.121,2211,6.932,2212,6.932,2213,6.932,2214,6.932,2215,6.932,2216,6.932]],["title/coverage.html",[2217,4.544]],["body/coverage.html",[0,0.464,1,1.782,5,0.062,6,1.952,7,3.399,17,0.123,18,0.009,21,0.702,51,1.468,72,2.169,78,0.003,79,0.003,80,3.022,81,1.655,83,1.952,105,1.482,191,0.967,199,1.655,200,1.952,214,1.553,217,0.839,219,1.553,223,1.553,227,0.608,230,1.396,237,1.468,241,1.655,245,1.468,249,1.468,253,1.396,257,1.396,269,1.396,270,1.225,272,1.332,274,1.332,276,1.655,277,1.276,292,0.505,322,1.553,323,1.553,339,1.782,347,1.925,349,1.952,364,1.468,372,1.396,412,1.655,415,1.332,416,1.332,444,5.736,483,1.621,484,0.996,486,1.952,509,2.676,529,2.166,531,1.137,536,3.66,537,1.952,567,1.137,575,1.396,576,2.897,577,1.952,588,1.332,619,1.553,620,1.396,690,3.174,704,1.396,705,1.952,722,1.655,752,1.468,753,2.897,754,2.69,755,3.674,766,1.468,773,1.468,774,3.399,781,1.468,787,1.655,788,1.952,792,1.655,796,1.553,799,1.655,807,1.553,830,1.655,831,1.952,836,1.396,852,1.553,855,1.782,856,1.655,894,1.952,1011,1.952,1022,7.315,1028,4.615,1058,1.952,1059,1.952,1063,1.225,1068,1.952,1080,1.655,1081,1.952,1082,3.399,1083,1.468,1091,2.96,1092,1.655,1094,4.307,1095,3.914,1111,1.782,1114,1.553,1115,1.952,1116,2.897,1127,1.952,1128,3.822,1129,2.897,1130,3.399,1144,1.468,1145,3.601,1146,3.674,1151,1.952,1182,1.655,1183,1.952,1187,1.553,1188,1.952,1193,2.897,1228,1.553,1233,1.655,1234,1.952,1235,1.952,1248,1.655,1249,1.952,1262,1.655,1265,1.655,1275,1.553,1276,1.468,1300,1.952,1302,1.553,1310,1.553,1369,1.952,1370,3.66,1371,1.952,1374,1.276,1375,2.897,1376,2.897,1377,2.897,1378,1.028,1406,3.152,1432,1.655,1433,2.69,1459,1.782,1460,1.952,1463,1.952,1466,3.674,1467,3.893,1471,1.952,1493,1.952,1494,1.952,1497,2.387,1502,1.952,1503,1.952,1521,1.952,1532,1.553,1549,1.655,1550,1.782,1553,1.553,1564,2.69,1565,2.69,1574,1.332,1575,1.952,1589,1.655,1590,1.952,1594,1.553,1599,1.655,1601,1.468,1602,1.553,1617,1.952,1619,1.396,1658,1.179,1700,3.399,1701,2.897,1703,1.276,1708,1.952,1711,2.897,1714,1.952,1715,1.952,1718,1.952,1719,2.897,1722,1.655,1723,2.897,1725,1.553,1726,2.897,1729,2.897,1730,2.897,1733,2.897,1740,1.655,1744,2.897,1761,1.782,1766,1.952,1767,1.952,1776,1.952,1782,1.952,1783,1.655,1784,3.674,1785,1.655,1786,1.655,1787,1.655,1813,1.952,1826,1.952,1841,1.655,1842,1.952,1876,1.952,1902,1.782,1903,1.782,1904,1.782,1953,1.952,2000,3.399,2002,1.396,2006,1.952,2012,2.897,2015,1.655,2017,1.952,2025,1.952,2046,1.655,2062,2.897,2063,2.897,2070,1.655,2071,1.952,2072,1.952,2091,2.897,2092,2.897,2151,1.655,2152,1.952,2173,1.952,2217,1.655,2218,2.211,2219,2.211,2220,1.952,2221,8.173,2222,8.025,2223,1.952,2224,8.64,2225,1.952,2226,1.952,2227,1.952,2228,6.499,2229,7.752,2230,1.952,2231,4.542,2232,5.082,2233,1.952,2234,7.639,2235,1.952,2236,1.952,2237,1.952,2238,1.952,2239,1.952,2240,1.952,2241,2.897,2242,1.952,2243,1.952,2244,1.952,2245,5.231,2246,1.952,2247,4.542,2248,3.66,2249,3.66,2250,1.782,2251,1.952,2252,1.952,2253,1.952,2254,1.952,2255,1.952,2256,1.952,2257,1.952,2258,2.211,2259,2.211,2260,2.211,2261,6.499,2262,4.542,2263,3.594,2264,2.211,2265,2.211,2266,3.594,2267,2.211,2268,3.594,2269,3.594,2270,2.211,2271,2.211,2272,2.211,2273,2.211,2274,2.211,2275,2.211,2276,3.594,2277,3.594,2278,3.594,2279,3.594,2280,3.174,2281,1.952,2282,3.174,2283,2.211,2284,2.211,2285,1.952,2286,1.952,2287,2.211,2288,1.952,2289,1.952,2290,1.952]],["title/dependencies.html",[145,2.748,2291,3.268]],["body/dependencies.html",[0,0.356,18,0.009,39,1.136,42,4.002,78,0.007,79,0.007,94,4.81,96,1.11,104,4.391,112,1.689,145,2.802,164,4.81,167,4.81,169,4.391,170,2.802,188,4.391,329,5.202,330,5.603,331,4.391,333,3.618,335,3.826,522,2.247,616,2.617,631,3.144,764,1.962,847,3.826,851,4.077,1017,4.81,1510,5.603,1511,4.391,1652,4.81,1655,4.391,1737,4.391,1796,4.391,1799,4.391,1924,4.81,2292,5.448,2293,5.448,2294,8.52,2295,5.448,2296,5.448,2297,6.952,2298,5.448,2299,5.448,2300,5.448,2301,5.448,2302,5.448,2303,5.448,2304,5.448,2305,5.448,2306,5.448,2307,5.448,2308,5.448,2309,5.448,2310,5.448,2311,4.81,2312,5.448,2313,5.448,2314,5.448,2315,5.448,2316,5.448,2317,5.448,2318,5.448,2319,5.448,2320,5.448,2321,5.448,2322,5.448,2323,5.448,2324,5.448,2325,5.448,2326,5.448,2327,5.448,2328,5.448,2329,5.448,2330,5.448,2331,5.448,2332,5.448,2333,5.448]],["title/miscellaneous/enumerations.html",[2334,2.23,2335,4.718]],["body/miscellaneous/enumerations.html",[5,0.081,10,0.248,12,1.258,17,0.175,18,0.009,20,2.905,23,0.24,43,1.95,49,2.528,57,3.147,72,1.578,78,0.005,79,0.005,86,0.239,122,2.647,158,1.673,191,1.371,419,4.175,539,3.538,551,3.321,562,3.538,754,4.742,811,2.849,858,4.175,954,1.331,1039,4.175,1042,2.769,1043,2.769,1044,2.769,1120,3.811,1362,3.811,1579,3.321,1655,3.811,1789,3.811,1833,3.538,1937,2.528,2334,1.89,2335,2.769,2336,5.691,2337,7.147,2338,7.147,2339,4.728,2340,3.136,2341,3.136,2342,5.691,2343,4.728,2344,4.728,2345,3.136,2346,4.728,2347,4.728,2348,4.728,2349,5.691,2350,4.728,2351,4.728,2352,4.728,2353,4.728,2354,3.136,2355,3.136,2356,5.025,2357,4.259,2358,4.175,2359,3.136,2360,4.728,2361,4.728,2362,4.728,2363,4.728,2364,4.728,2365,4.728,2366,4.728,2367,4.728,2368,4.728,2369,4.728,2370,4.728,2371,4.728,2372,4.728,2373,4.728,2374,3.136,2375,3.136,2376,4.728,2377,4.728,2378,4.728,2379,4.728,2380,4.728,2381,4.728,2382,4.728,2383,4.728,2384,4.728,2385,4.728,2386,4.728,2387,4.728,2388,4.728,2389,3.136,2390,3.136,2391,4.728,2392,4.728,2393,4.728,2394,4.728,2395,4.728,2396,4.728,2397,4.728,2398,4.728,2399,5.691,2400,4.728,2401,5.691,2402,3.136,2403,3.136,2404,7.635,2405,3.136,2406,3.136,2407,3.136,2408,5.691,2409,5.691,2410,6.799,2411,5.691,2412,3.136,2413,5.691,2414,4.728,2415,5.691,2416,3.136,2417,3.136,2418,3.136,2419,3.136,2420,2.769,2421,3.136,2422,5.691,2423,6.337,2424,3.136,2425,5.691,2426,3.136,2427,3.136,2428,4.728,2429,4.728,2430,4.728,2431,4.728,2432,4.728,2433,4.728,2434,4.728,2435,4.728,2436,4.728,2437,5.691,2438,4.728,2439,3.136,2440,3.136,2441,5.691,2442,3.136,2443,3.136,2444,5.691,2445,3.136,2446,3.136,2447,5.691,2448,3.136,2449,5.691,2450,3.136,2451,3.136,2452,3.136,2453,4.728,2454,4.728,2455,4.728,2456,4.728,2457,4.728,2458,3.136,2459,4.728,2460,3.136,2461,4.728,2462,4.728,2463,4.728]],["title/miscellaneous/functions.html",[2334,2.23,2464,4.306]],["body/miscellaneous/functions.html",[10,0.442,17,0.486,18,0.009,19,1.573,20,1.73,30,1.833,31,1.791,32,1.132,34,2.105,78,0.007,79,0.007,86,0.228,217,2.681,374,1.434,376,2.997,390,2.649,404,4.169,464,3.921,1087,3.094,1092,5.284,1094,5.284,1095,5.796,1098,4.255,1102,4.93,1110,4.93,1111,5.691,1348,6.235,1703,4.075,1749,4.93,1761,5.691,2230,4.93,2241,4.5,2244,6.235,2255,4.93,2256,6.838,2285,6.235,2286,6.235,2288,6.235,2334,3.365,2464,4.5,2465,5.583,2466,6.838,2467,5.583,2468,4.93,2469,5.583,2470,5.583,2471,5.583,2472,5.583,2473,7.061]],["title/index.html",[10,0.293,1021,2.983,2203,3.268]],["body/index.html",[18,0.009,57,3.742,78,0.007,79,0.007,504,4.996,1045,6.072,1250,5.474,1362,4.996,2217,4.639,2311,5.474,2356,5.474,2357,5.638,2358,5.474,2474,7.535,2475,7.535,2476,6.199,2477,6.199,2478,6.199,2479,8.905,2480,6.199,2481,5.474,2482,6.199,2483,6.199,2484,6.199,2485,6.199,2486,6.199,2487,6.199,2488,6.199,2489,8.798,2490,6.199,2491,6.199,2492,6.199,2493,4.996,2494,7.535,2495,6.199,2496,6.199,2497,6.199]],["title/modules.html",[144,2.916]],["body/modules.html",[18,0.007,78,0.007,79,0.007,143,4.748,144,3.047,148,4.456,149,4.456,150,4.456,151,4.456,152,4.456,153,4.456,154,4.456,155,4.214,156,3.824,321,4.456,1426,6.158,2420,8.022,2498,9.085,2499,9.085,2500,9.175,2501,7.641]],["title/overview.html",[2502,5.362]],["body/overview.html",[2,0.716,18,0.009,78,0.006,79,0.006,82,1.99,105,3.333,143,6.742,144,1.99,145,2.977,146,3.658,147,3.658,148,6.165,149,6.165,150,5.53,151,4.686,152,5.53,153,4.686,154,5.791,155,5.563,156,5.32,157,3.208,158,2.21,159,2.21,269,5.102,270,4.479,274,4.87,317,3.658,318,3.658,319,3.658,320,3.658,321,5.53,322,4.686,323,4.686,348,1.616,364,5.367,381,3.658,485,0.844,575,5.102,588,4.87,704,5.102,836,5.102,885,3.658,886,3.658,888,3.658,1005,3.658,1006,3.658,1007,3.658,1093,2.615,1138,2.751,1199,3.339,1276,5.367,1294,3.658,1295,3.658,1296,3.658,1408,2.497,1601,5.367,1610,3.658,1611,3.658,1613,3.658,1619,5.102,1791,3.658,1792,3.658,1793,3.658,1867,3.658,1868,3.658,1870,3.658,2168,3.658,2169,3.658,2170,3.658,2210,3.658,2502,3.658,2503,4.143]],["title/properties.html",[11,0.859,2291,3.268]],["body/properties.html",[11,1.103,18,0.009,42,3.295,78,0.008,79,0.008,86,0.221,112,2.127,474,5.529,587,3.803,1035,6.058,2205,6.058,2504,6.861,2505,6.861,2506,6.861,2507,6.861,2508,8.004,2509,6.861,2510,6.861,2511,6.861]],["title/miscellaneous/typealiases.html",[2334,2.23,2512,5.343]],["body/miscellaneous/typealiases.html",[10,0.507,17,0.429,18,0.007,78,0.007,79,0.007,86,0.282,417,6.786,769,4.793,1540,5.751,1564,4.793,1565,5.751,1568,5.162,1822,6.786,1823,6.786,1903,5.162,1904,6.635,1916,6.786,1919,6.786,1930,6.193,2334,3.86,2513,6.405,2514,7.685,2515,6.405,2516,6.405,2517,8.866,2518,8.233,2519,7.685,2520,6.405,2521,6.405]],["title/unit-test.html",[2357,3.57,2493,3.845]],["body/unit-test.html",[5,0.121,18,0.008,21,2.242,78,0.008,79,0.008,2217,5.282,2220,6.233,2289,6.233,2290,6.233,2357,5.282,2464,5.689,2493,5.689,2522,7.059,2523,7.059]],["title/classes/user1615673396368.html",[0,0.228,2250,3.578]],["body/classes/user1615673396368.html",[0,0.274,2,0.923,3,0.137,4,0.137,5,0.091,8,3.409,10,0.423,15,1.889,17,0.383,18,0.009,23,0.525,30,1.498,31,1.464,32,0.926,34,1.721,36,0.211,45,0.137,46,2.241,78,0.007,79,0.007,87,0.867,91,2.606,112,1.655,187,2.828,191,3.316,217,2.027,227,1.469,290,3.128,292,1.734,390,1.738,445,2.652,456,3.996,528,2.565,587,2.96,811,3.218,1134,4.304,1332,4.304,1483,4.715,2248,6.113,2249,4.304,2250,5.531,2481,6.697,2524,7.585,2525,7.585,2526,5.34,2527,8.62,2528,5.34,2529,5.34,2530,5.34,2531,4.715,2532,4.715,2533,4.715,2534,4.715,2535,4.715,2536,4.715,2537,6.864,2538,5.34,2539,5.34,2540,5.34,2541,5.34,2542,5.34]],["title/miscellaneous/variables.html",[2334,2.23,2543,4.718]],["body/miscellaneous/variables.html",[5,0.076,10,0.229,17,0.415,18,0.009,19,2.435,20,2.748,21,1.717,46,2.301,47,4.263,49,3.576,59,1.916,72,1.48,73,3.918,75,1.61,78,0.004,79,0.004,86,0.268,91,1.975,105,2.23,111,1.265,122,1.341,131,1.684,187,1.804,191,2.864,201,2.325,217,2.052,227,1.221,290,1.83,292,0.659,339,3.576,374,1.325,376,2.781,390,0.939,397,2.547,412,3.32,442,2.325,445,1.433,449,1.225,455,2.75,456,4.046,521,2.674,603,1.665,633,1.665,807,3.116,811,1.738,855,3.576,856,4.046,942,2.325,955,2.547,973,1.599,982,1.665,1024,5.807,1025,3.32,1094,2.159,1095,3.32,1134,2.325,1139,2.026,1195,2.801,1233,2.159,1332,2.325,1379,1.738,1432,3.32,1477,4.046,1488,3.918,1549,4.046,1550,4.357,1707,2.674,1831,2.159,1930,3.576,2046,3.32,2221,2.547,2223,2.547,2225,2.547,2226,3.918,2227,2.547,2232,2.547,2233,5.359,2235,3.918,2236,3.918,2237,2.547,2238,3.918,2239,2.547,2240,3.918,2241,2.325,2242,3.918,2243,3.918,2246,2.547,2248,2.325,2249,4.357,2251,2.547,2252,3.918,2253,3.918,2254,3.918,2257,2.547,2280,2.547,2281,3.918,2282,2.547,2334,1.738,2466,2.547,2468,2.547,2531,2.547,2532,2.547,2533,2.547,2534,2.547,2535,2.547,2536,2.547,2543,2.547,2544,2.885,2545,6.552,2546,4.437,2547,2.885,2548,4.437,2549,2.885,2550,2.885,2551,4.437,2552,2.885,2553,2.885,2554,2.885,2555,2.885,2556,6.552,2557,2.885,2558,2.885,2559,2.885,2560,2.885,2561,5.406,2562,4.437,2563,2.885,2564,2.885,2565,2.885,2566,2.885,2567,4.437,2568,4.437,2569,4.437,2570,2.885,2571,2.885,2572,2.885,2573,2.885,2574,6.552,2575,2.885,2576,2.885,2577,2.885,2578,5.406,2579,2.885,2580,2.885,2581,2.885,2582,2.885,2583,2.885,2584,2.885,2585,2.885,2586,2.885,2587,2.885,2588,2.885,2589,4.437,2590,4.437,2591,2.885,2592,4.437,2593,2.885,2594,2.885,2595,2.885,2596,2.885,2597,2.885,2598,2.885,2599,2.885,2600,2.885,2601,4.437,2602,2.885,2603,2.885,2604,4.437,2605,2.885,2606,2.885,2607,2.885,2608,2.885,2609,2.885,2610,2.885,2611,2.885,2612,2.885,2613,2.885,2614,2.885,2615,2.885,2616,2.885,2617,2.885,2618,2.885,2619,6.552,2620,2.885,2621,2.885,2622,4.437,2623,2.885,2624,2.885,2625,2.885,2626,2.885,2627,2.885,2628,2.885,2629,4.437,2630,2.885,2631,2.885,2632,2.885,2633,2.885,2634,2.885,2635,2.885,2636,2.885,2637,2.885,2638,2.885]]],"invertedIndex":[["",{"_index":18,"title":{},"body":{"classes/AllExceptionFilter.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"entities/ChatEntity.html":{},"entities/ChatMessageEntity.html":{},"injectables/ChatMessagesService.html":{},"entities/ChatParticipantEntity.html":{},"injectables/ChatParticipantsService.html":{},"classes/ChatReadMessageDto.html":{},"classes/ChatReadMessageResponseDto.html":{},"classes/ChatReceiveMessageDto.html":{},"controllers/ChatsController.html":{},"classes/ChatsGateway.html":{},"modules/ChatsModule.html":{},"injectables/ChatsService.html":{},"modules/ConfigModule.html":{},"injectables/ConfigService.html":{},"classes/ConfirmationEmailDto.html":{},"classes/CreateChatDto.html":{},"classes/CreateChatMessageDto.html":{},"classes/CreateFileDto.html":{},"interfaces/CreateMockFileReturn.html":{},"classes/CreateNotificationDto.html":{},"classes/CreateProfileDto.html":{},"classes/CreateUserDto.html":{},"classes/CreateUserNotificationTokenDto.html":{},"classes/CredentialsDto.html":{},"modules/DatabaseModule.html":{},"classes/DeleteUserNotificationTokenDto.html":{},"classes/DownloadFileDto.html":{},"entities/FileEntity.html":{},"classes/FileEntityPreview.html":{},"injectables/FileValidationPipe.html":{},"controllers/FilesController.html":{},"modules/FilesModule.html":{},"injectables/FilesService.html":{},"interfaces/FindManyBracketsOptions.html":{},"classes/FindManyOptionsDto.html":{},"classes/FindOneOptionsDto.html":{},"classes/HttpExceptionFilter.html":{},"classes/ID.html":{},"classes/JwtAccessTokenPayloadDto.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtRefreshGuard.html":{},"classes/JwtRefreshTokenDto.html":{},"classes/JwtRefreshTokenPayloadDto.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"classes/JwtTokensDto.html":{},"modules/MultipartModule.html":{},"interfaces/MultipartModuleAsyncOptions.html":{},"interfaces/MultipartOptionsFactory.html":{},"entities/NotificationEntity.html":{},"controllers/NotificationsController.html":{},"modules/NotificationsModule.html":{},"injectables/NotificationsService.html":{},"classes/PaginationChatMessagesDto.html":{},"classes/PaginationChatParticipantsDto.html":{},"classes/PaginationChatsDto.html":{},"classes/PaginationFilesDto.html":{},"classes/PaginationNotificationsDto.html":{},"classes/PaginationUserNotificationTokensDto.html":{},"classes/PaginationUsersDto.html":{},"classes/ResetPasswordDto.html":{},"interfaces/Response.html":{},"classes/SelectChatMessagesDto.html":{},"classes/SelectChatsDto.html":{},"classes/SelectFileDto.html":{},"classes/SelectFilesDto.html":{},"classes/SelectNotificationsDto.html":{},"classes/SelectProfileDto.html":{},"classes/SelectUserDto.html":{},"classes/SelectUserNotificationTokenDto.html":{},"classes/SelectUserNotificationTokensDto.html":{},"classes/SelectUsersDto.html":{},"modules/SendMailModule.html":{},"injectables/SendMailService.html":{},"classes/SendResetPasswordDto.html":{},"classes/SocketsExceptionFilter.html":{},"classes/SocketsGateway.html":{},"modules/SocketsModule.html":{},"injectables/SocketsService.html":{},"injectables/StorageS3Service.html":{},"injectables/StorageService.html":{},"injectables/TransformInterceptor.html":{},"classes/UpdateEmailDto.html":{},"classes/UpdateNotificationDto.html":{},"classes/UpdatePasswordDto.html":{},"classes/UpdateProfileDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserNotificationTokenDto.html":{},"classes/UploadedFile.html":{},"entities/UserEntity.html":{},"entities/UserNotificationTokenEntity.html":{},"controllers/UserNotificationTokensController.html":{},"injectables/UserNotificationTokensService.html":{},"entities/UserRefreshTokenEntity.html":{},"injectables/UserRefreshTokensService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"changelog.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/typealiases.html":{},"unit-test.html":{},"classes/user1615673396368.html":{},"miscellaneous/variables.html":{}}}],["0",{"_index":444,"title":{},"body":{"injectables/AuthService.html":{},"injectables/ChatsService.html":{},"injectables/StorageS3Service.html":{},"injectables/StorageService.html":{},"coverage.html":{}}}],["0.0.1",{"_index":2215,"title":{},"body":{"changelog.html":{}}}],["0.1.0",{"_index":2209,"title":{},"body":{"changelog.html":{}}}],["0.1.1",{"_index":2205,"title":{},"body":{"changelog.html":{},"properties.html":{}}}],["0.1.13",{"_index":2331,"title":{},"body":{"dependencies.html":{}}}],["0.13.2",{"_index":2309,"title":{},"body":{"dependencies.html":{}}}],["0.27.2",{"_index":2305,"title":{},"body":{"dependencies.html":{}}}],["0.3.7",{"_index":2333,"title":{},"body":{"dependencies.html":{}}}],["0.5.1",{"_index":2308,"title":{},"body":{"dependencies.html":{}}}],["0.5.5",{"_index":2293,"title":{},"body":{"dependencies.html":{}}}],["0.6.0",{"_index":2326,"title":{},"body":{"dependencies.html":{}}}],["0/1",{"_index":2234,"title":{},"body":{"coverage.html":{}}}],["0/2",{"_index":2269,"title":{},"body":{"coverage.html":{}}}],["0/3",{"_index":2231,"title":{},"body":{"coverage.html":{}}}],["0/7",{"_index":2287,"title":{},"body":{"coverage.html":{}}}],["05",{"_index":2207,"title":{},"body":{"changelog.html":{}}}],["06",{"_index":2216,"title":{},"body":{"changelog.html":{}}}],["067f2f3e",{"_index":2532,"title":{},"body":{"classes/user1615673396368.html":{},"miscellaneous/variables.html":{}}}],["1",{"_index":122,"title":{},"body":{"controllers/AppController.html":{},"injectables/ChatParticipantsService.html":{},"injectables/ChatsService.html":{},"entities/FileEntity.html":{},"classes/FileEntityPreview.html":{},"injectables/FilesService.html":{},"classes/FindManyOptionsDto.html":{},"classes/SelectChatMessagesDto.html":{},"classes/SelectChatsDto.html":{},"classes/SelectFilesDto.html":{},"classes/SelectNotificationsDto.html":{},"classes/SelectUserNotificationTokensDto.html":{},"classes/SelectUsersDto.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["1).tostring().padstart(2",{"_index":1939,"title":{},"body":{"injectables/StorageS3Service.html":{},"injectables/StorageService.html":{}}}],["1.7.1",{"_index":2292,"title":{},"body":{"dependencies.html":{}}}],["1/1",{"_index":2224,"title":{},"body":{"coverage.html":{}}}],["1/2",{"_index":2245,"title":{},"body":{"coverage.html":{}}}],["1/8",{"_index":2265,"title":{},"body":{"coverage.html":{}}}],["10",{"_index":442,"title":{},"body":{"injectables/AuthService.html":{},"injectables/FilesService.html":{},"miscellaneous/variables.html":{}}}],["10/10",{"_index":2266,"title":{},"body":{"coverage.html":{}}}],["100",{"_index":2221,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["100).tostring",{"_index":2600,"title":{},"body":{"miscellaneous/variables.html":{}}}],["1024",{"_index":1148,"title":{},"body":{"classes/CreateUserNotificationTokenDto.html":{},"classes/DeleteUserNotificationTokenDto.html":{}}}],["11",{"_index":2210,"title":{},"body":{"changelog.html":{},"overview.html":{}}}],["11.0.0",{"_index":2321,"title":{},"body":{"dependencies.html":{}}}],["12",{"_index":2264,"title":{},"body":{"coverage.html":{}}}],["12/12",{"_index":2258,"title":{},"body":{"coverage.html":{}}}],["12/17",{"_index":2275,"title":{},"body":{"coverage.html":{}}}],["123456",{"_index":1061,"title":{},"body":{"classes/ConfirmationEmailDto.html":{},"classes/ResetPasswordDto.html":{},"classes/SendResetPasswordDto.html":{}}}],["13/13",{"_index":2267,"title":{},"body":{"coverage.html":{}}}],["149",{"_index":2039,"title":{},"body":{"entities/UserEntity.html":{},"entities/UserRefreshTokenEntity.html":{}}}],["15",{"_index":2442,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["15/19",{"_index":2260,"title":{},"body":{"coverage.html":{}}}],["16.0.1",{"_index":2313,"title":{},"body":{"dependencies.html":{}}}],["2",{"_index":124,"title":{},"body":{"controllers/AppController.html":{}}}],["2.0.0",{"_index":2307,"title":{},"body":{"dependencies.html":{}}}],["2.0.1",{"_index":2300,"title":{},"body":{"dependencies.html":{}}}],["2.1168.0",{"_index":2303,"title":{},"body":{"dependencies.html":{}}}],["2/2",{"_index":2222,"title":{},"body":{"coverage.html":{}}}],["20",{"_index":381,"title":{},"body":{"injectables/AuthService.html":{},"overview.html":{}}}],["2022",{"_index":2206,"title":{},"body":{"changelog.html":{}}}],["24",{"_index":2433,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["256",{"_index":1202,"title":{},"body":{"entities/FileEntity.html":{},"classes/FileEntityPreview.html":{},"entities/NotificationEntity.html":{},"entities/UserNotificationTokenEntity.html":{}}}],["256})@column({type",{"_index":1581,"title":{},"body":{"entities/NotificationEntity.html":{},"entities/UserNotificationTokenEntity.html":{}}}],["27",{"_index":2208,"title":{},"body":{"changelog.html":{}}}],["3/3",{"_index":2229,"title":{},"body":{"coverage.html":{}}}],["31",{"_index":127,"title":{},"body":{"controllers/AppController.html":{}}}],["32",{"_index":125,"title":{},"body":{"controllers/AppController.html":{}}}],["320",{"_index":1135,"title":{},"body":{"classes/CreateUserDto.html":{},"entities/UserEntity.html":{}}}],["357fa5484137ddfd5a5b:32e0569e0c7e1ac0fd902a3db866904098e08cf1e1a1e8cd7fa8e5941b7f7c46866a9d577ece5778a32ce4b2c812e547607d111da263d51d63f9ba5135a3a421",{"_index":2531,"title":{},"body":{"classes/user1615673396368.html":{},"miscellaneous/variables.html":{}}}],["4.0.0",{"_index":2327,"title":{},"body":{"dependencies.html":{}}}],["4.0.1",{"_index":2306,"title":{},"body":{"dependencies.html":{}}}],["4.1.0",{"_index":2315,"title":{},"body":{"dependencies.html":{}}}],["4.7.7",{"_index":2323,"title":{},"body":{"dependencies.html":{}}}],["4/4",{"_index":2261,"title":{},"body":{"coverage.html":{}}}],["4029",{"_index":2534,"title":{},"body":{"classes/user1615673396368.html":{},"miscellaneous/variables.html":{}}}],["5",{"_index":1408,"title":{},"body":{"classes/FindManyOptionsDto.html":{},"classes/SelectChatMessagesDto.html":{},"classes/SelectChatsDto.html":{},"classes/SelectFilesDto.html":{},"classes/SelectNotificationsDto.html":{},"classes/SelectUserNotificationTokensDto.html":{},"classes/SelectUsersDto.html":{},"overview.html":{}}}],["5.2.0",{"_index":2320,"title":{},"body":{"dependencies.html":{}}}],["5.2.1",{"_index":2298,"title":{},"body":{"dependencies.html":{}}}],["5.4.0",{"_index":2318,"title":{},"body":{"dependencies.html":{}}}],["5/5",{"_index":2247,"title":{},"body":{"coverage.html":{}}}],["5/6",{"_index":2273,"title":{},"body":{"coverage.html":{}}}],["50",{"_index":1406,"title":{},"body":{"classes/FindManyOptionsDto.html":{},"classes/SelectChatMessagesDto.html":{},"classes/SelectChatsDto.html":{},"classes/SelectFilesDto.html":{},"classes/SelectNotificationsDto.html":{},"classes/SelectUserNotificationTokensDto.html":{},"classes/SelectUsersDto.html":{},"coverage.html":{}}}],["55",{"_index":2503,"title":{},"body":{"overview.html":{}}}],["5e6",{"_index":2590,"title":{},"body":{"miscellaneous/variables.html":{}}}],["6",{"_index":380,"title":{},"body":{"injectables/AuthService.html":{},"classes/ConfirmationEmailDto.html":{},"classes/ResetPasswordDto.html":{},"classes/SendResetPasswordDto.html":{}}}],["6.7.7",{"_index":2325,"title":{},"body":{"dependencies.html":{}}}],["6/6",{"_index":2262,"title":{},"body":{"coverage.html":{}}}],["6/8",{"_index":2271,"title":{},"body":{"coverage.html":{}}}],["60000",{"_index":557,"title":{},"body":{"entities/ChatMessageEntity.html":{}}}],["64",{"_index":1139,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/UpdateEmailDto.html":{},"classes/UpdatePasswordDto.html":{},"classes/UpdateProfileDto.html":{},"miscellaneous/variables.html":{}}}],["6e4",{"_index":574,"title":{},"body":{"entities/ChatMessageEntity.html":{}}}],["7",{"_index":1199,"title":{},"body":{"entities/FileEntity.html":{},"classes/FileEntityPreview.html":{},"overview.html":{}}}],["7.0.3",{"_index":2312,"title":{},"body":{"dependencies.html":{}}}],["7.1.0",{"_index":2317,"title":{},"body":{"dependencies.html":{}}}],["7.5.5",{"_index":2332,"title":{},"body":{"dependencies.html":{}}}],["7/7",{"_index":2228,"title":{},"body":{"coverage.html":{}}}],["7/9",{"_index":2284,"title":{},"body":{"coverage.html":{}}}],["70",{"_index":2274,"title":{},"body":{"coverage.html":{}}}],["75",{"_index":2270,"title":{},"body":{"coverage.html":{}}}],["77",{"_index":2283,"title":{},"body":{"coverage.html":{}}}],["78",{"_index":2259,"title":{},"body":{"coverage.html":{}}}],["7bit",{"_index":1106,"title":{},"body":{"interfaces/CreateMockFileReturn.html":{}}}],["8",{"_index":1138,"title":{},"body":{"classes/CreateUserDto.html":{},"injectables/StorageService.html":{},"classes/UpdateEmailDto.html":{},"classes/UpdatePasswordDto.html":{},"classes/UpdateProfileDto.html":{},"overview.html":{}}}],["8''${title",{"_index":1354,"title":{},"body":{"injectables/FilesService.html":{}}}],["8.0.1",{"_index":2295,"title":{},"body":{"dependencies.html":{}}}],["8.1.1",{"_index":2299,"title":{},"body":{"dependencies.html":{}}}],["8.1.4",{"_index":2301,"title":{},"body":{"dependencies.html":{}}}],["8.2.2",{"_index":2296,"title":{},"body":{"dependencies.html":{}}}],["8.4.7",{"_index":2294,"title":{},"body":{"dependencies.html":{}}}],["8.7.3",{"_index":2329,"title":{},"body":{"dependencies.html":{}}}],["8/8",{"_index":2268,"title":{},"body":{"coverage.html":{}}}],["8/9",{"_index":2277,"title":{},"body":{"coverage.html":{}}}],["83",{"_index":2272,"title":{},"body":{"coverage.html":{}}}],["88",{"_index":2276,"title":{},"body":{"coverage.html":{}}}],["9/10",{"_index":2279,"title":{},"body":{"coverage.html":{}}}],["9/9",{"_index":2263,"title":{},"body":{"coverage.html":{}}}],["90",{"_index":2278,"title":{},"body":{"coverage.html":{}}}],["93d6",{"_index":2535,"title":{},"body":{"classes/user1615673396368.html":{},"miscellaneous/variables.html":{}}}],["__dirname",{"_index":1180,"title":{},"body":{"modules/DatabaseModule.html":{},"modules/SendMailModule.html":{}}}],["_data",{"_index":2613,"title":{},"body":{"miscellaneous/variables.html":{}}}],["_err",{"_index":1479,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"injectables/JwtRefreshGuard.html":{}}}],["absolute",{"_index":1037,"title":{},"body":{"injectables/ConfigService.html":{}}}],["acc",{"_index":942,"title":{},"body":{"injectables/ChatsService.html":{},"injectables/NotificationsService.html":{},"miscellaneous/variables.html":{}}}],["acc.concat(current.notificationtokens.map((el",{"_index":1684,"title":{},"body":{"injectables/NotificationsService.html":{}}}],["acc.concat(messages",{"_index":1695,"title":{},"body":{"injectables/NotificationsService.html":{}}}],["acc.concat(this.selectoneids(current",{"_index":1898,"title":{},"body":{"injectables/SocketsService.html":{}}}],["acc[curr.id",{"_index":941,"title":{},"body":{"injectables/ChatsService.html":{}}}],["acc[key",{"_index":2611,"title":{},"body":{"miscellaneous/variables.html":{}}}],["accept",{"_index":1349,"title":{},"body":{"injectables/FilesService.html":{}}}],["accepted",{"_index":2424,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["accessors",{"_index":1383,"title":{},"body":{"classes/FindManyOptionsDto.html":{},"classes/FindOneOptionsDto.html":{},"classes/SelectChatsDto.html":{},"classes/SelectFilesDto.html":{},"classes/SelectNotificationsDto.html":{},"classes/SelectUsersDto.html":{}}}],["account",{"_index":2410,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["activated",{"_index":2463,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["active",{"_index":974,"title":{},"body":{"injectables/ChatsService.html":{},"classes/SelectChatsDto.html":{}}}],["activechatid",{"_index":952,"title":{},"body":{"injectables/ChatsService.html":{},"classes/SelectChatsDto.html":{}}}],["adapter",{"_index":1811,"title":{},"body":{"modules/SendMailModule.html":{}}}],["add",{"_index":2191,"title":{},"body":{"injectables/UsersService.html":{}}}],["addone",{"_index":1878,"title":{},"body":{"injectables/SocketsService.html":{}}}],["addone(userid",{"_index":1882,"title":{},"body":{"injectables/SocketsService.html":{}}}],["addselect('count(chatentity_messages.id)::int",{"_index":928,"title":{},"body":{"injectables/ChatsService.html":{}}}],["admin",{"_index":1655,"title":{},"body":{"injectables/NotificationsService.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{}}}],["admin/messaging",{"_index":1653,"title":{},"body":{"injectables/NotificationsService.html":{}}}],["admin@gmail.com",{"_index":1134,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/user1615673396368.html":{},"miscellaneous/variables.html":{}}}],["again",{"_index":2418,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["agent",{"_index":2412,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["aliases",{"_index":2513,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["allexceptionfilter",{"_index":1,"title":{"classes/AllExceptionFilter.html":{}},"body":{"classes/AllExceptionFilter.html":{},"coverage.html":{}}}],["allowedtypes",{"_index":1236,"title":{},"body":{"injectables/FileValidationPipe.html":{}}}],["amount",{"_index":2429,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["andwhere",{"_index":663,"title":{},"body":{"injectables/ChatMessagesService.html":{}}}],["andwhere('chatparticipantentity.userid",{"_index":743,"title":{},"body":{"injectables/ChatParticipantsService.html":{}}}],["apibearerauth",{"_index":260,"title":{},"body":{"controllers/AuthController.html":{},"controllers/ChatsController.html":{},"controllers/FilesController.html":{},"controllers/NotificationsController.html":{},"controllers/UserNotificationTokensController.html":{},"controllers/UsersController.html":{}}}],["apibearerauth()(target",{"_index":2633,"title":{},"body":{"miscellaneous/variables.html":{}}}],["apibody",{"_index":261,"title":{},"body":{"controllers/AuthController.html":{},"controllers/FilesController.html":{}}}],["apiconsumes",{"_index":1271,"title":{},"body":{"controllers/FilesController.html":{}}}],["apiconsumes('multipart/form",{"_index":1280,"title":{},"body":{"controllers/FilesController.html":{}}}],["apiextramodels",{"_index":805,"title":{},"body":{"controllers/ChatsController.html":{}}}],["apihideproperty",{"_index":520,"title":{},"body":{"entities/ChatEntity.html":{},"entities/ChatMessageEntity.html":{},"entities/ChatParticipantEntity.html":{},"entities/FileEntity.html":{},"classes/FileEntityPreview.html":{},"entities/NotificationEntity.html":{},"entities/UserEntity.html":{},"entities/UserNotificationTokenEntity.html":{},"entities/UserRefreshTokenEntity.html":{}}}],["apihideproperty()@column({type",{"_index":2038,"title":{},"body":{"entities/UserEntity.html":{}}}],["apihideproperty()@manytoone(undefined",{"_index":502,"title":{},"body":{"entities/ChatEntity.html":{},"entities/UserRefreshTokenEntity.html":{}}}],["apihideproperty()@onetomany(undefined",{"_index":508,"title":{},"body":{"entities/ChatEntity.html":{},"entities/UserEntity.html":{}}}],["apihideproperty()@transform",{"_index":513,"title":{},"body":{"entities/ChatEntity.html":{}}}],["apioperation",{"_index":2627,"title":{},"body":{"miscellaneous/variables.html":{}}}],["apiparam",{"_index":1272,"title":{},"body":{"controllers/FilesController.html":{}}}],["apiproperty",{"_index":511,"title":{},"body":{"entities/ChatEntity.html":{},"entities/ChatMessageEntity.html":{},"entities/ChatParticipantEntity.html":{},"classes/ChatReadMessageDto.html":{},"classes/ChatReadMessageResponseDto.html":{},"classes/ChatReceiveMessageDto.html":{},"classes/ConfirmationEmailDto.html":{},"classes/CreateChatDto.html":{},"classes/CreateChatMessageDto.html":{},"classes/CreateFileDto.html":{},"classes/CreateNotificationDto.html":{},"classes/CreateUserDto.html":{},"classes/CreateUserNotificationTokenDto.html":{},"entities/FileEntity.html":{},"classes/FileEntityPreview.html":{},"classes/FindManyOptionsDto.html":{},"classes/FindOneOptionsDto.html":{},"classes/ID.html":{},"classes/JwtAccessTokenPayloadDto.html":{},"classes/JwtRefreshTokenDto.html":{},"classes/JwtRefreshTokenPayloadDto.html":{},"classes/JwtTokensDto.html":{},"entities/NotificationEntity.html":{},"classes/ResetPasswordDto.html":{},"classes/SelectChatMessagesDto.html":{},"classes/SelectFilesDto.html":{},"classes/SelectNotificationsDto.html":{},"classes/SendResetPasswordDto.html":{},"classes/UpdateEmailDto.html":{},"classes/UpdatePasswordDto.html":{},"classes/UpdateProfileDto.html":{},"entities/UserEntity.html":{},"entities/UserNotificationTokenEntity.html":{},"entities/UserRefreshTokenEntity.html":{}}}],["apiproperty()@column({type",{"_index":693,"title":{},"body":{"entities/ChatParticipantEntity.html":{}}}],["apiproperty({enum",{"_index":552,"title":{},"body":{"entities/ChatMessageEntity.html":{},"entities/NotificationEntity.html":{},"entities/UserEntity.html":{}}}],["apiproperty({maxlength",{"_index":556,"title":{},"body":{"entities/ChatMessageEntity.html":{},"entities/NotificationEntity.html":{},"entities/UserEntity.html":{},"entities/UserNotificationTokenEntity.html":{}}}],["apiproperty({readonly",{"_index":495,"title":{},"body":{"entities/ChatEntity.html":{},"entities/ChatMessageEntity.html":{},"entities/ChatParticipantEntity.html":{},"entities/FileEntity.html":{},"entities/NotificationEntity.html":{},"entities/UserEntity.html":{},"entities/UserNotificationTokenEntity.html":{},"entities/UserRefreshTokenEntity.html":{}}}],["apiproperty({type",{"_index":771,"title":{},"body":{"classes/ChatReadMessageResponseDto.html":{},"classes/ChatReceiveMessageDto.html":{},"classes/FindManyOptionsDto.html":{},"classes/FindOneOptionsDto.html":{},"classes/SelectChatMessagesDto.html":{},"classes/SelectChatsDto.html":{},"classes/SelectFileDto.html":{},"classes/SelectFilesDto.html":{},"classes/SelectNotificationsDto.html":{},"classes/SelectProfileDto.html":{},"classes/SelectUserDto.html":{},"classes/SelectUserNotificationTokenDto.html":{},"classes/SelectUserNotificationTokensDto.html":{},"classes/SelectUsersDto.html":{}}}],["apipropertyoptional",{"_index":1760,"title":{},"body":{"classes/SelectChatsDto.html":{}}}],["apitags",{"_index":95,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/ChatsController.html":{},"controllers/FilesController.html":{},"controllers/NotificationsController.html":{},"controllers/UserNotificationTokensController.html":{},"controllers/UsersController.html":{}}}],["apitags('auth",{"_index":279,"title":{},"body":{"controllers/AuthController.html":{}}}],["apitags('chats",{"_index":813,"title":{},"body":{"controllers/ChatsController.html":{}}}],["apitags('files",{"_index":1278,"title":{},"body":{"controllers/FilesController.html":{}}}],["apitags('notifications",{"_index":1603,"title":{},"body":{"controllers/NotificationsController.html":{}}}],["apitags('status",{"_index":107,"title":{},"body":{"controllers/AppController.html":{}}}],["apitags('users",{"_index":2161,"title":{},"body":{"controllers/UsersController.html":{}}}],["apitags('users/notification",{"_index":2084,"title":{},"body":{"controllers/UserNotificationTokensController.html":{}}}],["app",{"_index":2488,"title":{},"body":{"index.html":{}}}],["app.controller",{"_index":178,"title":{},"body":{"modules/AppModule.html":{}}}],["app_guard",{"_index":168,"title":{},"body":{"modules/AppModule.html":{}}}],["appcontroller",{"_index":81,"title":{"controllers/AppController.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"coverage.html":{}}}],["application",{"_index":1042,"title":{},"body":{"injectables/ConfigService.html":{},"miscellaneous/enumerations.html":{}}}],["appmodule",{"_index":143,"title":{"modules/AppModule.html":{}},"body":{"modules/AppModule.html":{},"modules.html":{},"overview.html":{}}}],["args",{"_index":1572,"title":{},"body":{"interfaces/MultipartModuleAsyncOptions.html":{},"interfaces/MultipartOptionsFactory.html":{}}}],["argumentshost",{"_index":28,"title":{},"body":{"classes/AllExceptionFilter.html":{},"classes/HttpExceptionFilter.html":{},"classes/SocketsExceptionFilter.html":{}}}],["array",{"_index":2567,"title":{},"body":{"miscellaneous/variables.html":{}}}],["array.reduce((result",{"_index":2570,"title":{},"body":{"miscellaneous/variables.html":{}}}],["array_length(array_agg(chatentity_participants.userid",{"_index":1001,"title":{},"body":{"injectables/ChatsService.html":{}}}],["array_length(array_agg(chatparticipantentity.userid",{"_index":745,"title":{},"body":{"injectables/ChatParticipantsService.html":{}}}],["artist",{"_index":2427,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["asc",{"_index":1379,"title":{},"body":{"classes/FindManyOptionsDto.html":{},"classes/SelectChatMessagesDto.html":{},"classes/SelectChatsDto.html":{},"classes/SelectFilesDto.html":{},"classes/SelectNotificationsDto.html":{},"classes/SelectUserNotificationTokensDto.html":{},"classes/SelectUsersDto.html":{},"miscellaneous/variables.html":{}}}],["async",{"_index":187,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/ChatMessagesService.html":{},"injectables/ChatParticipantsService.html":{},"controllers/ChatsController.html":{},"classes/ChatsGateway.html":{},"injectables/ChatsService.html":{},"controllers/FilesController.html":{},"injectables/FilesService.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"modules/MultipartModule.html":{},"controllers/NotificationsController.html":{},"injectables/NotificationsService.html":{},"injectables/SendMailService.html":{},"classes/SocketsGateway.html":{},"injectables/StorageS3Service.html":{},"injectables/StorageService.html":{},"entities/UserEntity.html":{},"controllers/UserNotificationTokensController.html":{},"injectables/UserNotificationTokensService.html":{},"injectables/UserRefreshTokensService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"classes/user1615673396368.html":{},"miscellaneous/variables.html":{}}}],["attachment",{"_index":1343,"title":{},"body":{"injectables/FilesService.html":{}}}],["auth",{"_index":201,"title":{},"body":{"controllers/AuthController.html":{},"modules/SendMailModule.html":{},"miscellaneous/variables.html":{}}}],["auth.constants",{"_index":340,"title":{},"body":{"modules/AuthModule.html":{}}}],["auth.controller",{"_index":341,"title":{},"body":{"modules/AuthModule.html":{}}}],["auth.service",{"_index":275,"title":{},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{}}}],["auth/guards",{"_index":808,"title":{},"body":{"controllers/ChatsController.html":{},"controllers/FilesController.html":{},"controllers/NotificationsController.html":{}}}],["auth_forbidden",{"_index":2370,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["auth_incorrect_confirmation_email_code",{"_index":2372,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["auth_incorrect_credentials",{"_index":2366,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["auth_invalid_refresh_token",{"_index":2367,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["auth_invalid_token",{"_index":2368,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["auth_pass",{"_index":137,"title":{},"body":{"controllers/AppController.html":{},"modules/AuthModule.html":{}}}],["auth_passwords_do_not_match",{"_index":2373,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["auth_unauthorized",{"_index":2369,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["authcontroller",{"_index":199,"title":{"controllers/AuthController.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"coverage.html":{}}}],["authguard",{"_index":1480,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"injectables/JwtRefreshGuard.html":{}}}],["authguard('jwt",{"_index":1484,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"injectables/JwtRefreshGuard.html":{}}}],["authmodule",{"_index":148,"title":{"modules/AuthModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules.html":{},"overview.html":{}}}],["author",{"_index":2510,"title":{},"body":{"properties.html":{}}}],["authservice",{"_index":274,"title":{"injectables/AuthService.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"coverage.html":{},"overview.html":{}}}],["available",{"_index":1426,"title":{},"body":{"classes/FindManyOptionsDto.html":{},"classes/FindOneOptionsDto.html":{},"modules.html":{}}}],["await",{"_index":290,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/ChatMessagesService.html":{},"injectables/ChatParticipantsService.html":{},"controllers/ChatsController.html":{},"classes/ChatsGateway.html":{},"injectables/ChatsService.html":{},"injectables/FilesService.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/NotificationsService.html":{},"classes/SocketsGateway.html":{},"injectables/StorageS3Service.html":{},"injectables/StorageService.html":{},"entities/UserEntity.html":{},"injectables/UserNotificationTokensService.html":{},"injectables/UserRefreshTokensService.html":{},"injectables/UsersService.html":{},"classes/user1615673396368.html":{},"miscellaneous/variables.html":{}}}],["aws",{"_index":1924,"title":{},"body":{"injectables/StorageS3Service.html":{},"dependencies.html":{}}}],["awserror",{"_index":1926,"title":{},"body":{"injectables/StorageS3Service.html":{}}}],["axios",{"_index":2304,"title":{},"body":{"dependencies.html":{}}}],["b2f58ae4f489",{"_index":2536,"title":{},"body":{"classes/user1615673396368.html":{},"miscellaneous/variables.html":{}}}],["b936",{"_index":2533,"title":{},"body":{"classes/user1615673396368.html":{},"miscellaneous/variables.html":{}}}],["badgatewayexception",{"_index":1821,"title":{},"body":{"injectables/SendMailService.html":{}}}],["badrequestexception",{"_index":408,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtRefreshTokenStrategy.html":{}}}],["badrequestexception(errortypeenum.auth_incorrect_confirmation_email_code",{"_index":467,"title":{},"body":{"injectables/AuthService.html":{}}}],["badrequestexception(errortypeenum.auth_incorrect_credentials",{"_index":450,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtRefreshTokenStrategy.html":{}}}],["badrequestexception(errortypeenum.auth_passwords_do_not_match",{"_index":463,"title":{},"body":{"injectables/AuthService.html":{}}}],["badrequestexception(errortypeenum.new_password_and_old_password_cannot_be_same",{"_index":479,"title":{},"body":{"injectables/AuthService.html":{}}}],["bar",{"_index":2587,"title":{},"body":{"miscellaneous/variables.html":{}}}],["based",{"_index":1035,"title":{},"body":{"injectables/ConfigService.html":{},"properties.html":{}}}],["basemessage",{"_index":1635,"title":{},"body":{"injectables/NotificationsService.html":{}}}],["beforeinsert",{"_index":2047,"title":{},"body":{"entities/UserEntity.html":{}}}],["beforeupdate",{"_index":2048,"title":{},"body":{"entities/UserEntity.html":{}}}],["bigint",{"_index":1205,"title":{},"body":{"entities/FileEntity.html":{},"classes/FileEntityPreview.html":{}}}],["binary",{"_index":1086,"title":{},"body":{"classes/CreateFileDto.html":{}}}],["body",{"_index":70,"title":{},"body":{"classes/AllExceptionFilter.html":{},"controllers/AuthController.html":{},"controllers/ChatsController.html":{},"controllers/NotificationsController.html":{},"injectables/StorageS3Service.html":{},"controllers/UserNotificationTokensController.html":{},"controllers/UsersController.html":{}}}],["boolean",{"_index":1047,"title":{},"body":{"injectables/ConfigService.html":{},"classes/DownloadFileDto.html":{},"classes/FindManyOptionsDto.html":{},"classes/FindOneOptionsDto.html":{},"classes/SelectChatMessagesDto.html":{},"classes/SelectChatsDto.html":{},"classes/SelectFileDto.html":{},"classes/SelectFilesDto.html":{},"classes/SelectNotificationsDto.html":{},"classes/SelectProfileDto.html":{},"classes/SelectUserDto.html":{},"classes/SelectUserNotificationTokenDto.html":{},"classes/SelectUserNotificationTokensDto.html":{},"classes/SelectUsersDto.html":{}}}],["bootstrap",{"_index":2256,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["brackets",{"_index":1373,"title":{},"body":{"interfaces/FindManyBracketsOptions.html":{},"classes/SelectChatsDto.html":{},"classes/SelectFilesDto.html":{},"classes/SelectNotificationsDto.html":{}}}],["brackets((qb",{"_index":1764,"title":{},"body":{"classes/SelectChatsDto.html":{},"classes/SelectFilesDto.html":{},"classes/SelectNotificationsDto.html":{}}}],["brackets.interface.ts",{"_index":1371,"title":{},"body":{"interfaces/FindManyBracketsOptions.html":{},"coverage.html":{}}}],["branches",{"_index":2522,"title":{},"body":{"unit-test.html":{}}}],["broodd",{"_index":2511,"title":{},"body":{"properties.html":{}}}],["browse",{"_index":2500,"title":{},"body":{"modules.html":{}}}],["browser",{"_index":2498,"title":{},"body":{"modules.html":{}}}],["bucket",{"_index":1905,"title":{},"body":{"injectables/StorageS3Service.html":{}}}],["buffer",{"_index":439,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/CreateMockFileReturn.html":{}}}],["buffer.from(key",{"_index":2559,"title":{},"body":{"miscellaneous/variables.html":{}}}],["buffer.readuint32be(0x0f",{"_index":441,"title":{},"body":{"injectables/AuthService.html":{}}}],["bullmodule",{"_index":166,"title":{},"body":{"modules/AppModule.html":{}}}],["bullmodule.forrootasync",{"_index":186,"title":{},"body":{"modules/AppModule.html":{}}}],["busboy",{"_index":1978,"title":{},"body":{"injectables/StorageService.html":{}}}],["busboyconfig",{"_index":1954,"title":{},"body":{"injectables/StorageService.html":{}}}],["bytes",{"_index":1351,"title":{},"body":{"injectables/FilesService.html":{}}}],["c6f5ec4",{"_index":2214,"title":{},"body":{"changelog.html":{}}}],["cache",{"_index":329,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"modules/DatabaseModule.html":{},"dependencies.html":{}}}],["cache_auth_prefix",{"_index":339,"title":{},"body":{"modules/AuthModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["cache_manager",{"_index":409,"title":{},"body":{"injectables/AuthService.html":{}}}],["cachecode",{"_index":465,"title":{},"body":{"injectables/AuthService.html":{}}}],["cachemanager",{"_index":366,"title":{},"body":{"injectables/AuthService.html":{}}}],["cachemodule",{"_index":326,"title":{},"body":{"modules/AuthModule.html":{}}}],["cachemodule.registerasync",{"_index":344,"title":{},"body":{"modules/AuthModule.html":{}}}],["cachemoduleoptions",{"_index":327,"title":{},"body":{"modules/AuthModule.html":{}}}],["callhandler",{"_index":1738,"title":{},"body":{"interfaces/Response.html":{},"injectables/TransformInterceptor.html":{}}}],["calling",{"_index":1427,"title":{},"body":{"classes/FindManyOptionsDto.html":{},"classes/FindOneOptionsDto.html":{}}}],["canceled",{"_index":2426,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["cascade",{"_index":516,"title":{},"body":{"entities/ChatEntity.html":{},"entities/ChatMessageEntity.html":{},"entities/ChatParticipantEntity.html":{},"entities/FileEntity.html":{},"classes/FileEntityPreview.html":{},"entities/NotificationEntity.html":{},"entities/UserEntity.html":{},"entities/UserNotificationTokenEntity.html":{},"entities/UserRefreshTokenEntity.html":{}}}],["case",{"_index":978,"title":{},"body":{"injectables/ChatsService.html":{}}}],["catch",{"_index":16,"title":{},"body":{"classes/AllExceptionFilter.html":{},"injectables/AuthService.html":{},"injectables/ChatMessagesService.html":{},"injectables/ChatParticipantsService.html":{},"injectables/ChatsService.html":{},"injectables/ConfigService.html":{},"injectables/FilesService.html":{},"classes/HttpExceptionFilter.html":{},"injectables/NotificationsService.html":{},"classes/SocketsExceptionFilter.html":{},"classes/SocketsGateway.html":{},"injectables/StorageS3Service.html":{},"injectables/StorageService.html":{},"injectables/UserNotificationTokensService.html":{},"injectables/UserRefreshTokensService.html":{},"injectables/UsersService.html":{}}}],["catch((err",{"_index":728,"title":{},"body":{"injectables/ChatParticipantsService.html":{}}}],["catch(exception",{"_index":25,"title":{},"body":{"classes/AllExceptionFilter.html":{},"classes/HttpExceptionFilter.html":{},"classes/SocketsExceptionFilter.html":{}}}],["catch(httpexception",{"_index":1462,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["cause",{"_index":2058,"title":{},"body":{"entities/UserEntity.html":{}}}],["changelog",{"_index":2204,"title":{"changelog.html":{}},"body":{}}],["chat",{"_index":509,"title":{},"body":{"entities/ChatEntity.html":{},"entities/ChatMessageEntity.html":{},"injectables/ChatMessagesService.html":{},"entities/ChatParticipantEntity.html":{},"classes/ChatReadMessageDto.html":{},"classes/ChatReadMessageResponseDto.html":{},"classes/ChatReceiveMessageDto.html":{},"controllers/ChatsController.html":{},"classes/ChatsGateway.html":{},"classes/CreateChatMessageDto.html":{},"classes/PaginationChatMessagesDto.html":{},"classes/PaginationChatParticipantsDto.html":{},"classes/SelectChatMessagesDto.html":{},"classes/SelectChatsDto.html":{},"coverage.html":{}}}],["chat.dto.ts",{"_index":1068,"title":{},"body":{"classes/CreateChatDto.html":{},"coverage.html":{}}}],["chat.dto.ts:15",{"_index":1070,"title":{},"body":{"classes/CreateChatDto.html":{}}}],["chat.entity",{"_index":569,"title":{},"body":{"entities/ChatMessageEntity.html":{},"entities/ChatParticipantEntity.html":{}}}],["chat.id",{"_index":668,"title":{},"body":{"injectables/ChatMessagesService.html":{},"controllers/ChatsController.html":{}}}],["chat_already_exist",{"_index":2389,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["chat_already_exists",{"_index":2390,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["chat_message_already_exist",{"_index":2393,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["chat_message_not_found",{"_index":2395,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["chat_messages_not_found",{"_index":2394,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["chat_not_found",{"_index":2392,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["chat_participant_already_exist",{"_index":2396,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["chat_participant_not_found",{"_index":2398,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["chat_participants_not_found",{"_index":2397,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["chat_read_message",{"_index":2352,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["chat_receive_message",{"_index":2353,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["chat_send_message",{"_index":2351,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["chatconditions",{"_index":802,"title":{},"body":{"controllers/ChatsController.html":{}}}],["chatentity",{"_index":484,"title":{"entities/ChatEntity.html":{}},"body":{"entities/ChatEntity.html":{},"entities/ChatMessageEntity.html":{},"injectables/ChatMessagesService.html":{},"entities/ChatParticipantEntity.html":{},"injectables/ChatParticipantsService.html":{},"classes/ChatReadMessageDto.html":{},"classes/ChatReadMessageResponseDto.html":{},"classes/ChatReceiveMessageDto.html":{},"controllers/ChatsController.html":{},"modules/ChatsModule.html":{},"injectables/ChatsService.html":{},"classes/CreateChatMessageDto.html":{},"classes/PaginationChatsDto.html":{},"classes/SelectChatsDto.html":{},"coverage.html":{}}}],["chatentity\".\"id",{"_index":979,"title":{},"body":{"injectables/ChatsService.html":{}}}],["chatentity.messages",{"_index":930,"title":{},"body":{"injectables/ChatsService.html":{}}}],["chatentity.participant",{"_index":965,"title":{},"body":{"injectables/ChatsService.html":{}}}],["chatentity.participants",{"_index":960,"title":{},"body":{"injectables/ChatsService.html":{}}}],["chatentity_lastmessage",{"_index":957,"title":{},"body":{"injectables/ChatsService.html":{}}}],["chatentity_messages",{"_index":931,"title":{},"body":{"injectables/ChatsService.html":{}}}],["chatentity_messages.ownerid",{"_index":933,"title":{},"body":{"injectables/ChatsService.html":{}}}],["chatentity_messages.status",{"_index":932,"title":{},"body":{"injectables/ChatsService.html":{}}}],["chatentity_participant_other",{"_index":966,"title":{},"body":{"injectables/ChatsService.html":{}}}],["chatentity_participant_other.userid",{"_index":967,"title":{},"body":{"injectables/ChatsService.html":{}}}],["chatentity_participant_other_user",{"_index":969,"title":{},"body":{"injectables/ChatsService.html":{}}}],["chatentity_participant_other_user.cover",{"_index":971,"title":{},"body":{"injectables/ChatsService.html":{}}}],["chatentity_participant_other_user_cover",{"_index":972,"title":{},"body":{"injectables/ChatsService.html":{}}}],["chatentity_participant_owner",{"_index":961,"title":{},"body":{"injectables/ChatsService.html":{}}}],["chatentity_participant_owner.user",{"_index":992,"title":{},"body":{"injectables/ChatsService.html":{}}}],["chatentity_participant_owner.userid",{"_index":962,"title":{},"body":{"injectables/ChatsService.html":{}}}],["chatentity_participant_owner_user",{"_index":993,"title":{},"body":{"injectables/ChatsService.html":{}}}],["chatentity_participant_owner_user.cover",{"_index":994,"title":{},"body":{"injectables/ChatsService.html":{}}}],["chatentity_participant_owner_user_cover",{"_index":995,"title":{},"body":{"injectables/ChatsService.html":{}}}],["chatentity_participants",{"_index":999,"title":{},"body":{"injectables/ChatsService.html":{}}}],["chatentity_participants.userid",{"_index":1000,"title":{},"body":{"injectables/ChatsService.html":{}}}],["chatentity_relation_field",{"_index":925,"title":{},"body":{"injectables/ChatsService.html":{}}}],["chatentityrepository",{"_index":901,"title":{},"body":{"injectables/ChatsService.html":{}}}],["chatid",{"_index":691,"title":{},"body":{"entities/ChatParticipantEntity.html":{}}}],["chatmessageentity",{"_index":531,"title":{"entities/ChatMessageEntity.html":{}},"body":{"entities/ChatEntity.html":{},"entities/ChatMessageEntity.html":{},"injectables/ChatMessagesService.html":{},"classes/ChatReadMessageDto.html":{},"classes/ChatReadMessageResponseDto.html":{},"classes/ChatReceiveMessageDto.html":{},"modules/ChatsModule.html":{},"classes/CreateChatMessageDto.html":{},"classes/PaginationChatMessagesDto.html":{},"classes/SelectChatMessagesDto.html":{},"coverage.html":{}}}],["chatmessageentity.chatid",{"_index":679,"title":{},"body":{"injectables/ChatMessagesService.html":{}}}],["chatmessageentity_owner",{"_index":656,"title":{},"body":{"injectables/ChatMessagesService.html":{}}}],["chatmessageentity_owner_cover",{"_index":658,"title":{},"body":{"injectables/ChatMessagesService.html":{}}}],["chatmessageentity_relation_field",{"_index":645,"title":{},"body":{"injectables/ChatMessagesService.html":{}}}],["chatmessageentity_reply",{"_index":647,"title":{},"body":{"injectables/ChatMessagesService.html":{}}}],["chatmessageentity_reply_file",{"_index":649,"title":{},"body":{"injectables/ChatMessagesService.html":{}}}],["chatmessageentity_reply_owner",{"_index":651,"title":{},"body":{"injectables/ChatMessagesService.html":{}}}],["chatmessageentity_reply_owner.cover",{"_index":653,"title":{},"body":{"injectables/ChatMessagesService.html":{}}}],["chatmessageentity_reply_owner_cover",{"_index":654,"title":{},"body":{"injectables/ChatMessagesService.html":{}}}],["chatmessageentityrepository",{"_index":590,"title":{},"body":{"injectables/ChatMessagesService.html":{}}}],["chatmessagesservice",{"_index":575,"title":{"injectables/ChatMessagesService.html":{}},"body":{"injectables/ChatMessagesService.html":{},"controllers/ChatsController.html":{},"classes/ChatsGateway.html":{},"modules/ChatsModule.html":{},"coverage.html":{},"overview.html":{}}}],["chatmessagestatusenum",{"_index":551,"title":{},"body":{"entities/ChatMessageEntity.html":{},"injectables/ChatMessagesService.html":{},"classes/ChatsGateway.html":{},"injectables/ChatsService.html":{},"miscellaneous/enumerations.html":{}}}],["chatmessagestatusenum.read",{"_index":669,"title":{},"body":{"injectables/ChatMessagesService.html":{},"classes/ChatsGateway.html":{}}}],["chatmessagestatusenum.sent",{"_index":572,"title":{},"body":{"entities/ChatMessageEntity.html":{},"injectables/ChatMessagesService.html":{},"injectables/ChatsService.html":{}}}],["chatmessagetypeenum",{"_index":562,"title":{},"body":{"entities/ChatMessageEntity.html":{},"classes/ChatReceiveMessageDto.html":{},"classes/CreateChatMessageDto.html":{},"miscellaneous/enumerations.html":{}}}],["chatmessagetypeenum.file",{"_index":786,"title":{},"body":{"classes/ChatReceiveMessageDto.html":{},"classes/CreateChatMessageDto.html":{}}}],["chatmessagetypeenum.text",{"_index":571,"title":{},"body":{"entities/ChatMessageEntity.html":{},"classes/ChatReceiveMessageDto.html":{},"classes/CreateChatMessageDto.html":{}}}],["chatparticipantentity",{"_index":529,"title":{"entities/ChatParticipantEntity.html":{}},"body":{"entities/ChatEntity.html":{},"injectables/ChatMessagesService.html":{},"entities/ChatParticipantEntity.html":{},"injectables/ChatParticipantsService.html":{},"modules/ChatsModule.html":{},"classes/PaginationChatParticipantsDto.html":{},"coverage.html":{}}}],["chatparticipantentity.chatid",{"_index":678,"title":{},"body":{"injectables/ChatMessagesService.html":{}}}],["chatparticipantentity.userid",{"_index":680,"title":{},"body":{"injectables/ChatMessagesService.html":{}}}],["chatparticipantentity_relation_field",{"_index":734,"title":{},"body":{"injectables/ChatParticipantsService.html":{}}}],["chatparticipantentityrepository",{"_index":710,"title":{},"body":{"injectables/ChatParticipantsService.html":{}}}],["chatparticipantsservice",{"_index":704,"title":{"injectables/ChatParticipantsService.html":{}},"body":{"injectables/ChatParticipantsService.html":{},"controllers/ChatsController.html":{},"classes/ChatsGateway.html":{},"modules/ChatsModule.html":{},"coverage.html":{},"overview.html":{}}}],["chatreadmessagedto",{"_index":752,"title":{"classes/ChatReadMessageDto.html":{}},"body":{"classes/ChatReadMessageDto.html":{},"classes/ChatReadMessageResponseDto.html":{},"controllers/ChatsController.html":{},"classes/ChatsGateway.html":{},"coverage.html":{}}}],["chatreadmessageresponsedto",{"_index":766,"title":{"classes/ChatReadMessageResponseDto.html":{}},"body":{"classes/ChatReadMessageDto.html":{},"classes/ChatReadMessageResponseDto.html":{},"controllers/ChatsController.html":{},"classes/ChatsGateway.html":{},"coverage.html":{}}}],["chatreceivemessagedto",{"_index":773,"title":{"classes/ChatReceiveMessageDto.html":{}},"body":{"classes/ChatReceiveMessageDto.html":{},"controllers/ChatsController.html":{},"classes/ChatsGateway.html":{},"classes/CreateChatMessageDto.html":{},"coverage.html":{}}}],["chats",{"_index":789,"title":{},"body":{"controllers/ChatsController.html":{}}}],["chats.controller",{"_index":892,"title":{},"body":{"modules/ChatsModule.html":{}}}],["chats.dto.ts",{"_index":1711,"title":{},"body":{"classes/PaginationChatsDto.html":{},"classes/SelectChatsDto.html":{},"coverage.html":{}}}],["chats.dto.ts:23",{"_index":1756,"title":{},"body":{"classes/SelectChatsDto.html":{}}}],["chats.dto.ts:31",{"_index":1751,"title":{},"body":{"classes/SelectChatsDto.html":{}}}],["chats.dto.ts:36",{"_index":1759,"title":{},"body":{"classes/SelectChatsDto.html":{}}}],["chats.dto.ts:8",{"_index":1712,"title":{},"body":{"classes/PaginationChatsDto.html":{}}}],["chats.service",{"_index":621,"title":{},"body":{"injectables/ChatMessagesService.html":{},"classes/ChatsGateway.html":{}}}],["chats_not_found",{"_index":2391,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["chatscontroller",{"_index":787,"title":{"controllers/ChatsController.html":{}},"body":{"controllers/ChatsController.html":{},"modules/ChatsModule.html":{},"coverage.html":{}}}],["chatsgateway",{"_index":830,"title":{"classes/ChatsGateway.html":{}},"body":{"classes/ChatsGateway.html":{},"modules/ChatsModule.html":{},"coverage.html":{}}}],["chatsmodule",{"_index":149,"title":{"modules/ChatsModule.html":{}},"body":{"modules/AppModule.html":{},"modules/ChatsModule.html":{},"modules.html":{},"overview.html":{}}}],["chatsocketeventsenum",{"_index":858,"title":{},"body":{"classes/ChatsGateway.html":{},"miscellaneous/enumerations.html":{}}}],["chatsocketeventsenum.chat_read_message",{"_index":882,"title":{},"body":{"classes/ChatsGateway.html":{}}}],["chatsocketeventsenum.chat_receive_message",{"_index":877,"title":{},"body":{"classes/ChatsGateway.html":{}}}],["chatsservice",{"_index":588,"title":{"injectables/ChatsService.html":{}},"body":{"injectables/ChatMessagesService.html":{},"controllers/ChatsController.html":{},"classes/ChatsGateway.html":{},"modules/ChatsModule.html":{},"injectables/ChatsService.html":{},"coverage.html":{},"overview.html":{}}}],["check",{"_index":1330,"title":{},"body":{"injectables/FilesService.html":{}}}],["checked",{"_index":1046,"title":{},"body":{"injectables/ConfigService.html":{}}}],["checking",{"_index":1041,"title":{},"body":{"injectables/ConfigService.html":{}}}],["choose",{"_index":2061,"title":{},"body":{"entities/UserEntity.html":{}}}],["class",{"_index":0,"title":{"classes/AllExceptionFilter.html":{},"classes/ChatReadMessageDto.html":{},"classes/ChatReadMessageResponseDto.html":{},"classes/ChatReceiveMessageDto.html":{},"classes/ChatsGateway.html":{},"classes/ConfirmationEmailDto.html":{},"classes/CreateChatDto.html":{},"classes/CreateChatMessageDto.html":{},"classes/CreateFileDto.html":{},"classes/CreateNotificationDto.html":{},"classes/CreateProfileDto.html":{},"classes/CreateUserDto.html":{},"classes/CreateUserNotificationTokenDto.html":{},"classes/CredentialsDto.html":{},"classes/DeleteUserNotificationTokenDto.html":{},"classes/DownloadFileDto.html":{},"classes/FileEntityPreview.html":{},"classes/FindManyOptionsDto.html":{},"classes/FindOneOptionsDto.html":{},"classes/HttpExceptionFilter.html":{},"classes/ID.html":{},"classes/JwtAccessTokenPayloadDto.html":{},"classes/JwtRefreshTokenDto.html":{},"classes/JwtRefreshTokenPayloadDto.html":{},"classes/JwtTokensDto.html":{},"classes/PaginationChatMessagesDto.html":{},"classes/PaginationChatParticipantsDto.html":{},"classes/PaginationChatsDto.html":{},"classes/PaginationFilesDto.html":{},"classes/PaginationNotificationsDto.html":{},"classes/PaginationUserNotificationTokensDto.html":{},"classes/PaginationUsersDto.html":{},"classes/ResetPasswordDto.html":{},"classes/SelectChatMessagesDto.html":{},"classes/SelectChatsDto.html":{},"classes/SelectFileDto.html":{},"classes/SelectFilesDto.html":{},"classes/SelectNotificationsDto.html":{},"classes/SelectProfileDto.html":{},"classes/SelectUserDto.html":{},"classes/SelectUserNotificationTokenDto.html":{},"classes/SelectUserNotificationTokensDto.html":{},"classes/SelectUsersDto.html":{},"classes/SendResetPasswordDto.html":{},"classes/SocketsExceptionFilter.html":{},"classes/SocketsGateway.html":{},"classes/UpdateEmailDto.html":{},"classes/UpdateNotificationDto.html":{},"classes/UpdatePasswordDto.html":{},"classes/UpdateProfileDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserNotificationTokenDto.html":{},"classes/UploadedFile.html":{},"classes/user1615673396368.html":{}},"body":{"classes/AllExceptionFilter.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"entities/ChatEntity.html":{},"entities/ChatMessageEntity.html":{},"injectables/ChatMessagesService.html":{},"entities/ChatParticipantEntity.html":{},"injectables/ChatParticipantsService.html":{},"classes/ChatReadMessageDto.html":{},"classes/ChatReadMessageResponseDto.html":{},"classes/ChatReceiveMessageDto.html":{},"controllers/ChatsController.html":{},"classes/ChatsGateway.html":{},"modules/ChatsModule.html":{},"injectables/ChatsService.html":{},"modules/ConfigModule.html":{},"injectables/ConfigService.html":{},"classes/ConfirmationEmailDto.html":{},"classes/CreateChatDto.html":{},"classes/CreateChatMessageDto.html":{},"classes/CreateFileDto.html":{},"classes/CreateNotificationDto.html":{},"classes/CreateProfileDto.html":{},"classes/CreateUserDto.html":{},"classes/CreateUserNotificationTokenDto.html":{},"classes/CredentialsDto.html":{},"modules/DatabaseModule.html":{},"classes/DeleteUserNotificationTokenDto.html":{},"classes/DownloadFileDto.html":{},"entities/FileEntity.html":{},"classes/FileEntityPreview.html":{},"injectables/FileValidationPipe.html":{},"controllers/FilesController.html":{},"modules/FilesModule.html":{},"injectables/FilesService.html":{},"classes/FindManyOptionsDto.html":{},"classes/FindOneOptionsDto.html":{},"classes/HttpExceptionFilter.html":{},"classes/ID.html":{},"classes/JwtAccessTokenPayloadDto.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtRefreshGuard.html":{},"classes/JwtRefreshTokenDto.html":{},"classes/JwtRefreshTokenPayloadDto.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"classes/JwtTokensDto.html":{},"modules/MultipartModule.html":{},"entities/NotificationEntity.html":{},"controllers/NotificationsController.html":{},"modules/NotificationsModule.html":{},"injectables/NotificationsService.html":{},"classes/PaginationChatMessagesDto.html":{},"classes/PaginationChatParticipantsDto.html":{},"classes/PaginationChatsDto.html":{},"classes/PaginationFilesDto.html":{},"classes/PaginationNotificationsDto.html":{},"classes/PaginationUserNotificationTokensDto.html":{},"classes/PaginationUsersDto.html":{},"classes/ResetPasswordDto.html":{},"interfaces/Response.html":{},"classes/SelectChatMessagesDto.html":{},"classes/SelectChatsDto.html":{},"classes/SelectFileDto.html":{},"classes/SelectFilesDto.html":{},"classes/SelectNotificationsDto.html":{},"classes/SelectProfileDto.html":{},"classes/SelectUserDto.html":{},"classes/SelectUserNotificationTokenDto.html":{},"classes/SelectUserNotificationTokensDto.html":{},"classes/SelectUsersDto.html":{},"modules/SendMailModule.html":{},"injectables/SendMailService.html":{},"classes/SendResetPasswordDto.html":{},"classes/SocketsExceptionFilter.html":{},"classes/SocketsGateway.html":{},"modules/SocketsModule.html":{},"injectables/SocketsService.html":{},"injectables/StorageS3Service.html":{},"injectables/StorageService.html":{},"injectables/TransformInterceptor.html":{},"classes/UpdateEmailDto.html":{},"classes/UpdateNotificationDto.html":{},"classes/UpdatePasswordDto.html":{},"classes/UpdateProfileDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserNotificationTokenDto.html":{},"classes/UploadedFile.html":{},"entities/UserEntity.html":{},"entities/UserNotificationTokenEntity.html":{},"controllers/UserNotificationTokensController.html":{},"injectables/UserNotificationTokensService.html":{},"entities/UserRefreshTokenEntity.html":{},"injectables/UserRefreshTokensService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"dependencies.html":{},"classes/user1615673396368.html":{}}}],["classes",{"_index":2,"title":{},"body":{"classes/AllExceptionFilter.html":{},"classes/ChatReadMessageDto.html":{},"classes/ChatReadMessageResponseDto.html":{},"classes/ChatReceiveMessageDto.html":{},"classes/ChatsGateway.html":{},"classes/ConfirmationEmailDto.html":{},"classes/CreateChatDto.html":{},"classes/CreateChatMessageDto.html":{},"classes/CreateFileDto.html":{},"classes/CreateNotificationDto.html":{},"classes/CreateProfileDto.html":{},"classes/CreateUserDto.html":{},"classes/CreateUserNotificationTokenDto.html":{},"classes/CredentialsDto.html":{},"classes/DeleteUserNotificationTokenDto.html":{},"classes/DownloadFileDto.html":{},"classes/FileEntityPreview.html":{},"classes/FindManyOptionsDto.html":{},"classes/FindOneOptionsDto.html":{},"classes/HttpExceptionFilter.html":{},"classes/ID.html":{},"classes/JwtAccessTokenPayloadDto.html":{},"classes/JwtRefreshTokenDto.html":{},"classes/JwtRefreshTokenPayloadDto.html":{},"classes/JwtTokensDto.html":{},"classes/PaginationChatMessagesDto.html":{},"classes/PaginationChatParticipantsDto.html":{},"classes/PaginationChatsDto.html":{},"classes/PaginationFilesDto.html":{},"classes/PaginationNotificationsDto.html":{},"classes/PaginationUserNotificationTokensDto.html":{},"classes/PaginationUsersDto.html":{},"classes/ResetPasswordDto.html":{},"classes/SelectChatMessagesDto.html":{},"classes/SelectChatsDto.html":{},"classes/SelectFileDto.html":{},"classes/SelectFilesDto.html":{},"classes/SelectNotificationsDto.html":{},"classes/SelectProfileDto.html":{},"classes/SelectUserDto.html":{},"classes/SelectUserNotificationTokenDto.html":{},"classes/SelectUserNotificationTokensDto.html":{},"classes/SelectUsersDto.html":{},"classes/SendResetPasswordDto.html":{},"classes/SocketsExceptionFilter.html":{},"classes/SocketsGateway.html":{},"classes/UpdateEmailDto.html":{},"classes/UpdateNotificationDto.html":{},"classes/UpdatePasswordDto.html":{},"classes/UpdateProfileDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserNotificationTokenDto.html":{},"classes/UploadedFile.html":{},"overview.html":{},"classes/user1615673396368.html":{}}}],["classref",{"_index":2471,"title":{},"body":{"miscellaneous/functions.html":{}}}],["classserializerinterceptor",{"_index":266,"title":{},"body":{"controllers/AuthController.html":{},"controllers/ChatsController.html":{},"controllers/FilesController.html":{},"controllers/NotificationsController.html":{},"controllers/UserNotificationTokensController.html":{},"controllers/UsersController.html":{}}}],["client",{"_index":1835,"title":{},"body":{"classes/SocketsExceptionFilter.html":{}}}],["client.emit(errortypeenum.socket_error",{"_index":1838,"title":{},"body":{"classes/SocketsExceptionFilter.html":{}}}],["cluster_appmodule",{"_index":146,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_imports",{"_index":147,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_authmodule",{"_index":317,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_exports",{"_index":320,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_imports",{"_index":318,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_providers",{"_index":319,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_chatsmodule",{"_index":885,"title":{},"body":{"modules/ChatsModule.html":{},"overview.html":{}}}],["cluster_chatsmodule_exports",{"_index":886,"title":{},"body":{"modules/ChatsModule.html":{},"overview.html":{}}}],["cluster_chatsmodule_imports",{"_index":887,"title":{},"body":{"modules/ChatsModule.html":{}}}],["cluster_chatsmodule_providers",{"_index":888,"title":{},"body":{"modules/ChatsModule.html":{},"overview.html":{}}}],["cluster_configmodule",{"_index":1005,"title":{},"body":{"modules/ConfigModule.html":{},"overview.html":{}}}],["cluster_configmodule_exports",{"_index":1006,"title":{},"body":{"modules/ConfigModule.html":{},"overview.html":{}}}],["cluster_configmodule_providers",{"_index":1007,"title":{},"body":{"modules/ConfigModule.html":{},"overview.html":{}}}],["cluster_filesmodule",{"_index":1294,"title":{},"body":{"modules/FilesModule.html":{},"overview.html":{}}}],["cluster_filesmodule_exports",{"_index":1296,"title":{},"body":{"modules/FilesModule.html":{},"overview.html":{}}}],["cluster_filesmodule_providers",{"_index":1295,"title":{},"body":{"modules/FilesModule.html":{},"overview.html":{}}}],["cluster_notificationsmodule",{"_index":1610,"title":{},"body":{"modules/NotificationsModule.html":{},"overview.html":{}}}],["cluster_notificationsmodule_exports",{"_index":1611,"title":{},"body":{"modules/NotificationsModule.html":{},"overview.html":{}}}],["cluster_notificationsmodule_imports",{"_index":1612,"title":{},"body":{"modules/NotificationsModule.html":{}}}],["cluster_notificationsmodule_providers",{"_index":1613,"title":{},"body":{"modules/NotificationsModule.html":{},"overview.html":{}}}],["cluster_sendmailmodule",{"_index":1791,"title":{},"body":{"modules/SendMailModule.html":{},"overview.html":{}}}],["cluster_sendmailmodule_exports",{"_index":1792,"title":{},"body":{"modules/SendMailModule.html":{},"overview.html":{}}}],["cluster_sendmailmodule_providers",{"_index":1793,"title":{},"body":{"modules/SendMailModule.html":{},"overview.html":{}}}],["cluster_socketsmodule",{"_index":1867,"title":{},"body":{"modules/SocketsModule.html":{},"overview.html":{}}}],["cluster_socketsmodule_exports",{"_index":1868,"title":{},"body":{"modules/SocketsModule.html":{},"overview.html":{}}}],["cluster_socketsmodule_imports",{"_index":1869,"title":{},"body":{"modules/SocketsModule.html":{}}}],["cluster_socketsmodule_providers",{"_index":1870,"title":{},"body":{"modules/SocketsModule.html":{},"overview.html":{}}}],["cluster_usersmodule",{"_index":2168,"title":{},"body":{"modules/UsersModule.html":{},"overview.html":{}}}],["cluster_usersmodule_exports",{"_index":2169,"title":{},"body":{"modules/UsersModule.html":{},"overview.html":{}}}],["cluster_usersmodule_providers",{"_index":2170,"title":{},"body":{"modules/UsersModule.html":{},"overview.html":{}}}],["code",{"_index":464,"title":{},"body":{"injectables/AuthService.html":{},"classes/ConfirmationEmailDto.html":{},"classes/ResetPasswordDto.html":{},"classes/SendResetPasswordDto.html":{},"miscellaneous/functions.html":{}}}],["collaboration_agent_deactivated",{"_index":2411,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["collaboration_artist_deactivated",{"_index":2408,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["collaboration_feedback",{"_index":2401,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["column",{"_index":566,"title":{},"body":{"entities/ChatMessageEntity.html":{},"entities/ChatParticipantEntity.html":{},"entities/FileEntity.html":{},"classes/FileEntityPreview.html":{},"entities/NotificationEntity.html":{},"entities/UserEntity.html":{},"entities/UserNotificationTokenEntity.html":{},"entities/UserRefreshTokenEntity.html":{}}}],["column({type",{"_index":1198,"title":{},"body":{"entities/FileEntity.html":{}}}],["column.transformer.ts",{"_index":2253,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["columns",{"_index":1420,"title":{},"body":{"classes/FindManyOptionsDto.html":{},"classes/FindOneOptionsDto.html":{},"classes/SelectChatMessagesDto.html":{},"classes/SelectChatsDto.html":{},"classes/SelectFileDto.html":{},"classes/SelectFilesDto.html":{},"classes/SelectNotificationsDto.html":{},"classes/SelectProfileDto.html":{},"classes/SelectUserDto.html":{},"classes/SelectUserNotificationTokenDto.html":{},"classes/SelectUserNotificationTokensDto.html":{},"classes/SelectUsersDto.html":{}}}],["commit",{"_index":2474,"title":{},"body":{"index.html":{}}}],["common",{"_index":642,"title":{},"body":{"injectables/ChatMessagesService.html":{},"injectables/ChatParticipantsService.html":{},"injectables/ChatsService.html":{},"injectables/FilesService.html":{},"injectables/NotificationsService.html":{},"injectables/UsersService.html":{}}}],["common/dto",{"_index":809,"title":{},"body":{"controllers/ChatsController.html":{}}}],["compare",{"_index":412,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["compare(data",{"_index":461,"title":{},"body":{"injectables/AuthService.html":{}}}],["compare(ppid",{"_index":1519,"title":{},"body":{"injectables/JwtRefreshTokenStrategy.html":{}}}],["compress",{"_index":2314,"title":{},"body":{"dependencies.html":{}}}],["concat(message",{"_index":77,"title":{},"body":{"classes/AllExceptionFilter.html":{},"classes/HttpExceptionFilter.html":{}}}],["concat(value",{"_index":1435,"title":{},"body":{"classes/FindManyOptionsDto.html":{},"classes/FindOneOptionsDto.html":{}}}],["condition",{"_index":825,"title":{},"body":{"controllers/ChatsController.html":{}}}],["conditions",{"_index":403,"title":{},"body":{"injectables/AuthService.html":{},"injectables/ChatMessagesService.html":{},"injectables/ChatParticipantsService.html":{},"controllers/ChatsController.html":{},"classes/ChatsGateway.html":{},"injectables/ChatsService.html":{},"controllers/FilesController.html":{},"injectables/FilesService.html":{},"controllers/NotificationsController.html":{},"injectables/NotificationsService.html":{},"controllers/UserNotificationTokensController.html":{},"injectables/UserNotificationTokensService.html":{},"injectables/UserRefreshTokensService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["conditions.chat",{"_index":880,"title":{},"body":{"classes/ChatsGateway.html":{}}}],["conditions.chat.id",{"_index":883,"title":{},"body":{"classes/ChatsGateway.html":{}}}],["conditions.id",{"_index":884,"title":{},"body":{"classes/ChatsGateway.html":{}}}],["config",{"_index":106,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/ConfigService.html":{},"modules/SendMailModule.html":{}}}],["config.get('smtp_from",{"_index":1808,"title":{},"body":{"modules/SendMailModule.html":{}}}],["config.get('smtp_host",{"_index":1802,"title":{},"body":{"modules/SendMailModule.html":{}}}],["config.get('smtp_pass",{"_index":1806,"title":{},"body":{"modules/SendMailModule.html":{}}}],["config.get('smtp_port",{"_index":1803,"title":{},"body":{"modules/SendMailModule.html":{}}}],["config.get('smtp_user",{"_index":1804,"title":{},"body":{"modules/SendMailModule.html":{}}}],["config.service",{"_index":1010,"title":{},"body":{"modules/ConfigModule.html":{}}}],["configmode",{"_index":1039,"title":{},"body":{"injectables/ConfigService.html":{},"miscellaneous/enumerations.html":{}}}],["configmodule",{"_index":150,"title":{"modules/ConfigModule.html":{}},"body":{"modules/AppModule.html":{},"modules/ConfigModule.html":{},"modules.html":{},"overview.html":{}}}],["configservice",{"_index":105,"title":{"injectables/ConfigService.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"modules/ConfigModule.html":{},"injectables/ConfigService.html":{},"interfaces/CreateMockFileReturn.html":{},"modules/DatabaseModule.html":{},"injectables/FileValidationPipe.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"modules/SendMailModule.html":{},"modules/SocketsModule.html":{},"injectables/StorageS3Service.html":{},"injectables/StorageService.html":{},"coverage.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["configservice.get('cache_auth_ttl",{"_index":345,"title":{},"body":{"modules/AuthModule.html":{}}}],["configservice.get('jwt_expires_access_token",{"_index":1874,"title":{},"body":{"modules/SocketsModule.html":{}}}],["configservice.get('jwt_secret_access_token",{"_index":1525,"title":{},"body":{"injectables/JwtStrategy.html":{},"modules/SocketsModule.html":{}}}],["configservice.get('jwt_secret_refresh_token",{"_index":1517,"title":{},"body":{"injectables/JwtRefreshTokenStrategy.html":{}}}],["configservice.get('redis_has_password",{"_index":192,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{}}}],["configservice.get('redis_host",{"_index":189,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{}}}],["configservice.get('redis_password",{"_index":193,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{}}}],["configservice.get('redis_port",{"_index":190,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{}}}],["configservice.get('redis_tls",{"_index":346,"title":{},"body":{"modules/AuthModule.html":{}}}],["configservice.get('throttle_limit",{"_index":185,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice.get('throttle_ttl",{"_index":183,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice.get('typeorm_cache",{"_index":1168,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["configservice.get('typeorm_database",{"_index":1164,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["configservice.get('typeorm_drop_schema",{"_index":1172,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["configservice.get('typeorm_host",{"_index":1162,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["configservice.get('typeorm_logging",{"_index":1170,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["configservice.get('typeorm_migrations_run",{"_index":1176,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["configservice.get('typeorm_name",{"_index":1160,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["configservice.get('typeorm_password",{"_index":1167,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["configservice.get('typeorm_port",{"_index":1163,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["configservice.get('typeorm_ssl",{"_index":1159,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["configservice.get('typeorm_synchronize",{"_index":1174,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["configservice.get('typeorm_type",{"_index":1161,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["configservice.get('typeorm_username",{"_index":1166,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["configservice.getdest('store_dest",{"_index":1105,"title":{},"body":{"interfaces/CreateMockFileReturn.html":{}}}],["configuration",{"_index":1012,"title":{},"body":{"injectables/ConfigService.html":{}}}],["confirmation",{"_index":2459,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["confirmationemail",{"_index":202,"title":{},"body":{"controllers/AuthController.html":{}}}],["confirmationemail(@body",{"_index":306,"title":{},"body":{"controllers/AuthController.html":{}}}],["confirmationemail(data",{"_index":213,"title":{},"body":{"controllers/AuthController.html":{}}}],["confirmationemaildto",{"_index":214,"title":{"classes/ConfirmationEmailDto.html":{}},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/ConfirmationEmailDto.html":{},"coverage.html":{}}}],["conflictexception",{"_index":614,"title":{},"body":{"injectables/ChatMessagesService.html":{},"injectables/ChatParticipantsService.html":{},"injectables/ChatsService.html":{},"injectables/FilesService.html":{},"injectables/UserNotificationTokensService.html":{},"injectables/UserRefreshTokensService.html":{},"injectables/UsersService.html":{}}}],["conflictexception(errortypeenum.chat_already_exist",{"_index":921,"title":{},"body":{"injectables/ChatsService.html":{}}}],["conflictexception(errortypeenum.chat_message_already_exist",{"_index":627,"title":{},"body":{"injectables/ChatMessagesService.html":{}}}],["conflictexception(errortypeenum.chat_participant_already_exist",{"_index":730,"title":{},"body":{"injectables/ChatParticipantsService.html":{}}}],["conflictexception(errortypeenum.file_already_exist",{"_index":1322,"title":{},"body":{"injectables/FilesService.html":{}}}],["conflictexception(errortypeenum.user_already_exist",{"_index":2188,"title":{},"body":{"injectables/UsersService.html":{}}}],["conflictexception(errortypeenum.user_notification_token_already_exist",{"_index":2107,"title":{},"body":{"injectables/UserNotificationTokensService.html":{}}}],["conflictexception(errortypeenum.user_refresh_token_already_exist",{"_index":2144,"title":{},"body":{"injectables/UserRefreshTokensService.html":{}}}],["connectedsocket",{"_index":1853,"title":{},"body":{"classes/SocketsGateway.html":{}}}],["connection",{"_index":2537,"title":{},"body":{"classes/user1615673396368.html":{}}}],["connection.getrepository(userentity",{"_index":2539,"title":{},"body":{"classes/user1615673396368.html":{}}}],["connection.getrepository(userentity).delete(data.map",{"_index":2542,"title":{},"body":{"classes/user1615673396368.html":{}}}],["connection.synchronize",{"_index":2538,"title":{},"body":{"classes/user1615673396368.html":{}}}],["console.error(e",{"_index":2541,"title":{},"body":{"classes/user1615673396368.html":{}}}],["console.log(err",{"_index":729,"title":{},"body":{"injectables/ChatParticipantsService.html":{}}}],["const",{"_index":46,"title":{},"body":{"classes/AllExceptionFilter.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/ChatMessagesService.html":{},"injectables/ChatParticipantsService.html":{},"controllers/ChatsController.html":{},"classes/ChatsGateway.html":{},"injectables/ChatsService.html":{},"injectables/ConfigService.html":{},"interfaces/CreateMockFileReturn.html":{},"modules/DatabaseModule.html":{},"entities/FileEntity.html":{},"classes/FileEntityPreview.html":{},"injectables/FilesService.html":{},"classes/HttpExceptionFilter.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/NotificationsService.html":{},"classes/SelectChatsDto.html":{},"classes/SelectFilesDto.html":{},"classes/SelectNotificationsDto.html":{},"classes/SocketsExceptionFilter.html":{},"classes/SocketsGateway.html":{},"modules/SocketsModule.html":{},"injectables/SocketsService.html":{},"injectables/StorageS3Service.html":{},"injectables/StorageService.html":{},"injectables/UserNotificationTokensService.html":{},"injectables/UserRefreshTokensService.html":{},"injectables/UsersService.html":{},"classes/user1615673396368.html":{},"miscellaneous/variables.html":{}}}],["constructor",{"_index":116,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/ChatMessagesService.html":{},"injectables/ChatParticipantsService.html":{},"classes/ChatReadMessageResponseDto.html":{},"classes/ChatReceiveMessageDto.html":{},"controllers/ChatsController.html":{},"classes/ChatsGateway.html":{},"injectables/ChatsService.html":{},"injectables/ConfigService.html":{},"entities/FileEntity.html":{},"classes/FileEntityPreview.html":{},"injectables/FileValidationPipe.html":{},"injectables/FilesService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtRefreshGuard.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/NotificationsService.html":{},"classes/PaginationChatMessagesDto.html":{},"classes/PaginationChatParticipantsDto.html":{},"classes/PaginationChatsDto.html":{},"classes/PaginationFilesDto.html":{},"classes/PaginationNotificationsDto.html":{},"classes/PaginationUserNotificationTokensDto.html":{},"classes/PaginationUsersDto.html":{},"injectables/SendMailService.html":{},"classes/SocketsGateway.html":{},"injectables/StorageS3Service.html":{},"injectables/StorageService.html":{},"classes/UploadedFile.html":{},"injectables/UserNotificationTokensService.html":{},"injectables/UserRefreshTokensService.html":{},"injectables/UsersService.html":{}}}],["constructor([result",{"_index":1705,"title":{},"body":{"classes/PaginationChatMessagesDto.html":{},"classes/PaginationChatParticipantsDto.html":{},"classes/PaginationChatsDto.html":{},"classes/PaginationFilesDto.html":{},"classes/PaginationNotificationsDto.html":{},"classes/PaginationUserNotificationTokensDto.html":{},"classes/PaginationUsersDto.html":{}}}],["constructor(chatentityrepository",{"_index":899,"title":{},"body":{"injectables/ChatsService.html":{}}}],["constructor(chatmessageentityrepository",{"_index":586,"title":{},"body":{"injectables/ChatMessagesService.html":{}}}],["constructor(chatparticipantentityrepository",{"_index":708,"title":{},"body":{"injectables/ChatParticipantsService.html":{}}}],["constructor(chatsservice",{"_index":835,"title":{},"body":{"classes/ChatsGateway.html":{}}}],["constructor(configservice",{"_index":1237,"title":{},"body":{"injectables/FileValidationPipe.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/StorageS3Service.html":{},"injectables/StorageService.html":{}}}],["constructor(data",{"_index":767,"title":{},"body":{"classes/ChatReadMessageDto.html":{},"classes/ChatReadMessageResponseDto.html":{},"classes/ChatReceiveMessageDto.html":{},"classes/CreateChatMessageDto.html":{},"classes/UploadedFile.html":{}}}],["constructor(fileentityrepository",{"_index":1301,"title":{},"body":{"injectables/FilesService.html":{}}}],["constructor(jwtservice",{"_index":1847,"title":{},"body":{"classes/SocketsGateway.html":{}}}],["constructor(mailerservice",{"_index":1815,"title":{},"body":{"injectables/SendMailService.html":{}}}],["constructor(notificationentityrepository",{"_index":1625,"title":{},"body":{"injectables/NotificationsService.html":{}}}],["constructor(private",{"_index":1243,"title":{},"body":{"injectables/FileValidationPipe.html":{},"controllers/FilesController.html":{},"injectables/JwtAuthGuard.html":{},"controllers/NotificationsController.html":{},"injectables/SendMailService.html":{},"injectables/StorageS3Service.html":{},"controllers/UserNotificationTokensController.html":{},"controllers/UsersController.html":{}}}],["constructor(reflector",{"_index":1473,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["constructor(undefined",{"_index":1231,"title":{},"body":{"classes/FileEntityPreview.html":{},"classes/PaginationChatMessagesDto.html":{},"classes/PaginationChatParticipantsDto.html":{},"classes/PaginationChatsDto.html":{},"classes/PaginationFilesDto.html":{},"classes/PaginationNotificationsDto.html":{},"classes/PaginationUserNotificationTokensDto.html":{},"classes/PaginationUsersDto.html":{}}}],["constructor(userentityrepository",{"_index":2175,"title":{},"body":{"injectables/UsersService.html":{}}}],["constructor(usernotificationtokenentityrepository",{"_index":2094,"title":{},"body":{"injectables/UserNotificationTokensService.html":{}}}],["constructor(userrefreshtokenentityrepository",{"_index":2126,"title":{},"body":{"injectables/UserRefreshTokensService.html":{}}}],["constructor(userrefreshtokensservice",{"_index":363,"title":{},"body":{"injectables/AuthService.html":{}}}],["contact",{"_index":2419,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["content",{"_index":1352,"title":{},"body":{"injectables/FilesService.html":{}}}],["contentlength",{"_index":1947,"title":{},"body":{"injectables/StorageS3Service.html":{}}}],["contenttype",{"_index":1946,"title":{},"body":{"injectables/StorageS3Service.html":{}}}],["context",{"_index":476,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/Response.html":{},"injectables/TransformInterceptor.html":{}}}],["controller",{"_index":80,"title":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/ChatsController.html":{},"controllers/FilesController.html":{},"controllers/NotificationsController.html":{},"controllers/UserNotificationTokensController.html":{},"controllers/UsersController.html":{}},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/ChatsController.html":{},"controllers/FilesController.html":{},"controllers/NotificationsController.html":{},"controllers/UserNotificationTokensController.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["controller('auth",{"_index":280,"title":{},"body":{"controllers/AuthController.html":{}}}],["controller('chats",{"_index":814,"title":{},"body":{"controllers/ChatsController.html":{}}}],["controller('files",{"_index":1279,"title":{},"body":{"controllers/FilesController.html":{}}}],["controller('notifications",{"_index":1604,"title":{},"body":{"controllers/NotificationsController.html":{}}}],["controller('status",{"_index":108,"title":{},"body":{"controllers/AppController.html":{}}}],["controller('users",{"_index":2162,"title":{},"body":{"controllers/UsersController.html":{}}}],["controller('users/notification",{"_index":2085,"title":{},"body":{"controllers/UserNotificationTokensController.html":{}}}],["controllers",{"_index":82,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"controllers/ChatsController.html":{},"modules/ChatsModule.html":{},"controllers/FilesController.html":{},"modules/FilesModule.html":{},"controllers/NotificationsController.html":{},"modules/NotificationsModule.html":{},"controllers/UserNotificationTokensController.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["cors",{"_index":861,"title":{},"body":{"classes/ChatsGateway.html":{},"classes/SocketsGateway.html":{}}}],["count",{"_index":661,"title":{},"body":{"injectables/ChatMessagesService.html":{},"injectables/ChatsService.html":{},"classes/PaginationNotificationsDto.html":{},"classes/PaginationUserNotificationTokensDto.html":{},"classes/PaginationUsersDto.html":{}}}],["cover",{"_index":963,"title":{},"body":{"injectables/ChatsService.html":{},"classes/CreateUserDto.html":{},"entities/UserEntity.html":{}}}],["coverage",{"_index":2217,"title":{"coverage.html":{}},"body":{"coverage.html":{},"index.html":{},"unit-test.html":{}}}],["create",{"_index":1185,"title":{},"body":{"classes/DeleteUserNotificationTokenDto.html":{},"classes/UpdateNotificationDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserNotificationTokenDto.html":{}}}],["createasyncoptionsprovider",{"_index":1530,"title":{},"body":{"modules/MultipartModule.html":{}}}],["createasyncoptionsprovider(options",{"_index":1531,"title":{},"body":{"modules/MultipartModule.html":{}}}],["createasyncproviders",{"_index":1535,"title":{},"body":{"modules/MultipartModule.html":{}}}],["createasyncproviders(options",{"_index":1536,"title":{},"body":{"modules/MultipartModule.html":{}}}],["createchatdto",{"_index":792,"title":{"classes/CreateChatDto.html":{}},"body":{"controllers/ChatsController.html":{},"classes/CreateChatDto.html":{},"coverage.html":{}}}],["createchatmessagedto",{"_index":781,"title":{"classes/CreateChatMessageDto.html":{}},"body":{"classes/ChatReceiveMessageDto.html":{},"controllers/ChatsController.html":{},"classes/ChatsGateway.html":{},"classes/CreateChatMessageDto.html":{},"coverage.html":{}}}],["createdat",{"_index":487,"title":{},"body":{"entities/ChatEntity.html":{},"entities/ChatMessageEntity.html":{},"entities/ChatParticipantEntity.html":{},"entities/FileEntity.html":{},"classes/FileEntityPreview.html":{},"entities/NotificationEntity.html":{},"classes/SelectChatMessagesDto.html":{},"entities/UserEntity.html":{},"entities/UserNotificationTokenEntity.html":{},"entities/UserRefreshTokenEntity.html":{}}}],["createdatecolumn",{"_index":524,"title":{},"body":{"entities/ChatEntity.html":{},"entities/ChatMessageEntity.html":{},"entities/ChatParticipantEntity.html":{},"entities/FileEntity.html":{},"classes/FileEntityPreview.html":{},"entities/NotificationEntity.html":{},"entities/UserEntity.html":{},"entities/UserNotificationTokenEntity.html":{},"entities/UserRefreshTokenEntity.html":{}}}],["createfiledto",{"_index":1080,"title":{"classes/CreateFileDto.html":{}},"body":{"classes/CreateFileDto.html":{},"controllers/FilesController.html":{},"coverage.html":{}}}],["createfiledto})@apiconsumes('multipart/form",{"_index":1254,"title":{},"body":{"controllers/FilesController.html":{}}}],["createmany",{"_index":1620,"title":{},"body":{"injectables/NotificationsService.html":{}}}],["createmany(entitieslike",{"_index":1627,"title":{},"body":{"injectables/NotificationsService.html":{}}}],["createmockfile",{"_index":2288,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["createmockfile(data",{"_index":1110,"title":{},"body":{"interfaces/CreateMockFileReturn.html":{},"miscellaneous/functions.html":{}}}],["createmockfilemeta",{"_index":1111,"title":{},"body":{"interfaces/CreateMockFileReturn.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["createmockfilemeta(data",{"_index":1102,"title":{},"body":{"interfaces/CreateMockFileReturn.html":{},"miscellaneous/functions.html":{}}}],["createmockfilereturn",{"_index":1092,"title":{"interfaces/CreateMockFileReturn.html":{}},"body":{"interfaces/CreateMockFileReturn.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["createmultipartoptions",{"_index":1571,"title":{},"body":{"interfaces/MultipartModuleAsyncOptions.html":{},"interfaces/MultipartOptionsFactory.html":{}}}],["createnotificationdto",{"_index":1114,"title":{"classes/CreateNotificationDto.html":{}},"body":{"classes/CreateNotificationDto.html":{},"controllers/NotificationsController.html":{},"classes/UpdateNotificationDto.html":{},"coverage.html":{}}}],["createone",{"_index":578,"title":{},"body":{"injectables/ChatMessagesService.html":{},"injectables/ChatParticipantsService.html":{},"controllers/ChatsController.html":{},"injectables/ChatsService.html":{},"controllers/FilesController.html":{},"injectables/FilesService.html":{},"injectables/NotificationsService.html":{},"injectables/StorageS3Service.html":{},"injectables/StorageService.html":{},"controllers/UserNotificationTokensController.html":{},"injectables/UserNotificationTokensService.html":{},"injectables/UserRefreshTokensService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["createone(@body",{"_index":2163,"title":{},"body":{"controllers/UsersController.html":{}}}],["createone(@file",{"_index":1281,"title":{},"body":{"controllers/FilesController.html":{}}}],["createone(data",{"_index":2075,"title":{},"body":{"controllers/UserNotificationTokensController.html":{},"controllers/UsersController.html":{}}}],["createone(dto",{"_index":791,"title":{},"body":{"controllers/ChatsController.html":{}}}],["createone(entitylike",{"_index":591,"title":{},"body":{"injectables/ChatMessagesService.html":{},"injectables/ChatParticipantsService.html":{},"injectables/ChatsService.html":{},"injectables/NotificationsService.html":{},"injectables/UserNotificationTokensService.html":{},"injectables/UserRefreshTokensService.html":{},"injectables/UsersService.html":{}}}],["createone(file",{"_index":1252,"title":{},"body":{"controllers/FilesController.html":{}}}],["createone(multipart",{"_index":1305,"title":{},"body":{"injectables/FilesService.html":{},"injectables/StorageS3Service.html":{},"injectables/StorageService.html":{}}}],["createparamdecorator",{"_index":2592,"title":{},"body":{"miscellaneous/variables.html":{}}}],["createparamdecorator((data",{"_index":2616,"title":{},"body":{"miscellaneous/variables.html":{}}}],["createprofiledto",{"_index":223,"title":{"classes/CreateProfileDto.html":{}},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/CreateProfileDto.html":{},"coverage.html":{}}}],["createquerybuilder",{"_index":676,"title":{},"body":{"injectables/ChatMessagesService.html":{},"injectables/UserNotificationTokensService.html":{},"injectables/UserRefreshTokensService.html":{}}}],["createquerybuilder('chatentity",{"_index":998,"title":{},"body":{"injectables/ChatsService.html":{}}}],["createquerybuilder('chatparticipantentity",{"_index":741,"title":{},"body":{"injectables/ChatParticipantsService.html":{}}}],["createreadstream",{"_index":1971,"title":{},"body":{"injectables/StorageService.html":{}}}],["createreadstream(filedest",{"_index":1995,"title":{},"body":{"injectables/StorageService.html":{}}}],["createrepmock",{"_index":2286,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["createrepmock(code",{"_index":2469,"title":{},"body":{"miscellaneous/functions.html":{}}}],["createtoken",{"_index":203,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["createtoken(@body",{"_index":282,"title":{},"body":{"controllers/AuthController.html":{}}}],["createtoken(data",{"_index":218,"title":{},"body":{"controllers/AuthController.html":{}}}],["createtoken(undefined",{"_index":368,"title":{},"body":{"injectables/AuthService.html":{}}}],["createuser",{"_index":204,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["createuser(@body",{"_index":284,"title":{},"body":{"controllers/AuthController.html":{}}}],["createuser(data",{"_index":222,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["createuserdto",{"_index":1063,"title":{"classes/CreateUserDto.html":{}},"body":{"classes/ConfirmationEmailDto.html":{},"classes/CreateProfileDto.html":{},"classes/CreateUserDto.html":{},"classes/CredentialsDto.html":{},"classes/ResetPasswordDto.html":{},"classes/SendResetPasswordDto.html":{},"classes/UpdateUserDto.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["createusernotificationtokendto",{"_index":1144,"title":{"classes/CreateUserNotificationTokenDto.html":{}},"body":{"classes/CreateUserNotificationTokenDto.html":{},"classes/DeleteUserNotificationTokenDto.html":{},"classes/UpdateUserNotificationTokenDto.html":{},"controllers/UserNotificationTokensController.html":{},"coverage.html":{}}}],["createusernotificationtokendto:13",{"_index":1184,"title":{},"body":{"classes/DeleteUserNotificationTokenDto.html":{}}}],["createwritestream",{"_index":1970,"title":{},"body":{"injectables/StorageService.html":{}}}],["createwritestream(filepath",{"_index":1990,"title":{},"body":{"injectables/StorageService.html":{}}}],["credentialsdto",{"_index":219,"title":{"classes/CredentialsDto.html":{}},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/CredentialsDto.html":{},"coverage.html":{}}}],["cross",{"_index":2310,"title":{},"body":{"dependencies.html":{}}}],["crypto",{"_index":411,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/CreateMockFileReturn.html":{},"injectables/StorageService.html":{},"injectables/UserRefreshTokensService.html":{}}}],["crypto.randombytes(64",{"_index":1108,"title":{},"body":{"interfaces/CreateMockFileReturn.html":{}}}],["crypto.randombytes(8).tostring('hex",{"_index":1103,"title":{},"body":{"interfaces/CreateMockFileReturn.html":{}}}],["ctx",{"_index":47,"title":{},"body":{"classes/AllExceptionFilter.html":{},"classes/HttpExceptionFilter.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtRefreshGuard.html":{},"miscellaneous/variables.html":{}}}],["ctx.gethandler",{"_index":1490,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["ctx.getrequest",{"_index":50,"title":{},"body":{"classes/AllExceptionFilter.html":{}}}],["ctx.getresponse",{"_index":52,"title":{},"body":{"classes/AllExceptionFilter.html":{},"classes/HttpExceptionFilter.html":{}}}],["ctx.switchtohttp().getrequest",{"_index":2617,"title":{},"body":{"miscellaneous/variables.html":{}}}],["ctx.switchtows().getclient().data.user",{"_index":2615,"title":{},"body":{"miscellaneous/variables.html":{}}}],["curr",{"_index":940,"title":{},"body":{"injectables/ChatsService.html":{}}}],["current",{"_index":958,"title":{},"body":{"injectables/ChatsService.html":{},"injectables/NotificationsService.html":{},"injectables/SocketsService.html":{}}}],["current.notificationtokens.length",{"_index":1691,"title":{},"body":{"injectables/NotificationsService.html":{}}}],["current.notificationtokens.map((el",{"_index":1694,"title":{},"body":{"injectables/NotificationsService.html":{}}}],["current_timestamp",{"_index":498,"title":{},"body":{"entities/ChatEntity.html":{},"entities/ChatMessageEntity.html":{},"entities/ChatParticipantEntity.html":{},"entities/NotificationEntity.html":{},"entities/UserEntity.html":{},"entities/UserNotificationTokenEntity.html":{},"entities/UserRefreshTokenEntity.html":{}}}],["custom",{"_index":2192,"title":{},"body":{"injectables/UsersService.html":{}}}],["cyclic",{"_index":2059,"title":{},"body":{"entities/UserEntity.html":{}}}],["data",{"_index":217,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/ChatReadMessageDto.html":{},"classes/ChatReadMessageResponseDto.html":{},"classes/ChatReceiveMessageDto.html":{},"injectables/ChatsService.html":{},"classes/CreateChatMessageDto.html":{},"interfaces/CreateMockFileReturn.html":{},"controllers/FilesController.html":{},"injectables/FilesService.html":{},"controllers/NotificationsController.html":{},"injectables/NotificationsService.html":{},"interfaces/Response.html":{},"injectables/SendMailService.html":{},"injectables/TransformInterceptor.html":{},"classes/UploadedFile.html":{},"controllers/UserNotificationTokensController.html":{},"controllers/UsersController.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"classes/user1615673396368.html":{},"miscellaneous/variables.html":{}}}],["data.affected",{"_index":685,"title":{},"body":{"injectables/ChatMessagesService.html":{},"injectables/ChatsService.html":{}}}],["data.email",{"_index":472,"title":{},"body":{"injectables/AuthService.html":{}}}],["data.id",{"_index":947,"title":{},"body":{"injectables/ChatsService.html":{}}}],["data.map((el",{"_index":1699,"title":{},"body":{"injectables/NotificationsService.html":{}}}],["data.map((row",{"_index":943,"title":{},"body":{"injectables/ChatsService.html":{}}}],["data.map((value",{"_index":736,"title":{},"body":{"injectables/ChatParticipantsService.html":{}}}],["data.newmessagescount",{"_index":950,"title":{},"body":{"injectables/ChatsService.html":{}}}],["data.password",{"_index":481,"title":{},"body":{"injectables/AuthService.html":{}}}],["data.reduce((acc",{"_index":939,"title":{},"body":{"injectables/ChatsService.html":{}}}],["database",{"_index":171,"title":{},"body":{"modules/AppModule.html":{},"modules/DatabaseModule.html":{}}}],["databasemodule",{"_index":151,"title":{"modules/DatabaseModule.html":{}},"body":{"modules/AppModule.html":{},"modules/DatabaseModule.html":{},"modules.html":{},"overview.html":{}}}],["date",{"_index":494,"title":{},"body":{"entities/ChatEntity.html":{},"entities/ChatMessageEntity.html":{},"entities/ChatParticipantEntity.html":{},"entities/FileEntity.html":{},"classes/FileEntityPreview.html":{},"entities/NotificationEntity.html":{},"injectables/StorageS3Service.html":{},"injectables/StorageService.html":{},"entities/UserEntity.html":{},"entities/UserNotificationTokenEntity.html":{},"entities/UserRefreshTokenEntity.html":{}}}],["deacivated",{"_index":2462,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["deactivated",{"_index":2409,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["decorators",{"_index":88,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"entities/ChatEntity.html":{},"entities/ChatMessageEntity.html":{},"entities/ChatParticipantEntity.html":{},"classes/ChatReadMessageDto.html":{},"classes/ChatReadMessageResponseDto.html":{},"classes/ChatReceiveMessageDto.html":{},"controllers/ChatsController.html":{},"classes/ChatsGateway.html":{},"classes/ConfirmationEmailDto.html":{},"classes/CreateChatDto.html":{},"classes/CreateChatMessageDto.html":{},"classes/CreateFileDto.html":{},"classes/CreateNotificationDto.html":{},"classes/CreateUserDto.html":{},"classes/CreateUserNotificationTokenDto.html":{},"classes/DeleteUserNotificationTokenDto.html":{},"classes/DownloadFileDto.html":{},"entities/FileEntity.html":{},"controllers/FilesController.html":{},"classes/FindManyOptionsDto.html":{},"classes/FindOneOptionsDto.html":{},"classes/ID.html":{},"classes/JwtTokensDto.html":{},"entities/NotificationEntity.html":{},"controllers/NotificationsController.html":{},"injectables/NotificationsService.html":{},"classes/ResetPasswordDto.html":{},"classes/SelectChatMessagesDto.html":{},"classes/SelectChatsDto.html":{},"classes/SelectFileDto.html":{},"classes/SelectFilesDto.html":{},"classes/SelectNotificationsDto.html":{},"classes/SelectProfileDto.html":{},"classes/SelectUserDto.html":{},"classes/SelectUserNotificationTokenDto.html":{},"classes/SelectUserNotificationTokensDto.html":{},"classes/SelectUsersDto.html":{},"injectables/StorageService.html":{},"classes/UpdateNotificationDto.html":{},"classes/UpdatePasswordDto.html":{},"entities/UserEntity.html":{},"entities/UserNotificationTokenEntity.html":{},"controllers/UserNotificationTokensController.html":{},"injectables/UserNotificationTokensService.html":{},"entities/UserRefreshTokenEntity.html":{},"injectables/UserRefreshTokensService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["decorators.api_operation",{"_index":2625,"title":{},"body":{"miscellaneous/variables.html":{}}}],["deeppartial",{"_index":1644,"title":{},"body":{"injectables/NotificationsService.html":{}}}],["default",{"_index":19,"title":{},"body":{"classes/AllExceptionFilter.html":{},"injectables/AuthService.html":{},"entities/ChatEntity.html":{},"entities/ChatMessageEntity.html":{},"injectables/ChatMessagesService.html":{},"entities/ChatParticipantEntity.html":{},"injectables/ChatParticipantsService.html":{},"classes/ChatReceiveMessageDto.html":{},"injectables/ChatsService.html":{},"classes/CreateChatMessageDto.html":{},"entities/FileEntity.html":{},"classes/FileEntityPreview.html":{},"injectables/FilesService.html":{},"classes/FindManyOptionsDto.html":{},"modules/MultipartModule.html":{},"entities/NotificationEntity.html":{},"injectables/NotificationsService.html":{},"classes/SelectChatMessagesDto.html":{},"classes/SelectChatsDto.html":{},"classes/SelectFilesDto.html":{},"classes/SelectNotificationsDto.html":{},"classes/SelectUserNotificationTokensDto.html":{},"classes/SelectUsersDto.html":{},"injectables/SendMailService.html":{},"injectables/SocketsService.html":{},"injectables/StorageService.html":{},"entities/UserEntity.html":{},"entities/UserNotificationTokenEntity.html":{},"injectables/UserNotificationTokensService.html":{},"entities/UserRefreshTokenEntity.html":{},"injectables/UserRefreshTokensService.html":{},"injectables/UsersService.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["defaults",{"_index":1807,"title":{},"body":{"modules/SendMailModule.html":{}}}],["defined",{"_index":23,"title":{},"body":{"classes/AllExceptionFilter.html":{},"controllers/AppController.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"entities/ChatEntity.html":{},"entities/ChatMessageEntity.html":{},"injectables/ChatMessagesService.html":{},"entities/ChatParticipantEntity.html":{},"injectables/ChatParticipantsService.html":{},"classes/ChatReadMessageDto.html":{},"classes/ChatReadMessageResponseDto.html":{},"classes/ChatReceiveMessageDto.html":{},"controllers/ChatsController.html":{},"classes/ChatsGateway.html":{},"injectables/ChatsService.html":{},"injectables/ConfigService.html":{},"classes/ConfirmationEmailDto.html":{},"classes/CreateChatDto.html":{},"classes/CreateChatMessageDto.html":{},"classes/CreateFileDto.html":{},"classes/CreateNotificationDto.html":{},"classes/CreateUserDto.html":{},"classes/CreateUserNotificationTokenDto.html":{},"classes/DeleteUserNotificationTokenDto.html":{},"classes/DownloadFileDto.html":{},"entities/FileEntity.html":{},"classes/FileEntityPreview.html":{},"injectables/FileValidationPipe.html":{},"controllers/FilesController.html":{},"injectables/FilesService.html":{},"classes/FindManyOptionsDto.html":{},"classes/FindOneOptionsDto.html":{},"classes/HttpExceptionFilter.html":{},"classes/ID.html":{},"classes/JwtAccessTokenPayloadDto.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtRefreshGuard.html":{},"classes/JwtRefreshTokenPayloadDto.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"classes/JwtTokensDto.html":{},"modules/MultipartModule.html":{},"interfaces/MultipartOptionsFactory.html":{},"entities/NotificationEntity.html":{},"controllers/NotificationsController.html":{},"injectables/NotificationsService.html":{},"classes/PaginationChatMessagesDto.html":{},"classes/PaginationChatParticipantsDto.html":{},"classes/PaginationChatsDto.html":{},"classes/PaginationFilesDto.html":{},"classes/PaginationNotificationsDto.html":{},"classes/PaginationUserNotificationTokensDto.html":{},"classes/PaginationUsersDto.html":{},"classes/ResetPasswordDto.html":{},"classes/SelectChatMessagesDto.html":{},"classes/SelectChatsDto.html":{},"classes/SelectFileDto.html":{},"classes/SelectFilesDto.html":{},"classes/SelectNotificationsDto.html":{},"classes/SelectProfileDto.html":{},"classes/SelectUserDto.html":{},"classes/SelectUserNotificationTokenDto.html":{},"classes/SelectUserNotificationTokensDto.html":{},"classes/SelectUsersDto.html":{},"injectables/SendMailService.html":{},"classes/SocketsExceptionFilter.html":{},"classes/SocketsGateway.html":{},"injectables/SocketsService.html":{},"injectables/StorageS3Service.html":{},"injectables/StorageService.html":{},"injectables/TransformInterceptor.html":{},"classes/UpdateNotificationDto.html":{},"classes/UpdatePasswordDto.html":{},"classes/UploadedFile.html":{},"entities/UserEntity.html":{},"entities/UserNotificationTokenEntity.html":{},"controllers/UserNotificationTokensController.html":{},"injectables/UserNotificationTokensService.html":{},"entities/UserRefreshTokenEntity.html":{},"injectables/UserRefreshTokensService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"miscellaneous/enumerations.html":{},"classes/user1615673396368.html":{}}}],["delete",{"_index":806,"title":{},"body":{"controllers/ChatsController.html":{},"controllers/FilesController.html":{},"controllers/NotificationsController.html":{},"injectables/SocketsService.html":{},"controllers/UserNotificationTokensController.html":{},"controllers/UsersController.html":{}}}],["delete(':id",{"_index":821,"title":{},"body":{"controllers/ChatsController.html":{},"controllers/FilesController.html":{},"controllers/NotificationsController.html":{},"controllers/UserNotificationTokensController.html":{},"controllers/UsersController.html":{}}}],["delete(':id')@apibearerauth()@useguards(jwtauthguard)@userole(userroleenum.admin",{"_index":1256,"title":{},"body":{"controllers/FilesController.html":{}}}],["delete(':id')@userole(userroleenum.admin",{"_index":794,"title":{},"body":{"controllers/ChatsController.html":{},"controllers/UsersController.html":{}}}],["deletedat",{"_index":2026,"title":{},"body":{"entities/UserEntity.html":{}}}],["deletedatecolumn",{"_index":2049,"title":{},"body":{"entities/UserEntity.html":{}}}],["deleteobject",{"_index":1952,"title":{},"body":{"injectables/StorageS3Service.html":{}}}],["deleteone",{"_index":579,"title":{},"body":{"injectables/ChatMessagesService.html":{},"injectables/ChatParticipantsService.html":{},"controllers/ChatsController.html":{},"injectables/ChatsService.html":{},"controllers/FilesController.html":{},"injectables/FilesService.html":{},"controllers/NotificationsController.html":{},"injectables/NotificationsService.html":{},"injectables/StorageS3Service.html":{},"injectables/StorageService.html":{},"controllers/UserNotificationTokensController.html":{},"injectables/UserNotificationTokensService.html":{},"injectables/UserRefreshTokensService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["deleteone(@param",{"_index":823,"title":{},"body":{"controllers/ChatsController.html":{},"controllers/FilesController.html":{},"controllers/UsersController.html":{}}}],["deleteone(conditions",{"_index":596,"title":{},"body":{"injectables/ChatMessagesService.html":{},"injectables/ChatParticipantsService.html":{},"controllers/ChatsController.html":{},"injectables/ChatsService.html":{},"controllers/FilesController.html":{},"injectables/FilesService.html":{},"controllers/NotificationsController.html":{},"injectables/NotificationsService.html":{},"controllers/UserNotificationTokensController.html":{},"injectables/UserNotificationTokensService.html":{},"injectables/UserRefreshTokensService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["deleteone(filename",{"_index":1959,"title":{},"body":{"injectables/StorageService.html":{}}}],["deleteone(key",{"_index":1911,"title":{},"body":{"injectables/StorageS3Service.html":{}}}],["deleteonebytoken",{"_index":2074,"title":{},"body":{"controllers/UserNotificationTokensController.html":{}}}],["deleteonebytoken(conditions",{"_index":2078,"title":{},"body":{"controllers/UserNotificationTokensController.html":{}}}],["deleteusernotificationtokendto",{"_index":1182,"title":{"classes/DeleteUserNotificationTokenDto.html":{}},"body":{"classes/DeleteUserNotificationTokenDto.html":{},"controllers/UserNotificationTokensController.html":{},"coverage.html":{}}}],["dependencies",{"_index":145,"title":{"dependencies.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/ChatsModule.html":{},"modules/ConfigModule.html":{},"modules/FilesModule.html":{},"modules/NotificationsModule.html":{},"modules/SendMailModule.html":{},"modules/SocketsModule.html":{},"modules/UsersModule.html":{},"dependencies.html":{},"overview.html":{}}}],["dependency",{"_index":2060,"title":{},"body":{"entities/UserEntity.html":{}}}],["derivedkey",{"_index":2561,"title":{},"body":{"miscellaneous/variables.html":{}}}],["derivedkey.tostring('hex",{"_index":2565,"title":{},"body":{"miscellaneous/variables.html":{}}}],["desc",{"_index":982,"title":{},"body":{"injectables/ChatsService.html":{},"classes/FindManyOptionsDto.html":{},"classes/SelectChatMessagesDto.html":{},"classes/SelectChatsDto.html":{},"classes/SelectFilesDto.html":{},"classes/SelectNotificationsDto.html":{},"classes/SelectUserNotificationTokensDto.html":{},"classes/SelectUsersDto.html":{},"miscellaneous/variables.html":{}}}],["description",{"_index":86,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"entities/ChatEntity.html":{},"entities/ChatMessageEntity.html":{},"injectables/ChatMessagesService.html":{},"entities/ChatParticipantEntity.html":{},"injectables/ChatParticipantsService.html":{},"classes/ChatReadMessageDto.html":{},"classes/ChatReadMessageResponseDto.html":{},"classes/ChatReceiveMessageDto.html":{},"controllers/ChatsController.html":{},"classes/ChatsGateway.html":{},"modules/ChatsModule.html":{},"injectables/ChatsService.html":{},"modules/ConfigModule.html":{},"injectables/ConfigService.html":{},"classes/ConfirmationEmailDto.html":{},"classes/CreateChatDto.html":{},"classes/CreateChatMessageDto.html":{},"classes/CreateFileDto.html":{},"classes/CreateProfileDto.html":{},"classes/CreateUserDto.html":{},"classes/CreateUserNotificationTokenDto.html":{},"classes/CredentialsDto.html":{},"modules/DatabaseModule.html":{},"classes/DeleteUserNotificationTokenDto.html":{},"classes/DownloadFileDto.html":{},"entities/FileEntity.html":{},"classes/FileEntityPreview.html":{},"injectables/FileValidationPipe.html":{},"controllers/FilesController.html":{},"modules/FilesModule.html":{},"injectables/FilesService.html":{},"interfaces/FindManyBracketsOptions.html":{},"classes/FindManyOptionsDto.html":{},"classes/FindOneOptionsDto.html":{},"classes/HttpExceptionFilter.html":{},"classes/ID.html":{},"classes/JwtAccessTokenPayloadDto.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtRefreshGuard.html":{},"classes/JwtRefreshTokenDto.html":{},"classes/JwtRefreshTokenPayloadDto.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"classes/JwtTokensDto.html":{},"modules/MultipartModule.html":{},"interfaces/MultipartModuleAsyncOptions.html":{},"interfaces/MultipartOptionsFactory.html":{},"entities/NotificationEntity.html":{},"controllers/NotificationsController.html":{},"injectables/NotificationsService.html":{},"classes/PaginationChatMessagesDto.html":{},"classes/PaginationChatParticipantsDto.html":{},"classes/PaginationChatsDto.html":{},"classes/PaginationFilesDto.html":{},"classes/PaginationUserNotificationTokensDto.html":{},"classes/PaginationUsersDto.html":{},"classes/ResetPasswordDto.html":{},"interfaces/Response.html":{},"classes/SelectChatMessagesDto.html":{},"classes/SelectChatsDto.html":{},"classes/SelectFileDto.html":{},"classes/SelectFilesDto.html":{},"classes/SelectNotificationsDto.html":{},"classes/SelectProfileDto.html":{},"classes/SelectUserDto.html":{},"classes/SelectUserNotificationTokenDto.html":{},"classes/SelectUserNotificationTokensDto.html":{},"classes/SelectUsersDto.html":{},"injectables/SendMailService.html":{},"classes/SendResetPasswordDto.html":{},"classes/SocketsExceptionFilter.html":{},"classes/SocketsGateway.html":{},"modules/SocketsModule.html":{},"injectables/SocketsService.html":{},"injectables/StorageS3Service.html":{},"injectables/StorageService.html":{},"injectables/TransformInterceptor.html":{},"classes/UpdateEmailDto.html":{},"classes/UpdatePasswordDto.html":{},"classes/UpdateProfileDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserNotificationTokenDto.html":{},"classes/UploadedFile.html":{},"entities/UserEntity.html":{},"entities/UserNotificationTokenEntity.html":{},"controllers/UserNotificationTokensController.html":{},"injectables/UserNotificationTokensService.html":{},"entities/UserRefreshTokenEntity.html":{},"injectables/UserRefreshTokensService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"properties.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["descriptor",{"_index":2619,"title":{},"body":{"miscellaneous/variables.html":{}}}],["descriptor.value",{"_index":2626,"title":{},"body":{"miscellaneous/variables.html":{}}}],["destination",{"_index":1955,"title":{},"body":{"injectables/StorageService.html":{}}}],["development",{"_index":2356,"title":{},"body":{"miscellaneous/enumerations.html":{},"index.html":{}}}],["digits",{"_index":379,"title":{},"body":{"injectables/AuthService.html":{}}}],["dir",{"_index":1809,"title":{},"body":{"modules/SendMailModule.html":{}}}],["directions",{"_index":1397,"title":{},"body":{"classes/FindManyOptionsDto.html":{},"classes/SelectChatMessagesDto.html":{},"classes/SelectChatsDto.html":{},"classes/SelectFilesDto.html":{},"classes/SelectNotificationsDto.html":{},"classes/SelectUserNotificationTokensDto.html":{},"classes/SelectUsersDto.html":{}}}],["directory",{"_index":1034,"title":{},"body":{"injectables/ConfigService.html":{}}}],["dirname",{"_index":1154,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["dirname(__dirname",{"_index":1177,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["disk",{"_index":115,"title":{},"body":{"controllers/AppController.html":{}}}],["diskhealthindicator",{"_index":100,"title":{},"body":{"controllers/AppController.html":{}}}],["disposition",{"_index":1342,"title":{},"body":{"injectables/FilesService.html":{}}}],["documentation",{"_index":2218,"title":{},"body":{"coverage.html":{}}}],["don't",{"_index":2439,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["dot",{"_index":2581,"title":{},"body":{"miscellaneous/variables.html":{}}}],["dotenv",{"_index":1017,"title":{},"body":{"injectables/ConfigService.html":{},"dependencies.html":{}}}],["dotnotation",{"_index":1432,"title":{},"body":{"classes/FindManyOptionsDto.html":{},"classes/FindOneOptionsDto.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["dotnotation(this.asc",{"_index":1439,"title":{},"body":{"classes/FindManyOptionsDto.html":{}}}],["dotnotation(this.desc",{"_index":1441,"title":{},"body":{"classes/FindManyOptionsDto.html":{}}}],["dotnotation(this.selection",{"_index":1456,"title":{},"body":{"classes/FindOneOptionsDto.html":{}}}],["down",{"_index":2525,"title":{},"body":{"classes/user1615673396368.html":{}}}],["down(undefined",{"_index":2526,"title":{},"body":{"classes/user1615673396368.html":{}}}],["download",{"_index":1189,"title":{},"body":{"classes/DownloadFileDto.html":{},"injectables/FilesService.html":{}}}],["downloadfiledto",{"_index":1187,"title":{"classes/DownloadFileDto.html":{}},"body":{"classes/DownloadFileDto.html":{},"controllers/FilesController.html":{},"injectables/FilesService.html":{},"coverage.html":{}}}],["downloadone",{"_index":1251,"title":{},"body":{"controllers/FilesController.html":{},"injectables/FilesService.html":{}}}],["downloadone(rep",{"_index":1258,"title":{},"body":{"controllers/FilesController.html":{},"injectables/FilesService.html":{}}}],["dropschema",{"_index":1171,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["dto",{"_index":273,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/ChatMessagesService.html":{},"injectables/ChatParticipantsService.html":{},"controllers/ChatsController.html":{},"classes/ChatsGateway.html":{},"injectables/ChatsService.html":{},"controllers/FilesController.html":{},"injectables/FilesService.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"controllers/NotificationsController.html":{},"injectables/NotificationsService.html":{},"injectables/StorageS3Service.html":{},"injectables/StorageService.html":{},"controllers/UserNotificationTokensController.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["dto.participant",{"_index":819,"title":{},"body":{"controllers/ChatsController.html":{}}}],["dto.participant.id",{"_index":816,"title":{},"body":{"controllers/ChatsController.html":{}}}],["dynamicmodule",{"_index":1542,"title":{},"body":{"modules/MultipartModule.html":{}}}],["e2e",{"_index":2495,"title":{},"body":{"index.html":{}}}],["each",{"_index":1434,"title":{},"body":{"classes/FindManyOptionsDto.html":{},"classes/FindOneOptionsDto.html":{}}}],["eager",{"_index":546,"title":{},"body":{"entities/ChatMessageEntity.html":{},"classes/FindManyOptionsDto.html":{},"classes/FindOneOptionsDto.html":{},"classes/SelectChatMessagesDto.html":{},"classes/SelectChatsDto.html":{},"classes/SelectFileDto.html":{},"classes/SelectFilesDto.html":{},"classes/SelectNotificationsDto.html":{},"classes/SelectProfileDto.html":{},"classes/SelectUserDto.html":{},"classes/SelectUserNotificationTokenDto.html":{},"classes/SelectUserNotificationTokensDto.html":{},"classes/SelectUsersDto.html":{},"entities/UserEntity.html":{}}}],["el.token",{"_index":1685,"title":{},"body":{"injectables/NotificationsService.html":{}}}],["elation.field",{"_index":1390,"title":{},"body":{"classes/FindManyOptionsDto.html":{},"classes/SelectChatMessagesDto.html":{},"classes/SelectChatsDto.html":{},"classes/SelectFilesDto.html":{},"classes/SelectNotificationsDto.html":{},"classes/SelectUserNotificationTokensDto.html":{},"classes/SelectUsersDto.html":{}}}],["email",{"_index":445,"title":{},"body":{"injectables/AuthService.html":{},"classes/ConfirmationEmailDto.html":{},"classes/CreateProfileDto.html":{},"classes/CreateUserDto.html":{},"classes/CredentialsDto.html":{},"classes/ResetPasswordDto.html":{},"classes/SendResetPasswordDto.html":{},"classes/UpdateEmailDto.html":{},"classes/UpdatePasswordDto.html":{},"classes/UpdateProfileDto.html":{},"entities/UserEntity.html":{},"classes/user1615673396368.html":{},"miscellaneous/variables.html":{}}}],["email.dto.ts",{"_index":1059,"title":{},"body":{"classes/ConfirmationEmailDto.html":{},"coverage.html":{}}}],["email.dto.ts:15",{"_index":1062,"title":{},"body":{"classes/ConfirmationEmailDto.html":{}}}],["emitclose",{"_index":1996,"title":{},"body":{"injectables/StorageService.html":{}}}],["enableimplicitconversion",{"_index":2638,"title":{},"body":{"miscellaneous/variables.html":{}}}],["encoding",{"_index":1096,"title":{},"body":{"interfaces/CreateMockFileReturn.html":{},"entities/FileEntity.html":{},"classes/FileEntityPreview.html":{},"injectables/StorageS3Service.html":{},"injectables/StorageService.html":{},"classes/UploadedFile.html":{}}}],["encrypted",{"_index":397,"title":{},"body":{"injectables/AuthService.html":{},"miscellaneous/variables.html":{}}}],["encrypted).catch",{"_index":462,"title":{},"body":{"injectables/AuthService.html":{}}}],["encrypted.split",{"_index":2557,"title":{},"body":{"miscellaneous/variables.html":{}}}],["end",{"_index":980,"title":{},"body":{"injectables/ChatsService.html":{},"injectables/FilesService.html":{}}}],["end}/${+filesize",{"_index":1368,"title":{},"body":{"injectables/FilesService.html":{}}}],["entire",{"_index":2428,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["entities",{"_index":485,"title":{},"body":{"entities/ChatEntity.html":{},"entities/ChatMessageEntity.html":{},"injectables/ChatMessagesService.html":{},"entities/ChatParticipantEntity.html":{},"injectables/ChatParticipantsService.html":{},"classes/ChatReadMessageDto.html":{},"classes/ChatReadMessageResponseDto.html":{},"classes/ChatReceiveMessageDto.html":{},"controllers/ChatsController.html":{},"modules/ChatsModule.html":{},"injectables/ChatsService.html":{},"classes/CreateChatMessageDto.html":{},"modules/DatabaseModule.html":{},"entities/FileEntity.html":{},"controllers/FilesController.html":{},"modules/FilesModule.html":{},"injectables/FilesService.html":{},"classes/FindManyOptionsDto.html":{},"entities/NotificationEntity.html":{},"controllers/NotificationsController.html":{},"modules/NotificationsModule.html":{},"injectables/NotificationsService.html":{},"classes/PaginationChatMessagesDto.html":{},"classes/PaginationChatParticipantsDto.html":{},"classes/PaginationChatsDto.html":{},"classes/PaginationFilesDto.html":{},"classes/PaginationNotificationsDto.html":{},"classes/PaginationUserNotificationTokensDto.html":{},"classes/PaginationUsersDto.html":{},"classes/SelectChatMessagesDto.html":{},"classes/SelectChatsDto.html":{},"classes/SelectFileDto.html":{},"classes/SelectFilesDto.html":{},"classes/SelectNotificationsDto.html":{},"classes/SelectUserDto.html":{},"classes/SelectUserNotificationTokenDto.html":{},"classes/SelectUserNotificationTokensDto.html":{},"classes/SelectUsersDto.html":{},"entities/UserEntity.html":{},"entities/UserNotificationTokenEntity.html":{},"controllers/UserNotificationTokensController.html":{},"injectables/UserNotificationTokensService.html":{},"entities/UserRefreshTokenEntity.html":{},"injectables/UserRefreshTokensService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"overview.html":{}}}],["entities[index",{"_index":1692,"title":{},"body":{"injectables/NotificationsService.html":{}}}],["entitieslike",{"_index":1629,"title":{},"body":{"injectables/NotificationsService.html":{}}}],["entity",{"_index":483,"title":{"entities/ChatEntity.html":{},"entities/ChatMessageEntity.html":{},"entities/ChatParticipantEntity.html":{},"entities/FileEntity.html":{},"entities/NotificationEntity.html":{},"entities/UserEntity.html":{},"entities/UserNotificationTokenEntity.html":{},"entities/UserRefreshTokenEntity.html":{}},"body":{"entities/ChatEntity.html":{},"entities/ChatMessageEntity.html":{},"injectables/ChatMessagesService.html":{},"entities/ChatParticipantEntity.html":{},"injectables/ChatParticipantsService.html":{},"classes/ChatReadMessageDto.html":{},"injectables/ChatsService.html":{},"classes/DownloadFileDto.html":{},"entities/FileEntity.html":{},"classes/FileEntityPreview.html":{},"injectables/FilesService.html":{},"classes/FindManyOptionsDto.html":{},"classes/FindOneOptionsDto.html":{},"classes/ID.html":{},"entities/NotificationEntity.html":{},"injectables/NotificationsService.html":{},"classes/SelectChatMessagesDto.html":{},"classes/SelectChatsDto.html":{},"classes/SelectFileDto.html":{},"classes/SelectFilesDto.html":{},"classes/SelectNotificationsDto.html":{},"classes/SelectProfileDto.html":{},"classes/SelectUserDto.html":{},"classes/SelectUserNotificationTokenDto.html":{},"classes/SelectUserNotificationTokensDto.html":{},"classes/SelectUsersDto.html":{},"entities/UserEntity.html":{},"entities/UserNotificationTokenEntity.html":{},"injectables/UserNotificationTokensService.html":{},"entities/UserRefreshTokenEntity.html":{},"injectables/UserRefreshTokensService.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["entity('chat_messages",{"_index":570,"title":{},"body":{"entities/ChatMessageEntity.html":{}}}],["entity('chat_participants",{"_index":701,"title":{},"body":{"entities/ChatParticipantEntity.html":{}}}],["entity('chats",{"_index":533,"title":{},"body":{"entities/ChatEntity.html":{}}}],["entity('files",{"_index":1217,"title":{},"body":{"entities/FileEntity.html":{},"classes/FileEntityPreview.html":{}}}],["entity('notifications",{"_index":1587,"title":{},"body":{"entities/NotificationEntity.html":{}}}],["entity('user_notification_tokens",{"_index":2069,"title":{},"body":{"entities/UserNotificationTokenEntity.html":{}}}],["entity('user_refresh_tokens",{"_index":2123,"title":{},"body":{"entities/UserRefreshTokenEntity.html":{}}}],["entity('users",{"_index":2051,"title":{},"body":{"entities/UserEntity.html":{}}}],["entity.title",{"_index":1678,"title":{},"body":{"injectables/NotificationsService.html":{}}}],["entity_relation_field",{"_index":2197,"title":{},"body":{"injectables/UsersService.html":{}}}],["entitylike",{"_index":594,"title":{},"body":{"injectables/ChatMessagesService.html":{},"injectables/ChatParticipantsService.html":{},"classes/ChatsGateway.html":{},"injectables/ChatsService.html":{},"injectables/FilesService.html":{},"injectables/NotificationsService.html":{},"injectables/UserNotificationTokensService.html":{},"injectables/UserRefreshTokensService.html":{},"injectables/UsersService.html":{}}}],["entitylike).catch",{"_index":1675,"title":{},"body":{"injectables/NotificationsService.html":{}}}],["entitylike.chat",{"_index":869,"title":{},"body":{"classes/ChatsGateway.html":{}}}],["entitylike.chat.id",{"_index":629,"title":{},"body":{"injectables/ChatMessagesService.html":{}}}],["enum",{"_index":554,"title":{},"body":{"entities/ChatMessageEntity.html":{},"classes/ChatReceiveMessageDto.html":{},"injectables/ConfigService.html":{},"classes/CreateChatMessageDto.html":{},"entities/NotificationEntity.html":{},"classes/SelectNotificationsDto.html":{},"entities/UserEntity.html":{}}}],["enumerations",{"_index":2335,"title":{"miscellaneous/enumerations.html":{}},"body":{"miscellaneous/enumerations.html":{}}}],["enums",{"_index":44,"title":{},"body":{"classes/AllExceptionFilter.html":{},"entities/ChatMessageEntity.html":{},"injectables/ChatMessagesService.html":{},"classes/ChatReceiveMessageDto.html":{},"classes/ChatsGateway.html":{},"injectables/ChatsService.html":{},"classes/CreateChatMessageDto.html":{},"classes/CreateNotificationDto.html":{},"entities/NotificationEntity.html":{},"injectables/NotificationsService.html":{},"classes/SelectNotificationsDto.html":{},"classes/SelectUsersDto.html":{},"classes/SocketsExceptionFilter.html":{},"classes/UpdateNotificationDto.html":{},"entities/UserEntity.html":{},"controllers/UsersController.html":{}}}],["env",{"_index":2311,"title":{},"body":{"dependencies.html":{},"index.html":{}}}],["env.development",{"_index":2482,"title":{},"body":{"index.html":{}}}],["env.example",{"_index":2486,"title":{},"body":{"index.html":{}}}],["env.production",{"_index":2483,"title":{},"body":{"index.html":{}}}],["env.test",{"_index":2484,"title":{},"body":{"index.html":{}}}],["env/.env.${process.env.node_env",{"_index":1049,"title":{},"body":{"injectables/ConfigService.html":{}}}],["environment",{"_index":1023,"title":{},"body":{"injectables/ConfigService.html":{}}}],["equal",{"_index":913,"title":{},"body":{"injectables/ChatsService.html":{}}}],["err",{"_index":1485,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["error",{"_index":26,"title":{},"body":{"classes/AllExceptionFilter.html":{},"injectables/ConfigService.html":{},"classes/HttpExceptionFilter.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtRefreshGuard.html":{},"classes/SocketsExceptionFilter.html":{},"classes/SocketsGateway.html":{}}}],["error.message",{"_index":1862,"title":{},"body":{"classes/SocketsGateway.html":{}}}],["errortypeenum",{"_index":43,"title":{},"body":{"classes/AllExceptionFilter.html":{},"injectables/AuthService.html":{},"injectables/ChatMessagesService.html":{},"injectables/ChatParticipantsService.html":{},"injectables/ChatsService.html":{},"injectables/FileValidationPipe.html":{},"injectables/FilesService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtRefreshGuard.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/NotificationsService.html":{},"classes/SocketsExceptionFilter.html":{},"classes/SocketsGateway.html":{},"injectables/StorageS3Service.html":{},"injectables/StorageService.html":{},"injectables/UserNotificationTokensService.html":{},"injectables/UserRefreshTokensService.html":{},"injectables/UsersService.html":{},"miscellaneous/enumerations.html":{}}}],["errortypeenum.internal_server_error",{"_index":60,"title":{},"body":{"classes/AllExceptionFilter.html":{}}}],["event",{"_index":2423,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["event_booking_accepted",{"_index":2422,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["event_cancelled_after_15_min",{"_index":2453,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["event_cancelled_by_artist",{"_index":2425,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["event_ended",{"_index":2456,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["event_reminder",{"_index":2455,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["event_reminder_15_minutes",{"_index":2441,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["event_reminder_1_hour",{"_index":2437,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["event_was_prolong",{"_index":2454,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["events",{"_index":2448,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["events.enum.ts",{"_index":2339,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["example",{"_index":544,"title":{},"body":{"entities/ChatMessageEntity.html":{},"injectables/ChatMessagesService.html":{},"injectables/ChatParticipantsService.html":{},"injectables/ChatsService.html":{},"classes/ConfirmationEmailDto.html":{},"classes/CreateUserDto.html":{},"entities/FileEntity.html":{},"classes/FileEntityPreview.html":{},"injectables/FilesService.html":{},"classes/FindManyOptionsDto.html":{},"classes/FindOneOptionsDto.html":{},"injectables/NotificationsService.html":{},"classes/ResetPasswordDto.html":{},"classes/SelectChatMessagesDto.html":{},"classes/SelectChatsDto.html":{},"classes/SelectFileDto.html":{},"classes/SelectFilesDto.html":{},"classes/SelectNotificationsDto.html":{},"classes/SelectProfileDto.html":{},"classes/SelectUserDto.html":{},"classes/SelectUserNotificationTokenDto.html":{},"classes/SelectUserNotificationTokensDto.html":{},"classes/SelectUsersDto.html":{},"classes/SendResetPasswordDto.html":{},"classes/UpdateEmailDto.html":{},"classes/UpdatePasswordDto.html":{},"classes/UpdateProfileDto.html":{},"injectables/UsersService.html":{}}}],["example.md",{"_index":1769,"title":{},"body":{"classes/SelectFilesDto.html":{}}}],["exception",{"_index":33,"title":{},"body":{"classes/AllExceptionFilter.html":{},"classes/HttpExceptionFilter.html":{},"classes/SocketsExceptionFilter.html":{}}}],["exception.filter.ts",{"_index":7,"title":{},"body":{"classes/AllExceptionFilter.html":{},"classes/HttpExceptionFilter.html":{},"classes/SocketsExceptionFilter.html":{},"coverage.html":{}}}],["exception.filter.ts:12",{"_index":1461,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["exception.filter.ts:15",{"_index":1830,"title":{},"body":{"classes/SocketsExceptionFilter.html":{}}}],["exception.filter.ts:16",{"_index":24,"title":{},"body":{"classes/AllExceptionFilter.html":{}}}],["exception.filter.ts:18",{"_index":29,"title":{},"body":{"classes/AllExceptionFilter.html":{}}}],["exception.filter.ts:23",{"_index":1834,"title":{},"body":{"classes/SocketsExceptionFilter.html":{}}}],["exception.geterror",{"_index":1839,"title":{},"body":{"classes/SocketsExceptionFilter.html":{}}}],["exception.getresponse",{"_index":58,"title":{},"body":{"classes/AllExceptionFilter.html":{},"classes/HttpExceptionFilter.html":{},"classes/SocketsExceptionFilter.html":{}}}],["exception.getstatus",{"_index":55,"title":{},"body":{"classes/AllExceptionFilter.html":{},"classes/HttpExceptionFilter.html":{}}}],["exception.message",{"_index":1840,"title":{},"body":{"classes/SocketsExceptionFilter.html":{}}}],["exception.stack",{"_index":74,"title":{},"body":{"classes/AllExceptionFilter.html":{}}}],["exceptionfilter",{"_index":9,"title":{},"body":{"classes/AllExceptionFilter.html":{},"classes/HttpExceptionFilter.html":{}}}],["exclude",{"_index":2122,"title":{},"body":{"entities/UserRefreshTokenEntity.html":{}}}],["exclude()@apihideproperty()@column({type",{"_index":2118,"title":{},"body":{"entities/UserRefreshTokenEntity.html":{}}}],["executioncontext",{"_index":1477,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"interfaces/Response.html":{},"injectables/TransformInterceptor.html":{},"miscellaneous/variables.html":{}}}],["expect(fs.existssync(filepath)).toequal(true",{"_index":1113,"title":{},"body":{"interfaces/CreateMockFileReturn.html":{}}}],["expire",{"_index":2452,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["expiresin",{"_index":433,"title":{},"body":{"injectables/AuthService.html":{},"modules/SocketsModule.html":{}}}],["expiresinaccesstoken",{"_index":350,"title":{},"body":{"injectables/AuthService.html":{}}}],["expiresinrefreshtoken",{"_index":351,"title":{},"body":{"injectables/AuthService.html":{}}}],["export",{"_index":45,"title":{},"body":{"classes/AllExceptionFilter.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"entities/ChatEntity.html":{},"entities/ChatMessageEntity.html":{},"injectables/ChatMessagesService.html":{},"entities/ChatParticipantEntity.html":{},"injectables/ChatParticipantsService.html":{},"classes/ChatReadMessageDto.html":{},"classes/ChatReadMessageResponseDto.html":{},"classes/ChatReceiveMessageDto.html":{},"controllers/ChatsController.html":{},"classes/ChatsGateway.html":{},"modules/ChatsModule.html":{},"injectables/ChatsService.html":{},"modules/ConfigModule.html":{},"injectables/ConfigService.html":{},"classes/ConfirmationEmailDto.html":{},"classes/CreateChatDto.html":{},"classes/CreateChatMessageDto.html":{},"classes/CreateFileDto.html":{},"interfaces/CreateMockFileReturn.html":{},"classes/CreateNotificationDto.html":{},"classes/CreateProfileDto.html":{},"classes/CreateUserDto.html":{},"classes/CreateUserNotificationTokenDto.html":{},"classes/CredentialsDto.html":{},"modules/DatabaseModule.html":{},"classes/DeleteUserNotificationTokenDto.html":{},"classes/DownloadFileDto.html":{},"entities/FileEntity.html":{},"classes/FileEntityPreview.html":{},"injectables/FileValidationPipe.html":{},"controllers/FilesController.html":{},"modules/FilesModule.html":{},"injectables/FilesService.html":{},"interfaces/FindManyBracketsOptions.html":{},"classes/FindManyOptionsDto.html":{},"classes/FindOneOptionsDto.html":{},"classes/HttpExceptionFilter.html":{},"classes/ID.html":{},"classes/JwtAccessTokenPayloadDto.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtRefreshGuard.html":{},"classes/JwtRefreshTokenDto.html":{},"classes/JwtRefreshTokenPayloadDto.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"classes/JwtTokensDto.html":{},"modules/MultipartModule.html":{},"interfaces/MultipartModuleAsyncOptions.html":{},"interfaces/MultipartOptionsFactory.html":{},"entities/NotificationEntity.html":{},"controllers/NotificationsController.html":{},"modules/NotificationsModule.html":{},"injectables/NotificationsService.html":{},"classes/PaginationChatMessagesDto.html":{},"classes/PaginationChatParticipantsDto.html":{},"classes/PaginationChatsDto.html":{},"classes/PaginationFilesDto.html":{},"classes/PaginationNotificationsDto.html":{},"classes/PaginationUserNotificationTokensDto.html":{},"classes/PaginationUsersDto.html":{},"classes/ResetPasswordDto.html":{},"interfaces/Response.html":{},"classes/SelectChatMessagesDto.html":{},"classes/SelectChatsDto.html":{},"classes/SelectFileDto.html":{},"classes/SelectFilesDto.html":{},"classes/SelectNotificationsDto.html":{},"classes/SelectProfileDto.html":{},"classes/SelectUserDto.html":{},"classes/SelectUserNotificationTokenDto.html":{},"classes/SelectUserNotificationTokensDto.html":{},"classes/SelectUsersDto.html":{},"modules/SendMailModule.html":{},"injectables/SendMailService.html":{},"classes/SendResetPasswordDto.html":{},"classes/SocketsExceptionFilter.html":{},"classes/SocketsGateway.html":{},"modules/SocketsModule.html":{},"injectables/SocketsService.html":{},"injectables/StorageS3Service.html":{},"injectables/StorageService.html":{},"injectables/TransformInterceptor.html":{},"classes/UpdateEmailDto.html":{},"classes/UpdateNotificationDto.html":{},"classes/UpdatePasswordDto.html":{},"classes/UpdateProfileDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserNotificationTokenDto.html":{},"classes/UploadedFile.html":{},"entities/UserEntity.html":{},"entities/UserNotificationTokenEntity.html":{},"controllers/UserNotificationTokensController.html":{},"injectables/UserNotificationTokensService.html":{},"entities/UserRefreshTokenEntity.html":{},"injectables/UserRefreshTokensService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"classes/user1615673396368.html":{}}}],["exports",{"_index":325,"title":{},"body":{"modules/AuthModule.html":{},"modules/ChatsModule.html":{},"modules/ConfigModule.html":{},"modules/FilesModule.html":{},"modules/MultipartModule.html":{},"modules/NotificationsModule.html":{},"modules/SendMailModule.html":{},"modules/SocketsModule.html":{},"modules/UsersModule.html":{}}}],["expose",{"_index":1215,"title":{},"body":{"entities/FileEntity.html":{},"classes/FileEntityPreview.html":{},"classes/FindManyOptionsDto.html":{},"classes/FindOneOptionsDto.html":{}}}],["ext",{"_index":1986,"title":{},"body":{"injectables/StorageService.html":{}}}],["extends",{"_index":756,"title":{},"body":{"classes/ChatReadMessageDto.html":{},"classes/ChatReadMessageResponseDto.html":{},"classes/ConfirmationEmailDto.html":{},"classes/CreateProfileDto.html":{},"classes/CredentialsDto.html":{},"classes/DeleteUserNotificationTokenDto.html":{},"classes/DownloadFileDto.html":{},"entities/FileEntity.html":{},"classes/FileEntityPreview.html":{},"interfaces/FindManyBracketsOptions.html":{},"classes/FindManyOptionsDto.html":{},"classes/JwtAccessTokenPayloadDto.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtRefreshGuard.html":{},"classes/JwtRefreshTokenDto.html":{},"classes/JwtRefreshTokenPayloadDto.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"classes/JwtTokensDto.html":{},"interfaces/MultipartModuleAsyncOptions.html":{},"interfaces/MultipartOptionsFactory.html":{},"classes/PaginationChatMessagesDto.html":{},"classes/PaginationChatParticipantsDto.html":{},"classes/PaginationChatsDto.html":{},"classes/PaginationFilesDto.html":{},"classes/PaginationNotificationsDto.html":{},"classes/PaginationUserNotificationTokensDto.html":{},"classes/PaginationUsersDto.html":{},"classes/ResetPasswordDto.html":{},"classes/SelectChatMessagesDto.html":{},"classes/SelectChatsDto.html":{},"classes/SelectFileDto.html":{},"classes/SelectFilesDto.html":{},"classes/SelectNotificationsDto.html":{},"classes/SelectProfileDto.html":{},"classes/SelectUserDto.html":{},"classes/SelectUserNotificationTokenDto.html":{},"classes/SelectUserNotificationTokensDto.html":{},"classes/SelectUsersDto.html":{},"classes/SendResetPasswordDto.html":{},"classes/UpdateEmailDto.html":{},"classes/UpdateNotificationDto.html":{},"classes/UpdatePasswordDto.html":{},"classes/UpdateProfileDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserNotificationTokenDto.html":{}}}],["extname",{"_index":1194,"title":{},"body":{"entities/FileEntity.html":{},"classes/FileEntityPreview.html":{},"injectables/StorageS3Service.html":{},"injectables/StorageService.html":{},"classes/UploadedFile.html":{}}}],["extname(multipart.filename",{"_index":1943,"title":{},"body":{"injectables/StorageS3Service.html":{},"injectables/StorageService.html":{}}}],["extractjwt",{"_index":1508,"title":{},"body":{"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{}}}],["extractjwt.fromauthheaderasbearertoken",{"_index":1524,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["extractjwt.frombodyfield('refreshtoken",{"_index":1515,"title":{},"body":{"injectables/JwtRefreshTokenStrategy.html":{}}}],["false",{"_index":141,"title":{},"body":{"controllers/AppController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"entities/ChatMessageEntity.html":{},"injectables/ChatMessagesService.html":{},"entities/ChatParticipantEntity.html":{},"injectables/ChatParticipantsService.html":{},"injectables/ChatsService.html":{},"modules/DatabaseModule.html":{},"injectables/FilesService.html":{},"entities/NotificationEntity.html":{},"injectables/NotificationsService.html":{},"classes/SocketsGateway.html":{},"injectables/StorageService.html":{},"entities/UserEntity.html":{},"entities/UserNotificationTokenEntity.html":{},"injectables/UserNotificationTokensService.html":{},"injectables/UserRefreshTokensService.html":{},"injectables/UsersService.html":{}}}],["fastify",{"_index":42,"title":{},"body":{"classes/AllExceptionFilter.html":{},"classes/CreateFileDto.html":{},"entities/FileEntity.html":{},"classes/FileEntityPreview.html":{},"injectables/FileValidationPipe.html":{},"controllers/FilesController.html":{},"injectables/FilesService.html":{},"classes/HttpExceptionFilter.html":{},"interfaces/MultipartModuleAsyncOptions.html":{},"interfaces/MultipartOptionsFactory.html":{},"injectables/StorageS3Service.html":{},"injectables/StorageService.html":{},"dependencies.html":{},"properties.html":{}}}],["fastify.util.ts",{"_index":2285,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["fastifymultipartoptions",{"_index":1568,"title":{},"body":{"interfaces/MultipartModuleAsyncOptions.html":{},"interfaces/MultipartOptionsFactory.html":{},"miscellaneous/typealiases.html":{}}}],["fastifyreply",{"_index":35,"title":{},"body":{"classes/AllExceptionFilter.html":{},"controllers/FilesController.html":{},"injectables/FilesService.html":{},"classes/HttpExceptionFilter.html":{}}}],["features",{"_index":2211,"title":{},"body":{"changelog.html":{}}}],["feedback",{"_index":2407,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["field",{"_index":1087,"title":{},"body":{"classes/CreateFileDto.html":{},"classes/FindManyOptionsDto.html":{},"classes/FindOneOptionsDto.html":{},"classes/SelectChatMessagesDto.html":{},"classes/SelectChatsDto.html":{},"classes/SelectFilesDto.html":{},"classes/SelectNotificationsDto.html":{},"classes/SelectUserNotificationTokensDto.html":{},"classes/SelectUsersDto.html":{},"miscellaneous/functions.html":{}}}],["fields",{"_index":1393,"title":{},"body":{"classes/FindManyOptionsDto.html":{},"classes/SelectChatMessagesDto.html":{},"classes/SelectChatsDto.html":{},"classes/SelectFilesDto.html":{},"classes/SelectNotificationsDto.html":{},"classes/SelectUserNotificationTokensDto.html":{},"classes/SelectUsersDto.html":{}}}],["file",{"_index":5,"title":{},"body":{"classes/AllExceptionFilter.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"entities/ChatEntity.html":{},"entities/ChatMessageEntity.html":{},"injectables/ChatMessagesService.html":{},"entities/ChatParticipantEntity.html":{},"injectables/ChatParticipantsService.html":{},"classes/ChatReadMessageDto.html":{},"classes/ChatReadMessageResponseDto.html":{},"classes/ChatReceiveMessageDto.html":{},"controllers/ChatsController.html":{},"classes/ChatsGateway.html":{},"modules/ChatsModule.html":{},"injectables/ChatsService.html":{},"modules/ConfigModule.html":{},"injectables/ConfigService.html":{},"classes/ConfirmationEmailDto.html":{},"classes/CreateChatDto.html":{},"classes/CreateChatMessageDto.html":{},"classes/CreateFileDto.html":{},"interfaces/CreateMockFileReturn.html":{},"classes/CreateNotificationDto.html":{},"classes/CreateProfileDto.html":{},"classes/CreateUserDto.html":{},"classes/CreateUserNotificationTokenDto.html":{},"classes/CredentialsDto.html":{},"modules/DatabaseModule.html":{},"classes/DeleteUserNotificationTokenDto.html":{},"classes/DownloadFileDto.html":{},"entities/FileEntity.html":{},"classes/FileEntityPreview.html":{},"injectables/FileValidationPipe.html":{},"controllers/FilesController.html":{},"modules/FilesModule.html":{},"injectables/FilesService.html":{},"interfaces/FindManyBracketsOptions.html":{},"classes/FindManyOptionsDto.html":{},"classes/FindOneOptionsDto.html":{},"classes/HttpExceptionFilter.html":{},"classes/ID.html":{},"classes/JwtAccessTokenPayloadDto.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtRefreshGuard.html":{},"classes/JwtRefreshTokenDto.html":{},"classes/JwtRefreshTokenPayloadDto.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"classes/JwtTokensDto.html":{},"modules/MultipartModule.html":{},"interfaces/MultipartModuleAsyncOptions.html":{},"interfaces/MultipartOptionsFactory.html":{},"entities/NotificationEntity.html":{},"controllers/NotificationsController.html":{},"modules/NotificationsModule.html":{},"injectables/NotificationsService.html":{},"classes/PaginationChatMessagesDto.html":{},"classes/PaginationChatParticipantsDto.html":{},"classes/PaginationChatsDto.html":{},"classes/PaginationFilesDto.html":{},"classes/PaginationNotificationsDto.html":{},"classes/PaginationUserNotificationTokensDto.html":{},"classes/PaginationUsersDto.html":{},"classes/ResetPasswordDto.html":{},"interfaces/Response.html":{},"classes/SelectChatMessagesDto.html":{},"classes/SelectChatsDto.html":{},"classes/SelectFileDto.html":{},"classes/SelectFilesDto.html":{},"classes/SelectNotificationsDto.html":{},"classes/SelectProfileDto.html":{},"classes/SelectUserDto.html":{},"classes/SelectUserNotificationTokenDto.html":{},"classes/SelectUserNotificationTokensDto.html":{},"classes/SelectUsersDto.html":{},"modules/SendMailModule.html":{},"injectables/SendMailService.html":{},"classes/SendResetPasswordDto.html":{},"classes/SocketsExceptionFilter.html":{},"classes/SocketsGateway.html":{},"modules/SocketsModule.html":{},"injectables/SocketsService.html":{},"injectables/StorageS3Service.html":{},"injectables/StorageService.html":{},"injectables/TransformInterceptor.html":{},"classes/UpdateEmailDto.html":{},"classes/UpdateNotificationDto.html":{},"classes/UpdatePasswordDto.html":{},"classes/UpdateProfileDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserNotificationTokenDto.html":{},"classes/UploadedFile.html":{},"entities/UserEntity.html":{},"entities/UserNotificationTokenEntity.html":{},"controllers/UserNotificationTokensController.html":{},"injectables/UserNotificationTokensService.html":{},"entities/UserRefreshTokenEntity.html":{},"injectables/UserRefreshTokensService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"unit-test.html":{},"classes/user1615673396368.html":{},"miscellaneous/variables.html":{}}}],["file.dto.ts",{"_index":1082,"title":{},"body":{"classes/CreateFileDto.html":{},"classes/DownloadFileDto.html":{},"classes/UploadedFile.html":{},"coverage.html":{}}}],["file.dto.ts:13",{"_index":1191,"title":{},"body":{"classes/DownloadFileDto.html":{}}}],["file.dto.ts:16",{"_index":2024,"title":{},"body":{"classes/UploadedFile.html":{}}}],["file.dto.ts:19",{"_index":1088,"title":{},"body":{"classes/CreateFileDto.html":{}}}],["file.dto.ts:21",{"_index":2021,"title":{},"body":{"classes/UploadedFile.html":{}}}],["file.dto.ts:26",{"_index":2022,"title":{},"body":{"classes/UploadedFile.html":{}}}],["file.dto.ts:31",{"_index":2023,"title":{},"body":{"classes/UploadedFile.html":{}}}],["file.dto.ts:36",{"_index":2019,"title":{},"body":{"classes/UploadedFile.html":{}}}],["file.dto.ts:4",{"_index":2018,"title":{},"body":{"classes/UploadedFile.html":{}}}],["file.dto.ts:41",{"_index":2020,"title":{},"body":{"classes/UploadedFile.html":{}}}],["file.filename",{"_index":1993,"title":{},"body":{"injectables/StorageService.html":{}}}],["file.util.ts",{"_index":1095,"title":{},"body":{"interfaces/CreateMockFileReturn.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["file_already_exist",{"_index":2362,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["file_not_found",{"_index":2364,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["file_too_large",{"_index":2365,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["file_unsupported_type",{"_index":2361,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["filedecorator",{"_index":2281,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["filedecorator(options",{"_index":2591,"title":{},"body":{"miscellaneous/variables.html":{}}}],["filedest",{"_index":1992,"title":{},"body":{"injectables/StorageService.html":{}}}],["fileentity",{"_index":567,"title":{"entities/FileEntity.html":{}},"body":{"entities/ChatMessageEntity.html":{},"entities/FileEntity.html":{},"classes/FileEntityPreview.html":{},"controllers/FilesController.html":{},"modules/FilesModule.html":{},"injectables/FilesService.html":{},"classes/PaginationFilesDto.html":{},"classes/SelectFileDto.html":{},"classes/SelectFilesDto.html":{},"entities/UserEntity.html":{},"coverage.html":{}}}],["fileentity_relation_field",{"_index":1326,"title":{},"body":{"injectables/FilesService.html":{}}}],["fileentitypreview",{"_index":1228,"title":{"classes/FileEntityPreview.html":{}},"body":{"entities/FileEntity.html":{},"classes/FileEntityPreview.html":{},"entities/UserEntity.html":{},"coverage.html":{}}}],["fileentitypreview(value",{"_index":2056,"title":{},"body":{"entities/UserEntity.html":{}}}],["fileentitypreview})@transform",{"_index":2027,"title":{},"body":{"entities/UserEntity.html":{}}}],["fileentityrepository",{"_index":1304,"title":{},"body":{"injectables/FilesService.html":{}}}],["filename",{"_index":1032,"title":{},"body":{"injectables/ConfigService.html":{},"interfaces/CreateMockFileReturn.html":{},"entities/FileEntity.html":{},"classes/FileEntityPreview.html":{},"controllers/FilesController.html":{},"injectables/FilesService.html":{},"injectables/StorageS3Service.html":{},"injectables/StorageService.html":{},"classes/UploadedFile.html":{}}}],["filename*=utf",{"_index":1353,"title":{},"body":{"injectables/FilesService.html":{}}}],["filepath",{"_index":1097,"title":{},"body":{"interfaces/CreateMockFileReturn.html":{},"injectables/StorageService.html":{}}}],["files",{"_index":1250,"title":{},"body":{"controllers/FilesController.html":{},"index.html":{}}}],["files.controller",{"_index":1298,"title":{},"body":{"modules/FilesModule.html":{}}}],["files.dto.ts",{"_index":1715,"title":{},"body":{"classes/PaginationFilesDto.html":{},"coverage.html":{}}}],["files.dto.ts:8",{"_index":1716,"title":{},"body":{"classes/PaginationFilesDto.html":{}}}],["files.service",{"_index":1277,"title":{},"body":{"controllers/FilesController.html":{},"modules/FilesModule.html":{}}}],["files_not_found",{"_index":2363,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["filescontroller",{"_index":1248,"title":{"controllers/FilesController.html":{}},"body":{"controllers/FilesController.html":{},"modules/FilesModule.html":{},"coverage.html":{}}}],["filesize",{"_index":1195,"title":{},"body":{"entities/FileEntity.html":{},"classes/FileEntityPreview.html":{},"injectables/FilesService.html":{},"injectables/StorageS3Service.html":{},"injectables/StorageService.html":{},"classes/UploadedFile.html":{},"miscellaneous/variables.html":{}}}],["filesmodule",{"_index":152,"title":{"modules/FilesModule.html":{}},"body":{"modules/AppModule.html":{},"modules/FilesModule.html":{},"modules.html":{},"overview.html":{}}}],["filesservice",{"_index":1276,"title":{"injectables/FilesService.html":{}},"body":{"controllers/FilesController.html":{},"modules/FilesModule.html":{},"injectables/FilesService.html":{},"coverage.html":{},"overview.html":{}}}],["filevalidationpipe",{"_index":1233,"title":{"injectables/FileValidationPipe.html":{}},"body":{"injectables/FileValidationPipe.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["filter(([key",{"_index":2603,"title":{},"body":{"miscellaneous/variables.html":{}}}],["filter((key",{"_index":2609,"title":{},"body":{"miscellaneous/variables.html":{}}}],["find",{"_index":580,"title":{},"body":{"injectables/ChatMessagesService.html":{},"injectables/ChatParticipantsService.html":{},"injectables/ChatsService.html":{},"injectables/FilesService.html":{},"classes/FindManyOptionsDto.html":{},"injectables/NotificationsService.html":{},"injectables/UserNotificationTokensService.html":{},"injectables/UserRefreshTokensService.html":{},"injectables/UsersService.html":{}}}],["find(optionsorconditions",{"_index":599,"title":{},"body":{"injectables/ChatMessagesService.html":{},"injectables/ChatParticipantsService.html":{},"injectables/ChatsService.html":{},"injectables/FilesService.html":{},"injectables/NotificationsService.html":{},"injectables/UserNotificationTokensService.html":{},"injectables/UserRefreshTokensService.html":{},"injectables/UsersService.html":{}}}],["findmanybracketsoptions",{"_index":1310,"title":{"interfaces/FindManyBracketsOptions.html":{}},"body":{"injectables/FilesService.html":{},"interfaces/FindManyBracketsOptions.html":{},"classes/FindManyOptionsDto.html":{},"coverage.html":{}}}],["findmanyoptions",{"_index":600,"title":{},"body":{"injectables/ChatMessagesService.html":{},"injectables/ChatParticipantsService.html":{},"injectables/ChatsService.html":{},"injectables/FilesService.html":{},"interfaces/FindManyBracketsOptions.html":{},"classes/FindManyOptionsDto.html":{},"injectables/NotificationsService.html":{},"injectables/UserNotificationTokensService.html":{},"injectables/UserRefreshTokensService.html":{},"injectables/UsersService.html":{}}}],["findmanyoptions['order",{"_index":1437,"title":{},"body":{"classes/FindManyOptionsDto.html":{}}}],["findmanyoptionsdto",{"_index":1374,"title":{"classes/FindManyOptionsDto.html":{}},"body":{"classes/FindManyOptionsDto.html":{},"classes/SelectChatMessagesDto.html":{},"classes/SelectChatsDto.html":{},"classes/SelectFilesDto.html":{},"classes/SelectNotificationsDto.html":{},"classes/SelectUserNotificationTokensDto.html":{},"classes/SelectUsersDto.html":{},"coverage.html":{}}}],["findmanyoptionsdto:21",{"_index":1745,"title":{},"body":{"classes/SelectChatMessagesDto.html":{}}}],["findmanyoptionsdto:30",{"_index":1746,"title":{},"body":{"classes/SelectChatMessagesDto.html":{},"classes/SelectChatsDto.html":{},"classes/SelectFilesDto.html":{},"classes/SelectNotificationsDto.html":{},"classes/SelectUserNotificationTokensDto.html":{},"classes/SelectUsersDto.html":{}}}],["findmanyoptionsdto:45",{"_index":1757,"title":{},"body":{"classes/SelectChatsDto.html":{},"classes/SelectFilesDto.html":{},"classes/SelectNotificationsDto.html":{},"classes/SelectUserNotificationTokensDto.html":{},"classes/SelectUsersDto.html":{}}}],["findmanyoptionsdto:69",{"_index":1747,"title":{},"body":{"classes/SelectChatMessagesDto.html":{},"classes/SelectChatsDto.html":{},"classes/SelectFilesDto.html":{},"classes/SelectNotificationsDto.html":{},"classes/SelectUserNotificationTokensDto.html":{},"classes/SelectUsersDto.html":{}}}],["findmanyoptionsdto:83",{"_index":1748,"title":{},"body":{"classes/SelectChatMessagesDto.html":{},"classes/SelectChatsDto.html":{},"classes/SelectFilesDto.html":{},"classes/SelectNotificationsDto.html":{},"classes/SelectUserNotificationTokensDto.html":{},"classes/SelectUsersDto.html":{}}}],["findoneoptions",{"_index":401,"title":{},"body":{"injectables/AuthService.html":{},"injectables/ChatMessagesService.html":{},"injectables/ChatParticipantsService.html":{},"injectables/ChatsService.html":{},"injectables/FilesService.html":{},"classes/FindOneOptionsDto.html":{},"injectables/NotificationsService.html":{},"classes/SelectFilesDto.html":{},"classes/SelectUsersDto.html":{},"injectables/UserNotificationTokensService.html":{},"injectables/UserRefreshTokensService.html":{},"injectables/UsersService.html":{}}}],["findoneoptions['where",{"_index":1774,"title":{},"body":{"classes/SelectFilesDto.html":{},"classes/SelectUsersDto.html":{}}}],["findoneoptionsdto",{"_index":1378,"title":{"classes/FindOneOptionsDto.html":{}},"body":{"classes/FindManyOptionsDto.html":{},"classes/FindOneOptionsDto.html":{},"controllers/NotificationsController.html":{},"classes/SelectChatMessagesDto.html":{},"classes/SelectChatsDto.html":{},"classes/SelectFileDto.html":{},"classes/SelectFilesDto.html":{},"classes/SelectNotificationsDto.html":{},"classes/SelectProfileDto.html":{},"classes/SelectUserDto.html":{},"classes/SelectUserNotificationTokenDto.html":{},"classes/SelectUserNotificationTokensDto.html":{},"classes/SelectUsersDto.html":{},"coverage.html":{}}}],["findoneoptionsdto:24",{"_index":1422,"title":{},"body":{"classes/FindManyOptionsDto.html":{},"classes/SelectChatMessagesDto.html":{},"classes/SelectChatsDto.html":{},"classes/SelectFileDto.html":{},"classes/SelectFilesDto.html":{},"classes/SelectNotificationsDto.html":{},"classes/SelectProfileDto.html":{},"classes/SelectUserDto.html":{},"classes/SelectUserNotificationTokenDto.html":{},"classes/SelectUserNotificationTokensDto.html":{},"classes/SelectUsersDto.html":{}}}],["findoneoptionsdto:43",{"_index":1415,"title":{},"body":{"classes/FindManyOptionsDto.html":{},"classes/SelectChatMessagesDto.html":{},"classes/SelectChatsDto.html":{},"classes/SelectFileDto.html":{},"classes/SelectFilesDto.html":{},"classes/SelectNotificationsDto.html":{},"classes/SelectProfileDto.html":{},"classes/SelectUserDto.html":{},"classes/SelectUserNotificationTokenDto.html":{},"classes/SelectUserNotificationTokensDto.html":{},"classes/SelectUsersDto.html":{}}}],["findoptionsorder",{"_index":2601,"title":{},"body":{"miscellaneous/variables.html":{}}}],["findoptionsselect",{"_index":1449,"title":{},"body":{"classes/FindOneOptionsDto.html":{}}}],["findoptionsutils",{"_index":618,"title":{},"body":{"injectables/ChatMessagesService.html":{},"injectables/ChatParticipantsService.html":{},"injectables/ChatsService.html":{},"injectables/FilesService.html":{},"injectables/NotificationsService.html":{},"injectables/UserNotificationTokensService.html":{},"injectables/UserRefreshTokensService.html":{},"injectables/UsersService.html":{}}}],["findoptionsutils.extractfindmanyoptionsalias(optionsorconditions",{"_index":635,"title":{},"body":{"injectables/ChatMessagesService.html":{},"injectables/ChatParticipantsService.html":{},"injectables/ChatsService.html":{},"injectables/FilesService.html":{},"injectables/NotificationsService.html":{},"injectables/UserNotificationTokensService.html":{},"injectables/UserRefreshTokensService.html":{},"injectables/UsersService.html":{}}}],["findoptionsutils.isfindmanyoptions(optionsorconditions",{"_index":637,"title":{},"body":{"injectables/ChatMessagesService.html":{},"injectables/ChatParticipantsService.html":{},"injectables/ChatsService.html":{},"injectables/FilesService.html":{},"injectables/NotificationsService.html":{},"injectables/UsersService.html":{}}}],["findoptionsutils.joineagerrelations(qb",{"_index":639,"title":{},"body":{"injectables/ChatMessagesService.html":{},"injectables/ChatParticipantsService.html":{},"injectables/ChatsService.html":{},"injectables/FilesService.html":{},"injectables/NotificationsService.html":{}}}],["findoptionswhere",{"_index":400,"title":{},"body":{"injectables/AuthService.html":{},"injectables/ChatMessagesService.html":{},"injectables/ChatParticipantsService.html":{},"injectables/ChatsService.html":{},"injectables/FilesService.html":{},"injectables/NotificationsService.html":{},"injectables/UserNotificationTokensService.html":{},"injectables/UserRefreshTokensService.html":{},"injectables/UsersService.html":{}}}],["firebase",{"_index":1652,"title":{},"body":{"injectables/NotificationsService.html":{},"dependencies.html":{}}}],["first",{"_index":1753,"title":{},"body":{"classes/SelectChatsDto.html":{}}}],["floatintcolumntransformer",{"_index":2254,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["floattoint",{"_index":2240,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["floattoint(value",{"_index":2598,"title":{},"body":{"miscellaneous/variables.html":{}}}],["folder",{"_index":2485,"title":{},"body":{"index.html":{}}}],["foo",{"_index":2586,"title":{},"body":{"miscellaneous/variables.html":{}}}],["foo.bar",{"_index":2583,"title":{},"body":{"miscellaneous/variables.html":{}}}],["foo.bar.sub",{"_index":2585,"title":{},"body":{"miscellaneous/variables.html":{}}}],["foo.other",{"_index":2584,"title":{},"body":{"miscellaneous/variables.html":{}}}],["forbiddenexception",{"_index":1482,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["forbiddenexception(errortypeenum.auth_forbidden",{"_index":1492,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["forbidnonwhitelisted",{"_index":2634,"title":{},"body":{"miscellaneous/variables.html":{}}}],["forbidunknownvalues",{"_index":2635,"title":{},"body":{"miscellaneous/variables.html":{}}}],["foreach(([key",{"_index":2605,"title":{},"body":{"miscellaneous/variables.html":{}}}],["forget",{"_index":2440,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["form",{"_index":1418,"title":{},"body":{"classes/FindManyOptionsDto.html":{},"classes/FindOneOptionsDto.html":{},"classes/SelectChatMessagesDto.html":{},"classes/SelectChatsDto.html":{},"classes/SelectFileDto.html":{},"classes/SelectFilesDto.html":{},"classes/SelectNotificationsDto.html":{},"classes/SelectProfileDto.html":{},"classes/SelectUserDto.html":{},"classes/SelectUserNotificationTokenDto.html":{},"classes/SelectUserNotificationTokensDto.html":{},"classes/SelectUsersDto.html":{}}}],["format",{"_index":1085,"title":{},"body":{"classes/CreateFileDto.html":{}}}],["fs",{"_index":1101,"title":{},"body":{"interfaces/CreateMockFileReturn.html":{},"injectables/StorageService.html":{}}}],["fs.writefilesync(filepath",{"_index":1112,"title":{},"body":{"interfaces/CreateMockFileReturn.html":{}}}],["fs/promises",{"_index":1975,"title":{},"body":{"injectables/StorageService.html":{}}}],["function",{"_index":1028,"title":{},"body":{"injectables/ConfigService.html":{},"interfaces/CreateMockFileReturn.html":{},"interfaces/MultipartModuleAsyncOptions.html":{},"coverage.html":{}}}],["functions",{"_index":2464,"title":{"miscellaneous/functions.html":{}},"body":{"miscellaneous/functions.html":{},"unit-test.html":{}}}],["generateaccesstoken",{"_index":354,"title":{},"body":{"injectables/AuthService.html":{}}}],["generateaccesstoken(undefined",{"_index":371,"title":{},"body":{"injectables/AuthService.html":{}}}],["generateandcreateone",{"_index":2125,"title":{},"body":{"injectables/UserRefreshTokensService.html":{}}}],["generateandcreateone(entitylike",{"_index":2131,"title":{},"body":{"injectables/UserRefreshTokensService.html":{}}}],["generatecode",{"_index":355,"title":{},"body":{"injectables/AuthService.html":{}}}],["generatecode(digits",{"_index":375,"title":{},"body":{"injectables/AuthService.html":{}}}],["generated",{"_index":1026,"title":{},"body":{"injectables/ConfigService.html":{}}}],["generatename",{"_index":1906,"title":{},"body":{"injectables/StorageS3Service.html":{},"injectables/StorageService.html":{}}}],["generatenotificationprops",{"_index":1621,"title":{},"body":{"injectables/NotificationsService.html":{}}}],["generatenotificationprops(entity",{"_index":1633,"title":{},"body":{"injectables/NotificationsService.html":{}}}],["generaterefreshtoken",{"_index":356,"title":{},"body":{"injectables/AuthService.html":{}}}],["generaterefreshtoken(undefined",{"_index":382,"title":{},"body":{"injectables/AuthService.html":{}}}],["generatetokens",{"_index":357,"title":{},"body":{"injectables/AuthService.html":{}}}],["generatetokens(user",{"_index":384,"title":{},"body":{"injectables/AuthService.html":{}}}],["generator.util",{"_index":1548,"title":{},"body":{"modules/MultipartModule.html":{}}}],["get('/:id/messages",{"_index":800,"title":{},"body":{"controllers/ChatsController.html":{}}}],["get('/messages/count/new",{"_index":803,"title":{},"body":{"controllers/ChatsController.html":{}}}],["get(':id",{"_index":1286,"title":{},"body":{"controllers/FilesController.html":{},"controllers/NotificationsController.html":{},"controllers/UserNotificationTokensController.html":{},"controllers/UsersController.html":{}}}],["get(':id')@apibearerauth()@useguards(jwtauthguard)@userole(userroleenum.admin",{"_index":1266,"title":{},"body":{"controllers/FilesController.html":{}}}],["get('download/:filename",{"_index":1291,"title":{},"body":{"controllers/FilesController.html":{}}}],["get('download/:filename')@apiparam({name",{"_index":1259,"title":{},"body":{"controllers/FilesController.html":{}}}],["get('profile",{"_index":308,"title":{},"body":{"controllers/AuthController.html":{}}}],["get('profile')@apibearerauth()@useguards(jwtauthguard",{"_index":242,"title":{},"body":{"controllers/AuthController.html":{}}}],["get()@apibearerauth()@useguards(jwtauthguard)@userole(userroleenum.admin",{"_index":1263,"title":{},"body":{"controllers/FilesController.html":{}}}],["get()@healthcheck",{"_index":89,"title":{},"body":{"controllers/AppController.html":{}}}],["get()@userole(userroleenum.admin",{"_index":2156,"title":{},"body":{"controllers/UsersController.html":{}}}],["get(key",{"_index":1018,"title":{},"body":{"injectables/ConfigService.html":{}}}],["getcount",{"_index":682,"title":{},"body":{"injectables/ChatMessagesService.html":{}}}],["getdest",{"_index":1014,"title":{},"body":{"injectables/ConfigService.html":{}}}],["getdest(key",{"_index":1031,"title":{},"body":{"injectables/ConfigService.html":{}}}],["getloadeagerrelations",{"_index":1450,"title":{},"body":{"classes/FindOneOptionsDto.html":{}}}],["getmany",{"_index":735,"title":{},"body":{"injectables/ChatParticipantsService.html":{},"injectables/NotificationsService.html":{}}}],["getmanyandcount",{"_index":664,"title":{},"body":{"injectables/ChatMessagesService.html":{},"injectables/ChatParticipantsService.html":{},"injectables/FilesService.html":{},"injectables/UsersService.html":{}}}],["getmode",{"_index":1015,"title":{},"body":{"injectables/ConfigService.html":{}}}],["getmode(mode",{"_index":1038,"title":{},"body":{"injectables/ConfigService.html":{}}}],["getone",{"_index":1002,"title":{},"body":{"injectables/ChatsService.html":{}}}],["getoneorfail",{"_index":673,"title":{},"body":{"injectables/ChatMessagesService.html":{},"injectables/ChatParticipantsService.html":{},"injectables/ChatsService.html":{},"injectables/NotificationsService.html":{},"injectables/UserNotificationTokensService.html":{},"injectables/UserRefreshTokensService.html":{},"injectables/UsersService.html":{}}}],["getorder",{"_index":1423,"title":{},"body":{"classes/FindManyOptionsDto.html":{}}}],["getrawmany",{"_index":938,"title":{},"body":{"injectables/ChatsService.html":{}}}],["getrawone",{"_index":748,"title":{},"body":{"injectables/ChatParticipantsService.html":{}}}],["getrequest",{"_index":2594,"title":{},"body":{"miscellaneous/variables.html":{}}}],["getselect",{"_index":1448,"title":{},"body":{"classes/FindOneOptionsDto.html":{}}}],["getskip",{"_index":1428,"title":{},"body":{"classes/FindManyOptionsDto.html":{}}}],["getter",{"_index":1425,"title":{},"body":{"classes/FindManyOptionsDto.html":{},"classes/FindOneOptionsDto.html":{}}}],["getting",{"_index":1021,"title":{"changelog.html":{},"index.html":{}},"body":{"injectables/ConfigService.html":{}}}],["getwhere",{"_index":1771,"title":{},"body":{"classes/SelectFilesDto.html":{},"classes/SelectNotificationsDto.html":{},"classes/SelectUsersDto.html":{}}}],["getwherebrackets",{"_index":1758,"title":{},"body":{"classes/SelectChatsDto.html":{}}}],["given",{"_index":1399,"title":{},"body":{"classes/FindManyOptionsDto.html":{},"classes/SelectChatMessagesDto.html":{},"classes/SelectChatsDto.html":{},"classes/SelectFilesDto.html":{},"classes/SelectNotificationsDto.html":{},"classes/SelectUserNotificationTokensDto.html":{},"classes/SelectUsersDto.html":{}}}],["global",{"_index":1009,"title":{},"body":{"modules/ConfigModule.html":{},"modules/MultipartModule.html":{}}}],["go",{"_index":2416,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["graph",{"_index":2501,"title":{},"body":{"modules.html":{}}}],["groupby('chatentity.id",{"_index":935,"title":{},"body":{"injectables/ChatsService.html":{}}}],["groupby('chatparticipantentity.chatid",{"_index":747,"title":{},"body":{"injectables/ChatParticipantsService.html":{}}}],["guards",{"_index":278,"title":{},"body":{"controllers/AuthController.html":{}}}],["guidelines",{"_index":2475,"title":{},"body":{"index.html":{}}}],["handlebars",{"_index":2322,"title":{},"body":{"dependencies.html":{}}}],["handlebarsadapter",{"_index":1795,"title":{},"body":{"modules/SendMailModule.html":{}}}],["handleconnection",{"_index":1845,"title":{},"body":{"classes/SocketsGateway.html":{}}}],["handleconnection(@connectedsocket",{"_index":1856,"title":{},"body":{"classes/SocketsGateway.html":{}}}],["handleconnection(socket",{"_index":1849,"title":{},"body":{"classes/SocketsGateway.html":{}}}],["handledisconnect",{"_index":1846,"title":{},"body":{"classes/SocketsGateway.html":{}}}],["handledisconnect(@connectedsocket",{"_index":1864,"title":{},"body":{"classes/SocketsGateway.html":{}}}],["handledisconnect(socket",{"_index":1851,"title":{},"body":{"classes/SocketsGateway.html":{}}}],["handleerror",{"_index":1828,"title":{},"body":{"classes/SocketsExceptionFilter.html":{}}}],["handleerror(client",{"_index":1832,"title":{},"body":{"classes/SocketsExceptionFilter.html":{}}}],["handlereadmessage",{"_index":833,"title":{},"body":{"classes/ChatsGateway.html":{}}}],["handlereadmessage(conditions",{"_index":839,"title":{},"body":{"classes/ChatsGateway.html":{}}}],["handlerequest",{"_index":1472,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"injectables/JwtRefreshGuard.html":{}}}],["handlerequest(_err",{"_index":1476,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"injectables/JwtRefreshGuard.html":{}}}],["handlesendmessage",{"_index":834,"title":{},"body":{"classes/ChatsGateway.html":{}}}],["handlesendmessage(entitylike",{"_index":842,"title":{},"body":{"classes/ChatsGateway.html":{}}}],["hash",{"_index":2046,"title":{},"body":{"entities/UserEntity.html":{},"injectables/UserRefreshTokensService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["hash(refreshidentifier",{"_index":2139,"title":{},"body":{"injectables/UserRefreshTokensService.html":{}}}],["hash(this.password",{"_index":2055,"title":{},"body":{"entities/UserEntity.html":{}}}],["hashpassword",{"_index":2053,"title":{},"body":{"entities/UserEntity.html":{}}}],["having",{"_index":744,"title":{},"body":{"injectables/ChatParticipantsService.html":{},"injectables/ChatsService.html":{}}}],["headers",{"_index":1348,"title":{},"body":{"injectables/FilesService.html":{},"miscellaneous/functions.html":{}}}],["headobjectrequest",{"_index":1916,"title":{},"body":{"injectables/StorageS3Service.html":{},"miscellaneous/typealiases.html":{}}}],["health",{"_index":114,"title":{},"body":{"controllers/AppController.html":{}}}],["healthcheck",{"_index":97,"title":{},"body":{"controllers/AppController.html":{}}}],["healthcheckresult",{"_index":98,"title":{},"body":{"controllers/AppController.html":{}}}],["healthcheckservice",{"_index":99,"title":{},"body":{"controllers/AppController.html":{}}}],["helmet",{"_index":2316,"title":{},"body":{"dependencies.html":{}}}],["hex",{"_index":2560,"title":{},"body":{"miscellaneous/variables.html":{}}}],["homepage",{"_index":2507,"title":{},"body":{"properties.html":{}}}],["host",{"_index":27,"title":{},"body":{"classes/AllExceptionFilter.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/DatabaseModule.html":{},"classes/HttpExceptionFilter.html":{},"modules/SendMailModule.html":{},"classes/SocketsExceptionFilter.html":{}}}],["host.switchtohttp",{"_index":48,"title":{},"body":{"classes/AllExceptionFilter.html":{},"classes/HttpExceptionFilter.html":{}}}],["host.switchtows().getclient",{"_index":1836,"title":{},"body":{"classes/SocketsExceptionFilter.html":{}}}],["hour",{"_index":2438,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["hours",{"_index":2434,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["httpexception",{"_index":38,"title":{},"body":{"classes/AllExceptionFilter.html":{},"classes/HttpExceptionFilter.html":{},"classes/SocketsExceptionFilter.html":{}}}],["httpexceptionfilter",{"_index":1459,"title":{"classes/HttpExceptionFilter.html":{}},"body":{"classes/HttpExceptionFilter.html":{},"coverage.html":{}}}],["https://github.com/angular/angular/blob/22b96b9/contributing.md",{"_index":2477,"title":{},"body":{"index.html":{}}}],["https://github.com/broodd/nest",{"_index":2508,"title":{},"body":{"properties.html":{}}}],["https://www.conventionalcommits.org/en/v1.0.0",{"_index":2476,"title":{},"body":{"index.html":{}}}],["httpstatus",{"_index":37,"title":{},"body":{"classes/AllExceptionFilter.html":{}}}],["httpstatus.internal_server_error",{"_index":56,"title":{},"body":{"classes/AllExceptionFilter.html":{}}}],["id",{"_index":292,"title":{"classes/ID.html":{}},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"entities/ChatEntity.html":{},"entities/ChatMessageEntity.html":{},"injectables/ChatMessagesService.html":{},"entities/ChatParticipantEntity.html":{},"injectables/ChatParticipantsService.html":{},"classes/ChatReadMessageDto.html":{},"classes/ChatReadMessageResponseDto.html":{},"classes/ChatReceiveMessageDto.html":{},"controllers/ChatsController.html":{},"classes/ChatsGateway.html":{},"injectables/ChatsService.html":{},"classes/CreateChatDto.html":{},"classes/CreateChatMessageDto.html":{},"classes/CreateUserDto.html":{},"classes/DownloadFileDto.html":{},"entities/FileEntity.html":{},"classes/FileEntityPreview.html":{},"controllers/FilesController.html":{},"injectables/FilesService.html":{},"classes/ID.html":{},"classes/JwtAccessTokenPayloadDto.html":{},"classes/JwtRefreshTokenDto.html":{},"classes/JwtRefreshTokenPayloadDto.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"classes/JwtTokensDto.html":{},"entities/NotificationEntity.html":{},"controllers/NotificationsController.html":{},"injectables/NotificationsService.html":{},"classes/SocketsGateway.html":{},"injectables/SocketsService.html":{},"entities/UserEntity.html":{},"entities/UserNotificationTokenEntity.html":{},"controllers/UserNotificationTokensController.html":{},"entities/UserRefreshTokenEntity.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"coverage.html":{},"classes/user1615673396368.html":{},"miscellaneous/variables.html":{}}}],["id:13",{"_index":761,"title":{},"body":{"classes/ChatReadMessageDto.html":{},"classes/DownloadFileDto.html":{}}}],["identifier",{"_index":2219,"title":{},"body":{"coverage.html":{}}}],["id})@validateif(o",{"_index":1073,"title":{},"body":{"classes/CreateChatMessageDto.html":{}}}],["ilike",{"_index":1773,"title":{},"body":{"classes/SelectFilesDto.html":{}}}],["ilike(`%${title",{"_index":1775,"title":{},"body":{"classes/SelectFilesDto.html":{}}}],["image/png",{"_index":1107,"title":{},"body":{"interfaces/CreateMockFileReturn.html":{}}}],["implemented",{"_index":2212,"title":{},"body":{"changelog.html":{}}}],["implements",{"_index":8,"title":{},"body":{"classes/AllExceptionFilter.html":{},"entities/FileEntity.html":{},"classes/FileEntityPreview.html":{},"injectables/FileValidationPipe.html":{},"classes/FindManyOptionsDto.html":{},"classes/FindOneOptionsDto.html":{},"classes/HttpExceptionFilter.html":{},"interfaces/Response.html":{},"classes/SocketsExceptionFilter.html":{},"classes/SocketsGateway.html":{},"injectables/StorageService.html":{},"injectables/TransformInterceptor.html":{},"classes/user1615673396368.html":{}}}],["import",{"_index":36,"title":{},"body":{"classes/AllExceptionFilter.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"entities/ChatEntity.html":{},"entities/ChatMessageEntity.html":{},"injectables/ChatMessagesService.html":{},"entities/ChatParticipantEntity.html":{},"injectables/ChatParticipantsService.html":{},"classes/ChatReadMessageDto.html":{},"classes/ChatReadMessageResponseDto.html":{},"classes/ChatReceiveMessageDto.html":{},"controllers/ChatsController.html":{},"classes/ChatsGateway.html":{},"modules/ChatsModule.html":{},"injectables/ChatsService.html":{},"modules/ConfigModule.html":{},"injectables/ConfigService.html":{},"classes/ConfirmationEmailDto.html":{},"classes/CreateChatDto.html":{},"classes/CreateChatMessageDto.html":{},"classes/CreateFileDto.html":{},"interfaces/CreateMockFileReturn.html":{},"classes/CreateNotificationDto.html":{},"classes/CreateProfileDto.html":{},"classes/CreateUserDto.html":{},"classes/CreateUserNotificationTokenDto.html":{},"classes/CredentialsDto.html":{},"modules/DatabaseModule.html":{},"classes/DeleteUserNotificationTokenDto.html":{},"classes/DownloadFileDto.html":{},"entities/FileEntity.html":{},"classes/FileEntityPreview.html":{},"injectables/FileValidationPipe.html":{},"controllers/FilesController.html":{},"modules/FilesModule.html":{},"injectables/FilesService.html":{},"interfaces/FindManyBracketsOptions.html":{},"classes/FindManyOptionsDto.html":{},"classes/FindOneOptionsDto.html":{},"classes/HttpExceptionFilter.html":{},"classes/ID.html":{},"classes/JwtAccessTokenPayloadDto.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtRefreshGuard.html":{},"classes/JwtRefreshTokenDto.html":{},"classes/JwtRefreshTokenPayloadDto.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"classes/JwtTokensDto.html":{},"modules/MultipartModule.html":{},"interfaces/MultipartModuleAsyncOptions.html":{},"interfaces/MultipartOptionsFactory.html":{},"entities/NotificationEntity.html":{},"controllers/NotificationsController.html":{},"modules/NotificationsModule.html":{},"injectables/NotificationsService.html":{},"classes/PaginationChatMessagesDto.html":{},"classes/PaginationChatParticipantsDto.html":{},"classes/PaginationChatsDto.html":{},"classes/PaginationFilesDto.html":{},"classes/PaginationNotificationsDto.html":{},"classes/PaginationUserNotificationTokensDto.html":{},"classes/PaginationUsersDto.html":{},"classes/ResetPasswordDto.html":{},"interfaces/Response.html":{},"classes/SelectChatMessagesDto.html":{},"classes/SelectChatsDto.html":{},"classes/SelectFileDto.html":{},"classes/SelectFilesDto.html":{},"classes/SelectNotificationsDto.html":{},"classes/SelectProfileDto.html":{},"classes/SelectUserDto.html":{},"classes/SelectUserNotificationTokenDto.html":{},"classes/SelectUserNotificationTokensDto.html":{},"classes/SelectUsersDto.html":{},"modules/SendMailModule.html":{},"injectables/SendMailService.html":{},"classes/SendResetPasswordDto.html":{},"classes/SocketsExceptionFilter.html":{},"classes/SocketsGateway.html":{},"modules/SocketsModule.html":{},"injectables/SocketsService.html":{},"injectables/StorageS3Service.html":{},"injectables/StorageService.html":{},"injectables/TransformInterceptor.html":{},"classes/UpdateEmailDto.html":{},"classes/UpdateNotificationDto.html":{},"classes/UpdatePasswordDto.html":{},"classes/UpdateProfileDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserNotificationTokenDto.html":{},"entities/UserEntity.html":{},"entities/UserNotificationTokenEntity.html":{},"controllers/UserNotificationTokensController.html":{},"injectables/UserNotificationTokensService.html":{},"entities/UserRefreshTokenEntity.html":{},"injectables/UserRefreshTokensService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"classes/user1615673396368.html":{}}}],["imports",{"_index":161,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/ChatsModule.html":{},"modules/DatabaseModule.html":{},"modules/FilesModule.html":{},"modules/MultipartModule.html":{},"modules/NotificationsModule.html":{},"modules/SendMailModule.html":{},"modules/SocketsModule.html":{},"modules/UsersModule.html":{}}}],["in(data.map((row",{"_index":936,"title":{},"body":{"injectables/ChatsService.html":{}}}],["inconvenience",{"_index":2436,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["index",{"_index":10,"title":{"index.html":{}},"body":{"classes/AllExceptionFilter.html":{},"controllers/AppController.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"entities/ChatEntity.html":{},"entities/ChatMessageEntity.html":{},"injectables/ChatMessagesService.html":{},"entities/ChatParticipantEntity.html":{},"injectables/ChatParticipantsService.html":{},"classes/ChatReadMessageDto.html":{},"classes/ChatReadMessageResponseDto.html":{},"classes/ChatReceiveMessageDto.html":{},"controllers/ChatsController.html":{},"classes/ChatsGateway.html":{},"injectables/ChatsService.html":{},"injectables/ConfigService.html":{},"classes/ConfirmationEmailDto.html":{},"classes/CreateChatDto.html":{},"classes/CreateChatMessageDto.html":{},"classes/CreateFileDto.html":{},"interfaces/CreateMockFileReturn.html":{},"classes/CreateNotificationDto.html":{},"classes/CreateUserDto.html":{},"classes/CreateUserNotificationTokenDto.html":{},"classes/DeleteUserNotificationTokenDto.html":{},"classes/DownloadFileDto.html":{},"entities/FileEntity.html":{},"injectables/FileValidationPipe.html":{},"controllers/FilesController.html":{},"injectables/FilesService.html":{},"interfaces/FindManyBracketsOptions.html":{},"classes/FindManyOptionsDto.html":{},"classes/FindOneOptionsDto.html":{},"classes/HttpExceptionFilter.html":{},"classes/ID.html":{},"classes/JwtAccessTokenPayloadDto.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtRefreshGuard.html":{},"classes/JwtRefreshTokenPayloadDto.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"classes/JwtTokensDto.html":{},"interfaces/MultipartModuleAsyncOptions.html":{},"interfaces/MultipartOptionsFactory.html":{},"entities/NotificationEntity.html":{},"controllers/NotificationsController.html":{},"injectables/NotificationsService.html":{},"classes/ResetPasswordDto.html":{},"interfaces/Response.html":{},"classes/SelectChatMessagesDto.html":{},"classes/SelectChatsDto.html":{},"classes/SelectFileDto.html":{},"classes/SelectFilesDto.html":{},"classes/SelectNotificationsDto.html":{},"classes/SelectProfileDto.html":{},"classes/SelectUserDto.html":{},"classes/SelectUserNotificationTokenDto.html":{},"classes/SelectUserNotificationTokensDto.html":{},"classes/SelectUsersDto.html":{},"injectables/SendMailService.html":{},"classes/SocketsExceptionFilter.html":{},"classes/SocketsGateway.html":{},"injectables/SocketsService.html":{},"injectables/StorageS3Service.html":{},"injectables/StorageService.html":{},"injectables/TransformInterceptor.html":{},"classes/UpdateNotificationDto.html":{},"classes/UpdatePasswordDto.html":{},"classes/UploadedFile.html":{},"entities/UserEntity.html":{},"entities/UserNotificationTokenEntity.html":{},"controllers/UserNotificationTokensController.html":{},"injectables/UserNotificationTokensService.html":{},"entities/UserRefreshTokenEntity.html":{},"injectables/UserRefreshTokensService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"classes/user1615673396368.html":{},"miscellaneous/variables.html":{}}}],["index('unique_chat_participants",{"_index":702,"title":{},"body":{"entities/ChatParticipantEntity.html":{}}}],["indicates",{"_index":1412,"title":{},"body":{"classes/FindManyOptionsDto.html":{},"classes/FindOneOptionsDto.html":{},"classes/SelectChatMessagesDto.html":{},"classes/SelectChatsDto.html":{},"classes/SelectFileDto.html":{},"classes/SelectFilesDto.html":{},"classes/SelectNotificationsDto.html":{},"classes/SelectProfileDto.html":{},"classes/SelectUserDto.html":{},"classes/SelectUserNotificationTokenDto.html":{},"classes/SelectUserNotificationTokensDto.html":{},"classes/SelectUsersDto.html":{}}}],["info",{"_index":3,"title":{},"body":{"classes/AllExceptionFilter.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"entities/ChatEntity.html":{},"entities/ChatMessageEntity.html":{},"injectables/ChatMessagesService.html":{},"entities/ChatParticipantEntity.html":{},"injectables/ChatParticipantsService.html":{},"classes/ChatReadMessageDto.html":{},"classes/ChatReadMessageResponseDto.html":{},"classes/ChatReceiveMessageDto.html":{},"controllers/ChatsController.html":{},"classes/ChatsGateway.html":{},"modules/ChatsModule.html":{},"injectables/ChatsService.html":{},"modules/ConfigModule.html":{},"injectables/ConfigService.html":{},"classes/ConfirmationEmailDto.html":{},"classes/CreateChatDto.html":{},"classes/CreateChatMessageDto.html":{},"classes/CreateFileDto.html":{},"interfaces/CreateMockFileReturn.html":{},"classes/CreateNotificationDto.html":{},"classes/CreateProfileDto.html":{},"classes/CreateUserDto.html":{},"classes/CreateUserNotificationTokenDto.html":{},"classes/CredentialsDto.html":{},"modules/DatabaseModule.html":{},"classes/DeleteUserNotificationTokenDto.html":{},"classes/DownloadFileDto.html":{},"entities/FileEntity.html":{},"classes/FileEntityPreview.html":{},"injectables/FileValidationPipe.html":{},"controllers/FilesController.html":{},"modules/FilesModule.html":{},"injectables/FilesService.html":{},"interfaces/FindManyBracketsOptions.html":{},"classes/FindManyOptionsDto.html":{},"classes/FindOneOptionsDto.html":{},"classes/HttpExceptionFilter.html":{},"classes/ID.html":{},"classes/JwtAccessTokenPayloadDto.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtRefreshGuard.html":{},"classes/JwtRefreshTokenDto.html":{},"classes/JwtRefreshTokenPayloadDto.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"classes/JwtTokensDto.html":{},"modules/MultipartModule.html":{},"interfaces/MultipartModuleAsyncOptions.html":{},"interfaces/MultipartOptionsFactory.html":{},"entities/NotificationEntity.html":{},"controllers/NotificationsController.html":{},"modules/NotificationsModule.html":{},"injectables/NotificationsService.html":{},"classes/PaginationChatMessagesDto.html":{},"classes/PaginationChatParticipantsDto.html":{},"classes/PaginationChatsDto.html":{},"classes/PaginationFilesDto.html":{},"classes/PaginationNotificationsDto.html":{},"classes/PaginationUserNotificationTokensDto.html":{},"classes/PaginationUsersDto.html":{},"classes/ResetPasswordDto.html":{},"interfaces/Response.html":{},"classes/SelectChatMessagesDto.html":{},"classes/SelectChatsDto.html":{},"classes/SelectFileDto.html":{},"classes/SelectFilesDto.html":{},"classes/SelectNotificationsDto.html":{},"classes/SelectProfileDto.html":{},"classes/SelectUserDto.html":{},"classes/SelectUserNotificationTokenDto.html":{},"classes/SelectUserNotificationTokensDto.html":{},"classes/SelectUsersDto.html":{},"modules/SendMailModule.html":{},"injectables/SendMailService.html":{},"classes/SendResetPasswordDto.html":{},"classes/SocketsExceptionFilter.html":{},"classes/SocketsGateway.html":{},"modules/SocketsModule.html":{},"injectables/SocketsService.html":{},"injectables/StorageS3Service.html":{},"injectables/StorageService.html":{},"injectables/TransformInterceptor.html":{},"classes/UpdateEmailDto.html":{},"classes/UpdateNotificationDto.html":{},"classes/UpdatePasswordDto.html":{},"classes/UpdateProfileDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserNotificationTokenDto.html":{},"classes/UploadedFile.html":{},"entities/UserEntity.html":{},"entities/UserNotificationTokenEntity.html":{},"controllers/UserNotificationTokensController.html":{},"injectables/UserNotificationTokensService.html":{},"entities/UserRefreshTokenEntity.html":{},"injectables/UserRefreshTokensService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"classes/user1615673396368.html":{}}}],["inherited",{"_index":760,"title":{},"body":{"classes/ChatReadMessageDto.html":{},"classes/DeleteUserNotificationTokenDto.html":{},"classes/DownloadFileDto.html":{},"classes/FindManyOptionsDto.html":{},"classes/JwtRefreshTokenPayloadDto.html":{},"classes/SelectChatMessagesDto.html":{},"classes/SelectChatsDto.html":{},"classes/SelectFileDto.html":{},"classes/SelectFilesDto.html":{},"classes/SelectNotificationsDto.html":{},"classes/SelectProfileDto.html":{},"classes/SelectUserDto.html":{},"classes/SelectUserNotificationTokenDto.html":{},"classes/SelectUserNotificationTokensDto.html":{},"classes/SelectUsersDto.html":{}}}],["initialobject",{"_index":2569,"title":{},"body":{"miscellaneous/variables.html":{}}}],["initialoptions",{"_index":453,"title":{},"body":{"injectables/AuthService.html":{}}}],["initialvalue",{"_index":2568,"title":{},"body":{"miscellaneous/variables.html":{}}}],["inject",{"_index":180,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"modules/DatabaseModule.html":{},"modules/MultipartModule.html":{},"interfaces/MultipartModuleAsyncOptions.html":{},"interfaces/MultipartOptionsFactory.html":{},"modules/SendMailModule.html":{},"modules/SocketsModule.html":{},"injectables/StorageService.html":{}}}],["inject(cache_manager",{"_index":421,"title":{},"body":{"injectables/AuthService.html":{}}}],["inject(multipart_module_options",{"_index":1965,"title":{},"body":{"injectables/StorageService.html":{}}}],["injectable",{"_index":347,"title":{"injectables/AuthService.html":{},"injectables/ChatMessagesService.html":{},"injectables/ChatParticipantsService.html":{},"injectables/ChatsService.html":{},"injectables/ConfigService.html":{},"injectables/FileValidationPipe.html":{},"injectables/FilesService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtRefreshGuard.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/NotificationsService.html":{},"injectables/SendMailService.html":{},"injectables/SocketsService.html":{},"injectables/StorageS3Service.html":{},"injectables/StorageService.html":{},"injectables/TransformInterceptor.html":{},"injectables/UserNotificationTokensService.html":{},"injectables/UserRefreshTokensService.html":{},"injectables/UsersService.html":{}},"body":{"injectables/AuthService.html":{},"injectables/ChatMessagesService.html":{},"injectables/ChatParticipantsService.html":{},"injectables/ChatsService.html":{},"injectables/ConfigService.html":{},"injectables/FileValidationPipe.html":{},"injectables/FilesService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtRefreshGuard.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/NotificationsService.html":{},"interfaces/Response.html":{},"injectables/SendMailService.html":{},"injectables/SocketsService.html":{},"injectables/StorageS3Service.html":{},"injectables/StorageService.html":{},"injectables/TransformInterceptor.html":{},"injectables/UserNotificationTokensService.html":{},"injectables/UserRefreshTokensService.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["injectables",{"_index":348,"title":{},"body":{"injectables/AuthService.html":{},"injectables/ChatMessagesService.html":{},"injectables/ChatParticipantsService.html":{},"injectables/ChatsService.html":{},"injectables/ConfigService.html":{},"injectables/FileValidationPipe.html":{},"injectables/FilesService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtRefreshGuard.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/NotificationsService.html":{},"injectables/SendMailService.html":{},"injectables/SocketsService.html":{},"injectables/StorageS3Service.html":{},"injectables/StorageService.html":{},"injectables/TransformInterceptor.html":{},"injectables/UserNotificationTokensService.html":{},"injectables/UserRefreshTokensService.html":{},"injectables/UsersService.html":{},"overview.html":{}}}],["injectrepository",{"_index":615,"title":{},"body":{"injectables/ChatMessagesService.html":{},"injectables/ChatParticipantsService.html":{},"injectables/ChatsService.html":{},"injectables/FilesService.html":{},"injectables/NotificationsService.html":{},"injectables/UserNotificationTokensService.html":{},"injectables/UserRefreshTokensService.html":{},"injectables/UsersService.html":{}}}],["injectrepository(chatentity",{"_index":917,"title":{},"body":{"injectables/ChatsService.html":{}}}],["injectrepository(chatmessageentity",{"_index":622,"title":{},"body":{"injectables/ChatMessagesService.html":{}}}],["injectrepository(chatparticipantentity",{"_index":723,"title":{},"body":{"injectables/ChatParticipantsService.html":{}}}],["injectrepository(fileentity",{"_index":1315,"title":{},"body":{"injectables/FilesService.html":{}}}],["injectrepository(notificationentity",{"_index":1648,"title":{},"body":{"injectables/NotificationsService.html":{}}}],["injectrepository(userentity",{"_index":2183,"title":{},"body":{"injectables/UsersService.html":{}}}],["injectrepository(usernotificationtokenentity",{"_index":2102,"title":{},"body":{"injectables/UserNotificationTokensService.html":{}}}],["injectrepository(userrefreshtokenentity",{"_index":2135,"title":{},"body":{"injectables/UserRefreshTokensService.html":{}}}],["inline",{"_index":1344,"title":{},"body":{"injectables/FilesService.html":{}}}],["innerjoin",{"_index":677,"title":{},"body":{"injectables/ChatMessagesService.html":{},"injectables/ChatsService.html":{}}}],["innerjoinandmapone",{"_index":990,"title":{},"body":{"injectables/ChatsService.html":{}}}],["innerjoinandselect",{"_index":991,"title":{},"body":{"injectables/ChatsService.html":{}}}],["innerjoinandselect('chatentity_participant_other.user",{"_index":968,"title":{},"body":{"injectables/ChatsService.html":{}}}],["installation",{"_index":2478,"title":{},"body":{"index.html":{}}}],["installprepare",{"_index":2480,"title":{},"body":{"index.html":{}}}],["instance",{"_index":1089,"title":{},"body":{"classes/CreateFileDto.html":{}}}],["instanceof",{"_index":54,"title":{},"body":{"classes/AllExceptionFilter.html":{},"classes/SocketsExceptionFilter.html":{}}}],["instancetoplain",{"_index":617,"title":{},"body":{"injectables/ChatMessagesService.html":{},"injectables/ChatParticipantsService.html":{},"classes/ChatsGateway.html":{},"injectables/ChatsService.html":{},"injectables/FilesService.html":{},"classes/FindManyOptionsDto.html":{},"classes/FindOneOptionsDto.html":{},"injectables/NotificationsService.html":{},"injectables/UserNotificationTokensService.html":{},"injectables/UserRefreshTokensService.html":{},"injectables/UsersService.html":{}}}],["instancetoplain(chat",{"_index":878,"title":{},"body":{"classes/ChatsGateway.html":{}}}],["instancetoplain(message",{"_index":879,"title":{},"body":{"classes/ChatsGateway.html":{}}}],["instancetoplain(options",{"_index":672,"title":{},"body":{"injectables/ChatMessagesService.html":{},"injectables/ChatParticipantsService.html":{},"injectables/ChatsService.html":{},"injectables/FilesService.html":{},"injectables/NotificationsService.html":{},"injectables/UserNotificationTokensService.html":{},"injectables/UserRefreshTokensService.html":{},"injectables/UsersService.html":{}}}],["int",{"_index":2252,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["intercept",{"_index":1998,"title":{},"body":{"injectables/TransformInterceptor.html":{}}}],["intercept(context",{"_index":1742,"title":{},"body":{"interfaces/Response.html":{},"injectables/TransformInterceptor.html":{}}}],["interface",{"_index":1091,"title":{"interfaces/CreateMockFileReturn.html":{},"interfaces/FindManyBracketsOptions.html":{},"interfaces/MultipartModuleAsyncOptions.html":{},"interfaces/MultipartOptionsFactory.html":{},"interfaces/Response.html":{}},"body":{"interfaces/CreateMockFileReturn.html":{},"interfaces/FindManyBracketsOptions.html":{},"interfaces/MultipartModuleAsyncOptions.html":{},"interfaces/MultipartOptionsFactory.html":{},"interfaces/Response.html":{},"injectables/TransformInterceptor.html":{},"coverage.html":{}}}],["interfaces",{"_index":1093,"title":{},"body":{"interfaces/CreateMockFileReturn.html":{},"interfaces/FindManyBracketsOptions.html":{},"modules/MultipartModule.html":{},"interfaces/MultipartModuleAsyncOptions.html":{},"interfaces/MultipartOptionsFactory.html":{},"interfaces/Response.html":{},"overview.html":{}}}],["interfaces/config.interface",{"_index":1048,"title":{},"body":{"injectables/ConfigService.html":{}}}],["internal_server_error",{"_index":2360,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["isarray",{"_index":1430,"title":{},"body":{"classes/FindManyOptionsDto.html":{},"classes/FindOneOptionsDto.html":{}}}],["isarray()@isoptional()@isstring({each",{"_index":1385,"title":{},"body":{"classes/FindManyOptionsDto.html":{},"classes/FindOneOptionsDto.html":{},"classes/SelectChatMessagesDto.html":{},"classes/SelectChatsDto.html":{},"classes/SelectFileDto.html":{},"classes/SelectFilesDto.html":{},"classes/SelectNotificationsDto.html":{},"classes/SelectProfileDto.html":{},"classes/SelectUserDto.html":{},"classes/SelectUserNotificationTokenDto.html":{},"classes/SelectUserNotificationTokensDto.html":{},"classes/SelectUsersDto.html":{}}}],["isboolean",{"_index":1192,"title":{},"body":{"classes/DownloadFileDto.html":{}}}],["isbooleanstring",{"_index":1453,"title":{},"body":{"classes/FindOneOptionsDto.html":{}}}],["isemail",{"_index":1141,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["isemail()@apiproperty({example",{"_index":1133,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["isenum",{"_index":780,"title":{},"body":{"classes/ChatReceiveMessageDto.html":{},"classes/CreateChatMessageDto.html":{},"classes/CreateNotificationDto.html":{},"classes/SelectNotificationsDto.html":{},"classes/UpdateNotificationDto.html":{}}}],["isenum(chatmessagetypeenum",{"_index":782,"title":{},"body":{"classes/ChatReceiveMessageDto.html":{},"classes/CreateChatMessageDto.html":{}}}],["isenum(notificationsstatusenum",{"_index":1780,"title":{},"body":{"classes/SelectNotificationsDto.html":{},"classes/UpdateNotificationDto.html":{}}}],["isenum(notificationstypeenum",{"_index":1126,"title":{},"body":{"classes/CreateNotificationDto.html":{}}}],["isenum(notificationstypeenum)@apiproperty",{"_index":1121,"title":{},"body":{"classes/CreateNotificationDto.html":{}}}],["isnotempty",{"_index":762,"title":{},"body":{"classes/ChatReadMessageDto.html":{},"classes/ChatReadMessageResponseDto.html":{},"classes/ChatReceiveMessageDto.html":{},"classes/CreateChatMessageDto.html":{},"classes/CreateFileDto.html":{},"classes/FindManyOptionsDto.html":{},"classes/FindOneOptionsDto.html":{}}}],["isnotempty()@apiproperty({type",{"_index":1084,"title":{},"body":{"classes/CreateFileDto.html":{}}}],["isnotempty()@isenum(chatmessagetypeenum)@apiproperty({enum",{"_index":1078,"title":{},"body":{"classes/CreateChatMessageDto.html":{}}}],["isnotempty()@validatenested()@apiproperty({type",{"_index":757,"title":{},"body":{"classes/ChatReadMessageDto.html":{},"classes/CreateChatMessageDto.html":{}}}],["isnull",{"_index":1334,"title":{},"body":{"injectables/FilesService.html":{}}}],["isoptional",{"_index":778,"title":{},"body":{"classes/ChatReceiveMessageDto.html":{},"classes/CreateChatMessageDto.html":{},"classes/CreateUserDto.html":{},"classes/DownloadFileDto.html":{},"classes/FindManyOptionsDto.html":{},"classes/FindOneOptionsDto.html":{},"classes/SelectChatsDto.html":{},"classes/SelectFilesDto.html":{},"classes/SelectNotificationsDto.html":{},"classes/UpdateNotificationDto.html":{}}}],["isoptional()@isboolean",{"_index":1190,"title":{},"body":{"classes/DownloadFileDto.html":{}}}],["isoptional()@isbooleanstring()@apiproperty({type",{"_index":1411,"title":{},"body":{"classes/FindManyOptionsDto.html":{},"classes/FindOneOptionsDto.html":{},"classes/SelectChatMessagesDto.html":{},"classes/SelectChatsDto.html":{},"classes/SelectFileDto.html":{},"classes/SelectFilesDto.html":{},"classes/SelectNotificationsDto.html":{},"classes/SelectProfileDto.html":{},"classes/SelectUserDto.html":{},"classes/SelectUserNotificationTokenDto.html":{},"classes/SelectUserNotificationTokensDto.html":{},"classes/SelectUsersDto.html":{}}}],["isoptional()@isenum(notificationsstatusenum",{"_index":2007,"title":{},"body":{"classes/UpdateNotificationDto.html":{}}}],["isoptional()@isenum(notificationsstatusenum)@apiproperty({enum",{"_index":1777,"title":{},"body":{"classes/SelectNotificationsDto.html":{}}}],["isoptional()@min(1)@apiproperty({type",{"_index":1401,"title":{},"body":{"classes/FindManyOptionsDto.html":{},"classes/SelectChatMessagesDto.html":{},"classes/SelectChatsDto.html":{},"classes/SelectFilesDto.html":{},"classes/SelectNotificationsDto.html":{},"classes/SelectUserNotificationTokensDto.html":{},"classes/SelectUsersDto.html":{}}}],["isoptional()@min(1)@max(100)@apiproperty({type",{"_index":1407,"title":{},"body":{"classes/FindManyOptionsDto.html":{},"classes/SelectChatMessagesDto.html":{},"classes/SelectChatsDto.html":{},"classes/SelectFilesDto.html":{},"classes/SelectNotificationsDto.html":{},"classes/SelectUserNotificationTokensDto.html":{},"classes/SelectUsersDto.html":{}}}],["isoptional()@minlength(1)@maxlength(256)@apiproperty({example",{"_index":1768,"title":{},"body":{"classes/SelectFilesDto.html":{}}}],["isoptional()@minlength(3)@maxlength(256)@apipropertyoptional()@transform",{"_index":1755,"title":{},"body":{"classes/SelectChatsDto.html":{}}}],["isoptional()@validatenested()@apiproperty({type",{"_index":1072,"title":{},"body":{"classes/CreateChatMessageDto.html":{}}}],["isoptional()@validatenested()@type(undefined)@apiproperty({type",{"_index":1131,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["isstring",{"_index":779,"title":{},"body":{"classes/ChatReceiveMessageDto.html":{},"classes/ConfirmationEmailDto.html":{},"classes/CreateChatMessageDto.html":{},"classes/FindManyOptionsDto.html":{},"classes/FindOneOptionsDto.html":{},"classes/ResetPasswordDto.html":{},"classes/SendResetPasswordDto.html":{}}}],["isstring()@isnotempty()@isoptional()@maxlength(60000)@validateif(o",{"_index":1076,"title":{},"body":{"classes/CreateChatMessageDto.html":{}}}],["isstring()@length(6)@apiproperty({example",{"_index":1731,"title":{},"body":{"classes/ResetPasswordDto.html":{}}}],["isuuid",{"_index":1465,"title":{},"body":{"classes/ID.html":{},"classes/SelectChatsDto.html":{}}}],["isuuid()@apiproperty",{"_index":759,"title":{},"body":{"classes/ChatReadMessageDto.html":{},"classes/DownloadFileDto.html":{},"classes/ID.html":{}}}],["isuuid()@isoptional()@apipropertyoptional",{"_index":1750,"title":{},"body":{"classes/SelectChatsDto.html":{}}}],["join",{"_index":954,"title":{},"body":{"injectables/ChatsService.html":{},"injectables/ConfigService.html":{},"entities/FileEntity.html":{},"classes/FileEntityPreview.html":{},"classes/FindManyOptionsDto.html":{},"classes/FindOneOptionsDto.html":{},"classes/SelectChatMessagesDto.html":{},"classes/SelectChatsDto.html":{},"classes/SelectFileDto.html":{},"classes/SelectFilesDto.html":{},"classes/SelectNotificationsDto.html":{},"classes/SelectProfileDto.html":{},"classes/SelectUserDto.html":{},"classes/SelectUserNotificationTokenDto.html":{},"classes/SelectUserNotificationTokensDto.html":{},"classes/SelectUsersDto.html":{},"injectables/StorageService.html":{},"miscellaneous/enumerations.html":{}}}],["join(process.cwd",{"_index":1051,"title":{},"body":{"injectables/ConfigService.html":{}}}],["join(this.destination",{"_index":1985,"title":{},"body":{"injectables/StorageService.html":{}}}],["joincolumn",{"_index":565,"title":{},"body":{"entities/ChatMessageEntity.html":{},"entities/ChatParticipantEntity.html":{},"entities/FileEntity.html":{},"classes/FileEntityPreview.html":{},"entities/NotificationEntity.html":{},"entities/UserEntity.html":{},"entities/UserNotificationTokenEntity.html":{}}}],["joincolumn()@apihideproperty()@manytoone(undefined",{"_index":540,"title":{},"body":{"entities/ChatMessageEntity.html":{},"entities/ChatParticipantEntity.html":{},"entities/FileEntity.html":{},"entities/NotificationEntity.html":{},"entities/UserNotificationTokenEntity.html":{}}}],["joincolumn()@apiproperty({type",{"_index":543,"title":{},"body":{"entities/ChatMessageEntity.html":{},"entities/UserEntity.html":{}}}],["json",{"_index":1679,"title":{},"body":{"injectables/NotificationsService.html":{}}}],["json.parse",{"_index":1030,"title":{},"body":{"injectables/ConfigService.html":{}}}],["json.parse(this.eager",{"_index":1458,"title":{},"body":{"classes/FindOneOptionsDto.html":{}}}],["json.parse(variable",{"_index":1057,"title":{},"body":{"injectables/ConfigService.html":{}}}],["json.stringify(entity",{"_index":1680,"title":{},"body":{"injectables/NotificationsService.html":{}}}],["jwt",{"_index":1511,"title":{},"body":{"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"dependencies.html":{}}}],["jwtaccesstokenpayloaddto",{"_index":415,"title":{"classes/JwtAccessTokenPayloadDto.html":{}},"body":{"injectables/AuthService.html":{},"classes/JwtAccessTokenPayloadDto.html":{},"classes/JwtRefreshTokenDto.html":{},"classes/JwtRefreshTokenPayloadDto.html":{},"injectables/JwtStrategy.html":{},"classes/JwtTokensDto.html":{},"coverage.html":{}}}],["jwtaccesstokenpayloaddto:32",{"_index":1500,"title":{},"body":{"classes/JwtRefreshTokenPayloadDto.html":{}}}],["jwtaccesstokenpayloaddto:37",{"_index":1501,"title":{},"body":{"classes/JwtRefreshTokenPayloadDto.html":{}}}],["jwtauthguard",{"_index":277,"title":{"injectables/JwtAuthGuard.html":{}},"body":{"controllers/AuthController.html":{},"controllers/ChatsController.html":{},"controllers/FilesController.html":{},"injectables/JwtAuthGuard.html":{},"controllers/NotificationsController.html":{},"controllers/UserNotificationTokensController.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["jwtfromrequest",{"_index":1514,"title":{},"body":{"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{}}}],["jwtmodule",{"_index":334,"title":{},"body":{"modules/AuthModule.html":{},"modules/SocketsModule.html":{}}}],["jwtmodule.register",{"_index":343,"title":{},"body":{"modules/AuthModule.html":{}}}],["jwtmodule.registerasync",{"_index":1873,"title":{},"body":{"modules/SocketsModule.html":{}}}],["jwtrefreshguard",{"_index":276,"title":{"injectables/JwtRefreshGuard.html":{}},"body":{"controllers/AuthController.html":{},"injectables/JwtRefreshGuard.html":{},"coverage.html":{}}}],["jwtrefreshtokendto",{"_index":230,"title":{"classes/JwtRefreshTokenDto.html":{}},"body":{"controllers/AuthController.html":{},"classes/JwtAccessTokenPayloadDto.html":{},"classes/JwtRefreshTokenDto.html":{},"classes/JwtRefreshTokenPayloadDto.html":{},"classes/JwtTokensDto.html":{},"coverage.html":{}}}],["jwtrefreshtokenpayloaddto",{"_index":416,"title":{"classes/JwtRefreshTokenPayloadDto.html":{}},"body":{"injectables/AuthService.html":{},"classes/JwtAccessTokenPayloadDto.html":{},"classes/JwtRefreshTokenDto.html":{},"classes/JwtRefreshTokenPayloadDto.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"classes/JwtTokensDto.html":{},"coverage.html":{}}}],["jwtrefreshtokenstrategy",{"_index":322,"title":{"injectables/JwtRefreshTokenStrategy.html":{}},"body":{"modules/AuthModule.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"coverage.html":{},"overview.html":{}}}],["jwtservice",{"_index":365,"title":{},"body":{"injectables/AuthService.html":{},"classes/SocketsGateway.html":{}}}],["jwtstrategy",{"_index":323,"title":{"injectables/JwtStrategy.html":{}},"body":{"modules/AuthModule.html":{},"injectables/JwtStrategy.html":{},"coverage.html":{},"overview.html":{}}}],["jwttokensdto",{"_index":272,"title":{"classes/JwtTokensDto.html":{}},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/JwtAccessTokenPayloadDto.html":{},"classes/JwtRefreshTokenDto.html":{},"classes/JwtRefreshTokenPayloadDto.html":{},"classes/JwtTokensDto.html":{},"coverage.html":{}}}],["key",{"_index":1024,"title":{},"body":{"injectables/ConfigService.html":{},"injectables/StorageS3Service.html":{},"miscellaneous/variables.html":{}}}],["key.startswith('__",{"_index":2604,"title":{},"body":{"miscellaneous/variables.html":{}}}],["keybuffer",{"_index":2558,"title":{},"body":{"miscellaneous/variables.html":{}}}],["keylength",{"_index":2233,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["keyof",{"_index":1454,"title":{},"body":{"classes/FindOneOptionsDto.html":{},"classes/SelectChatMessagesDto.html":{}}}],["last",{"_index":955,"title":{},"body":{"injectables/ChatsService.html":{},"miscellaneous/variables.html":{}}}],["lastmessage",{"_index":488,"title":{},"body":{"entities/ChatEntity.html":{},"injectables/ChatMessagesService.html":{}}}],["leave",{"_index":2406,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["left",{"_index":1417,"title":{},"body":{"classes/FindManyOptionsDto.html":{},"classes/FindOneOptionsDto.html":{},"classes/SelectChatMessagesDto.html":{},"classes/SelectChatsDto.html":{},"classes/SelectFileDto.html":{},"classes/SelectFilesDto.html":{},"classes/SelectNotificationsDto.html":{},"classes/SelectProfileDto.html":{},"classes/SelectUserDto.html":{},"classes/SelectUserNotificationTokenDto.html":{},"classes/SelectUserNotificationTokensDto.html":{},"classes/SelectUsersDto.html":{}}}],["leftjoin",{"_index":929,"title":{},"body":{"injectables/ChatsService.html":{}}}],["leftjoinandselect",{"_index":970,"title":{},"body":{"injectables/ChatsService.html":{}}}],["leftjoinandselect('chatentity.lastmessage",{"_index":989,"title":{},"body":{"injectables/ChatsService.html":{}}}],["length",{"_index":560,"title":{},"body":{"entities/ChatMessageEntity.html":{},"classes/ConfirmationEmailDto.html":{},"entities/FileEntity.html":{},"classes/FileEntityPreview.html":{},"injectables/FilesService.html":{},"entities/NotificationEntity.html":{},"classes/ResetPasswordDto.html":{},"classes/SendResetPasswordDto.html":{},"entities/UserEntity.html":{},"entities/UserNotificationTokenEntity.html":{},"entities/UserRefreshTokenEntity.html":{}}}],["length(6",{"_index":1067,"title":{},"body":{"classes/ConfirmationEmailDto.html":{},"classes/ResetPasswordDto.html":{},"classes/SendResetPasswordDto.html":{}}}],["length(6)@isstring()@apiproperty({example",{"_index":1060,"title":{},"body":{"classes/ConfirmationEmailDto.html":{}}}],["limit",{"_index":184,"title":{},"body":{"modules/AppModule.html":{},"classes/FindManyOptionsDto.html":{},"classes/SelectChatMessagesDto.html":{},"classes/SelectChatsDto.html":{},"classes/SelectFilesDto.html":{},"classes/SelectNotificationsDto.html":{},"classes/SelectUserNotificationTokensDto.html":{},"classes/SelectUsersDto.html":{}}}],["limited",{"_index":1027,"title":{},"body":{"injectables/ConfigService.html":{}}}],["limits",{"_index":2589,"title":{},"body":{"miscellaneous/variables.html":{}}}],["lines",{"_index":2523,"title":{},"body":{"unit-test.html":{}}}],["list",{"_index":1754,"title":{},"body":{"classes/SelectChatsDto.html":{}}}],["literal",{"_index":769,"title":{},"body":{"classes/ChatReadMessageResponseDto.html":{},"classes/ChatReceiveMessageDto.html":{},"injectables/StorageService.html":{},"miscellaneous/typealiases.html":{}}}],["loadeagerrelations",{"_index":457,"title":{},"body":{"injectables/AuthService.html":{},"injectables/ChatMessagesService.html":{},"injectables/ChatParticipantsService.html":{},"controllers/ChatsController.html":{},"injectables/ChatsService.html":{},"injectables/FilesService.html":{},"classes/FindOneOptionsDto.html":{},"injectables/NotificationsService.html":{},"classes/SocketsGateway.html":{},"injectables/UserNotificationTokensService.html":{},"injectables/UserRefreshTokensService.html":{},"injectables/UsersService.html":{}}}],["loaded",{"_index":1414,"title":{},"body":{"classes/FindManyOptionsDto.html":{},"classes/FindOneOptionsDto.html":{},"classes/SelectChatMessagesDto.html":{},"classes/SelectChatsDto.html":{},"classes/SelectFileDto.html":{},"classes/SelectFilesDto.html":{},"classes/SelectNotificationsDto.html":{},"classes/SelectProfileDto.html":{},"classes/SelectUserDto.html":{},"classes/SelectUserNotificationTokenDto.html":{},"classes/SelectUserNotificationTokensDto.html":{},"classes/SelectUsersDto.html":{}}}],["logger",{"_index":14,"title":{},"body":{"classes/AllExceptionFilter.html":{},"injectables/SendMailService.html":{}}}],["logger(allexceptionfilter.name",{"_index":22,"title":{},"body":{"classes/AllExceptionFilter.html":{}}}],["logger(sendmailservice.name",{"_index":1820,"title":{},"body":{"injectables/SendMailService.html":{}}}],["logger://').pathname",{"_index":63,"title":{},"body":{"classes/AllExceptionFilter.html":{}}}],["logging",{"_index":1169,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["logout",{"_index":205,"title":{},"body":{"controllers/AuthController.html":{}}}],["logout(@user",{"_index":287,"title":{},"body":{"controllers/AuthController.html":{}}}],["logout(user",{"_index":226,"title":{},"body":{"controllers/AuthController.html":{}}}],["mail.type.ts",{"_index":2517,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["mailermodule",{"_index":1798,"title":{},"body":{"modules/SendMailModule.html":{}}}],["mailermodule.forrootasync",{"_index":1801,"title":{},"body":{"modules/SendMailModule.html":{}}}],["mailerservice",{"_index":1816,"title":{},"body":{"injectables/SendMailService.html":{}}}],["manager",{"_index":330,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"dependencies.html":{}}}],["many",{"_index":1370,"title":{},"body":{"interfaces/FindManyBracketsOptions.html":{},"classes/FindManyOptionsDto.html":{},"coverage.html":{}}}],["manytoone",{"_index":527,"title":{},"body":{"entities/ChatEntity.html":{},"entities/ChatMessageEntity.html":{},"entities/ChatParticipantEntity.html":{},"entities/FileEntity.html":{},"classes/FileEntityPreview.html":{},"entities/NotificationEntity.html":{},"entities/UserEntity.html":{},"entities/UserNotificationTokenEntity.html":{},"entities/UserRefreshTokenEntity.html":{}}}],["manytoone(undefined",{"_index":2028,"title":{},"body":{"entities/UserEntity.html":{}}}],["map",{"_index":1734,"title":{},"body":{"interfaces/Response.html":{},"injectables/TransformInterceptor.html":{}}}],["matching",{"_index":79,"title":{},"body":{"classes/AllExceptionFilter.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"entities/ChatEntity.html":{},"entities/ChatMessageEntity.html":{},"injectables/ChatMessagesService.html":{},"entities/ChatParticipantEntity.html":{},"injectables/ChatParticipantsService.html":{},"classes/ChatReadMessageDto.html":{},"classes/ChatReadMessageResponseDto.html":{},"classes/ChatReceiveMessageDto.html":{},"controllers/ChatsController.html":{},"classes/ChatsGateway.html":{},"modules/ChatsModule.html":{},"injectables/ChatsService.html":{},"modules/ConfigModule.html":{},"injectables/ConfigService.html":{},"classes/ConfirmationEmailDto.html":{},"classes/CreateChatDto.html":{},"classes/CreateChatMessageDto.html":{},"classes/CreateFileDto.html":{},"interfaces/CreateMockFileReturn.html":{},"classes/CreateNotificationDto.html":{},"classes/CreateProfileDto.html":{},"classes/CreateUserDto.html":{},"classes/CreateUserNotificationTokenDto.html":{},"classes/CredentialsDto.html":{},"modules/DatabaseModule.html":{},"classes/DeleteUserNotificationTokenDto.html":{},"classes/DownloadFileDto.html":{},"entities/FileEntity.html":{},"classes/FileEntityPreview.html":{},"injectables/FileValidationPipe.html":{},"controllers/FilesController.html":{},"modules/FilesModule.html":{},"injectables/FilesService.html":{},"interfaces/FindManyBracketsOptions.html":{},"classes/FindManyOptionsDto.html":{},"classes/FindOneOptionsDto.html":{},"classes/HttpExceptionFilter.html":{},"classes/ID.html":{},"classes/JwtAccessTokenPayloadDto.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtRefreshGuard.html":{},"classes/JwtRefreshTokenDto.html":{},"classes/JwtRefreshTokenPayloadDto.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"classes/JwtTokensDto.html":{},"modules/MultipartModule.html":{},"interfaces/MultipartModuleAsyncOptions.html":{},"interfaces/MultipartOptionsFactory.html":{},"entities/NotificationEntity.html":{},"controllers/NotificationsController.html":{},"modules/NotificationsModule.html":{},"injectables/NotificationsService.html":{},"classes/PaginationChatMessagesDto.html":{},"classes/PaginationChatParticipantsDto.html":{},"classes/PaginationChatsDto.html":{},"classes/PaginationFilesDto.html":{},"classes/PaginationNotificationsDto.html":{},"classes/PaginationUserNotificationTokensDto.html":{},"classes/PaginationUsersDto.html":{},"classes/ResetPasswordDto.html":{},"interfaces/Response.html":{},"classes/SelectChatMessagesDto.html":{},"classes/SelectChatsDto.html":{},"classes/SelectFileDto.html":{},"classes/SelectFilesDto.html":{},"classes/SelectNotificationsDto.html":{},"classes/SelectProfileDto.html":{},"classes/SelectUserDto.html":{},"classes/SelectUserNotificationTokenDto.html":{},"classes/SelectUserNotificationTokensDto.html":{},"classes/SelectUsersDto.html":{},"modules/SendMailModule.html":{},"injectables/SendMailService.html":{},"classes/SendResetPasswordDto.html":{},"classes/SocketsExceptionFilter.html":{},"classes/SocketsGateway.html":{},"modules/SocketsModule.html":{},"injectables/SocketsService.html":{},"injectables/StorageS3Service.html":{},"injectables/StorageService.html":{},"injectables/TransformInterceptor.html":{},"classes/UpdateEmailDto.html":{},"classes/UpdateNotificationDto.html":{},"classes/UpdatePasswordDto.html":{},"classes/UpdateProfileDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserNotificationTokenDto.html":{},"classes/UploadedFile.html":{},"entities/UserEntity.html":{},"entities/UserNotificationTokenEntity.html":{},"controllers/UserNotificationTokensController.html":{},"injectables/UserNotificationTokensService.html":{},"entities/UserRefreshTokenEntity.html":{},"injectables/UserRefreshTokensService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"changelog.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/typealiases.html":{},"unit-test.html":{},"classes/user1615673396368.html":{},"miscellaneous/variables.html":{}}}],["max",{"_index":1409,"title":{},"body":{"classes/FindManyOptionsDto.html":{},"classes/SelectChatMessagesDto.html":{},"classes/SelectChatsDto.html":{},"classes/SelectFilesDto.html":{},"classes/SelectNotificationsDto.html":{},"classes/SelectUserNotificationTokensDto.html":{},"classes/SelectUsersDto.html":{}}}],["max(100",{"_index":1443,"title":{},"body":{"classes/FindManyOptionsDto.html":{}}}],["maxlength",{"_index":573,"title":{},"body":{"entities/ChatMessageEntity.html":{},"classes/ChatReceiveMessageDto.html":{},"classes/ConfirmationEmailDto.html":{},"classes/CreateChatMessageDto.html":{},"classes/CreateNotificationDto.html":{},"classes/CreateUserDto.html":{},"classes/CreateUserNotificationTokenDto.html":{},"entities/FileEntity.html":{},"classes/FileEntityPreview.html":{},"entities/NotificationEntity.html":{},"classes/ResetPasswordDto.html":{},"classes/SelectChatsDto.html":{},"classes/SelectFilesDto.html":{},"classes/SendResetPasswordDto.html":{},"classes/UpdateEmailDto.html":{},"classes/UpdatePasswordDto.html":{},"classes/UpdateProfileDto.html":{},"entities/UserEntity.html":{},"entities/UserNotificationTokenEntity.html":{}}}],["maxlength(1024",{"_index":1150,"title":{},"body":{"classes/CreateUserNotificationTokenDto.html":{}}}],["maxlength(1024)@apiproperty({maxlength",{"_index":1147,"title":{},"body":{"classes/CreateUserNotificationTokenDto.html":{},"classes/DeleteUserNotificationTokenDto.html":{}}}],["maxlength(256",{"_index":1125,"title":{},"body":{"classes/CreateNotificationDto.html":{},"classes/SelectChatsDto.html":{},"classes/SelectFilesDto.html":{}}}],["maxlength(64",{"_index":1143,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/UpdateEmailDto.html":{},"classes/UpdatePasswordDto.html":{},"classes/UpdateProfileDto.html":{}}}],["maxlength(6e4",{"_index":783,"title":{},"body":{"classes/ChatReceiveMessageDto.html":{},"classes/CreateChatMessageDto.html":{}}}],["memory",{"_index":113,"title":{},"body":{"controllers/AppController.html":{}}}],["memoryhealthindicator",{"_index":101,"title":{},"body":{"controllers/AppController.html":{}}}],["mergeintoentity",{"_index":686,"title":{},"body":{"injectables/ChatMessagesService.html":{},"injectables/ChatParticipantsService.html":{},"injectables/ChatsService.html":{},"injectables/FilesService.html":{},"injectables/NotificationsService.html":{},"injectables/UserNotificationTokensService.html":{},"injectables/UserRefreshTokensService.html":{},"injectables/UsersService.html":{}}}],["message",{"_index":57,"title":{},"body":{"classes/AllExceptionFilter.html":{},"classes/ChatReadMessageDto.html":{},"classes/ChatReadMessageResponseDto.html":{},"classes/ChatReceiveMessageDto.html":{},"classes/ChatsGateway.html":{},"injectables/ChatsService.html":{},"classes/CreateChatMessageDto.html":{},"classes/HttpExceptionFilter.html":{},"injectables/NotificationsService.html":{},"classes/SocketsExceptionFilter.html":{},"classes/SocketsGateway.html":{},"miscellaneous/enumerations.html":{},"index.html":{}}}],["message.dto.ts",{"_index":755,"title":{},"body":{"classes/ChatReadMessageDto.html":{},"classes/ChatReadMessageResponseDto.html":{},"classes/ChatReceiveMessageDto.html":{},"classes/CreateChatMessageDto.html":{},"coverage.html":{}}}],["message.dto.ts:17",{"_index":758,"title":{},"body":{"classes/ChatReadMessageDto.html":{}}}],["message.dto.ts:27",{"_index":1079,"title":{},"body":{"classes/CreateChatMessageDto.html":{}}}],["message.dto.ts:28",{"_index":772,"title":{},"body":{"classes/ChatReadMessageResponseDto.html":{}}}],["message.dto.ts:34",{"_index":770,"title":{},"body":{"classes/ChatReadMessageResponseDto.html":{}}}],["message.dto.ts:35",{"_index":1071,"title":{},"body":{"classes/CreateChatMessageDto.html":{}}}],["message.dto.ts:43",{"_index":1075,"title":{},"body":{"classes/CreateChatMessageDto.html":{}}}],["message.dto.ts:53",{"_index":1077,"title":{},"body":{"classes/CreateChatMessageDto.html":{}}}],["message.dto.ts:62",{"_index":1074,"title":{},"body":{"classes/CreateChatMessageDto.html":{}}}],["message.dto.ts:73",{"_index":776,"title":{},"body":{"classes/ChatReceiveMessageDto.html":{}}}],["message.dto.ts:79",{"_index":775,"title":{},"body":{"classes/ChatReceiveMessageDto.html":{}}}],["message.entity",{"_index":532,"title":{},"body":{"entities/ChatEntity.html":{}}}],["message.entity.ts",{"_index":537,"title":{},"body":{"entities/ChatMessageEntity.html":{},"coverage.html":{}}}],["message.entity.ts:108",{"_index":564,"title":{},"body":{"entities/ChatMessageEntity.html":{}}}],["message.entity.ts:28",{"_index":548,"title":{},"body":{"entities/ChatMessageEntity.html":{}}}],["message.entity.ts:35",{"_index":563,"title":{},"body":{"entities/ChatMessageEntity.html":{}}}],["message.entity.ts:43",{"_index":555,"title":{},"body":{"entities/ChatMessageEntity.html":{}}}],["message.entity.ts:50",{"_index":561,"title":{},"body":{"entities/ChatMessageEntity.html":{}}}],["message.entity.ts:63",{"_index":547,"title":{},"body":{"entities/ChatMessageEntity.html":{}}}],["message.entity.ts:71",{"_index":541,"title":{},"body":{"entities/ChatMessageEntity.html":{}}}],["message.entity.ts:79",{"_index":550,"title":{},"body":{"entities/ChatMessageEntity.html":{}}}],["message.entity.ts:87",{"_index":549,"title":{},"body":{"entities/ChatMessageEntity.html":{}}}],["message.entity.ts:98",{"_index":542,"title":{},"body":{"entities/ChatMessageEntity.html":{}}}],["messagebody",{"_index":850,"title":{},"body":{"classes/ChatsGateway.html":{}}}],["messages",{"_index":489,"title":{},"body":{"entities/ChatEntity.html":{},"entities/ChatMessageEntity.html":{},"injectables/NotificationsService.html":{}}}],["messages.dto.ts",{"_index":1701,"title":{},"body":{"classes/PaginationChatMessagesDto.html":{},"classes/SelectChatMessagesDto.html":{},"coverage.html":{}}}],["messages.dto.ts:8",{"_index":1702,"title":{},"body":{"classes/PaginationChatMessagesDto.html":{}}}],["messages.service",{"_index":860,"title":{},"body":{"classes/ChatsGateway.html":{}}}],["messages.service.ts",{"_index":577,"title":{},"body":{"injectables/ChatMessagesService.html":{},"coverage.html":{}}}],["messages.service.ts:105",{"_index":605,"title":{},"body":{"injectables/ChatMessagesService.html":{}}}],["messages.service.ts:134",{"_index":608,"title":{},"body":{"injectables/ChatMessagesService.html":{}}}],["messages.service.ts:149",{"_index":607,"title":{},"body":{"injectables/ChatMessagesService.html":{}}}],["messages.service.ts:174",{"_index":610,"title":{},"body":{"injectables/ChatMessagesService.html":{}}}],["messages.service.ts:194",{"_index":612,"title":{},"body":{"injectables/ChatMessagesService.html":{}}}],["messages.service.ts:213",{"_index":598,"title":{},"body":{"injectables/ChatMessagesService.html":{}}}],["messages.service.ts:29",{"_index":589,"title":{},"body":{"injectables/ChatMessagesService.html":{}}}],["messages.service.ts:46",{"_index":593,"title":{},"body":{"injectables/ChatMessagesService.html":{}}}],["messages.service.ts:66",{"_index":601,"title":{},"body":{"injectables/ChatMessagesService.html":{}}}],["messaging",{"_index":1654,"title":{},"body":{"injectables/NotificationsService.html":{}}}],["messaging().sendall(messages",{"_index":1696,"title":{},"body":{"injectables/NotificationsService.html":{}}}],["messaging().sendmulticast",{"_index":1686,"title":{},"body":{"injectables/NotificationsService.html":{}}}],["metadata",{"_index":631,"title":{},"body":{"injectables/ChatMessagesService.html":{},"injectables/ChatParticipantsService.html":{},"injectables/ChatsService.html":{},"injectables/FilesService.html":{},"injectables/NotificationsService.html":{},"injectables/UserNotificationTokensService.html":{},"injectables/UserRefreshTokensService.html":{},"injectables/UsersService.html":{},"dependencies.html":{}}}],["metadata.name",{"_index":636,"title":{},"body":{"injectables/ChatMessagesService.html":{},"injectables/ChatParticipantsService.html":{},"injectables/ChatsService.html":{},"injectables/FilesService.html":{},"injectables/NotificationsService.html":{},"injectables/UserNotificationTokensService.html":{},"injectables/UserRefreshTokensService.html":{},"injectables/UsersService.html":{}}}],["method",{"_index":64,"title":{},"body":{"classes/AllExceptionFilter.html":{},"injectables/ConfigService.html":{}}}],["methods",{"_index":15,"title":{},"body":{"classes/AllExceptionFilter.html":{},"controllers/AppController.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/ChatMessagesService.html":{},"injectables/ChatParticipantsService.html":{},"controllers/ChatsController.html":{},"classes/ChatsGateway.html":{},"injectables/ChatsService.html":{},"injectables/ConfigService.html":{},"injectables/FileValidationPipe.html":{},"controllers/FilesController.html":{},"injectables/FilesService.html":{},"classes/HttpExceptionFilter.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtRefreshGuard.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"modules/MultipartModule.html":{},"interfaces/MultipartOptionsFactory.html":{},"controllers/NotificationsController.html":{},"injectables/NotificationsService.html":{},"injectables/SendMailService.html":{},"classes/SocketsExceptionFilter.html":{},"classes/SocketsGateway.html":{},"injectables/SocketsService.html":{},"injectables/StorageS3Service.html":{},"injectables/StorageService.html":{},"injectables/TransformInterceptor.html":{},"controllers/UserNotificationTokensController.html":{},"injectables/UserNotificationTokensService.html":{},"injectables/UserRefreshTokensService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"classes/user1615673396368.html":{}}}],["microservice",{"_index":117,"title":{},"body":{"controllers/AppController.html":{}}}],["microservicehealthindicator",{"_index":103,"title":{},"body":{"controllers/AppController.html":{}}}],["migrationinterface",{"_index":2524,"title":{},"body":{"classes/user1615673396368.html":{}}}],["migrations",{"_index":1179,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["migrations/*.{ts,js",{"_index":1181,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["migrationsrun",{"_index":1175,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["mimetype",{"_index":1098,"title":{},"body":{"interfaces/CreateMockFileReturn.html":{},"entities/FileEntity.html":{},"classes/FileEntityPreview.html":{},"injectables/FilesService.html":{},"injectables/StorageS3Service.html":{},"injectables/StorageService.html":{},"classes/UploadedFile.html":{},"miscellaneous/functions.html":{}}}],["min",{"_index":1431,"title":{},"body":{"classes/FindManyOptionsDto.html":{}}}],["min(1",{"_index":1442,"title":{},"body":{"classes/FindManyOptionsDto.html":{}}}],["minimum",{"_index":1207,"title":{},"body":{"entities/FileEntity.html":{},"classes/FileEntityPreview.html":{}}}],["minlength",{"_index":1123,"title":{},"body":{"classes/CreateNotificationDto.html":{},"classes/CreateUserDto.html":{},"classes/SelectChatsDto.html":{},"classes/SelectFilesDto.html":{},"classes/UpdateEmailDto.html":{},"classes/UpdatePasswordDto.html":{},"classes/UpdateProfileDto.html":{}}}],["minlength(1",{"_index":1124,"title":{},"body":{"classes/CreateNotificationDto.html":{},"classes/SelectFilesDto.html":{}}}],["minlength(1)@maxlength(256)@apiproperty",{"_index":1118,"title":{},"body":{"classes/CreateNotificationDto.html":{}}}],["minlength(3",{"_index":1762,"title":{},"body":{"classes/SelectChatsDto.html":{}}}],["minlength(8",{"_index":1142,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/UpdateEmailDto.html":{},"classes/UpdatePasswordDto.html":{},"classes/UpdateProfileDto.html":{}}}],["minlength(8)@maxlength(64)@apiproperty({minlength",{"_index":1137,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/UpdatePasswordDto.html":{}}}],["minutes",{"_index":2443,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["miscellaneous",{"_index":2334,"title":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["mkdir",{"_index":1973,"title":{},"body":{"injectables/StorageService.html":{}}}],["mkdir(join(this.destination",{"_index":1987,"title":{},"body":{"injectables/StorageService.html":{}}}],["mkdir(this.destination",{"_index":1981,"title":{},"body":{"injectables/StorageService.html":{}}}],["mode",{"_index":1045,"title":{},"body":{"injectables/ConfigService.html":{},"injectables/StorageService.html":{},"index.html":{}}}],["modes",{"_index":1044,"title":{},"body":{"injectables/ConfigService.html":{},"miscellaneous/enumerations.html":{}}}],["module",{"_index":142,"title":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/ChatsModule.html":{},"modules/ConfigModule.html":{},"modules/DatabaseModule.html":{},"modules/FilesModule.html":{},"modules/MultipartModule.html":{},"modules/NotificationsModule.html":{},"modules/SendMailModule.html":{},"modules/SocketsModule.html":{},"modules/UsersModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/ChatsModule.html":{},"modules/ConfigModule.html":{},"modules/DatabaseModule.html":{},"modules/FilesModule.html":{},"modules/MultipartModule.html":{},"modules/NotificationsModule.html":{},"modules/SendMailModule.html":{},"modules/SocketsModule.html":{},"modules/UsersModule.html":{}}}],["module.interface.ts",{"_index":1565,"title":{},"body":{"interfaces/MultipartModuleAsyncOptions.html":{},"interfaces/MultipartOptionsFactory.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["module.interface.ts:17",{"_index":1573,"title":{},"body":{"interfaces/MultipartOptionsFactory.html":{}}}],["modulemetadata",{"_index":1569,"title":{},"body":{"interfaces/MultipartModuleAsyncOptions.html":{},"interfaces/MultipartOptionsFactory.html":{}}}],["modules",{"_index":144,"title":{"modules.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/ChatsModule.html":{},"modules/ConfigModule.html":{},"modules/DatabaseModule.html":{},"modules/FilesModule.html":{},"modules/MultipartModule.html":{},"modules/NotificationsModule.html":{},"modules/SendMailModule.html":{},"modules/SocketsModule.html":{},"modules/UsersModule.html":{},"modules.html":{},"overview.html":{}}}],["modules/**/*.entity.{ts,js",{"_index":1178,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["modules/auth",{"_index":177,"title":{},"body":{"modules/AppModule.html":{}}}],["modules/chats",{"_index":174,"title":{},"body":{"modules/AppModule.html":{}}}],["modules/files",{"_index":176,"title":{},"body":{"modules/AppModule.html":{}}}],["modules/mailer",{"_index":1799,"title":{},"body":{"modules/SendMailModule.html":{},"injectables/SendMailService.html":{},"dependencies.html":{}}}],["modules/mailer/dist/adapters/handlebars.adapter",{"_index":1797,"title":{},"body":{"modules/SendMailModule.html":{}}}],["modules/notifications",{"_index":172,"title":{},"body":{"modules/AppModule.html":{}}}],["modules/sockets",{"_index":173,"title":{},"body":{"modules/AppModule.html":{}}}],["modules/users",{"_index":175,"title":{},"body":{"modules/AppModule.html":{}}}],["month",{"_index":1937,"title":{},"body":{"injectables/StorageS3Service.html":{},"injectables/StorageService.html":{},"miscellaneous/enumerations.html":{}}}],["multipart",{"_index":170,"title":{},"body":{"modules/AppModule.html":{},"classes/CreateFileDto.html":{},"entities/FileEntity.html":{},"classes/FileEntityPreview.html":{},"injectables/FileValidationPipe.html":{},"controllers/FilesController.html":{},"injectables/FilesService.html":{},"interfaces/MultipartModuleAsyncOptions.html":{},"interfaces/MultipartOptionsFactory.html":{},"injectables/StorageS3Service.html":{},"injectables/StorageService.html":{},"dependencies.html":{}}}],["multipart.constants",{"_index":1551,"title":{},"body":{"modules/MultipartModule.html":{},"injectables/StorageService.html":{}}}],["multipart.filename",{"_index":1949,"title":{},"body":{"injectables/StorageS3Service.html":{},"injectables/StorageService.html":{}}}],["multipart_module",{"_index":1550,"title":{},"body":{"modules/MultipartModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["multipart_module_options",{"_index":1549,"title":{},"body":{"modules/MultipartModule.html":{},"injectables/StorageService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["multipartmodule",{"_index":153,"title":{"modules/MultipartModule.html":{}},"body":{"modules/AppModule.html":{},"modules/MultipartModule.html":{},"modules.html":{},"overview.html":{}}}],["multipartmodule.register",{"_index":195,"title":{},"body":{"modules/AppModule.html":{}}}],["multipartmoduleasyncoptions",{"_index":1532,"title":{"interfaces/MultipartModuleAsyncOptions.html":{}},"body":{"modules/MultipartModule.html":{},"interfaces/MultipartModuleAsyncOptions.html":{},"interfaces/MultipartOptionsFactory.html":{},"coverage.html":{}}}],["multipartmoduleoptions",{"_index":1540,"title":{},"body":{"modules/MultipartModule.html":{},"interfaces/MultipartModuleAsyncOptions.html":{},"interfaces/MultipartOptionsFactory.html":{},"miscellaneous/typealiases.html":{}}}],["multipartoptionsfactory",{"_index":1553,"title":{"interfaces/MultipartOptionsFactory.html":{}},"body":{"modules/MultipartModule.html":{},"interfaces/MultipartModuleAsyncOptions.html":{},"interfaces/MultipartOptionsFactory.html":{},"coverage.html":{}}}],["name",{"_index":31,"title":{},"body":{"classes/AllExceptionFilter.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/ChatMessagesService.html":{},"injectables/ChatParticipantsService.html":{},"classes/ChatReadMessageResponseDto.html":{},"classes/ChatReceiveMessageDto.html":{},"controllers/ChatsController.html":{},"classes/ChatsGateway.html":{},"injectables/ChatsService.html":{},"injectables/ConfigService.html":{},"modules/DatabaseModule.html":{},"classes/FileEntityPreview.html":{},"injectables/FileValidationPipe.html":{},"controllers/FilesController.html":{},"injectables/FilesService.html":{},"classes/HttpExceptionFilter.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtRefreshGuard.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"modules/MultipartModule.html":{},"controllers/NotificationsController.html":{},"injectables/NotificationsService.html":{},"classes/PaginationChatMessagesDto.html":{},"classes/PaginationChatParticipantsDto.html":{},"classes/PaginationChatsDto.html":{},"classes/PaginationFilesDto.html":{},"classes/PaginationNotificationsDto.html":{},"classes/PaginationUserNotificationTokensDto.html":{},"classes/PaginationUsersDto.html":{},"injectables/SendMailService.html":{},"classes/SocketsExceptionFilter.html":{},"classes/SocketsGateway.html":{},"injectables/SocketsService.html":{},"injectables/StorageS3Service.html":{},"injectables/StorageService.html":{},"injectables/TransformInterceptor.html":{},"classes/UploadedFile.html":{},"controllers/UserNotificationTokensController.html":{},"injectables/UserNotificationTokensService.html":{},"injectables/UserRefreshTokensService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"miscellaneous/functions.html":{},"classes/user1615673396368.html":{}}}],["name.enum.ts",{"_index":2346,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["nest.js",{"_index":2505,"title":{},"body":{"properties.html":{}}}],["nestinterceptor",{"_index":1739,"title":{},"body":{"interfaces/Response.html":{},"injectables/TransformInterceptor.html":{}}}],["nestjs",{"_index":1796,"title":{},"body":{"modules/SendMailModule.html":{},"injectables/SendMailService.html":{},"dependencies.html":{}}}],["nestjs/bull",{"_index":167,"title":{},"body":{"modules/AppModule.html":{},"dependencies.html":{}}}],["nestjs/common",{"_index":39,"title":{},"body":{"classes/AllExceptionFilter.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/ChatMessagesService.html":{},"injectables/ChatParticipantsService.html":{},"controllers/ChatsController.html":{},"classes/ChatsGateway.html":{},"modules/ChatsModule.html":{},"injectables/ChatsService.html":{},"modules/ConfigModule.html":{},"injectables/ConfigService.html":{},"modules/DatabaseModule.html":{},"injectables/FileValidationPipe.html":{},"controllers/FilesController.html":{},"modules/FilesModule.html":{},"injectables/FilesService.html":{},"classes/HttpExceptionFilter.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtRefreshGuard.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"modules/MultipartModule.html":{},"interfaces/MultipartModuleAsyncOptions.html":{},"interfaces/MultipartOptionsFactory.html":{},"controllers/NotificationsController.html":{},"modules/NotificationsModule.html":{},"injectables/NotificationsService.html":{},"interfaces/Response.html":{},"modules/SendMailModule.html":{},"injectables/SendMailService.html":{},"classes/SocketsExceptionFilter.html":{},"classes/SocketsGateway.html":{},"modules/SocketsModule.html":{},"injectables/SocketsService.html":{},"injectables/StorageS3Service.html":{},"injectables/StorageService.html":{},"injectables/TransformInterceptor.html":{},"controllers/UserNotificationTokensController.html":{},"injectables/UserNotificationTokensService.html":{},"injectables/UserRefreshTokensService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"dependencies.html":{}}}],["nestjs/common/interfaces",{"_index":1570,"title":{},"body":{"interfaces/MultipartModuleAsyncOptions.html":{},"interfaces/MultipartOptionsFactory.html":{}}}],["nestjs/common/utils/random",{"_index":1547,"title":{},"body":{"modules/MultipartModule.html":{}}}],["nestjs/core",{"_index":169,"title":{},"body":{"modules/AppModule.html":{},"injectables/JwtAuthGuard.html":{},"dependencies.html":{}}}],["nestjs/jwt",{"_index":335,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/SocketsGateway.html":{},"modules/SocketsModule.html":{},"dependencies.html":{}}}],["nestjs/microservices",{"_index":94,"title":{},"body":{"controllers/AppController.html":{},"dependencies.html":{}}}],["nestjs/passport",{"_index":333,"title":{},"body":{"modules/AuthModule.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtRefreshGuard.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"dependencies.html":{}}}],["nestjs/platform",{"_index":2297,"title":{},"body":{"dependencies.html":{}}}],["nestjs/swagger",{"_index":96,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"entities/ChatEntity.html":{},"entities/ChatMessageEntity.html":{},"entities/ChatParticipantEntity.html":{},"classes/ChatReadMessageDto.html":{},"classes/ChatReadMessageResponseDto.html":{},"classes/ChatReceiveMessageDto.html":{},"controllers/ChatsController.html":{},"classes/ConfirmationEmailDto.html":{},"classes/CreateChatDto.html":{},"classes/CreateChatMessageDto.html":{},"classes/CreateFileDto.html":{},"classes/CreateNotificationDto.html":{},"classes/CreateProfileDto.html":{},"classes/CreateUserDto.html":{},"classes/CreateUserNotificationTokenDto.html":{},"classes/CredentialsDto.html":{},"entities/FileEntity.html":{},"classes/FileEntityPreview.html":{},"controllers/FilesController.html":{},"classes/FindManyOptionsDto.html":{},"classes/FindOneOptionsDto.html":{},"classes/ID.html":{},"classes/JwtAccessTokenPayloadDto.html":{},"classes/JwtRefreshTokenDto.html":{},"classes/JwtRefreshTokenPayloadDto.html":{},"classes/JwtTokensDto.html":{},"entities/NotificationEntity.html":{},"controllers/NotificationsController.html":{},"classes/ResetPasswordDto.html":{},"classes/SelectChatMessagesDto.html":{},"classes/SelectChatsDto.html":{},"classes/SelectFilesDto.html":{},"classes/SelectNotificationsDto.html":{},"classes/SendResetPasswordDto.html":{},"classes/UpdateEmailDto.html":{},"classes/UpdateNotificationDto.html":{},"classes/UpdatePasswordDto.html":{},"classes/UpdateProfileDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserNotificationTokenDto.html":{},"entities/UserEntity.html":{},"entities/UserNotificationTokenEntity.html":{},"controllers/UserNotificationTokensController.html":{},"entities/UserRefreshTokenEntity.html":{},"controllers/UsersController.html":{},"dependencies.html":{}}}],["nestjs/terminus",{"_index":104,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"dependencies.html":{}}}],["nestjs/throttler",{"_index":164,"title":{},"body":{"modules/AppModule.html":{},"dependencies.html":{}}}],["nestjs/typeorm",{"_index":616,"title":{},"body":{"injectables/ChatMessagesService.html":{},"injectables/ChatParticipantsService.html":{},"modules/ChatsModule.html":{},"injectables/ChatsService.html":{},"modules/DatabaseModule.html":{},"modules/FilesModule.html":{},"injectables/FilesService.html":{},"modules/NotificationsModule.html":{},"injectables/NotificationsService.html":{},"injectables/UserNotificationTokensService.html":{},"injectables/UserRefreshTokensService.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"dependencies.html":{}}}],["nestjs/websockets",{"_index":851,"title":{},"body":{"classes/ChatsGateway.html":{},"classes/SocketsExceptionFilter.html":{},"classes/SocketsGateway.html":{},"dependencies.html":{}}}],["new",{"_index":21,"title":{},"body":{"classes/AllExceptionFilter.html":{},"injectables/AuthService.html":{},"injectables/ChatMessagesService.html":{},"injectables/ChatParticipantsService.html":{},"classes/ChatsGateway.html":{},"injectables/ChatsService.html":{},"interfaces/CreateMockFileReturn.html":{},"entities/FileEntity.html":{},"classes/FileEntityPreview.html":{},"injectables/FileValidationPipe.html":{},"injectables/FilesService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtRefreshGuard.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/NotificationsService.html":{},"classes/SelectChatsDto.html":{},"classes/SelectFilesDto.html":{},"classes/SelectNotificationsDto.html":{},"modules/SendMailModule.html":{},"injectables/SendMailService.html":{},"injectables/StorageS3Service.html":{},"injectables/StorageService.html":{},"entities/UserEntity.html":{},"injectables/UserNotificationTokensService.html":{},"injectables/UserRefreshTokensService.html":{},"injectables/UsersService.html":{},"coverage.html":{},"unit-test.html":{},"miscellaneous/variables.html":{}}}],["new_password_and_old_password_cannot_be_same",{"_index":2371,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["newmessagescount",{"_index":490,"title":{},"body":{"entities/ChatEntity.html":{},"injectables/ChatsService.html":{}}}],["next",{"_index":1741,"title":{},"body":{"interfaces/Response.html":{},"injectables/TransformInterceptor.html":{}}}],["next.handle().pipe(map((data",{"_index":1743,"title":{},"body":{"interfaces/Response.html":{},"injectables/TransformInterceptor.html":{}}}],["node:crypto",{"_index":1928,"title":{},"body":{"injectables/StorageS3Service.html":{}}}],["node:path",{"_index":1216,"title":{},"body":{"entities/FileEntity.html":{},"classes/FileEntityPreview.html":{},"injectables/StorageS3Service.html":{}}}],["node:tls",{"_index":1156,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["node:url",{"_index":41,"title":{},"body":{"classes/AllExceptionFilter.html":{}}}],["nodemailer",{"_index":2324,"title":{},"body":{"dependencies.html":{}}}],["not(user.id",{"_index":667,"title":{},"body":{"injectables/ChatMessagesService.html":{},"classes/ChatsGateway.html":{}}}],["notation",{"_index":2582,"title":{},"body":{"miscellaneous/variables.html":{}}}],["notation.helper.ts",{"_index":2238,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["notfoundexception",{"_index":613,"title":{},"body":{"injectables/ChatMessagesService.html":{},"injectables/ChatParticipantsService.html":{},"injectables/ChatsService.html":{},"injectables/FilesService.html":{},"injectables/NotificationsService.html":{},"injectables/StorageS3Service.html":{},"injectables/StorageService.html":{},"injectables/UserNotificationTokensService.html":{},"injectables/UserRefreshTokensService.html":{},"injectables/UsersService.html":{}}}],["notfoundexception(errortypeenum.chat_message_not_found",{"_index":674,"title":{},"body":{"injectables/ChatMessagesService.html":{}}}],["notfoundexception(errortypeenum.chat_messages_not_found",{"_index":665,"title":{},"body":{"injectables/ChatMessagesService.html":{}}}],["notfoundexception(errortypeenum.chat_not_found",{"_index":988,"title":{},"body":{"injectables/ChatsService.html":{}}}],["notfoundexception(errortypeenum.chat_participant_not_found",{"_index":740,"title":{},"body":{"injectables/ChatParticipantsService.html":{}}}],["notfoundexception(errortypeenum.chat_participants_not_found",{"_index":738,"title":{},"body":{"injectables/ChatParticipantsService.html":{}}}],["notfoundexception(errortypeenum.chats_not_found",{"_index":985,"title":{},"body":{"injectables/ChatsService.html":{}}}],["notfoundexception(errortypeenum.file_not_found",{"_index":1337,"title":{},"body":{"injectables/FilesService.html":{},"injectables/StorageS3Service.html":{},"injectables/StorageService.html":{}}}],["notfoundexception(errortypeenum.files_not_found",{"_index":1329,"title":{},"body":{"injectables/FilesService.html":{}}}],["notfoundexception(errortypeenum.notification_already_exist",{"_index":1665,"title":{},"body":{"injectables/NotificationsService.html":{}}}],["notfoundexception(errortypeenum.notification_not_found",{"_index":1672,"title":{},"body":{"injectables/NotificationsService.html":{}}}],["notfoundexception(errortypeenum.notifications_already_exist",{"_index":1662,"title":{},"body":{"injectables/NotificationsService.html":{}}}],["notfoundexception(errortypeenum.notifications_not_found",{"_index":1670,"title":{},"body":{"injectables/NotificationsService.html":{}}}],["notfoundexception(errortypeenum.user_not_found",{"_index":2200,"title":{},"body":{"injectables/UsersService.html":{}}}],["notfoundexception(errortypeenum.user_notification_token_not_found",{"_index":2113,"title":{},"body":{"injectables/UserNotificationTokensService.html":{}}}],["notfoundexception(errortypeenum.user_notification_tokens_not_found",{"_index":2112,"title":{},"body":{"injectables/UserNotificationTokensService.html":{}}}],["notfoundexception(errortypeenum.user_refresh_token_not_found",{"_index":2148,"title":{},"body":{"injectables/UserRefreshTokensService.html":{}}}],["notfoundexception(errortypeenum.user_refresh_tokens_not_found",{"_index":2147,"title":{},"body":{"injectables/UserRefreshTokensService.html":{}}}],["notfoundexception(errortypeenum.users_not_found",{"_index":2199,"title":{},"body":{"injectables/UsersService.html":{}}}],["notification",{"_index":1145,"title":{},"body":{"classes/CreateUserNotificationTokenDto.html":{},"classes/DeleteUserNotificationTokenDto.html":{},"injectables/NotificationsService.html":{},"classes/PaginationUserNotificationTokensDto.html":{},"classes/SelectUserNotificationTokenDto.html":{},"classes/SelectUserNotificationTokensDto.html":{},"classes/UpdateUserNotificationTokenDto.html":{},"entities/UserEntity.html":{},"entities/UserNotificationTokenEntity.html":{},"controllers/UserNotificationTokensController.html":{},"injectables/UserNotificationTokensService.html":{},"coverage.html":{}}}],["notification.dto",{"_index":2009,"title":{},"body":{"classes/UpdateNotificationDto.html":{}}}],["notification.dto.ts",{"_index":1116,"title":{},"body":{"classes/CreateNotificationDto.html":{},"classes/UpdateNotificationDto.html":{},"coverage.html":{}}}],["notification.dto.ts:10",{"_index":1119,"title":{},"body":{"classes/CreateNotificationDto.html":{},"classes/UpdateNotificationDto.html":{}}}],["notification.dto.ts:14",{"_index":1122,"title":{},"body":{"classes/CreateNotificationDto.html":{}}}],["notification_already_exist",{"_index":2385,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["notification_not_found",{"_index":2387,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["notificationentity",{"_index":1574,"title":{"entities/NotificationEntity.html":{}},"body":{"entities/NotificationEntity.html":{},"controllers/NotificationsController.html":{},"modules/NotificationsModule.html":{},"injectables/NotificationsService.html":{},"classes/PaginationNotificationsDto.html":{},"classes/SelectNotificationsDto.html":{},"coverage.html":{}}}],["notificationentity_relation_field",{"_index":1669,"title":{},"body":{"injectables/NotificationsService.html":{}}}],["notificationentityrepository",{"_index":1618,"title":{},"body":{"injectables/NotificationsService.html":{}}}],["notifications",{"_index":1591,"title":{},"body":{"controllers/NotificationsController.html":{},"changelog.html":{}}}],["notifications.controller",{"_index":1615,"title":{},"body":{"modules/NotificationsModule.html":{}}}],["notifications.dto.ts",{"_index":1719,"title":{},"body":{"classes/PaginationNotificationsDto.html":{},"classes/SelectNotificationsDto.html":{},"coverage.html":{}}}],["notifications.dto.ts:14",{"_index":1778,"title":{},"body":{"classes/SelectNotificationsDto.html":{}}}],["notifications.dto.ts:16",{"_index":1779,"title":{},"body":{"classes/SelectNotificationsDto.html":{}}}],["notifications.dto.ts:5",{"_index":1720,"title":{},"body":{"classes/PaginationNotificationsDto.html":{}}}],["notifications_already_exist",{"_index":2384,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["notifications_not_found",{"_index":2386,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["notificationscontroller",{"_index":1589,"title":{"controllers/NotificationsController.html":{}},"body":{"controllers/NotificationsController.html":{},"modules/NotificationsModule.html":{},"coverage.html":{}}}],["notificationsmodule",{"_index":154,"title":{"modules/NotificationsModule.html":{}},"body":{"modules/AppModule.html":{},"modules/NotificationsModule.html":{},"modules.html":{},"overview.html":{}}}],["notificationsservice",{"_index":1601,"title":{"injectables/NotificationsService.html":{}},"body":{"controllers/NotificationsController.html":{},"modules/NotificationsModule.html":{},"injectables/NotificationsService.html":{},"coverage.html":{},"overview.html":{}}}],["notificationsstatusenum",{"_index":1579,"title":{},"body":{"entities/NotificationEntity.html":{},"injectables/NotificationsService.html":{},"classes/SelectNotificationsDto.html":{},"classes/UpdateNotificationDto.html":{},"miscellaneous/enumerations.html":{}}}],["notificationsstatusenum.read",{"_index":1646,"title":{},"body":{"injectables/NotificationsService.html":{}}}],["notificationsstatusenum.unread",{"_index":1588,"title":{},"body":{"entities/NotificationEntity.html":{},"injectables/NotificationsService.html":{}}}],["notificationstitleenum",{"_index":2343,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["notificationstypeenum",{"_index":1120,"title":{},"body":{"classes/CreateNotificationDto.html":{},"entities/NotificationEntity.html":{},"miscellaneous/enumerations.html":{}}}],["notificationstypeenum})@column({type",{"_index":1583,"title":{},"body":{"entities/NotificationEntity.html":{}}}],["notificationtokens",{"_index":1681,"title":{},"body":{"injectables/NotificationsService.html":{},"entities/UserEntity.html":{},"entities/UserNotificationTokenEntity.html":{}}}],["now",{"_index":1196,"title":{},"body":{"entities/FileEntity.html":{},"classes/FileEntityPreview.html":{},"injectables/StorageS3Service.html":{},"injectables/StorageService.html":{}}}],["now.getfullyear",{"_index":1936,"title":{},"body":{"injectables/StorageS3Service.html":{},"injectables/StorageService.html":{}}}],["now.getmonth",{"_index":1938,"title":{},"body":{"injectables/StorageS3Service.html":{},"injectables/StorageService.html":{}}}],["npm",{"_index":2479,"title":{},"body":{"index.html":{}}}],["null",{"_index":505,"title":{},"body":{"entities/ChatEntity.html":{},"entities/FileEntity.html":{},"classes/FileEntityPreview.html":{},"injectables/SocketsService.html":{},"entities/UserEntity.html":{}}}],["nullable",{"_index":506,"title":{},"body":{"entities/ChatEntity.html":{},"entities/ChatMessageEntity.html":{},"entities/ChatParticipantEntity.html":{},"entities/FileEntity.html":{},"classes/FileEntityPreview.html":{},"entities/NotificationEntity.html":{},"entities/UserEntity.html":{},"entities/UserNotificationTokenEntity.html":{}}}],["nulls",{"_index":2607,"title":{},"body":{"miscellaneous/variables.html":{}}}],["number",{"_index":376,"title":{},"body":{"injectables/AuthService.html":{},"entities/ChatEntity.html":{},"classes/FindManyOptionsDto.html":{},"classes/PaginationChatMessagesDto.html":{},"classes/PaginationChatParticipantsDto.html":{},"classes/PaginationChatsDto.html":{},"classes/PaginationFilesDto.html":{},"classes/PaginationNotificationsDto.html":{},"classes/PaginationUserNotificationTokensDto.html":{},"classes/PaginationUsersDto.html":{},"classes/SelectChatMessagesDto.html":{},"classes/SelectChatsDto.html":{},"classes/SelectFilesDto.html":{},"classes/SelectNotificationsDto.html":{},"classes/SelectUserNotificationTokensDto.html":{},"classes/SelectUsersDto.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["o.type",{"_index":785,"title":{},"body":{"classes/ChatReceiveMessageDto.html":{},"classes/CreateChatMessageDto.html":{}}}],["object",{"_index":1025,"title":{},"body":{"injectables/ConfigService.html":{},"classes/FindManyOptionsDto.html":{},"injectables/StorageService.html":{},"miscellaneous/variables.html":{}}}],["object.assign",{"_index":132,"title":{},"body":{"controllers/AppController.html":{},"modules/AuthModule.html":{},"interfaces/CreateMockFileReturn.html":{},"classes/FindManyOptionsDto.html":{},"classes/FindOneOptionsDto.html":{},"classes/SelectFilesDto.html":{},"modules/SocketsModule.html":{}}}],["object.assign(initialoptions",{"_index":460,"title":{},"body":{"injectables/AuthService.html":{}}}],["object.assign(this",{"_index":768,"title":{},"body":{"classes/ChatReadMessageDto.html":{},"classes/ChatReadMessageResponseDto.html":{},"classes/ChatReceiveMessageDto.html":{},"classes/CreateChatMessageDto.html":{},"entities/FileEntity.html":{},"classes/FileEntityPreview.html":{},"classes/PaginationChatMessagesDto.html":{},"classes/PaginationChatParticipantsDto.html":{},"classes/PaginationChatsDto.html":{},"classes/PaginationFilesDto.html":{},"classes/PaginationNotificationsDto.html":{},"classes/PaginationUserNotificationTokensDto.html":{},"classes/PaginationUsersDto.html":{},"classes/UploadedFile.html":{}}}],["object.entries(order",{"_index":2602,"title":{},"body":{"miscellaneous/variables.html":{}}}],["object.keys(order",{"_index":2608,"title":{},"body":{"miscellaneous/variables.html":{}}}],["object.keys(this.userssockets[userid",{"_index":1899,"title":{},"body":{"injectables/SocketsService.html":{}}}],["object.keys(this.userssockets[userid]).length",{"_index":1901,"title":{},"body":{"injectables/SocketsService.html":{}}}],["objectpath",{"_index":2571,"title":{},"body":{"miscellaneous/variables.html":{}}}],["objectpath.split",{"_index":2573,"title":{},"body":{"miscellaneous/variables.html":{}}}],["observable",{"_index":1736,"title":{},"body":{"interfaces/Response.html":{},"injectables/TransformInterceptor.html":{}}}],["offset",{"_index":1402,"title":{},"body":{"classes/FindManyOptionsDto.html":{},"classes/SelectChatMessagesDto.html":{},"classes/SelectChatsDto.html":{},"classes/SelectFilesDto.html":{},"classes/SelectNotificationsDto.html":{},"classes/SelectUserNotificationTokensDto.html":{},"classes/SelectUsersDto.html":{}}}],["oldpassword",{"_index":2005,"title":{},"body":{"classes/UpdateEmailDto.html":{},"classes/UpdatePasswordDto.html":{},"classes/UpdateProfileDto.html":{}}}],["oldrefreshtoken",{"_index":298,"title":{},"body":{"controllers/AuthController.html":{}}}],["oldrefreshtoken.id",{"_index":300,"title":{},"body":{"controllers/AuthController.html":{}}}],["omit",{"_index":1930,"title":{},"body":{"injectables/StorageS3Service.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["omittype",{"_index":2001,"title":{},"body":{"classes/UpdateEmailDto.html":{},"classes/UpdatePasswordDto.html":{},"classes/UpdateProfileDto.html":{}}}],["omittype(updateuserdto",{"_index":2003,"title":{},"body":{"classes/UpdateEmailDto.html":{},"classes/UpdatePasswordDto.html":{},"classes/UpdateProfileDto.html":{}}}],["ondelete",{"_index":503,"title":{},"body":{"entities/ChatEntity.html":{},"entities/ChatMessageEntity.html":{},"entities/ChatParticipantEntity.html":{},"entities/FileEntity.html":{},"classes/FileEntityPreview.html":{},"entities/NotificationEntity.html":{},"entities/UserEntity.html":{},"entities/UserNotificationTokenEntity.html":{},"entities/UserRefreshTokenEntity.html":{}}}],["one",{"_index":1433,"title":{},"body":{"classes/FindManyOptionsDto.html":{},"classes/FindOneOptionsDto.html":{},"entities/UserEntity.html":{},"coverage.html":{}}}],["onetomany",{"_index":526,"title":{},"body":{"entities/ChatEntity.html":{},"entities/UserEntity.html":{}}}],["ongatewayconnection",{"_index":1843,"title":{},"body":{"classes/SocketsGateway.html":{}}}],["ongatewaydisconnect",{"_index":1844,"title":{},"body":{"classes/SocketsGateway.html":{}}}],["onmoduleinit",{"_index":1956,"title":{},"body":{"injectables/StorageService.html":{}}}],["onupdate",{"_index":1585,"title":{},"body":{"entities/NotificationEntity.html":{}}}],["operating",{"_index":1043,"title":{},"body":{"injectables/ConfigService.html":{},"miscellaneous/enumerations.html":{}}}],["operation",{"_index":2622,"title":{},"body":{"miscellaneous/variables.html":{}}}],["operation.summary",{"_index":2629,"title":{},"body":{"miscellaneous/variables.html":{}}}],["operationobject",{"_index":2623,"title":{},"body":{"miscellaneous/variables.html":{}}}],["optional",{"_index":32,"title":{},"body":{"classes/AllExceptionFilter.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"entities/ChatEntity.html":{},"injectables/ChatMessagesService.html":{},"injectables/ChatParticipantsService.html":{},"classes/ChatReadMessageResponseDto.html":{},"classes/ChatReceiveMessageDto.html":{},"controllers/ChatsController.html":{},"classes/ChatsGateway.html":{},"injectables/ChatsService.html":{},"injectables/ConfigService.html":{},"classes/CreateChatMessageDto.html":{},"interfaces/CreateMockFileReturn.html":{},"classes/CreateUserDto.html":{},"classes/DownloadFileDto.html":{},"classes/FileEntityPreview.html":{},"injectables/FileValidationPipe.html":{},"controllers/FilesController.html":{},"injectables/FilesService.html":{},"interfaces/FindManyBracketsOptions.html":{},"classes/FindManyOptionsDto.html":{},"classes/FindOneOptionsDto.html":{},"classes/HttpExceptionFilter.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtRefreshGuard.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"modules/MultipartModule.html":{},"interfaces/MultipartModuleAsyncOptions.html":{},"controllers/NotificationsController.html":{},"injectables/NotificationsService.html":{},"classes/PaginationChatMessagesDto.html":{},"classes/PaginationChatParticipantsDto.html":{},"classes/PaginationChatsDto.html":{},"classes/PaginationFilesDto.html":{},"classes/PaginationNotificationsDto.html":{},"classes/PaginationUserNotificationTokensDto.html":{},"classes/PaginationUsersDto.html":{},"classes/SelectChatMessagesDto.html":{},"classes/SelectChatsDto.html":{},"classes/SelectFileDto.html":{},"classes/SelectFilesDto.html":{},"classes/SelectNotificationsDto.html":{},"classes/SelectProfileDto.html":{},"classes/SelectUserDto.html":{},"classes/SelectUserNotificationTokenDto.html":{},"classes/SelectUserNotificationTokensDto.html":{},"classes/SelectUsersDto.html":{},"injectables/SendMailService.html":{},"classes/SocketsExceptionFilter.html":{},"classes/SocketsGateway.html":{},"injectables/SocketsService.html":{},"injectables/StorageS3Service.html":{},"injectables/StorageService.html":{},"injectables/TransformInterceptor.html":{},"classes/UpdateNotificationDto.html":{},"classes/UploadedFile.html":{},"controllers/UserNotificationTokensController.html":{},"injectables/UserNotificationTokensService.html":{},"injectables/UserRefreshTokensService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"miscellaneous/functions.html":{},"classes/user1615673396368.html":{}}}],["options",{"_index":131,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/ChatMessagesService.html":{},"injectables/ChatParticipantsService.html":{},"controllers/ChatsController.html":{},"injectables/ChatsService.html":{},"controllers/FilesController.html":{},"injectables/FilesService.html":{},"classes/FindManyOptionsDto.html":{},"modules/MultipartModule.html":{},"controllers/NotificationsController.html":{},"injectables/NotificationsService.html":{},"modules/SendMailModule.html":{},"injectables/StorageS3Service.html":{},"injectables/StorageService.html":{},"controllers/UserNotificationTokensController.html":{},"injectables/UserNotificationTokensService.html":{},"injectables/UserRefreshTokensService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"miscellaneous/variables.html":{}}}],["options).catch",{"_index":626,"title":{},"body":{"injectables/ChatMessagesService.html":{},"injectables/ChatParticipantsService.html":{},"injectables/ChatsService.html":{},"injectables/FilesService.html":{},"injectables/NotificationsService.html":{},"injectables/UserNotificationTokensService.html":{},"injectables/UserRefreshTokensService.html":{},"injectables/UsersService.html":{}}}],["options.dto.ts",{"_index":1377,"title":{},"body":{"classes/FindManyOptionsDto.html":{},"classes/FindOneOptionsDto.html":{},"coverage.html":{}}}],["options.dto.ts:24",{"_index":1447,"title":{},"body":{"classes/FindOneOptionsDto.html":{}}}],["options.dto.ts:30",{"_index":1391,"title":{},"body":{"classes/FindManyOptionsDto.html":{},"classes/FindOneOptionsDto.html":{}}}],["options.dto.ts:43",{"_index":1446,"title":{},"body":{"classes/FindOneOptionsDto.html":{}}}],["options.dto.ts:45",{"_index":1400,"title":{},"body":{"classes/FindManyOptionsDto.html":{}}}],["options.dto.ts:49",{"_index":1451,"title":{},"body":{"classes/FindOneOptionsDto.html":{}}}],["options.dto.ts:51",{"_index":1424,"title":{},"body":{"classes/FindManyOptionsDto.html":{}}}],["options.dto.ts:69",{"_index":1405,"title":{},"body":{"classes/FindManyOptionsDto.html":{}}}],["options.dto.ts:83",{"_index":1410,"title":{},"body":{"classes/FindManyOptionsDto.html":{}}}],["options.dto.ts:89",{"_index":1429,"title":{},"body":{"classes/FindManyOptionsDto.html":{}}}],["options.id",{"_index":1293,"title":{},"body":{"controllers/FilesController.html":{}}}],["options.imports",{"_index":1555,"title":{},"body":{"modules/MultipartModule.html":{}}}],["options.inject",{"_index":1561,"title":{},"body":{"modules/MultipartModule.html":{}}}],["options.useclass",{"_index":1560,"title":{},"body":{"modules/MultipartModule.html":{}}}],["options.useexisting",{"_index":1557,"title":{},"body":{"modules/MultipartModule.html":{}}}],["options.usefactory",{"_index":1558,"title":{},"body":{"modules/MultipartModule.html":{}}}],["options/find",{"_index":1376,"title":{},"body":{"classes/FindManyOptionsDto.html":{},"classes/FindOneOptionsDto.html":{},"coverage.html":{}}}],["optionsfactory",{"_index":1562,"title":{},"body":{"modules/MultipartModule.html":{}}}],["optionsfactory.createmultipartoptions",{"_index":1563,"title":{},"body":{"modules/MultipartModule.html":{}}}],["optionsorconditions",{"_index":602,"title":{},"body":{"injectables/ChatMessagesService.html":{},"injectables/ChatParticipantsService.html":{},"injectables/ChatsService.html":{},"injectables/FilesService.html":{},"injectables/NotificationsService.html":{},"injectables/UserNotificationTokensService.html":{},"injectables/UserRefreshTokensService.html":{},"injectables/UsersService.html":{}}}],["optionsorconditions.loadeagerrelations",{"_index":638,"title":{},"body":{"injectables/ChatMessagesService.html":{},"injectables/ChatParticipantsService.html":{},"injectables/ChatsService.html":{},"injectables/FilesService.html":{},"injectables/NotificationsService.html":{},"injectables/UsersService.html":{}}}],["optionsorconditions.order",{"_index":2194,"title":{},"body":{"injectables/UsersService.html":{}}}],["or/and",{"_index":975,"title":{},"body":{"injectables/ChatsService.html":{}}}],["order",{"_index":973,"title":{},"body":{"injectables/ChatsService.html":{},"classes/FindManyOptionsDto.html":{},"classes/SelectChatMessagesDto.html":{},"classes/SelectChatsDto.html":{},"classes/SelectFilesDto.html":{},"classes/SelectNotificationsDto.html":{},"classes/SelectUserNotificationTokensDto.html":{},"classes/SelectUsersDto.html":{},"injectables/UsersService.html":{},"miscellaneous/variables.html":{}}}],["order.helper.ts",{"_index":2242,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["order[key",{"_index":2612,"title":{},"body":{"miscellaneous/variables.html":{}}}],["orderby('active",{"_index":981,"title":{},"body":{"injectables/ChatsService.html":{}}}],["ordered",{"_index":1388,"title":{},"body":{"classes/FindManyOptionsDto.html":{},"classes/SelectChatMessagesDto.html":{},"classes/SelectChatsDto.html":{},"classes/SelectFilesDto.html":{},"classes/SelectNotificationsDto.html":{},"classes/SelectUserNotificationTokensDto.html":{},"classes/SelectUsersDto.html":{}}}],["origin",{"_index":862,"title":{},"body":{"classes/ChatsGateway.html":{},"classes/SocketsGateway.html":{}}}],["out",{"_index":159,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"modules/ChatsModule.html":{},"modules/ConfigModule.html":{},"modules/FilesModule.html":{},"modules/NotificationsModule.html":{},"modules/SendMailModule.html":{},"modules/SocketsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["out')@useguards(jwtrefreshguard)@apibody({type",{"_index":229,"title":{},"body":{"controllers/AuthController.html":{}}}],["overview",{"_index":2502,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["owner",{"_index":294,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"entities/ChatMessageEntity.html":{},"injectables/ChatMessagesService.html":{},"classes/ChatsGateway.html":{},"injectables/ChatsService.html":{},"entities/FileEntity.html":{},"classes/FileEntityPreview.html":{},"controllers/FilesController.html":{},"injectables/FilesService.html":{},"entities/NotificationEntity.html":{},"controllers/NotificationsController.html":{},"injectables/NotificationsService.html":{},"entities/UserEntity.html":{},"entities/UserNotificationTokenEntity.html":{},"controllers/UserNotificationTokensController.html":{},"entities/UserRefreshTokenEntity.html":{}}}],["owner.id",{"_index":1283,"title":{},"body":{"controllers/FilesController.html":{},"controllers/NotificationsController.html":{},"controllers/UserNotificationTokensController.html":{}}}],["owner['id",{"_index":1335,"title":{},"body":{"injectables/FilesService.html":{}}}],["owner['role",{"_index":1331,"title":{},"body":{"injectables/FilesService.html":{}}}],["ownerid",{"_index":934,"title":{},"body":{"injectables/ChatsService.html":{}}}],["package",{"_index":2291,"title":{"dependencies.html":{},"properties.html":{}},"body":{}}],["page",{"_index":1380,"title":{},"body":{"classes/FindManyOptionsDto.html":{},"classes/SelectChatMessagesDto.html":{},"classes/SelectChatsDto.html":{},"classes/SelectFilesDto.html":{},"classes/SelectNotificationsDto.html":{},"classes/SelectUserNotificationTokensDto.html":{},"classes/SelectUsersDto.html":{}}}],["paginated",{"_index":1403,"title":{},"body":{"classes/FindManyOptionsDto.html":{},"classes/SelectChatMessagesDto.html":{},"classes/SelectChatsDto.html":{},"classes/SelectFilesDto.html":{},"classes/SelectNotificationsDto.html":{},"classes/SelectUserNotificationTokensDto.html":{},"classes/SelectUsersDto.html":{}}}],["paginationchatmessagesdto",{"_index":619,"title":{"classes/PaginationChatMessagesDto.html":{}},"body":{"injectables/ChatMessagesService.html":{},"controllers/ChatsController.html":{},"classes/PaginationChatMessagesDto.html":{},"coverage.html":{}}}],["paginationchatmessagesdto([rows.reverse",{"_index":670,"title":{},"body":{"injectables/ChatMessagesService.html":{}}}],["paginationchatparticipantsdto",{"_index":722,"title":{"classes/PaginationChatParticipantsDto.html":{}},"body":{"injectables/ChatParticipantsService.html":{},"classes/PaginationChatParticipantsDto.html":{},"coverage.html":{}}}],["paginationchatparticipantsdto(data",{"_index":739,"title":{},"body":{"injectables/ChatParticipantsService.html":{}}}],["paginationchatsdto",{"_index":620,"title":{"classes/PaginationChatsDto.html":{}},"body":{"injectables/ChatMessagesService.html":{},"injectables/ChatParticipantsService.html":{},"controllers/ChatsController.html":{},"injectables/ChatsService.html":{},"classes/PaginationChatsDto.html":{},"coverage.html":{}}}],["paginationchatsdto([await",{"_index":986,"title":{},"body":{"injectables/ChatsService.html":{}}}],["paginationfilesdto",{"_index":1275,"title":{"classes/PaginationFilesDto.html":{}},"body":{"controllers/FilesController.html":{},"injectables/FilesService.html":{},"classes/PaginationFilesDto.html":{},"coverage.html":{}}}],["paginationfilesdto(data",{"_index":1328,"title":{},"body":{"injectables/FilesService.html":{}}}],["paginationmixin",{"_index":1703,"title":{},"body":{"classes/PaginationChatMessagesDto.html":{},"classes/PaginationChatParticipantsDto.html":{},"classes/PaginationChatsDto.html":{},"classes/PaginationFilesDto.html":{},"classes/PaginationNotificationsDto.html":{},"classes/PaginationUserNotificationTokensDto.html":{},"classes/PaginationUsersDto.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["paginationmixin(chatentity",{"_index":1713,"title":{},"body":{"classes/PaginationChatsDto.html":{}}}],["paginationmixin(chatmessageentity",{"_index":1704,"title":{},"body":{"classes/PaginationChatMessagesDto.html":{}}}],["paginationmixin(chatparticipantentity",{"_index":1710,"title":{},"body":{"classes/PaginationChatParticipantsDto.html":{}}}],["paginationmixin(classref",{"_index":2470,"title":{},"body":{"miscellaneous/functions.html":{}}}],["paginationmixin(fileentity",{"_index":1717,"title":{},"body":{"classes/PaginationFilesDto.html":{}}}],["paginationmixin(notificationentity",{"_index":1721,"title":{},"body":{"classes/PaginationNotificationsDto.html":{}}}],["paginationmixin(userentity",{"_index":1728,"title":{},"body":{"classes/PaginationUsersDto.html":{}}}],["paginationnotificationsdto",{"_index":1602,"title":{"classes/PaginationNotificationsDto.html":{}},"body":{"controllers/NotificationsController.html":{},"injectables/NotificationsService.html":{},"classes/PaginationNotificationsDto.html":{},"coverage.html":{}}}],["paginationnotificationsdto(data",{"_index":1671,"title":{},"body":{"injectables/NotificationsService.html":{}}}],["paginationusernotificationtokensdto",{"_index":1722,"title":{"classes/PaginationUserNotificationTokensDto.html":{}},"body":{"classes/PaginationUserNotificationTokensDto.html":{},"controllers/UserNotificationTokensController.html":{},"coverage.html":{}}}],["paginationusersdto",{"_index":1725,"title":{"classes/PaginationUsersDto.html":{}},"body":{"classes/PaginationUsersDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["paginationusersdto(data",{"_index":2198,"title":{},"body":{"injectables/UsersService.html":{}}}],["paid",{"_index":2430,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["param",{"_index":111,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/ChatMessagesService.html":{},"injectables/ChatParticipantsService.html":{},"classes/ChatReadMessageDto.html":{},"classes/ChatReadMessageResponseDto.html":{},"classes/ChatReceiveMessageDto.html":{},"controllers/ChatsController.html":{},"classes/ChatsGateway.html":{},"injectables/ChatsService.html":{},"injectables/ConfigService.html":{},"classes/CreateChatMessageDto.html":{},"entities/FileEntity.html":{},"classes/FileEntityPreview.html":{},"injectables/FileValidationPipe.html":{},"controllers/FilesController.html":{},"injectables/FilesService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtRefreshGuard.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"modules/MultipartModule.html":{},"controllers/NotificationsController.html":{},"injectables/NotificationsService.html":{},"classes/PaginationFilesDto.html":{},"classes/PaginationUserNotificationTokensDto.html":{},"classes/PaginationUsersDto.html":{},"interfaces/Response.html":{},"injectables/SendMailService.html":{},"classes/SocketsGateway.html":{},"injectables/SocketsService.html":{},"injectables/StorageS3Service.html":{},"injectables/StorageService.html":{},"injectables/TransformInterceptor.html":{},"classes/UploadedFile.html":{},"controllers/UserNotificationTokensController.html":{},"injectables/UserNotificationTokensService.html":{},"injectables/UserRefreshTokensService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"miscellaneous/variables.html":{}}}],["parameters",{"_index":30,"title":{},"body":{"classes/AllExceptionFilter.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/ChatMessagesService.html":{},"injectables/ChatParticipantsService.html":{},"classes/ChatReadMessageResponseDto.html":{},"classes/ChatReceiveMessageDto.html":{},"controllers/ChatsController.html":{},"classes/ChatsGateway.html":{},"injectables/ChatsService.html":{},"injectables/ConfigService.html":{},"classes/FileEntityPreview.html":{},"injectables/FileValidationPipe.html":{},"controllers/FilesController.html":{},"injectables/FilesService.html":{},"classes/HttpExceptionFilter.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtRefreshGuard.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"modules/MultipartModule.html":{},"controllers/NotificationsController.html":{},"injectables/NotificationsService.html":{},"classes/PaginationChatMessagesDto.html":{},"classes/PaginationChatParticipantsDto.html":{},"classes/PaginationChatsDto.html":{},"classes/PaginationFilesDto.html":{},"classes/PaginationNotificationsDto.html":{},"classes/PaginationUserNotificationTokensDto.html":{},"classes/PaginationUsersDto.html":{},"injectables/SendMailService.html":{},"classes/SocketsExceptionFilter.html":{},"classes/SocketsGateway.html":{},"injectables/SocketsService.html":{},"injectables/StorageS3Service.html":{},"injectables/StorageService.html":{},"injectables/TransformInterceptor.html":{},"classes/UploadedFile.html":{},"controllers/UserNotificationTokensController.html":{},"injectables/UserNotificationTokensService.html":{},"injectables/UserRefreshTokensService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"miscellaneous/functions.html":{},"classes/user1615673396368.html":{}}}],["params",{"_index":66,"title":{},"body":{"classes/AllExceptionFilter.html":{}}}],["parseint('0700",{"_index":1967,"title":{},"body":{"injectables/StorageService.html":{}}}],["parseint((parsefloat(value.tofixed(2",{"_index":2599,"title":{},"body":{"miscellaneous/variables.html":{}}}],["parseint(range[0",{"_index":1364,"title":{},"body":{"injectables/FilesService.html":{}}}],["parseint(range[1",{"_index":1361,"title":{},"body":{"injectables/FilesService.html":{}}}],["part",{"_index":2576,"title":{},"body":{"miscellaneous/variables.html":{}}}],["partial",{"_index":390,"title":{},"body":{"injectables/AuthService.html":{},"entities/ChatEntity.html":{},"entities/ChatMessageEntity.html":{},"injectables/ChatMessagesService.html":{},"entities/ChatParticipantEntity.html":{},"injectables/ChatParticipantsService.html":{},"classes/ChatReadMessageDto.html":{},"classes/ChatReadMessageResponseDto.html":{},"classes/ChatReceiveMessageDto.html":{},"injectables/ChatsService.html":{},"classes/CreateChatMessageDto.html":{},"interfaces/CreateMockFileReturn.html":{},"entities/FileEntity.html":{},"classes/FileEntityPreview.html":{},"injectables/FilesService.html":{},"entities/NotificationEntity.html":{},"injectables/NotificationsService.html":{},"injectables/StorageService.html":{},"classes/UploadedFile.html":{},"entities/UserEntity.html":{},"entities/UserNotificationTokenEntity.html":{},"injectables/UserNotificationTokensService.html":{},"entities/UserRefreshTokenEntity.html":{},"injectables/UserRefreshTokensService.html":{},"injectables/UsersService.html":{},"miscellaneous/functions.html":{},"classes/user1615673396368.html":{},"miscellaneous/variables.html":{}}}],["partialtype",{"_index":2008,"title":{},"body":{"classes/UpdateNotificationDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserNotificationTokenDto.html":{}}}],["partialtype(createnotificationdto",{"_index":2010,"title":{},"body":{"classes/UpdateNotificationDto.html":{}}}],["partialtype(createuserdto",{"_index":2014,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["partialtype(createusernotificationtokendto",{"_index":2016,"title":{},"body":{"classes/UpdateUserNotificationTokenDto.html":{}}}],["participant",{"_index":491,"title":{},"body":{"entities/ChatEntity.html":{},"classes/CreateChatDto.html":{}}}],["participant.chat",{"_index":515,"title":{},"body":{"entities/ChatEntity.html":{}}}],["participant.entity",{"_index":530,"title":{},"body":{"entities/ChatEntity.html":{}}}],["participant.entity.ts",{"_index":690,"title":{},"body":{"entities/ChatParticipantEntity.html":{},"coverage.html":{}}}],["participant.entity.ts:27",{"_index":697,"title":{},"body":{"entities/ChatParticipantEntity.html":{}}}],["participant.entity.ts:34",{"_index":700,"title":{},"body":{"entities/ChatParticipantEntity.html":{}}}],["participant.entity.ts:42",{"_index":699,"title":{},"body":{"entities/ChatParticipantEntity.html":{}}}],["participant.entity.ts:49",{"_index":695,"title":{},"body":{"entities/ChatParticipantEntity.html":{}}}],["participant.entity.ts:57",{"_index":692,"title":{},"body":{"entities/ChatParticipantEntity.html":{}}}],["participant.entity.ts:68",{"_index":696,"title":{},"body":{"entities/ChatParticipantEntity.html":{}}}],["participant.entity.ts:78",{"_index":698,"title":{},"body":{"entities/ChatParticipantEntity.html":{}}}],["participantids",{"_index":720,"title":{},"body":{"injectables/ChatParticipantsService.html":{},"injectables/ChatsService.html":{}}}],["participantids.length",{"_index":746,"title":{},"body":{"injectables/ChatParticipantsService.html":{},"injectables/ChatsService.html":{}}}],["participants",{"_index":492,"title":{},"body":{"entities/ChatEntity.html":{},"controllers/ChatsController.html":{}}}],["participants.dto.ts",{"_index":1708,"title":{},"body":{"classes/PaginationChatParticipantsDto.html":{},"coverage.html":{}}}],["participants.dto.ts:8",{"_index":1709,"title":{},"body":{"classes/PaginationChatParticipantsDto.html":{}}}],["participants.service",{"_index":859,"title":{},"body":{"classes/ChatsGateway.html":{}}}],["participants.service.ts",{"_index":705,"title":{},"body":{"injectables/ChatParticipantsService.html":{},"coverage.html":{}}}],["participants.service.ts:105",{"_index":714,"title":{},"body":{"injectables/ChatParticipantsService.html":{}}}],["participants.service.ts:121",{"_index":717,"title":{},"body":{"injectables/ChatParticipantsService.html":{}}}],["participants.service.ts:136",{"_index":719,"title":{},"body":{"injectables/ChatParticipantsService.html":{}}}],["participants.service.ts:154",{"_index":721,"title":{},"body":{"injectables/ChatParticipantsService.html":{}}}],["participants.service.ts:173",{"_index":712,"title":{},"body":{"injectables/ChatParticipantsService.html":{}}}],["participants.service.ts:24",{"_index":709,"title":{},"body":{"injectables/ChatParticipantsService.html":{}}}],["participants.service.ts:39",{"_index":711,"title":{},"body":{"injectables/ChatParticipantsService.html":{}}}],["participants.service.ts:60",{"_index":713,"title":{},"body":{"injectables/ChatParticipantsService.html":{}}}],["participants.service.ts:87",{"_index":716,"title":{},"body":{"injectables/ChatParticipantsService.html":{}}}],["participantsids",{"_index":870,"title":{},"body":{"classes/ChatsGateway.html":{}}}],["parts",{"_index":2572,"title":{},"body":{"miscellaneous/variables.html":{}}}],["parts.length",{"_index":2575,"title":{},"body":{"miscellaneous/variables.html":{}}}],["parts.shift",{"_index":2577,"title":{},"body":{"miscellaneous/variables.html":{}}}],["pass",{"_index":1805,"title":{},"body":{"modules/SendMailModule.html":{}}}],["passport",{"_index":1510,"title":{},"body":{"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"dependencies.html":{}}}],["passportmodule",{"_index":332,"title":{},"body":{"modules/AuthModule.html":{}}}],["passportstrategy",{"_index":1512,"title":{},"body":{"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{}}}],["passportstrategy(strategy",{"_index":1513,"title":{},"body":{"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{}}}],["password",{"_index":191,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/CreateProfileDto.html":{},"classes/CreateUserDto.html":{},"classes/CredentialsDto.html":{},"modules/DatabaseModule.html":{},"classes/ResetPasswordDto.html":{},"classes/SendResetPasswordDto.html":{},"classes/UpdateEmailDto.html":{},"classes/UpdatePasswordDto.html":{},"classes/UpdateProfileDto.html":{},"entities/UserEntity.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"classes/user1615673396368.html":{},"miscellaneous/variables.html":{}}}],["password.dto.ts",{"_index":1730,"title":{},"body":{"classes/ResetPasswordDto.html":{},"classes/SendResetPasswordDto.html":{},"coverage.html":{}}}],["password.dto.ts:15",{"_index":1732,"title":{},"body":{"classes/ResetPasswordDto.html":{}}}],["password/send/email",{"_index":246,"title":{},"body":{"controllers/AuthController.html":{}}}],["patch",{"_index":263,"title":{},"body":{"controllers/AuthController.html":{},"controllers/FilesController.html":{},"controllers/NotificationsController.html":{},"controllers/UserNotificationTokensController.html":{},"controllers/UsersController.html":{}}}],["patch(':id",{"_index":1288,"title":{},"body":{"controllers/FilesController.html":{},"controllers/NotificationsController.html":{},"controllers/UserNotificationTokensController.html":{},"controllers/UsersController.html":{}}}],["patch(':id')@apibearerauth()@useguards(jwtauthguard)@apibody({type",{"_index":1269,"title":{},"body":{"controllers/FilesController.html":{}}}],["patch(':id')@userole(userroleenum.admin",{"_index":2159,"title":{},"body":{"controllers/UsersController.html":{}}}],["patch('profile",{"_index":311,"title":{},"body":{"controllers/AuthController.html":{}}}],["patch('profile')@apibearerauth()@useguards(jwtauthguard",{"_index":250,"title":{},"body":{"controllers/AuthController.html":{}}}],["patch('profile/email",{"_index":315,"title":{},"body":{"controllers/AuthController.html":{}}}],["patch('profile/email')@apibearerauth()@useguards(jwtauthguard",{"_index":254,"title":{},"body":{"controllers/AuthController.html":{}}}],["patch('profile/password",{"_index":313,"title":{},"body":{"controllers/AuthController.html":{}}}],["patch('profile/password')@apibearerauth()@useguards(jwtauthguard",{"_index":258,"title":{},"body":{"controllers/AuthController.html":{}}}],["path",{"_index":109,"title":{},"body":{"controllers/AppController.html":{},"injectables/ConfigService.html":{},"modules/DatabaseModule.html":{},"injectables/StorageService.html":{}}}],["payload",{"_index":431,"title":{},"body":{"injectables/AuthService.html":{}}}],["payloadtoolargeexception(errortypeenum.file_too_large",{"_index":2596,"title":{},"body":{"miscellaneous/variables.html":{}}}],["payment",{"_index":2445,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["payment_artist_deactivated",{"_index":2447,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["payment_refund",{"_index":2444,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["pg",{"_index":2328,"title":{},"body":{"dependencies.html":{}}}],["pick",{"_index":1566,"title":{},"body":{"interfaces/MultipartModuleAsyncOptions.html":{},"interfaces/MultipartOptionsFactory.html":{}}}],["picktype",{"_index":1065,"title":{},"body":{"classes/ConfirmationEmailDto.html":{},"classes/CreateProfileDto.html":{},"classes/CredentialsDto.html":{},"entities/FileEntity.html":{},"classes/FileEntityPreview.html":{},"classes/JwtAccessTokenPayloadDto.html":{},"classes/JwtRefreshTokenDto.html":{},"classes/JwtRefreshTokenPayloadDto.html":{},"classes/JwtTokensDto.html":{},"classes/ResetPasswordDto.html":{},"classes/SendResetPasswordDto.html":{},"classes/UpdateEmailDto.html":{},"classes/UpdatePasswordDto.html":{},"classes/UpdateProfileDto.html":{}}}],["picktype(createuserdto",{"_index":1066,"title":{},"body":{"classes/ConfirmationEmailDto.html":{},"classes/CreateProfileDto.html":{},"classes/CredentialsDto.html":{},"classes/ResetPasswordDto.html":{},"classes/SendResetPasswordDto.html":{}}}],["picktype(fileentity",{"_index":1229,"title":{},"body":{"entities/FileEntity.html":{},"classes/FileEntityPreview.html":{}}}],["picktype(jwttokensdto",{"_index":1470,"title":{},"body":{"classes/JwtAccessTokenPayloadDto.html":{},"classes/JwtRefreshTokenDto.html":{},"classes/JwtRefreshTokenPayloadDto.html":{},"classes/JwtTokensDto.html":{}}}],["picktype(updateuserdto",{"_index":2004,"title":{},"body":{"classes/UpdateEmailDto.html":{},"classes/UpdatePasswordDto.html":{},"classes/UpdateProfileDto.html":{}}}],["pipeline",{"_index":1976,"title":{},"body":{"injectables/StorageService.html":{}}}],["pipeline(file",{"_index":1989,"title":{},"body":{"injectables/StorageService.html":{}}}],["pipetransform",{"_index":1241,"title":{},"body":{"injectables/FileValidationPipe.html":{}}}],["place",{"_index":641,"title":{},"body":{"injectables/ChatMessagesService.html":{},"injectables/ChatParticipantsService.html":{},"injectables/ChatsService.html":{},"injectables/FilesService.html":{},"injectables/NotificationsService.html":{},"injectables/UsersService.html":{}}}],["please",{"_index":2405,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["png",{"_index":1104,"title":{},"body":{"interfaces/CreateMockFileReturn.html":{}}}],["poduction",{"_index":2355,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["port",{"_index":134,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/DatabaseModule.html":{},"modules/SendMailModule.html":{}}}],["post",{"_index":262,"title":{},"body":{"controllers/AuthController.html":{},"controllers/ChatsController.html":{},"controllers/FilesController.html":{},"controllers/NotificationsController.html":{},"controllers/UserNotificationTokensController.html":{},"controllers/UsersController.html":{}}}],["post('')@apibearerauth()@useguards(jwtauthguard)@apibody({type",{"_index":1253,"title":{},"body":{"controllers/FilesController.html":{}}}],["post('log",{"_index":228,"title":{},"body":{"controllers/AuthController.html":{}}}],["post('refresh",{"_index":233,"title":{},"body":{"controllers/AuthController.html":{}}}],["post('reset",{"_index":238,"title":{},"body":{"controllers/AuthController.html":{}}}],["post('signin",{"_index":220,"title":{},"body":{"controllers/AuthController.html":{}}}],["post('signup",{"_index":224,"title":{},"body":{"controllers/AuthController.html":{}}}],["post('validate/email/code",{"_index":215,"title":{},"body":{"controllers/AuthController.html":{}}}],["post()@userole(userroleenum.admin",{"_index":2153,"title":{},"body":{"controllers/UsersController.html":{}}}],["ppid",{"_index":435,"title":{},"body":{"injectables/AuthService.html":{},"classes/JwtAccessTokenPayloadDto.html":{},"classes/JwtRefreshTokenDto.html":{},"classes/JwtRefreshTokenPayloadDto.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"classes/JwtTokensDto.html":{},"entities/UserRefreshTokenEntity.html":{},"injectables/UserRefreshTokensService.html":{}}}],["prefix",{"_index":84,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"controllers/ChatsController.html":{},"controllers/FilesController.html":{},"controllers/NotificationsController.html":{},"injectables/StorageService.html":{},"controllers/UserNotificationTokensController.html":{},"controllers/UsersController.html":{}}}],["prefix}/${filename",{"_index":1984,"title":{},"body":{"injectables/StorageService.html":{}}}],["primarygeneratedcolumn",{"_index":523,"title":{},"body":{"entities/ChatEntity.html":{},"entities/ChatMessageEntity.html":{},"entities/ChatParticipantEntity.html":{},"entities/FileEntity.html":{},"classes/FileEntityPreview.html":{},"entities/NotificationEntity.html":{},"entities/UserEntity.html":{},"entities/UserNotificationTokenEntity.html":{},"entities/UserRefreshTokenEntity.html":{}}}],["primarygeneratedcolumn('uuid",{"_index":534,"title":{},"body":{"entities/ChatEntity.html":{},"entities/ChatMessageEntity.html":{},"entities/ChatParticipantEntity.html":{},"entities/FileEntity.html":{},"classes/FileEntityPreview.html":{},"entities/NotificationEntity.html":{},"entities/UserEntity.html":{},"entities/UserNotificationTokenEntity.html":{},"entities/UserRefreshTokenEntity.html":{}}}],["priority",{"_index":1398,"title":{},"body":{"classes/FindManyOptionsDto.html":{},"classes/SelectChatMessagesDto.html":{},"classes/SelectChatsDto.html":{},"classes/SelectFilesDto.html":{},"classes/SelectNotificationsDto.html":{},"classes/SelectUserNotificationTokensDto.html":{},"classes/SelectUsersDto.html":{}}}],["private",{"_index":12,"title":{},"body":{"classes/AllExceptionFilter.html":{},"controllers/AppController.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/ChatMessagesService.html":{},"injectables/ChatParticipantsService.html":{},"controllers/ChatsController.html":{},"classes/ChatsGateway.html":{},"injectables/ChatsService.html":{},"injectables/FileValidationPipe.html":{},"injectables/FilesService.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"modules/MultipartModule.html":{},"injectables/SendMailService.html":{},"classes/SocketsGateway.html":{},"injectables/SocketsService.html":{},"injectables/StorageS3Service.html":{},"injectables/StorageService.html":{},"miscellaneous/enumerations.html":{}}}],["process.env.cdn}/${this.filename}${this.extname",{"_index":1219,"title":{},"body":{"entities/FileEntity.html":{},"classes/FileEntityPreview.html":{}}}],["process.env['node_env",{"_index":1053,"title":{},"body":{"injectables/ConfigService.html":{}}}],["process.env[filename",{"_index":1050,"title":{},"body":{"injectables/ConfigService.html":{}}}],["process.env[key",{"_index":1054,"title":{},"body":{"injectables/ConfigService.html":{}}}],["production",{"_index":2358,"title":{},"body":{"miscellaneous/enumerations.html":{},"index.html":{}}}],["profile.dto.ts",{"_index":1128,"title":{},"body":{"classes/CreateProfileDto.html":{},"classes/SelectProfileDto.html":{},"classes/UpdateEmailDto.html":{},"classes/UpdatePasswordDto.html":{},"classes/UpdateProfileDto.html":{},"coverage.html":{}}}],["profile.dto.ts:25",{"_index":2011,"title":{},"body":{"classes/UpdatePasswordDto.html":{}}}],["promise",{"_index":91,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/ChatMessagesService.html":{},"injectables/ChatParticipantsService.html":{},"controllers/ChatsController.html":{},"classes/ChatsGateway.html":{},"injectables/ChatsService.html":{},"controllers/FilesController.html":{},"injectables/FilesService.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"interfaces/MultipartModuleAsyncOptions.html":{},"interfaces/MultipartOptionsFactory.html":{},"controllers/NotificationsController.html":{},"injectables/NotificationsService.html":{},"injectables/SendMailService.html":{},"classes/SocketsGateway.html":{},"injectables/StorageS3Service.html":{},"injectables/StorageService.html":{},"entities/UserEntity.html":{},"controllers/UserNotificationTokensController.html":{},"injectables/UserNotificationTokensService.html":{},"injectables/UserRefreshTokensService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"classes/user1615673396368.html":{},"miscellaneous/variables.html":{}}}],["promiseresult",{"_index":1923,"title":{},"body":{"injectables/StorageS3Service.html":{}}}],["promisify(scryptcallback",{"_index":2566,"title":{},"body":{"miscellaneous/variables.html":{}}}],["promotion",{"_index":2450,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["promotion_expire",{"_index":2457,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["promotion_expire_1_hour",{"_index":2449,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["properties",{"_index":11,"title":{"properties.html":{}},"body":{"classes/AllExceptionFilter.html":{},"injectables/AuthService.html":{},"entities/ChatEntity.html":{},"entities/ChatMessageEntity.html":{},"entities/ChatParticipantEntity.html":{},"classes/ChatReadMessageDto.html":{},"classes/ChatReadMessageResponseDto.html":{},"classes/ChatReceiveMessageDto.html":{},"classes/ChatsGateway.html":{},"classes/ConfirmationEmailDto.html":{},"classes/CreateChatDto.html":{},"classes/CreateChatMessageDto.html":{},"classes/CreateFileDto.html":{},"interfaces/CreateMockFileReturn.html":{},"classes/CreateNotificationDto.html":{},"classes/CreateUserDto.html":{},"classes/CreateUserNotificationTokenDto.html":{},"classes/DeleteUserNotificationTokenDto.html":{},"classes/DownloadFileDto.html":{},"entities/FileEntity.html":{},"injectables/FileValidationPipe.html":{},"interfaces/FindManyBracketsOptions.html":{},"classes/FindManyOptionsDto.html":{},"classes/FindOneOptionsDto.html":{},"classes/ID.html":{},"classes/JwtAccessTokenPayloadDto.html":{},"classes/JwtRefreshTokenPayloadDto.html":{},"classes/JwtTokensDto.html":{},"interfaces/MultipartModuleAsyncOptions.html":{},"entities/NotificationEntity.html":{},"injectables/NotificationsService.html":{},"classes/ResetPasswordDto.html":{},"interfaces/Response.html":{},"classes/SelectChatMessagesDto.html":{},"classes/SelectChatsDto.html":{},"classes/SelectFileDto.html":{},"classes/SelectFilesDto.html":{},"classes/SelectNotificationsDto.html":{},"classes/SelectProfileDto.html":{},"classes/SelectUserDto.html":{},"classes/SelectUserNotificationTokenDto.html":{},"classes/SelectUserNotificationTokensDto.html":{},"classes/SelectUsersDto.html":{},"injectables/SendMailService.html":{},"injectables/SocketsService.html":{},"injectables/StorageS3Service.html":{},"injectables/StorageService.html":{},"classes/UpdateNotificationDto.html":{},"classes/UpdatePasswordDto.html":{},"classes/UploadedFile.html":{},"entities/UserEntity.html":{},"entities/UserNotificationTokenEntity.html":{},"injectables/UserNotificationTokensService.html":{},"entities/UserRefreshTokenEntity.html":{},"injectables/UserRefreshTokensService.html":{},"injectables/UsersService.html":{},"properties.html":{}}}],["property",{"_index":1452,"title":{},"body":{"classes/FindOneOptionsDto.html":{},"injectables/UsersService.html":{}}}],["provide",{"_index":197,"title":{},"body":{"modules/AppModule.html":{},"modules/MultipartModule.html":{}}}],["provider",{"_index":1534,"title":{},"body":{"modules/MultipartModule.html":{}}}],["providers",{"_index":196,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/ChatsModule.html":{},"modules/ConfigModule.html":{},"modules/FilesModule.html":{},"modules/MultipartModule.html":{},"modules/NotificationsModule.html":{},"modules/SendMailModule.html":{},"modules/SocketsModule.html":{},"modules/UsersModule.html":{}}}],["public",{"_index":87,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"entities/ChatEntity.html":{},"entities/ChatMessageEntity.html":{},"injectables/ChatMessagesService.html":{},"entities/ChatParticipantEntity.html":{},"injectables/ChatParticipantsService.html":{},"classes/ChatReadMessageDto.html":{},"classes/ChatReadMessageResponseDto.html":{},"classes/ChatReceiveMessageDto.html":{},"controllers/ChatsController.html":{},"classes/ChatsGateway.html":{},"injectables/ChatsService.html":{},"injectables/ConfigService.html":{},"classes/ConfirmationEmailDto.html":{},"classes/CreateChatDto.html":{},"classes/CreateChatMessageDto.html":{},"classes/CreateFileDto.html":{},"classes/CreateNotificationDto.html":{},"classes/CreateUserDto.html":{},"classes/CreateUserNotificationTokenDto.html":{},"classes/DeleteUserNotificationTokenDto.html":{},"classes/DownloadFileDto.html":{},"entities/FileEntity.html":{},"classes/FileEntityPreview.html":{},"controllers/FilesController.html":{},"injectables/FilesService.html":{},"classes/FindManyOptionsDto.html":{},"classes/FindOneOptionsDto.html":{},"classes/ID.html":{},"classes/JwtAccessTokenPayloadDto.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtRefreshGuard.html":{},"classes/JwtRefreshTokenDto.html":{},"classes/JwtRefreshTokenPayloadDto.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"classes/JwtTokensDto.html":{},"modules/MultipartModule.html":{},"entities/NotificationEntity.html":{},"controllers/NotificationsController.html":{},"injectables/NotificationsService.html":{},"classes/ResetPasswordDto.html":{},"classes/SelectChatMessagesDto.html":{},"classes/SelectChatsDto.html":{},"classes/SelectFileDto.html":{},"classes/SelectFilesDto.html":{},"classes/SelectNotificationsDto.html":{},"classes/SelectProfileDto.html":{},"classes/SelectUserDto.html":{},"classes/SelectUserNotificationTokenDto.html":{},"classes/SelectUserNotificationTokensDto.html":{},"classes/SelectUsersDto.html":{},"injectables/SendMailService.html":{},"classes/SendResetPasswordDto.html":{},"classes/SocketsExceptionFilter.html":{},"classes/SocketsGateway.html":{},"injectables/SocketsService.html":{},"injectables/StorageS3Service.html":{},"injectables/StorageService.html":{},"classes/UpdateEmailDto.html":{},"classes/UpdateNotificationDto.html":{},"classes/UpdatePasswordDto.html":{},"classes/UpdateProfileDto.html":{},"classes/UploadedFile.html":{},"entities/UserEntity.html":{},"entities/UserNotificationTokenEntity.html":{},"controllers/UserNotificationTokensController.html":{},"injectables/UserNotificationTokensService.html":{},"entities/UserRefreshTokenEntity.html":{},"injectables/UserRefreshTokensService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"classes/user1615673396368.html":{}}}],["push",{"_index":2213,"title":{},"body":{"changelog.html":{}}}],["putobjectrequest",{"_index":1919,"title":{},"body":{"injectables/StorageS3Service.html":{},"miscellaneous/typealiases.html":{}}}],["qb",{"_index":633,"title":{},"body":{"injectables/ChatMessagesService.html":{},"injectables/ChatParticipantsService.html":{},"injectables/ChatsService.html":{},"injectables/FilesService.html":{},"injectables/NotificationsService.html":{},"injectables/UserNotificationTokensService.html":{},"injectables/UserRefreshTokensService.html":{},"injectables/UsersService.html":{},"miscellaneous/variables.html":{}}}],["qb.addorderby('chatentity.updatedat",{"_index":983,"title":{},"body":{"injectables/ChatsService.html":{}}}],["qb.addorderby(key",{"_index":2606,"title":{},"body":{"miscellaneous/variables.html":{}}}],["qb.addselect",{"_index":977,"title":{},"body":{"injectables/ChatsService.html":{}}}],["qb.addselect('__custom",{"_index":2193,"title":{},"body":{"injectables/UsersService.html":{}}}],["qb.alias",{"_index":640,"title":{},"body":{"injectables/ChatMessagesService.html":{},"injectables/ChatParticipantsService.html":{},"injectables/ChatsService.html":{},"injectables/FilesService.html":{},"injectables/NotificationsService.html":{}}}],["qb.andwhere",{"_index":1333,"title":{},"body":{"injectables/FilesService.html":{},"injectables/NotificationsService.html":{},"classes/SelectFilesDto.html":{}}}],["qb.andwhere('chatentity_messages.ownerid",{"_index":948,"title":{},"body":{"injectables/ChatsService.html":{}}}],["qb.andwhere(querysearch('chatentity_participant_other_user.email",{"_index":1765,"title":{},"body":{"classes/SelectChatsDto.html":{}}}],["qb.getmany().catch",{"_index":2111,"title":{},"body":{"injectables/UserNotificationTokensService.html":{},"injectables/UserRefreshTokensService.html":{}}}],["qb.getmanyandcount().catch",{"_index":984,"title":{},"body":{"injectables/ChatsService.html":{},"injectables/NotificationsService.html":{}}}],["qb.getoneorfail().catch",{"_index":1336,"title":{},"body":{"injectables/FilesService.html":{}}}],["qb.getrawone",{"_index":949,"title":{},"body":{"injectables/ChatsService.html":{}}}],["qb.innerjoin",{"_index":959,"title":{},"body":{"injectables/ChatsService.html":{}}}],["qb.innerjoinandmapone",{"_index":964,"title":{},"body":{"injectables/ChatsService.html":{}}}],["qb.leftjoinandselect",{"_index":652,"title":{},"body":{"injectables/ChatMessagesService.html":{}}}],["qb.leftjoinandselect('chatentity.lastmessage",{"_index":956,"title":{},"body":{"injectables/ChatsService.html":{}}}],["qb.leftjoinandselect('chatentity.relation_field",{"_index":924,"title":{},"body":{"injectables/ChatsService.html":{}}}],["qb.leftjoinandselect('chatmessageentity.owner",{"_index":655,"title":{},"body":{"injectables/ChatMessagesService.html":{}}}],["qb.leftjoinandselect('chatmessageentity.relation_field",{"_index":644,"title":{},"body":{"injectables/ChatMessagesService.html":{}}}],["qb.leftjoinandselect('chatmessageentity.reply",{"_index":646,"title":{},"body":{"injectables/ChatMessagesService.html":{}}}],["qb.leftjoinandselect('chatmessageentity_owner.cover",{"_index":657,"title":{},"body":{"injectables/ChatMessagesService.html":{}}}],["qb.leftjoinandselect('chatmessageentity_reply.file",{"_index":648,"title":{},"body":{"injectables/ChatMessagesService.html":{}}}],["qb.leftjoinandselect('chatmessageentity_reply.owner",{"_index":650,"title":{},"body":{"injectables/ChatMessagesService.html":{}}}],["qb.leftjoinandselect('chatparticipantentity.relation_field",{"_index":733,"title":{},"body":{"injectables/ChatParticipantsService.html":{}}}],["qb.leftjoinandselect('entity.relation_field",{"_index":2196,"title":{},"body":{"injectables/UsersService.html":{}}}],["qb.leftjoinandselect('fileentity.relation_field",{"_index":1325,"title":{},"body":{"injectables/FilesService.html":{}}}],["qb.leftjoinandselect('notificationentity.relation_field",{"_index":1668,"title":{},"body":{"injectables/NotificationsService.html":{}}}],["qb.setfindoptions(optionsorconditions",{"_index":659,"title":{},"body":{"injectables/ChatMessagesService.html":{},"injectables/ChatParticipantsService.html":{},"injectables/ChatsService.html":{},"injectables/FilesService.html":{},"injectables/NotificationsService.html":{},"injectables/UsersService.html":{}}}],["qb.where(object.assign",{"_index":1781,"title":{},"body":{"classes/SelectNotificationsDto.html":{}}}],["query",{"_index":68,"title":{},"body":{"classes/AllExceptionFilter.html":{},"controllers/AuthController.html":{},"controllers/ChatsController.html":{},"controllers/FilesController.html":{},"controllers/NotificationsController.html":{},"controllers/UserNotificationTokensController.html":{},"controllers/UsersController.html":{}}}],["queryrunner",{"_index":2527,"title":{},"body":{"classes/user1615673396368.html":{}}}],["querysearch",{"_index":1761,"title":{},"body":{"classes/SelectChatsDto.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["querysearch(field",{"_index":2472,"title":{},"body":{"miscellaneous/functions.html":{}}}],["questions",{"_index":2421,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["randombytes",{"_index":410,"title":{},"body":{"injectables/AuthService.html":{},"injectables/StorageS3Service.html":{},"injectables/StorageService.html":{},"injectables/UserRefreshTokensService.html":{}}}],["randombytes(16).tostring('hex",{"_index":1934,"title":{},"body":{"injectables/StorageS3Service.html":{},"injectables/StorageService.html":{},"injectables/UserRefreshTokensService.html":{}}}],["randombytes(saltrounds).tostring('hex",{"_index":2564,"title":{},"body":{"miscellaneous/variables.html":{}}}],["randombytes(size",{"_index":440,"title":{},"body":{"injectables/AuthService.html":{}}}],["randomstringgenerator",{"_index":1546,"title":{},"body":{"modules/MultipartModule.html":{}}}],["range",{"_index":1357,"title":{},"body":{"injectables/FilesService.html":{}}}],["range[0",{"_index":1363,"title":{},"body":{"injectables/FilesService.html":{}}}],["range[1",{"_index":1360,"title":{},"body":{"injectables/FilesService.html":{}}}],["ranges",{"_index":1350,"title":{},"body":{"injectables/FilesService.html":{}}}],["read",{"_index":754,"title":{},"body":{"classes/ChatReadMessageDto.html":{},"classes/ChatReadMessageResponseDto.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{}}}],["readonly",{"_index":13,"title":{},"body":{"classes/AllExceptionFilter.html":{},"controllers/AppController.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"entities/ChatEntity.html":{},"entities/ChatMessageEntity.html":{},"injectables/ChatMessagesService.html":{},"entities/ChatParticipantEntity.html":{},"injectables/ChatParticipantsService.html":{},"classes/ChatReadMessageDto.html":{},"classes/ChatReadMessageResponseDto.html":{},"classes/ChatReceiveMessageDto.html":{},"controllers/ChatsController.html":{},"classes/ChatsGateway.html":{},"injectables/ChatsService.html":{},"classes/ConfirmationEmailDto.html":{},"classes/CreateChatDto.html":{},"classes/CreateChatMessageDto.html":{},"classes/CreateFileDto.html":{},"classes/CreateNotificationDto.html":{},"classes/CreateUserDto.html":{},"classes/CreateUserNotificationTokenDto.html":{},"classes/DeleteUserNotificationTokenDto.html":{},"classes/DownloadFileDto.html":{},"entities/FileEntity.html":{},"classes/FileEntityPreview.html":{},"injectables/FileValidationPipe.html":{},"controllers/FilesController.html":{},"injectables/FilesService.html":{},"classes/FindManyOptionsDto.html":{},"classes/FindOneOptionsDto.html":{},"classes/ID.html":{},"classes/JwtAccessTokenPayloadDto.html":{},"injectables/JwtAuthGuard.html":{},"classes/JwtRefreshTokenDto.html":{},"classes/JwtRefreshTokenPayloadDto.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"classes/JwtTokensDto.html":{},"entities/NotificationEntity.html":{},"controllers/NotificationsController.html":{},"injectables/NotificationsService.html":{},"classes/ResetPasswordDto.html":{},"classes/SelectChatMessagesDto.html":{},"classes/SelectChatsDto.html":{},"classes/SelectFileDto.html":{},"classes/SelectFilesDto.html":{},"classes/SelectNotificationsDto.html":{},"classes/SelectProfileDto.html":{},"classes/SelectUserDto.html":{},"classes/SelectUserNotificationTokenDto.html":{},"classes/SelectUserNotificationTokensDto.html":{},"classes/SelectUsersDto.html":{},"injectables/SendMailService.html":{},"classes/SendResetPasswordDto.html":{},"classes/SocketsGateway.html":{},"injectables/StorageS3Service.html":{},"injectables/StorageService.html":{},"classes/UpdateEmailDto.html":{},"classes/UpdateNotificationDto.html":{},"classes/UpdatePasswordDto.html":{},"classes/UpdateProfileDto.html":{},"classes/UploadedFile.html":{},"entities/UserEntity.html":{},"entities/UserNotificationTokenEntity.html":{},"controllers/UserNotificationTokensController.html":{},"injectables/UserNotificationTokensService.html":{},"entities/UserRefreshTokenEntity.html":{},"injectables/UserRefreshTokensService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["readstream",{"_index":1969,"title":{},"body":{"injectables/StorageService.html":{}}}],["record",{"_index":59,"title":{},"body":{"classes/AllExceptionFilter.html":{},"injectables/ChatsService.html":{},"classes/HttpExceptionFilter.html":{},"classes/SocketsExceptionFilter.html":{},"injectables/SocketsService.html":{},"miscellaneous/variables.html":{}}}],["recursive",{"_index":1988,"title":{},"body":{"injectables/StorageService.html":{}}}],["redis",{"_index":188,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"dependencies.html":{}}}],["redisoptions",{"_index":93,"title":{},"body":{"controllers/AppController.html":{}}}],["redisstore",{"_index":328,"title":{},"body":{"modules/AuthModule.html":{}}}],["reduce((acc",{"_index":2610,"title":{},"body":{"miscellaneous/variables.html":{}}}],["reflect",{"_index":2330,"title":{},"body":{"dependencies.html":{}}}],["reflect.getmetadata",{"_index":2624,"title":{},"body":{"miscellaneous/variables.html":{}}}],["reflector",{"_index":1474,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["refresh",{"_index":1497,"title":{},"body":{"injectables/JwtRefreshGuard.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"entities/UserEntity.html":{},"entities/UserRefreshTokenEntity.html":{},"injectables/UserRefreshTokensService.html":{},"coverage.html":{}}}],["refresh.guard.ts",{"_index":1494,"title":{},"body":{"injectables/JwtRefreshGuard.html":{},"coverage.html":{}}}],["refresh.guard.ts:12",{"_index":1495,"title":{},"body":{"injectables/JwtRefreshGuard.html":{}}}],["refresh.guard.ts:27",{"_index":1496,"title":{},"body":{"injectables/JwtRefreshGuard.html":{}}}],["refresh.strategy.ts",{"_index":1503,"title":{},"body":{"injectables/JwtRefreshTokenStrategy.html":{},"coverage.html":{}}}],["refresh.strategy.ts:18",{"_index":1505,"title":{},"body":{"injectables/JwtRefreshTokenStrategy.html":{}}}],["refresh.strategy.ts:38",{"_index":1507,"title":{},"body":{"injectables/JwtRefreshTokenStrategy.html":{}}}],["refreshhash",{"_index":2138,"title":{},"body":{"injectables/UserRefreshTokensService.html":{}}}],["refreshidentifier",{"_index":2137,"title":{},"body":{"injectables/UserRefreshTokensService.html":{}}}],["refreshtoken",{"_index":288,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/JwtAccessTokenPayloadDto.html":{},"classes/JwtRefreshTokenDto.html":{},"classes/JwtRefreshTokenPayloadDto.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"classes/JwtTokensDto.html":{}}}],["refreshtoken.id",{"_index":293,"title":{},"body":{"controllers/AuthController.html":{}}}],["refreshtoken.ppid",{"_index":1520,"title":{},"body":{"injectables/JwtRefreshTokenStrategy.html":{}}}],["refreshtokenid",{"_index":430,"title":{},"body":{"injectables/AuthService.html":{},"classes/JwtAccessTokenPayloadDto.html":{},"classes/JwtRefreshTokenDto.html":{},"classes/JwtRefreshTokenPayloadDto.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"classes/JwtTokensDto.html":{}}}],["refreshtokens",{"_index":206,"title":{},"body":{"controllers/AuthController.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"entities/UserEntity.html":{},"entities/UserRefreshTokenEntity.html":{}}}],["refreshtokens(@user",{"_index":297,"title":{},"body":{"controllers/AuthController.html":{}}}],["refreshtokens(user",{"_index":232,"title":{},"body":{"controllers/AuthController.html":{}}}],["refunded",{"_index":2446,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["register",{"_index":1538,"title":{},"body":{"modules/MultipartModule.html":{}}}],["register(options",{"_index":1539,"title":{},"body":{"modules/MultipartModule.html":{}}}],["registerasync",{"_index":1543,"title":{},"body":{"modules/MultipartModule.html":{}}}],["registerasync(options",{"_index":1544,"title":{},"body":{"modules/MultipartModule.html":{}}}],["rejectunauthorized",{"_index":140,"title":{},"body":{"controllers/AppController.html":{},"modules/AuthModule.html":{},"modules/DatabaseModule.html":{}}}],["relation",{"_index":643,"title":{},"body":{"injectables/ChatMessagesService.html":{},"injectables/ChatParticipantsService.html":{},"injectables/ChatsService.html":{},"injectables/FilesService.html":{},"classes/FindManyOptionsDto.html":{},"injectables/NotificationsService.html":{},"classes/SelectChatMessagesDto.html":{},"classes/SelectChatsDto.html":{},"classes/SelectFilesDto.html":{},"classes/SelectNotificationsDto.html":{},"classes/SelectUserNotificationTokensDto.html":{},"classes/SelectUsersDto.html":{},"injectables/UsersService.html":{}}}],["relations",{"_index":1413,"title":{},"body":{"classes/FindManyOptionsDto.html":{},"classes/FindOneOptionsDto.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/NotificationsService.html":{},"classes/SelectChatMessagesDto.html":{},"classes/SelectChatsDto.html":{},"classes/SelectFileDto.html":{},"classes/SelectFilesDto.html":{},"classes/SelectNotificationsDto.html":{},"classes/SelectProfileDto.html":{},"classes/SelectUserDto.html":{},"classes/SelectUserNotificationTokenDto.html":{},"classes/SelectUserNotificationTokensDto.html":{},"classes/SelectUsersDto.html":{}}}],["removeone",{"_index":1879,"title":{},"body":{"injectables/SocketsService.html":{}}}],["removeone(userid",{"_index":1884,"title":{},"body":{"injectables/SocketsService.html":{}}}],["removeoptions",{"_index":597,"title":{},"body":{"injectables/ChatMessagesService.html":{},"injectables/ChatParticipantsService.html":{},"injectables/ChatsService.html":{},"injectables/FilesService.html":{},"injectables/NotificationsService.html":{},"injectables/UserNotificationTokensService.html":{},"injectables/UserRefreshTokensService.html":{},"injectables/UsersService.html":{}}}],["rep",{"_index":1261,"title":{},"body":{"controllers/FilesController.html":{},"injectables/FilesService.html":{}}}],["rep.request.headers.range",{"_index":1345,"title":{},"body":{"injectables/FilesService.html":{}}}],["rep.request.headers.range.replace(/bytes",{"_index":1358,"title":{},"body":{"injectables/FilesService.html":{}}}],["reply",{"_index":538,"title":{},"body":{"entities/ChatMessageEntity.html":{},"classes/ChatReceiveMessageDto.html":{},"classes/CreateChatMessageDto.html":{}}}],["repository",{"_index":587,"title":{},"body":{"injectables/ChatMessagesService.html":{},"injectables/ChatParticipantsService.html":{},"injectables/ChatsService.html":{},"injectables/FilesService.html":{},"injectables/NotificationsService.html":{},"injectables/UserNotificationTokensService.html":{},"injectables/UserRefreshTokensService.html":{},"injectables/UsersService.html":{},"properties.html":{},"classes/user1615673396368.html":{}}}],["repository.save(data).catch((e",{"_index":2540,"title":{},"body":{"classes/user1615673396368.html":{}}}],["request",{"_index":49,"title":{},"body":{"classes/AllExceptionFilter.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["request.body",{"_index":71,"title":{},"body":{"classes/AllExceptionFilter.html":{}}}],["request.file(options).catch",{"_index":2595,"title":{},"body":{"miscellaneous/variables.html":{}}}],["request.method",{"_index":65,"title":{},"body":{"classes/AllExceptionFilter.html":{}}}],["request.params",{"_index":67,"title":{},"body":{"classes/AllExceptionFilter.html":{}}}],["request.query",{"_index":69,"title":{},"body":{"classes/AllExceptionFilter.html":{}}}],["request.user",{"_index":73,"title":{},"body":{"classes/AllExceptionFilter.html":{},"miscellaneous/variables.html":{}}}],["request.user[data",{"_index":2618,"title":{},"body":{"miscellaneous/variables.html":{}}}],["res",{"_index":1273,"title":{},"body":{"controllers/FilesController.html":{}}}],["reset",{"_index":158,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/ChatsModule.html":{},"modules/ConfigModule.html":{},"modules/FilesModule.html":{},"modules/NotificationsModule.html":{},"modules/SendMailModule.html":{},"modules/SocketsModule.html":{},"modules/UsersModule.html":{},"miscellaneous/enumerations.html":{},"overview.html":{}}}],["reset_password",{"_index":2460,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["resetpassword",{"_index":207,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["resetpassword(@body",{"_index":304,"title":{},"body":{"controllers/AuthController.html":{}}}],["resetpassword(data",{"_index":236,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["resetpassworddto",{"_index":237,"title":{"classes/ResetPasswordDto.html":{}},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/ResetPasswordDto.html":{},"classes/SendResetPasswordDto.html":{},"coverage.html":{}}}],["response",{"_index":51,"title":{"interfaces/Response.html":{}},"body":{"classes/AllExceptionFilter.html":{},"classes/HttpExceptionFilter.html":{},"interfaces/Response.html":{},"injectables/TransformInterceptor.html":{},"coverage.html":{}}}],["response.status(statuscode).send",{"_index":76,"title":{},"body":{"classes/AllExceptionFilter.html":{},"classes/HttpExceptionFilter.html":{}}}],["responsemailtype",{"_index":1822,"title":{},"body":{"injectables/SendMailService.html":{},"miscellaneous/typealiases.html":{}}}],["result",{"_index":1707,"title":{},"body":{"classes/PaginationChatMessagesDto.html":{},"classes/PaginationChatParticipantsDto.html":{},"classes/PaginationChatsDto.html":{},"classes/PaginationFilesDto.html":{},"classes/PaginationNotificationsDto.html":{},"classes/PaginationUserNotificationTokensDto.html":{},"classes/PaginationUsersDto.html":{},"miscellaneous/variables.html":{}}}],["results",{"_index":78,"title":{},"body":{"classes/AllExceptionFilter.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"entities/ChatEntity.html":{},"entities/ChatMessageEntity.html":{},"injectables/ChatMessagesService.html":{},"entities/ChatParticipantEntity.html":{},"injectables/ChatParticipantsService.html":{},"classes/ChatReadMessageDto.html":{},"classes/ChatReadMessageResponseDto.html":{},"classes/ChatReceiveMessageDto.html":{},"controllers/ChatsController.html":{},"classes/ChatsGateway.html":{},"modules/ChatsModule.html":{},"injectables/ChatsService.html":{},"modules/ConfigModule.html":{},"injectables/ConfigService.html":{},"classes/ConfirmationEmailDto.html":{},"classes/CreateChatDto.html":{},"classes/CreateChatMessageDto.html":{},"classes/CreateFileDto.html":{},"interfaces/CreateMockFileReturn.html":{},"classes/CreateNotificationDto.html":{},"classes/CreateProfileDto.html":{},"classes/CreateUserDto.html":{},"classes/CreateUserNotificationTokenDto.html":{},"classes/CredentialsDto.html":{},"modules/DatabaseModule.html":{},"classes/DeleteUserNotificationTokenDto.html":{},"classes/DownloadFileDto.html":{},"entities/FileEntity.html":{},"classes/FileEntityPreview.html":{},"injectables/FileValidationPipe.html":{},"controllers/FilesController.html":{},"modules/FilesModule.html":{},"injectables/FilesService.html":{},"interfaces/FindManyBracketsOptions.html":{},"classes/FindManyOptionsDto.html":{},"classes/FindOneOptionsDto.html":{},"classes/HttpExceptionFilter.html":{},"classes/ID.html":{},"classes/JwtAccessTokenPayloadDto.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtRefreshGuard.html":{},"classes/JwtRefreshTokenDto.html":{},"classes/JwtRefreshTokenPayloadDto.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"classes/JwtTokensDto.html":{},"modules/MultipartModule.html":{},"interfaces/MultipartModuleAsyncOptions.html":{},"interfaces/MultipartOptionsFactory.html":{},"entities/NotificationEntity.html":{},"controllers/NotificationsController.html":{},"modules/NotificationsModule.html":{},"injectables/NotificationsService.html":{},"classes/PaginationChatMessagesDto.html":{},"classes/PaginationChatParticipantsDto.html":{},"classes/PaginationChatsDto.html":{},"classes/PaginationFilesDto.html":{},"classes/PaginationNotificationsDto.html":{},"classes/PaginationUserNotificationTokensDto.html":{},"classes/PaginationUsersDto.html":{},"classes/ResetPasswordDto.html":{},"interfaces/Response.html":{},"classes/SelectChatMessagesDto.html":{},"classes/SelectChatsDto.html":{},"classes/SelectFileDto.html":{},"classes/SelectFilesDto.html":{},"classes/SelectNotificationsDto.html":{},"classes/SelectProfileDto.html":{},"classes/SelectUserDto.html":{},"classes/SelectUserNotificationTokenDto.html":{},"classes/SelectUserNotificationTokensDto.html":{},"classes/SelectUsersDto.html":{},"modules/SendMailModule.html":{},"injectables/SendMailService.html":{},"classes/SendResetPasswordDto.html":{},"classes/SocketsExceptionFilter.html":{},"classes/SocketsGateway.html":{},"modules/SocketsModule.html":{},"injectables/SocketsService.html":{},"injectables/StorageS3Service.html":{},"injectables/StorageService.html":{},"injectables/TransformInterceptor.html":{},"classes/UpdateEmailDto.html":{},"classes/UpdateNotificationDto.html":{},"classes/UpdatePasswordDto.html":{},"classes/UpdateProfileDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserNotificationTokenDto.html":{},"classes/UploadedFile.html":{},"entities/UserEntity.html":{},"entities/UserNotificationTokenEntity.html":{},"controllers/UserNotificationTokensController.html":{},"injectables/UserNotificationTokensService.html":{},"entities/UserRefreshTokenEntity.html":{},"injectables/UserRefreshTokensService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"changelog.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/typealiases.html":{},"unit-test.html":{},"classes/user1615673396368.html":{},"miscellaneous/variables.html":{}}}],["retrieved",{"_index":1421,"title":{},"body":{"classes/FindManyOptionsDto.html":{},"classes/FindOneOptionsDto.html":{},"classes/SelectChatMessagesDto.html":{},"classes/SelectChatsDto.html":{},"classes/SelectFileDto.html":{},"classes/SelectFilesDto.html":{},"classes/SelectNotificationsDto.html":{},"classes/SelectProfileDto.html":{},"classes/SelectUserDto.html":{},"classes/SelectUserNotificationTokenDto.html":{},"classes/SelectUserNotificationTokensDto.html":{},"classes/SelectUsersDto.html":{}}}],["return",{"_index":75,"title":{},"body":{"classes/AllExceptionFilter.html":{},"controllers/AppController.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/ChatMessagesService.html":{},"injectables/ChatParticipantsService.html":{},"controllers/ChatsController.html":{},"injectables/ChatsService.html":{},"injectables/ConfigService.html":{},"interfaces/CreateMockFileReturn.html":{},"modules/DatabaseModule.html":{},"entities/FileEntity.html":{},"classes/FileEntityPreview.html":{},"injectables/FileValidationPipe.html":{},"controllers/FilesController.html":{},"injectables/FilesService.html":{},"classes/FindManyOptionsDto.html":{},"classes/FindOneOptionsDto.html":{},"classes/HttpExceptionFilter.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtRefreshGuard.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"modules/MultipartModule.html":{},"controllers/NotificationsController.html":{},"injectables/NotificationsService.html":{},"interfaces/Response.html":{},"classes/SelectChatsDto.html":{},"classes/SelectFilesDto.html":{},"classes/SelectNotificationsDto.html":{},"classes/SelectUsersDto.html":{},"injectables/SendMailService.html":{},"modules/SocketsModule.html":{},"injectables/SocketsService.html":{},"injectables/StorageS3Service.html":{},"injectables/StorageService.html":{},"injectables/TransformInterceptor.html":{},"entities/UserEntity.html":{},"controllers/UserNotificationTokensController.html":{},"injectables/UserNotificationTokensService.html":{},"injectables/UserRefreshTokensService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"miscellaneous/variables.html":{}}}],["returned",{"_index":2431,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["returns",{"_index":34,"title":{},"body":{"classes/AllExceptionFilter.html":{},"controllers/AppController.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/ChatMessagesService.html":{},"injectables/ChatParticipantsService.html":{},"controllers/ChatsController.html":{},"classes/ChatsGateway.html":{},"injectables/ChatsService.html":{},"injectables/ConfigService.html":{},"injectables/FileValidationPipe.html":{},"controllers/FilesController.html":{},"injectables/FilesService.html":{},"classes/FindManyOptionsDto.html":{},"classes/FindOneOptionsDto.html":{},"classes/HttpExceptionFilter.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtRefreshGuard.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"modules/MultipartModule.html":{},"interfaces/MultipartOptionsFactory.html":{},"controllers/NotificationsController.html":{},"injectables/NotificationsService.html":{},"classes/SelectChatsDto.html":{},"injectables/SendMailService.html":{},"classes/SocketsExceptionFilter.html":{},"classes/SocketsGateway.html":{},"injectables/SocketsService.html":{},"injectables/StorageS3Service.html":{},"injectables/StorageService.html":{},"injectables/TransformInterceptor.html":{},"controllers/UserNotificationTokensController.html":{},"injectables/UserNotificationTokensService.html":{},"injectables/UserRefreshTokensService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"miscellaneous/functions.html":{},"classes/user1615673396368.html":{}}}],["role",{"_index":456,"title":{},"body":{"injectables/AuthService.html":{},"entities/UserEntity.html":{},"classes/user1615673396368.html":{},"miscellaneous/variables.html":{}}}],["role.enum.ts",{"_index":2348,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["roles",{"_index":1488,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"miscellaneous/variables.html":{}}}],["roles)(target",{"_index":2632,"title":{},"body":{"miscellaneous/variables.html":{}}}],["roles.includes(user.role",{"_index":1491,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["roles}]${operation.summary",{"_index":2630,"title":{},"body":{"miscellaneous/variables.html":{}}}],["row",{"_index":946,"title":{},"body":{"injectables/ChatsService.html":{}}}],["row.id",{"_index":937,"title":{},"body":{"injectables/ChatsService.html":{}}}],["row.newmessagescount",{"_index":944,"title":{},"body":{"injectables/ChatsService.html":{}}}],["rows",{"_index":660,"title":{},"body":{"injectables/ChatMessagesService.html":{},"injectables/ChatsService.html":{}}}],["run",{"_index":2489,"title":{},"body":{"index.html":{}}}],["running",{"_index":2487,"title":{},"body":{"index.html":{}}}],["rxjs",{"_index":1737,"title":{},"body":{"interfaces/Response.html":{},"injectables/TransformInterceptor.html":{},"dependencies.html":{}}}],["rxjs/operators",{"_index":1735,"title":{},"body":{"interfaces/Response.html":{},"injectables/TransformInterceptor.html":{}}}],["s",{"_index":2404,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["s3",{"_index":1218,"title":{},"body":{"entities/FileEntity.html":{},"classes/FileEntityPreview.html":{},"injectables/StorageS3Service.html":{}}}],["s3.bucketname",{"_index":1921,"title":{},"body":{"injectables/StorageS3Service.html":{}}}],["s3.objectkey",{"_index":1912,"title":{},"body":{"injectables/StorageS3Service.html":{}}}],["s3.service.ts",{"_index":1904,"title":{},"body":{"injectables/StorageS3Service.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["s3.service.ts:22",{"_index":1922,"title":{},"body":{"injectables/StorageS3Service.html":{}}}],["s3.service.ts:23",{"_index":1909,"title":{},"body":{"injectables/StorageS3Service.html":{}}}],["s3.service.ts:37",{"_index":1914,"title":{},"body":{"injectables/StorageS3Service.html":{}}}],["s3.service.ts:49",{"_index":1920,"title":{},"body":{"injectables/StorageS3Service.html":{}}}],["s3.service.ts:57",{"_index":1917,"title":{},"body":{"injectables/StorageS3Service.html":{}}}],["s3.service.ts:67",{"_index":1910,"title":{},"body":{"injectables/StorageS3Service.html":{}}}],["s3.service.ts:94",{"_index":1913,"title":{},"body":{"injectables/StorageS3Service.html":{}}}],["salt",{"_index":2556,"title":{},"body":{"miscellaneous/variables.html":{}}}],["saltrounds",{"_index":2235,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["same",{"_index":1392,"title":{},"body":{"classes/FindManyOptionsDto.html":{},"classes/SelectChatMessagesDto.html":{},"classes/SelectChatsDto.html":{},"classes/SelectFilesDto.html":{},"classes/SelectNotificationsDto.html":{},"classes/SelectUserNotificationTokensDto.html":{},"classes/SelectUsersDto.html":{}}}],["save(entity",{"_index":727,"title":{},"body":{"injectables/ChatParticipantsService.html":{}}}],["saveoptions",{"_index":592,"title":{},"body":{"injectables/ChatMessagesService.html":{},"injectables/ChatParticipantsService.html":{},"injectables/ChatsService.html":{},"injectables/FilesService.html":{},"injectables/NotificationsService.html":{},"injectables/UserNotificationTokensService.html":{},"injectables/UserRefreshTokensService.html":{},"injectables/UsersService.html":{}}}],["scrypt",{"_index":2236,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["scrypt(password",{"_index":2562,"title":{},"body":{"miscellaneous/variables.html":{}}}],["sdk",{"_index":2302,"title":{},"body":{"dependencies.html":{}}}],["sdk/clients/s3",{"_index":1929,"title":{},"body":{"injectables/StorageS3Service.html":{}}}],["sdk/lib/error",{"_index":1927,"title":{},"body":{"injectables/StorageS3Service.html":{}}}],["sdk/lib/request",{"_index":1925,"title":{},"body":{"injectables/StorageS3Service.html":{}}}],["search",{"_index":1749,"title":{},"body":{"classes/SelectChatsDto.html":{},"miscellaneous/functions.html":{}}}],["search.helper.ts",{"_index":2244,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["searchalias",{"_index":2473,"title":{},"body":{"miscellaneous/functions.html":{}}}],["secret",{"_index":434,"title":{},"body":{"injectables/AuthService.html":{},"modules/SocketsModule.html":{}}}],["secretaccesstoken",{"_index":352,"title":{},"body":{"injectables/AuthService.html":{}}}],["secretorkey",{"_index":1516,"title":{},"body":{"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{}}}],["secretrefreshtoken",{"_index":353,"title":{},"body":{"injectables/AuthService.html":{}}}],["select",{"_index":454,"title":{},"body":{"injectables/AuthService.html":{},"injectables/ChatParticipantsService.html":{},"classes/FindOneOptionsDto.html":{},"injectables/NotificationsService.html":{},"classes/SocketsGateway.html":{},"entities/UserEntity.html":{}}}],["select('chatentity.id",{"_index":927,"title":{},"body":{"injectables/ChatsService.html":{}}}],["select('chatparticipantentity.chatid",{"_index":742,"title":{},"body":{"injectables/ChatParticipantsService.html":{}}}],["selectall",{"_index":581,"title":{},"body":{"injectables/ChatMessagesService.html":{},"injectables/ChatParticipantsService.html":{},"controllers/ChatsController.html":{},"injectables/ChatsService.html":{},"controllers/FilesController.html":{},"injectables/FilesService.html":{},"controllers/NotificationsController.html":{},"injectables/NotificationsService.html":{},"controllers/UserNotificationTokensController.html":{},"injectables/UserNotificationTokensService.html":{},"injectables/UserRefreshTokensService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["selectall(@query",{"_index":1284,"title":{},"body":{"controllers/FilesController.html":{},"controllers/UsersController.html":{}}}],["selectall(options",{"_index":604,"title":{},"body":{"injectables/ChatMessagesService.html":{},"injectables/ChatParticipantsService.html":{},"controllers/ChatsController.html":{},"injectables/ChatsService.html":{},"controllers/FilesController.html":{},"injectables/FilesService.html":{},"controllers/NotificationsController.html":{},"injectables/NotificationsService.html":{},"controllers/UserNotificationTokensController.html":{},"injectables/UserNotificationTokensService.html":{},"injectables/UserRefreshTokensService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["selectallids",{"_index":1880,"title":{},"body":{"injectables/SocketsService.html":{}}}],["selectallids(userids",{"_index":1887,"title":{},"body":{"injectables/SocketsService.html":{}}}],["selectallmessages",{"_index":790,"title":{},"body":{"controllers/ChatsController.html":{}}}],["selectallmessages(chatconditions",{"_index":798,"title":{},"body":{"controllers/ChatsController.html":{}}}],["selectallstats",{"_index":895,"title":{},"body":{"injectables/ChatsService.html":{}}}],["selectallstats(data",{"_index":906,"title":{},"body":{"injectables/ChatsService.html":{}}}],["selectchatmessagesdto",{"_index":799,"title":{"classes/SelectChatMessagesDto.html":{}},"body":{"controllers/ChatsController.html":{},"classes/SelectChatMessagesDto.html":{},"coverage.html":{}}}],["selectchatsdto",{"_index":796,"title":{"classes/SelectChatsDto.html":{}},"body":{"controllers/ChatsController.html":{},"injectables/ChatsService.html":{},"classes/SelectChatsDto.html":{},"coverage.html":{}}}],["selectfiledto",{"_index":1265,"title":{"classes/SelectFileDto.html":{}},"body":{"controllers/FilesController.html":{},"classes/SelectFileDto.html":{},"coverage.html":{}}}],["selectfilesdto",{"_index":1262,"title":{"classes/SelectFilesDto.html":{}},"body":{"controllers/FilesController.html":{},"classes/SelectFilesDto.html":{},"coverage.html":{}}}],["selectheadone",{"_index":1907,"title":{},"body":{"injectables/StorageS3Service.html":{}}}],["selectheadone(options",{"_index":1915,"title":{},"body":{"injectables/StorageS3Service.html":{}}}],["selectids",{"_index":706,"title":{},"body":{"injectables/ChatParticipantsService.html":{}}}],["selectids(options",{"_index":715,"title":{},"body":{"injectables/ChatParticipantsService.html":{}}}],["selection",{"_index":1382,"title":{},"body":{"classes/FindManyOptionsDto.html":{},"classes/FindOneOptionsDto.html":{},"classes/SelectChatMessagesDto.html":{},"classes/SelectChatsDto.html":{},"classes/SelectFileDto.html":{},"classes/SelectFilesDto.html":{},"classes/SelectNotificationsDto.html":{},"classes/SelectProfileDto.html":{},"classes/SelectUserDto.html":{},"classes/SelectUserNotificationTokenDto.html":{},"classes/SelectUserNotificationTokensDto.html":{},"classes/SelectUsersDto.html":{}}}],["selectnewmessagescount",{"_index":582,"title":{},"body":{"injectables/ChatMessagesService.html":{},"controllers/ChatsController.html":{}}}],["selectnewmessagescount(@user",{"_index":828,"title":{},"body":{"controllers/ChatsController.html":{}}}],["selectnewmessagescount(user",{"_index":606,"title":{},"body":{"injectables/ChatMessagesService.html":{},"controllers/ChatsController.html":{}}}],["selectnotificationsdto",{"_index":1594,"title":{"classes/SelectNotificationsDto.html":{}},"body":{"controllers/NotificationsController.html":{},"injectables/NotificationsService.html":{},"classes/SelectNotificationsDto.html":{},"coverage.html":{}}}],["selectone",{"_index":583,"title":{},"body":{"injectables/ChatMessagesService.html":{},"injectables/ChatParticipantsService.html":{},"injectables/ChatsService.html":{},"controllers/FilesController.html":{},"injectables/FilesService.html":{},"controllers/NotificationsController.html":{},"injectables/NotificationsService.html":{},"injectables/SocketsService.html":{},"injectables/StorageService.html":{},"controllers/UserNotificationTokensController.html":{},"injectables/UserNotificationTokensService.html":{},"injectables/UserRefreshTokensService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["selectone(conditions",{"_index":459,"title":{},"body":{"injectables/AuthService.html":{},"injectables/ChatMessagesService.html":{},"injectables/ChatParticipantsService.html":{},"injectables/ChatsService.html":{},"controllers/FilesController.html":{},"injectables/FilesService.html":{},"controllers/NotificationsController.html":{},"injectables/NotificationsService.html":{},"controllers/UserNotificationTokensController.html":{},"injectables/UserNotificationTokensService.html":{},"injectables/UserRefreshTokensService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["selectone(file",{"_index":1963,"title":{},"body":{"injectables/StorageService.html":{}}}],["selectone(userid",{"_index":1890,"title":{},"body":{"injectables/SocketsService.html":{}}}],["selectonebyparticipants",{"_index":707,"title":{},"body":{"injectables/ChatParticipantsService.html":{},"injectables/ChatsService.html":{}}}],["selectonebyparticipants(participantids",{"_index":718,"title":{},"body":{"injectables/ChatParticipantsService.html":{},"injectables/ChatsService.html":{}}}],["selectoneeager",{"_index":896,"title":{},"body":{"injectables/ChatsService.html":{}}}],["selectoneeager(conditions",{"_index":910,"title":{},"body":{"injectables/ChatsService.html":{}}}],["selectoneids",{"_index":1881,"title":{},"body":{"injectables/SocketsService.html":{}}}],["selectoneids(userid",{"_index":1892,"title":{},"body":{"injectables/SocketsService.html":{}}}],["selectonestats",{"_index":897,"title":{},"body":{"injectables/ChatsService.html":{}}}],["selectonestats(data",{"_index":912,"title":{},"body":{"injectables/ChatsService.html":{}}}],["selectprofiledto",{"_index":241,"title":{"classes/SelectProfileDto.html":{}},"body":{"controllers/AuthController.html":{},"classes/SelectProfileDto.html":{},"coverage.html":{}}}],["selectquerybuilder",{"_index":603,"title":{},"body":{"injectables/ChatMessagesService.html":{},"injectables/ChatParticipantsService.html":{},"injectables/ChatsService.html":{},"injectables/FilesService.html":{},"injectables/NotificationsService.html":{},"injectables/UserNotificationTokensService.html":{},"injectables/UserRefreshTokensService.html":{},"injectables/UsersService.html":{},"miscellaneous/variables.html":{}}}],["selectuser",{"_index":208,"title":{},"body":{"controllers/AuthController.html":{}}}],["selectuser(undefined",{"_index":240,"title":{},"body":{"controllers/AuthController.html":{}}}],["selectuserdto",{"_index":1783,"title":{"classes/SelectUserDto.html":{}},"body":{"classes/SelectUserDto.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["selectusernotificationtokendto",{"_index":1785,"title":{"classes/SelectUserNotificationTokenDto.html":{}},"body":{"classes/SelectUserNotificationTokenDto.html":{},"controllers/UserNotificationTokensController.html":{},"coverage.html":{}}}],["selectusernotificationtokensdto",{"_index":1786,"title":{"classes/SelectUserNotificationTokensDto.html":{}},"body":{"classes/SelectUserNotificationTokensDto.html":{},"controllers/UserNotificationTokensController.html":{},"coverage.html":{}}}],["selectusersdto",{"_index":1787,"title":{"classes/SelectUsersDto.html":{}},"body":{"classes/SelectUsersDto.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["send",{"_index":1366,"title":{},"body":{"injectables/FilesService.html":{}}}],["send(await",{"_index":1355,"title":{},"body":{"injectables/FilesService.html":{}}}],["sendandcreateone",{"_index":1592,"title":{},"body":{"controllers/NotificationsController.html":{}}}],["sendandcreateone(data",{"_index":1597,"title":{},"body":{"controllers/NotificationsController.html":{}}}],["sendandcreateoneformany",{"_index":1622,"title":{},"body":{"injectables/NotificationsService.html":{}}}],["sendandcreateoneformany(conditions",{"_index":1638,"title":{},"body":{"injectables/NotificationsService.html":{}}}],["sendandcreateoneformanymulticast",{"_index":1623,"title":{},"body":{"injectables/NotificationsService.html":{}}}],["sendandcreateoneformanymulticast(conditions",{"_index":1640,"title":{},"body":{"injectables/NotificationsService.html":{}}}],["sendandcreateoneforone",{"_index":1624,"title":{},"body":{"injectables/NotificationsService.html":{}}}],["sendandcreateoneforone(conditions",{"_index":1642,"title":{},"body":{"injectables/NotificationsService.html":{}}}],["sendmail.service",{"_index":1800,"title":{},"body":{"modules/SendMailModule.html":{}}}],["sendmailmodule",{"_index":321,"title":{"modules/SendMailModule.html":{}},"body":{"modules/AuthModule.html":{},"modules/SendMailModule.html":{},"modules.html":{},"overview.html":{}}}],["sendmailservice",{"_index":364,"title":{"injectables/SendMailService.html":{}},"body":{"injectables/AuthService.html":{},"modules/SendMailModule.html":{},"injectables/SendMailService.html":{},"coverage.html":{},"overview.html":{}}}],["sendresetpassword",{"_index":209,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["sendresetpassword(@body",{"_index":302,"title":{},"body":{"controllers/AuthController.html":{}}}],["sendresetpassword(data",{"_index":244,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["sendresetpassworddto",{"_index":245,"title":{"classes/SendResetPasswordDto.html":{}},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/ResetPasswordDto.html":{},"classes/SendResetPasswordDto.html":{},"coverage.html":{}}}],["sendtemplatedemail",{"_index":1814,"title":{},"body":{"injectables/SendMailService.html":{}}}],["sendtemplatedemail(data",{"_index":1818,"title":{},"body":{"injectables/SendMailService.html":{}}}],["sent",{"_index":2350,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["server",{"_index":832,"title":{},"body":{"classes/ChatsGateway.html":{}}}],["service",{"_index":1013,"title":{},"body":{"injectables/ConfigService.html":{}}}],["services",{"_index":810,"title":{},"body":{"controllers/ChatsController.html":{},"modules/ChatsModule.html":{},"controllers/NotificationsController.html":{},"modules/NotificationsModule.html":{},"controllers/UserNotificationTokensController.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{}}}],["set",{"_index":504,"title":{},"body":{"entities/ChatEntity.html":{},"entities/UserEntity.html":{},"index.html":{}}}],["setfindoptions(optionsorconditions",{"_index":2110,"title":{},"body":{"injectables/UserNotificationTokensService.html":{},"injectables/UserRefreshTokensService.html":{}}}],["setfindorder",{"_index":2243,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["setfindorder(qb",{"_index":2195,"title":{},"body":{"injectables/UsersService.html":{}}}],["setmetadata('roles",{"_index":2631,"title":{},"body":{"miscellaneous/variables.html":{}}}],["setup",{"_index":2506,"title":{},"body":{"properties.html":{}}}],["signoptions",{"_index":1875,"title":{},"body":{"modules/SocketsModule.html":{}}}],["simplified",{"_index":1416,"title":{},"body":{"classes/FindManyOptionsDto.html":{},"classes/FindOneOptionsDto.html":{},"classes/SelectChatMessagesDto.html":{},"classes/SelectChatsDto.html":{},"classes/SelectFileDto.html":{},"classes/SelectFilesDto.html":{},"classes/SelectNotificationsDto.html":{},"classes/SelectProfileDto.html":{},"classes/SelectUserDto.html":{},"classes/SelectUserNotificationTokenDto.html":{},"classes/SelectUserNotificationTokensDto.html":{},"classes/SelectUsersDto.html":{}}}],["size",{"_index":377,"title":{},"body":{"injectables/AuthService.html":{},"injectables/StorageS3Service.html":{},"injectables/StorageService.html":{}}}],["size.tostring",{"_index":1950,"title":{},"body":{"injectables/StorageS3Service.html":{},"injectables/StorageService.html":{}}}],["skip",{"_index":1384,"title":{},"body":{"classes/FindManyOptionsDto.html":{}}}],["socket",{"_index":1833,"title":{},"body":{"classes/SocketsExceptionFilter.html":{},"classes/SocketsGateway.html":{},"injectables/SocketsService.html":{},"miscellaneous/enumerations.html":{}}}],["socket.data",{"_index":1859,"title":{},"body":{"classes/SocketsGateway.html":{}}}],["socket.disconnect",{"_index":1863,"title":{},"body":{"classes/SocketsGateway.html":{}}}],["socket.emit(errortypeenum.socket_error",{"_index":1861,"title":{},"body":{"classes/SocketsGateway.html":{}}}],["socket.handshake.auth",{"_index":1857,"title":{},"body":{"classes/SocketsGateway.html":{}}}],["socket.id",{"_index":1866,"title":{},"body":{"classes/SocketsGateway.html":{}}}],["socket.io",{"_index":847,"title":{},"body":{"classes/ChatsGateway.html":{},"classes/SocketsExceptionFilter.html":{},"classes/SocketsGateway.html":{},"injectables/SocketsService.html":{},"dependencies.html":{}}}],["socket_error",{"_index":2388,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["socketid",{"_index":1885,"title":{},"body":{"injectables/SocketsService.html":{}}}],["sockets",{"_index":891,"title":{},"body":{"modules/ChatsModule.html":{}}}],["sockets.gateway",{"_index":1872,"title":{},"body":{"modules/SocketsModule.html":{}}}],["sockets.service",{"_index":1854,"title":{},"body":{"classes/SocketsGateway.html":{},"modules/SocketsModule.html":{}}}],["socketsexceptionfilter",{"_index":852,"title":{"classes/SocketsExceptionFilter.html":{}},"body":{"classes/ChatsGateway.html":{},"classes/SocketsExceptionFilter.html":{},"classes/SocketsGateway.html":{},"coverage.html":{}}}],["socketsgateway",{"_index":1841,"title":{"classes/SocketsGateway.html":{}},"body":{"classes/SocketsGateway.html":{},"modules/SocketsModule.html":{},"coverage.html":{}}}],["socketsids",{"_index":874,"title":{},"body":{"classes/ChatsGateway.html":{}}}],["socketsmodule",{"_index":155,"title":{"modules/SocketsModule.html":{}},"body":{"modules/AppModule.html":{},"modules/ChatsModule.html":{},"modules/SocketsModule.html":{},"modules.html":{},"overview.html":{}}}],["socketsservice",{"_index":836,"title":{"injectables/SocketsService.html":{}},"body":{"classes/ChatsGateway.html":{},"classes/SocketsGateway.html":{},"modules/SocketsModule.html":{},"injectables/SocketsService.html":{},"coverage.html":{},"overview.html":{}}}],["socketuser",{"_index":855,"title":{},"body":{"classes/ChatsGateway.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["sorry",{"_index":2435,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["sort",{"_index":1752,"title":{},"body":{"classes/SelectChatsDto.html":{}}}],["sorting",{"_index":1395,"title":{},"body":{"classes/FindManyOptionsDto.html":{},"classes/SelectChatMessagesDto.html":{},"classes/SelectChatsDto.html":{},"classes/SelectFilesDto.html":{},"classes/SelectNotificationsDto.html":{},"classes/SelectUserNotificationTokensDto.html":{},"classes/SelectUsersDto.html":{}}}],["source",{"_index":4,"title":{},"body":{"classes/AllExceptionFilter.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"entities/ChatEntity.html":{},"entities/ChatMessageEntity.html":{},"injectables/ChatMessagesService.html":{},"entities/ChatParticipantEntity.html":{},"injectables/ChatParticipantsService.html":{},"classes/ChatReadMessageDto.html":{},"classes/ChatReadMessageResponseDto.html":{},"classes/ChatReceiveMessageDto.html":{},"controllers/ChatsController.html":{},"classes/ChatsGateway.html":{},"modules/ChatsModule.html":{},"injectables/ChatsService.html":{},"modules/ConfigModule.html":{},"injectables/ConfigService.html":{},"classes/ConfirmationEmailDto.html":{},"classes/CreateChatDto.html":{},"classes/CreateChatMessageDto.html":{},"classes/CreateFileDto.html":{},"interfaces/CreateMockFileReturn.html":{},"classes/CreateNotificationDto.html":{},"classes/CreateProfileDto.html":{},"classes/CreateUserDto.html":{},"classes/CreateUserNotificationTokenDto.html":{},"classes/CredentialsDto.html":{},"modules/DatabaseModule.html":{},"classes/DeleteUserNotificationTokenDto.html":{},"classes/DownloadFileDto.html":{},"entities/FileEntity.html":{},"classes/FileEntityPreview.html":{},"injectables/FileValidationPipe.html":{},"controllers/FilesController.html":{},"modules/FilesModule.html":{},"injectables/FilesService.html":{},"interfaces/FindManyBracketsOptions.html":{},"classes/FindManyOptionsDto.html":{},"classes/FindOneOptionsDto.html":{},"classes/HttpExceptionFilter.html":{},"classes/ID.html":{},"classes/JwtAccessTokenPayloadDto.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtRefreshGuard.html":{},"classes/JwtRefreshTokenDto.html":{},"classes/JwtRefreshTokenPayloadDto.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"classes/JwtTokensDto.html":{},"modules/MultipartModule.html":{},"interfaces/MultipartModuleAsyncOptions.html":{},"interfaces/MultipartOptionsFactory.html":{},"entities/NotificationEntity.html":{},"controllers/NotificationsController.html":{},"modules/NotificationsModule.html":{},"injectables/NotificationsService.html":{},"classes/PaginationChatMessagesDto.html":{},"classes/PaginationChatParticipantsDto.html":{},"classes/PaginationChatsDto.html":{},"classes/PaginationFilesDto.html":{},"classes/PaginationNotificationsDto.html":{},"classes/PaginationUserNotificationTokensDto.html":{},"classes/PaginationUsersDto.html":{},"classes/ResetPasswordDto.html":{},"interfaces/Response.html":{},"classes/SelectChatMessagesDto.html":{},"classes/SelectChatsDto.html":{},"classes/SelectFileDto.html":{},"classes/SelectFilesDto.html":{},"classes/SelectNotificationsDto.html":{},"classes/SelectProfileDto.html":{},"classes/SelectUserDto.html":{},"classes/SelectUserNotificationTokenDto.html":{},"classes/SelectUserNotificationTokensDto.html":{},"classes/SelectUsersDto.html":{},"modules/SendMailModule.html":{},"injectables/SendMailService.html":{},"classes/SendResetPasswordDto.html":{},"classes/SocketsExceptionFilter.html":{},"classes/SocketsGateway.html":{},"modules/SocketsModule.html":{},"injectables/SocketsService.html":{},"injectables/StorageS3Service.html":{},"injectables/StorageService.html":{},"injectables/TransformInterceptor.html":{},"classes/UpdateEmailDto.html":{},"classes/UpdateNotificationDto.html":{},"classes/UpdatePasswordDto.html":{},"classes/UpdateProfileDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserNotificationTokenDto.html":{},"classes/UploadedFile.html":{},"entities/UserEntity.html":{},"entities/UserNotificationTokenEntity.html":{},"controllers/UserNotificationTokensController.html":{},"injectables/UserNotificationTokensService.html":{},"entities/UserRefreshTokenEntity.html":{},"injectables/UserRefreshTokensService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"classes/user1615673396368.html":{}}}],["specific",{"_index":1036,"title":{},"body":{"injectables/ConfigService.html":{}}}],["specified",{"_index":1394,"title":{},"body":{"classes/FindManyOptionsDto.html":{},"classes/SelectChatMessagesDto.html":{},"classes/SelectChatsDto.html":{},"classes/SelectFilesDto.html":{},"classes/SelectNotificationsDto.html":{},"classes/SelectUserNotificationTokensDto.html":{},"classes/SelectUsersDto.html":{}}}],["specifies",{"_index":1419,"title":{},"body":{"classes/FindManyOptionsDto.html":{},"classes/FindOneOptionsDto.html":{},"classes/SelectChatMessagesDto.html":{},"classes/SelectChatsDto.html":{},"classes/SelectFileDto.html":{},"classes/SelectFilesDto.html":{},"classes/SelectNotificationsDto.html":{},"classes/SelectProfileDto.html":{},"classes/SelectUserDto.html":{},"classes/SelectUserNotificationTokenDto.html":{},"classes/SelectUserNotificationTokensDto.html":{},"classes/SelectUsersDto.html":{}}}],["split",{"_index":1359,"title":{},"body":{"injectables/FilesService.html":{}}}],["src",{"_index":1221,"title":{},"body":{"entities/FileEntity.html":{},"classes/FileEntityPreview.html":{}}}],["src/.../1615673396368",{"_index":2546,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../auth.constants.ts",{"_index":2544,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../chat",{"_index":2336,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/.../config.interface.ts",{"_index":2340,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/.../crypto.helper.ts",{"_index":2545,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../dot",{"_index":2547,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../error",{"_index":2341,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/.../file.decorator.ts",{"_index":2548,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../float",{"_index":2549,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../main.ts",{"_index":2465,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../multipart",{"_index":2515,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["src/.../multipart.constants.ts",{"_index":2551,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../notifications",{"_index":2342,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/.../number.helper.ts",{"_index":2550,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../pagination.dto.ts",{"_index":2467,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../query",{"_index":2468,"title":{},"body":{"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["src/.../response",{"_index":2516,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["src/.../roles.decorator.ts",{"_index":2554,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../socket",{"_index":2552,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../storage",{"_index":2514,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["src/.../template",{"_index":2345,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/.../templated",{"_index":2518,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["src/.../user",{"_index":2347,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/.../user.decorator.ts",{"_index":2553,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../validation.pipe.ts",{"_index":2555,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/app.controller.ts",{"_index":83,"title":{},"body":{"controllers/AppController.html":{},"coverage.html":{}}}],["src/app.controller.ts:50",{"_index":90,"title":{},"body":{"controllers/AppController.html":{}}}],["src/app.module.ts",{"_index":160,"title":{},"body":{"modules/AppModule.html":{}}}],["src/common/decorators",{"_index":267,"title":{},"body":{"controllers/AuthController.html":{},"controllers/ChatsController.html":{},"classes/ChatsGateway.html":{},"controllers/FilesController.html":{},"controllers/NotificationsController.html":{},"controllers/UserNotificationTokensController.html":{},"controllers/UsersController.html":{}}}],["src/common/decorators/roles.decorator.ts",{"_index":2223,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/common/decorators/socket",{"_index":2225,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/common/decorators/user.decorator.ts",{"_index":2227,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/common/dto",{"_index":765,"title":{},"body":{"classes/ChatReadMessageDto.html":{},"classes/ChatReadMessageResponseDto.html":{},"classes/ChatReceiveMessageDto.html":{},"classes/CreateChatDto.html":{},"classes/CreateChatMessageDto.html":{},"classes/CreateUserDto.html":{},"classes/DownloadFileDto.html":{},"controllers/FilesController.html":{},"controllers/NotificationsController.html":{},"classes/PaginationChatMessagesDto.html":{},"classes/PaginationChatParticipantsDto.html":{},"classes/PaginationChatsDto.html":{},"classes/PaginationFilesDto.html":{},"classes/PaginationNotificationsDto.html":{},"classes/PaginationUserNotificationTokensDto.html":{},"classes/PaginationUsersDto.html":{},"classes/SelectChatMessagesDto.html":{},"classes/SelectChatsDto.html":{},"classes/SelectFileDto.html":{},"classes/SelectFilesDto.html":{},"classes/SelectNotificationsDto.html":{},"classes/SelectProfileDto.html":{},"classes/SelectUserDto.html":{},"classes/SelectUserNotificationTokenDto.html":{},"classes/SelectUserNotificationTokensDto.html":{},"classes/SelectUsersDto.html":{},"controllers/UserNotificationTokensController.html":{},"controllers/UsersController.html":{}}}],["src/common/dto/find",{"_index":1375,"title":{},"body":{"classes/FindManyOptionsDto.html":{},"classes/FindOneOptionsDto.html":{},"coverage.html":{}}}],["src/common/dto/id/id.dto.ts",{"_index":1463,"title":{},"body":{"classes/ID.html":{},"coverage.html":{}}}],["src/common/dto/id/id.dto.ts:13",{"_index":1464,"title":{},"body":{"classes/ID.html":{}}}],["src/common/dto/pagination/pagination.dto.ts",{"_index":2230,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/common/enums",{"_index":414,"title":{},"body":{"injectables/AuthService.html":{},"injectables/ChatMessagesService.html":{},"injectables/ChatParticipantsService.html":{},"injectables/ChatsService.html":{},"injectables/FileValidationPipe.html":{},"injectables/FilesService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtRefreshGuard.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/NotificationsService.html":{},"classes/SocketsGateway.html":{},"injectables/StorageS3Service.html":{},"injectables/StorageService.html":{},"injectables/UserNotificationTokensService.html":{},"injectables/UserRefreshTokensService.html":{},"injectables/UsersService.html":{}}}],["src/common/enums/error",{"_index":2359,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/common/filters",{"_index":853,"title":{},"body":{"classes/ChatsGateway.html":{},"classes/SocketsGateway.html":{}}}],["src/common/filters/all",{"_index":6,"title":{},"body":{"classes/AllExceptionFilter.html":{},"coverage.html":{}}}],["src/common/filters/http",{"_index":1460,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"coverage.html":{}}}],["src/common/filters/sockets",{"_index":1826,"title":{},"body":{"classes/SocketsExceptionFilter.html":{},"coverage.html":{}}}],["src/common/helpers",{"_index":413,"title":{},"body":{"injectables/AuthService.html":{},"classes/FindManyOptionsDto.html":{},"classes/FindOneOptionsDto.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"classes/SelectChatsDto.html":{},"entities/UserEntity.html":{},"injectables/UserRefreshTokensService.html":{}}}],["src/common/helpers/crypto.helper.ts",{"_index":2232,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/common/helpers/dot",{"_index":2237,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/common/helpers/number.helper.ts",{"_index":2239,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/common/helpers/query",{"_index":2241,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["src/common/interceptors/transform.interceptor.ts",{"_index":1733,"title":{},"body":{"interfaces/Response.html":{},"injectables/TransformInterceptor.html":{},"coverage.html":{}}}],["src/common/interceptors/transform.interceptor.ts:22",{"_index":1999,"title":{},"body":{"injectables/TransformInterceptor.html":{}}}],["src/common/interfaces",{"_index":1314,"title":{},"body":{"injectables/FilesService.html":{},"classes/FindManyOptionsDto.html":{}}}],["src/common/interfaces/find",{"_index":1369,"title":{},"body":{"interfaces/FindManyBracketsOptions.html":{},"coverage.html":{}}}],["src/common/pipes",{"_index":857,"title":{},"body":{"classes/ChatsGateway.html":{}}}],["src/common/pipes/validation.pipe.ts",{"_index":2246,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/config",{"_index":336,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"interfaces/CreateMockFileReturn.html":{},"modules/DatabaseModule.html":{},"injectables/FileValidationPipe.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"modules/SendMailModule.html":{},"modules/SocketsModule.html":{},"injectables/StorageS3Service.html":{},"injectables/StorageService.html":{}}}],["src/config/config.module.ts",{"_index":1008,"title":{},"body":{"modules/ConfigModule.html":{}}}],["src/config/config.service.ts",{"_index":1011,"title":{},"body":{"injectables/ConfigService.html":{},"coverage.html":{}}}],["src/config/config.service.ts:11",{"_index":1016,"title":{},"body":{"injectables/ConfigService.html":{}}}],["src/config/config.service.ts:27",{"_index":1033,"title":{},"body":{"injectables/ConfigService.html":{}}}],["src/config/config.service.ts:37",{"_index":1040,"title":{},"body":{"injectables/ConfigService.html":{}}}],["src/config/config.service.ts:46",{"_index":1019,"title":{},"body":{"injectables/ConfigService.html":{}}}],["src/config/interfaces/config.interface.ts",{"_index":2354,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/database/database.module.ts",{"_index":1152,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["src/database/migrations/1615673396368",{"_index":2248,"title":{},"body":{"coverage.html":{},"classes/user1615673396368.html":{},"miscellaneous/variables.html":{}}}],["src/database/transformers/float",{"_index":2251,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/main.ts",{"_index":2255,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/modules/auth/auth.constants.ts",{"_index":2257,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/modules/auth/auth.controller.ts",{"_index":200,"title":{},"body":{"controllers/AuthController.html":{},"coverage.html":{}}}],["src/modules/auth/auth.controller.ts:104",{"_index":247,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/modules/auth/auth.controller.ts:113",{"_index":239,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/modules/auth/auth.controller.ts:122",{"_index":216,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/modules/auth/auth.controller.ts:134",{"_index":243,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/modules/auth/auth.controller.ts:149",{"_index":251,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/modules/auth/auth.controller.ts:164",{"_index":259,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/modules/auth/auth.controller.ts:179",{"_index":255,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/modules/auth/auth.controller.ts:58",{"_index":221,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/modules/auth/auth.controller.ts:67",{"_index":225,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/modules/auth/auth.controller.ts:78",{"_index":231,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/modules/auth/auth.controller.ts:90",{"_index":235,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/modules/auth/auth.module.ts",{"_index":324,"title":{},"body":{"modules/AuthModule.html":{}}}],["src/modules/auth/auth.service.ts",{"_index":349,"title":{},"body":{"injectables/AuthService.html":{},"coverage.html":{}}}],["src/modules/auth/auth.service.ts:109",{"_index":378,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/modules/auth/auth.service.ts:120",{"_index":369,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/modules/auth/auth.service.ts:134",{"_index":370,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/modules/auth/auth.service.ts:147",{"_index":402,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/modules/auth/auth.service.ts:167",{"_index":398,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/modules/auth/auth.service.ts:177",{"_index":395,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/modules/auth/auth.service.ts:195",{"_index":388,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/modules/auth/auth.service.ts:216",{"_index":387,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/modules/auth/auth.service.ts:231",{"_index":393,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/modules/auth/auth.service.ts:245",{"_index":391,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/modules/auth/auth.service.ts:35",{"_index":406,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/modules/auth/auth.service.ts:36",{"_index":405,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/modules/auth/auth.service.ts:37",{"_index":407,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/modules/auth/auth.service.ts:38",{"_index":367,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/modules/auth/auth.service.ts:66",{"_index":373,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/modules/auth/auth.service.ts:82",{"_index":383,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/modules/auth/auth.service.ts:98",{"_index":386,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/modules/auth/dto/confirmation",{"_index":1058,"title":{},"body":{"classes/ConfirmationEmailDto.html":{},"coverage.html":{}}}],["src/modules/auth/dto/create",{"_index":1127,"title":{},"body":{"classes/CreateProfileDto.html":{},"coverage.html":{}}}],["src/modules/auth/dto/credentials.dto.ts",{"_index":1151,"title":{},"body":{"classes/CredentialsDto.html":{},"coverage.html":{}}}],["src/modules/auth/dto/jwt",{"_index":1466,"title":{},"body":{"classes/JwtAccessTokenPayloadDto.html":{},"classes/JwtRefreshTokenDto.html":{},"classes/JwtRefreshTokenPayloadDto.html":{},"classes/JwtTokensDto.html":{},"coverage.html":{}}}],["src/modules/auth/dto/reset",{"_index":1729,"title":{},"body":{"classes/ResetPasswordDto.html":{},"classes/SendResetPasswordDto.html":{},"coverage.html":{}}}],["src/modules/auth/dto/select",{"_index":1782,"title":{},"body":{"classes/SelectProfileDto.html":{},"coverage.html":{}}}],["src/modules/auth/dto/update",{"_index":2000,"title":{},"body":{"classes/UpdateEmailDto.html":{},"classes/UpdatePasswordDto.html":{},"classes/UpdateProfileDto.html":{},"coverage.html":{}}}],["src/modules/auth/guards",{"_index":2083,"title":{},"body":{"controllers/UserNotificationTokensController.html":{},"controllers/UsersController.html":{}}}],["src/modules/auth/guards/jwt",{"_index":1493,"title":{},"body":{"injectables/JwtRefreshGuard.html":{},"coverage.html":{}}}],["src/modules/auth/guards/jwt.guard.ts",{"_index":1471,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"coverage.html":{}}}],["src/modules/auth/guards/jwt.guard.ts:19",{"_index":1475,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["src/modules/auth/guards/jwt.guard.ts:35",{"_index":1478,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["src/modules/auth/strategies/jwt",{"_index":1502,"title":{},"body":{"injectables/JwtRefreshTokenStrategy.html":{},"coverage.html":{}}}],["src/modules/auth/strategies/jwt.strategy.ts",{"_index":1521,"title":{},"body":{"injectables/JwtStrategy.html":{},"coverage.html":{}}}],["src/modules/auth/strategies/jwt.strategy.ts:16",{"_index":1522,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["src/modules/auth/strategies/jwt.strategy.ts:36",{"_index":1523,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["src/modules/chats/chats.controller.ts",{"_index":788,"title":{},"body":{"controllers/ChatsController.html":{},"coverage.html":{}}}],["src/modules/chats/chats.controller.ts:100",{"_index":795,"title":{},"body":{"controllers/ChatsController.html":{}}}],["src/modules/chats/chats.controller.ts:111",{"_index":801,"title":{},"body":{"controllers/ChatsController.html":{}}}],["src/modules/chats/chats.controller.ts:127",{"_index":804,"title":{},"body":{"controllers/ChatsController.html":{}}}],["src/modules/chats/chats.controller.ts:69",{"_index":793,"title":{},"body":{"controllers/ChatsController.html":{}}}],["src/modules/chats/chats.controller.ts:87",{"_index":797,"title":{},"body":{"controllers/ChatsController.html":{}}}],["src/modules/chats/chats.module.ts",{"_index":889,"title":{},"body":{"modules/ChatsModule.html":{}}}],["src/modules/chats/dto/chat",{"_index":753,"title":{},"body":{"classes/ChatReadMessageDto.html":{},"classes/ChatReadMessageResponseDto.html":{},"coverage.html":{}}}],["src/modules/chats/dto/create",{"_index":774,"title":{},"body":{"classes/ChatReceiveMessageDto.html":{},"classes/CreateChatDto.html":{},"classes/CreateChatMessageDto.html":{},"coverage.html":{}}}],["src/modules/chats/dto/pagination",{"_index":1700,"title":{},"body":{"classes/PaginationChatMessagesDto.html":{},"classes/PaginationChatParticipantsDto.html":{},"classes/PaginationChatsDto.html":{},"coverage.html":{}}}],["src/modules/chats/dto/select",{"_index":1744,"title":{},"body":{"classes/SelectChatMessagesDto.html":{},"classes/SelectChatsDto.html":{},"coverage.html":{}}}],["src/modules/chats/entities/chat",{"_index":536,"title":{},"body":{"entities/ChatMessageEntity.html":{},"entities/ChatParticipantEntity.html":{},"coverage.html":{}}}],["src/modules/chats/entities/chat.entity.ts",{"_index":486,"title":{},"body":{"entities/ChatEntity.html":{},"coverage.html":{}}}],["src/modules/chats/entities/chat.entity.ts:27",{"_index":501,"title":{},"body":{"entities/ChatEntity.html":{}}}],["src/modules/chats/entities/chat.entity.ts:36",{"_index":517,"title":{},"body":{"entities/ChatEntity.html":{}}}],["src/modules/chats/entities/chat.entity.ts:43",{"_index":507,"title":{},"body":{"entities/ChatEntity.html":{}}}],["src/modules/chats/entities/chat.entity.ts:50",{"_index":510,"title":{},"body":{"entities/ChatEntity.html":{}}}],["src/modules/chats/entities/chat.entity.ts:61",{"_index":499,"title":{},"body":{"entities/ChatEntity.html":{}}}],["src/modules/chats/entities/chat.entity.ts:71",{"_index":519,"title":{},"body":{"entities/ChatEntity.html":{}}}],["src/modules/chats/entities/chat.entity.ts:78",{"_index":514,"title":{},"body":{"entities/ChatEntity.html":{}}}],["src/modules/chats/entities/chat.entity.ts:84",{"_index":512,"title":{},"body":{"entities/ChatEntity.html":{}}}],["src/modules/chats/enums/chat",{"_index":2349,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/modules/chats/services/chat",{"_index":576,"title":{},"body":{"injectables/ChatMessagesService.html":{},"injectables/ChatParticipantsService.html":{},"coverage.html":{}}}],["src/modules/chats/services/chats.gateway.ts",{"_index":831,"title":{},"body":{"classes/ChatsGateway.html":{},"coverage.html":{}}}],["src/modules/chats/services/chats.gateway.ts:44",{"_index":837,"title":{},"body":{"classes/ChatsGateway.html":{}}}],["src/modules/chats/services/chats.gateway.ts:66",{"_index":844,"title":{},"body":{"classes/ChatsGateway.html":{}}}],["src/modules/chats/services/chats.gateway.ts:98",{"_index":841,"title":{},"body":{"classes/ChatsGateway.html":{}}}],["src/modules/chats/services/chats.service.ts",{"_index":894,"title":{},"body":{"injectables/ChatsService.html":{},"coverage.html":{}}}],["src/modules/chats/services/chats.service.ts:113",{"_index":914,"title":{},"body":{"injectables/ChatsService.html":{}}}],["src/modules/chats/services/chats.service.ts:144",{"_index":905,"title":{},"body":{"injectables/ChatsService.html":{}}}],["src/modules/chats/services/chats.service.ts:203",{"_index":908,"title":{},"body":{"injectables/ChatsService.html":{}}}],["src/modules/chats/services/chats.service.ts:220",{"_index":911,"title":{},"body":{"injectables/ChatsService.html":{}}}],["src/modules/chats/services/chats.service.ts:261",{"_index":909,"title":{},"body":{"injectables/ChatsService.html":{}}}],["src/modules/chats/services/chats.service.ts:28",{"_index":900,"title":{},"body":{"injectables/ChatsService.html":{}}}],["src/modules/chats/services/chats.service.ts:284",{"_index":916,"title":{},"body":{"injectables/ChatsService.html":{}}}],["src/modules/chats/services/chats.service.ts:303",{"_index":915,"title":{},"body":{"injectables/ChatsService.html":{}}}],["src/modules/chats/services/chats.service.ts:322",{"_index":903,"title":{},"body":{"injectables/ChatsService.html":{}}}],["src/modules/chats/services/chats.service.ts:43",{"_index":902,"title":{},"body":{"injectables/ChatsService.html":{}}}],["src/modules/chats/services/chats.service.ts:61",{"_index":904,"title":{},"body":{"injectables/ChatsService.html":{}}}],["src/modules/chats/services/chats.service.ts:87",{"_index":907,"title":{},"body":{"injectables/ChatsService.html":{}}}],["src/modules/files/dto/create",{"_index":1081,"title":{},"body":{"classes/CreateFileDto.html":{},"coverage.html":{}}}],["src/modules/files/dto/download",{"_index":1188,"title":{},"body":{"classes/DownloadFileDto.html":{},"coverage.html":{}}}],["src/modules/files/dto/pagination",{"_index":1714,"title":{},"body":{"classes/PaginationFilesDto.html":{},"coverage.html":{}}}],["src/modules/files/dto/select.file.dto.ts",{"_index":1766,"title":{},"body":{"classes/SelectFileDto.html":{},"coverage.html":{}}}],["src/modules/files/dto/select.files.dto.ts",{"_index":1767,"title":{},"body":{"classes/SelectFilesDto.html":{},"coverage.html":{}}}],["src/modules/files/dto/select.files.dto.ts:20",{"_index":1770,"title":{},"body":{"classes/SelectFilesDto.html":{}}}],["src/modules/files/dto/select.files.dto.ts:25",{"_index":1772,"title":{},"body":{"classes/SelectFilesDto.html":{}}}],["src/modules/files/entities",{"_index":2045,"title":{},"body":{"entities/UserEntity.html":{}}}],["src/modules/files/entities/file.entity",{"_index":568,"title":{},"body":{"entities/ChatMessageEntity.html":{}}}],["src/modules/files/entities/file.entity.ts",{"_index":1193,"title":{},"body":{"entities/FileEntity.html":{},"classes/FileEntityPreview.html":{},"coverage.html":{}}}],["src/modules/files/entities/file.entity.ts:105",{"_index":1197,"title":{},"body":{"entities/FileEntity.html":{}}}],["src/modules/files/entities/file.entity.ts:116",{"_index":1214,"title":{},"body":{"entities/FileEntity.html":{}}}],["src/modules/files/entities/file.entity.ts:122",{"_index":1232,"title":{},"body":{"classes/FileEntityPreview.html":{}}}],["src/modules/files/entities/file.entity.ts:27",{"_index":1209,"title":{},"body":{"entities/FileEntity.html":{}}}],["src/modules/files/entities/file.entity.ts:52",{"_index":1211,"title":{},"body":{"entities/FileEntity.html":{}}}],["src/modules/files/entities/file.entity.ts:59",{"_index":1212,"title":{},"body":{"entities/FileEntity.html":{}}}],["src/modules/files/entities/file.entity.ts:66",{"_index":1204,"title":{},"body":{"entities/FileEntity.html":{}}}],["src/modules/files/entities/file.entity.ts:73",{"_index":1208,"title":{},"body":{"entities/FileEntity.html":{}}}],["src/modules/files/entities/file.entity.ts:80",{"_index":1210,"title":{},"body":{"entities/FileEntity.html":{}}}],["src/modules/files/entities/file.entity.ts:87",{"_index":1201,"title":{},"body":{"entities/FileEntity.html":{}}}],["src/modules/files/entities/file.entity.ts:94",{"_index":1203,"title":{},"body":{"entities/FileEntity.html":{}}}],["src/modules/files/files.controller.ts",{"_index":1249,"title":{},"body":{"controllers/FilesController.html":{},"coverage.html":{}}}],["src/modules/files/files.controller.ts:105",{"_index":1270,"title":{},"body":{"controllers/FilesController.html":{}}}],["src/modules/files/files.controller.ts:122",{"_index":1257,"title":{},"body":{"controllers/FilesController.html":{}}}],["src/modules/files/files.controller.ts:134",{"_index":1260,"title":{},"body":{"controllers/FilesController.html":{}}}],["src/modules/files/files.controller.ts:60",{"_index":1255,"title":{},"body":{"controllers/FilesController.html":{}}}],["src/modules/files/files.controller.ts:72",{"_index":1264,"title":{},"body":{"controllers/FilesController.html":{}}}],["src/modules/files/files.controller.ts:86",{"_index":1267,"title":{},"body":{"controllers/FilesController.html":{}}}],["src/modules/files/files.module.ts",{"_index":1297,"title":{},"body":{"modules/FilesModule.html":{}}}],["src/modules/files/files.service.ts",{"_index":1300,"title":{},"body":{"injectables/FilesService.html":{},"coverage.html":{}}}],["src/modules/files/files.service.ts:106",{"_index":1312,"title":{},"body":{"injectables/FilesService.html":{}}}],["src/modules/files/files.service.ts:133",{"_index":1313,"title":{},"body":{"injectables/FilesService.html":{}}}],["src/modules/files/files.service.ts:154",{"_index":1307,"title":{},"body":{"injectables/FilesService.html":{}}}],["src/modules/files/files.service.ts:173",{"_index":1308,"title":{},"body":{"injectables/FilesService.html":{}}}],["src/modules/files/files.service.ts:28",{"_index":1303,"title":{},"body":{"injectables/FilesService.html":{}}}],["src/modules/files/files.service.ts:45",{"_index":1306,"title":{},"body":{"injectables/FilesService.html":{}}}],["src/modules/files/files.service.ts:65",{"_index":1309,"title":{},"body":{"injectables/FilesService.html":{}}}],["src/modules/files/files.service.ts:90",{"_index":1311,"title":{},"body":{"injectables/FilesService.html":{}}}],["src/modules/notifications/dto/create",{"_index":1115,"title":{},"body":{"classes/CreateNotificationDto.html":{},"coverage.html":{}}}],["src/modules/notifications/dto/pagination",{"_index":1718,"title":{},"body":{"classes/PaginationNotificationsDto.html":{},"coverage.html":{}}}],["src/modules/notifications/dto/select",{"_index":1776,"title":{},"body":{"classes/SelectNotificationsDto.html":{},"coverage.html":{}}}],["src/modules/notifications/dto/update",{"_index":2006,"title":{},"body":{"classes/UpdateNotificationDto.html":{},"coverage.html":{}}}],["src/modules/notifications/entities/notification.entity.ts",{"_index":1575,"title":{},"body":{"entities/NotificationEntity.html":{},"coverage.html":{}}}],["src/modules/notifications/entities/notification.entity.ts:23",{"_index":1577,"title":{},"body":{"entities/NotificationEntity.html":{}}}],["src/modules/notifications/entities/notification.entity.ts:30",{"_index":1580,"title":{},"body":{"entities/NotificationEntity.html":{}}}],["src/modules/notifications/entities/notification.entity.ts:37",{"_index":1584,"title":{},"body":{"entities/NotificationEntity.html":{}}}],["src/modules/notifications/entities/notification.entity.ts:48",{"_index":1578,"title":{},"body":{"entities/NotificationEntity.html":{}}}],["src/modules/notifications/entities/notification.entity.ts:55",{"_index":1582,"title":{},"body":{"entities/NotificationEntity.html":{}}}],["src/modules/notifications/entities/notification.entity.ts:66",{"_index":1576,"title":{},"body":{"entities/NotificationEntity.html":{}}}],["src/modules/notifications/entities/notification.entity.ts:78",{"_index":1586,"title":{},"body":{"entities/NotificationEntity.html":{}}}],["src/modules/notifications/enums/notifications",{"_index":2399,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/modules/notifications/notifications.controller.ts",{"_index":1590,"title":{},"body":{"controllers/NotificationsController.html":{},"coverage.html":{}}}],["src/modules/notifications/notifications.controller.ts:104",{"_index":1593,"title":{},"body":{"controllers/NotificationsController.html":{}}}],["src/modules/notifications/notifications.controller.ts:45",{"_index":1598,"title":{},"body":{"controllers/NotificationsController.html":{}}}],["src/modules/notifications/notifications.controller.ts:61",{"_index":1595,"title":{},"body":{"controllers/NotificationsController.html":{}}}],["src/modules/notifications/notifications.controller.ts:75",{"_index":1596,"title":{},"body":{"controllers/NotificationsController.html":{}}}],["src/modules/notifications/notifications.controller.ts:90",{"_index":1600,"title":{},"body":{"controllers/NotificationsController.html":{}}}],["src/modules/notifications/notifications.module.ts",{"_index":1614,"title":{},"body":{"modules/NotificationsModule.html":{}}}],["src/modules/notifications/services/notifications.service.ts",{"_index":1617,"title":{},"body":{"injectables/NotificationsService.html":{},"coverage.html":{}}}],["src/modules/notifications/services/notifications.service.ts:103",{"_index":1636,"title":{},"body":{"injectables/NotificationsService.html":{}}}],["src/modules/notifications/services/notifications.service.ts:123",{"_index":1637,"title":{},"body":{"injectables/NotificationsService.html":{}}}],["src/modules/notifications/services/notifications.service.ts:139",{"_index":1645,"title":{},"body":{"injectables/NotificationsService.html":{}}}],["src/modules/notifications/services/notifications.service.ts:156",{"_index":1647,"title":{},"body":{"injectables/NotificationsService.html":{}}}],["src/modules/notifications/services/notifications.service.ts:176",{"_index":1631,"title":{},"body":{"injectables/NotificationsService.html":{}}}],["src/modules/notifications/services/notifications.service.ts:192",{"_index":1634,"title":{},"body":{"injectables/NotificationsService.html":{}}}],["src/modules/notifications/services/notifications.service.ts:203",{"_index":1641,"title":{},"body":{"injectables/NotificationsService.html":{}}}],["src/modules/notifications/services/notifications.service.ts:227",{"_index":1639,"title":{},"body":{"injectables/NotificationsService.html":{}}}],["src/modules/notifications/services/notifications.service.ts:258",{"_index":1643,"title":{},"body":{"injectables/NotificationsService.html":{}}}],["src/modules/notifications/services/notifications.service.ts:29",{"_index":1626,"title":{},"body":{"injectables/NotificationsService.html":{}}}],["src/modules/notifications/services/notifications.service.ts:32",{"_index":1649,"title":{},"body":{"injectables/NotificationsService.html":{}}}],["src/modules/notifications/services/notifications.service.ts:33",{"_index":1650,"title":{},"body":{"injectables/NotificationsService.html":{}}}],["src/modules/notifications/services/notifications.service.ts:34",{"_index":1651,"title":{},"body":{"injectables/NotificationsService.html":{}}}],["src/modules/notifications/services/notifications.service.ts:42",{"_index":1628,"title":{},"body":{"injectables/NotificationsService.html":{}}}],["src/modules/notifications/services/notifications.service.ts:59",{"_index":1630,"title":{},"body":{"injectables/NotificationsService.html":{}}}],["src/modules/notifications/services/notifications.service.ts:75",{"_index":1632,"title":{},"body":{"injectables/NotificationsService.html":{}}}],["src/modules/sockets",{"_index":854,"title":{},"body":{"classes/ChatsGateway.html":{}}}],["src/modules/sockets/sockets.gateway.ts",{"_index":1842,"title":{},"body":{"classes/SocketsGateway.html":{},"coverage.html":{}}}],["src/modules/sockets/sockets.gateway.ts:27",{"_index":1848,"title":{},"body":{"classes/SocketsGateway.html":{}}}],["src/modules/sockets/sockets.gateway.ts:44",{"_index":1850,"title":{},"body":{"classes/SocketsGateway.html":{}}}],["src/modules/sockets/sockets.gateway.ts:63",{"_index":1852,"title":{},"body":{"classes/SocketsGateway.html":{}}}],["src/modules/sockets/sockets.module.ts",{"_index":1871,"title":{},"body":{"modules/SocketsModule.html":{}}}],["src/modules/sockets/sockets.service.ts",{"_index":1876,"title":{},"body":{"injectables/SocketsService.html":{},"coverage.html":{}}}],["src/modules/sockets/sockets.service.ts:17",{"_index":1894,"title":{},"body":{"injectables/SocketsService.html":{}}}],["src/modules/sockets/sockets.service.ts:24",{"_index":1883,"title":{},"body":{"injectables/SocketsService.html":{}}}],["src/modules/sockets/sockets.service.ts:33",{"_index":1888,"title":{},"body":{"injectables/SocketsService.html":{}}}],["src/modules/sockets/sockets.service.ts:41",{"_index":1893,"title":{},"body":{"injectables/SocketsService.html":{}}}],["src/modules/sockets/sockets.service.ts:51",{"_index":1891,"title":{},"body":{"injectables/SocketsService.html":{}}}],["src/modules/sockets/sockets.service.ts:61",{"_index":1886,"title":{},"body":{"injectables/SocketsService.html":{}}}],["src/modules/users/controllers/user",{"_index":2071,"title":{},"body":{"controllers/UserNotificationTokensController.html":{},"coverage.html":{}}}],["src/modules/users/controllers/users.controller.ts",{"_index":2152,"title":{},"body":{"controllers/UsersController.html":{},"coverage.html":{}}}],["src/modules/users/controllers/users.controller.ts:100",{"_index":2155,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/modules/users/controllers/users.controller.ts:53",{"_index":2154,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/modules/users/controllers/users.controller.ts:63",{"_index":2157,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/modules/users/controllers/users.controller.ts:73",{"_index":2158,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/modules/users/controllers/users.controller.ts:87",{"_index":2160,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/modules/users/dto/create",{"_index":1129,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/CreateUserNotificationTokenDto.html":{},"coverage.html":{}}}],["src/modules/users/dto/delete",{"_index":1183,"title":{},"body":{"classes/DeleteUserNotificationTokenDto.html":{},"coverage.html":{}}}],["src/modules/users/dto/pagination",{"_index":1723,"title":{},"body":{"classes/PaginationUserNotificationTokensDto.html":{},"classes/PaginationUsersDto.html":{},"coverage.html":{}}}],["src/modules/users/dto/select",{"_index":1784,"title":{},"body":{"classes/SelectUserDto.html":{},"classes/SelectUserNotificationTokenDto.html":{},"classes/SelectUserNotificationTokensDto.html":{},"classes/SelectUsersDto.html":{},"coverage.html":{}}}],["src/modules/users/dto/update",{"_index":2012,"title":{},"body":{"classes/UpdateUserDto.html":{},"classes/UpdateUserNotificationTokenDto.html":{},"coverage.html":{}}}],["src/modules/users/entities",{"_index":528,"title":{},"body":{"entities/ChatEntity.html":{},"entities/ChatMessageEntity.html":{},"injectables/ChatMessagesService.html":{},"entities/ChatParticipantEntity.html":{},"classes/ChatsGateway.html":{},"injectables/ChatsService.html":{},"entities/FileEntity.html":{},"classes/FileEntityPreview.html":{},"injectables/JwtAuthGuard.html":{},"entities/NotificationEntity.html":{},"injectables/NotificationsService.html":{},"classes/SelectProfileDto.html":{},"entities/UserNotificationTokenEntity.html":{},"classes/user1615673396368.html":{}}}],["src/modules/users/entities/user",{"_index":2062,"title":{},"body":{"entities/UserNotificationTokenEntity.html":{},"entities/UserRefreshTokenEntity.html":{},"coverage.html":{}}}],["src/modules/users/entities/user.entity.ts",{"_index":2025,"title":{},"body":{"entities/UserEntity.html":{},"coverage.html":{}}}],["src/modules/users/entities/user.entity.ts:109",{"_index":2031,"title":{},"body":{"entities/UserEntity.html":{}}}],["src/modules/users/entities/user.entity.ts:119",{"_index":2044,"title":{},"body":{"entities/UserEntity.html":{}}}],["src/modules/users/entities/user.entity.ts:126",{"_index":2033,"title":{},"body":{"entities/UserEntity.html":{}}}],["src/modules/users/entities/user.entity.ts:33",{"_index":2036,"title":{},"body":{"entities/UserEntity.html":{}}}],["src/modules/users/entities/user.entity.ts:40",{"_index":2043,"title":{},"body":{"entities/UserEntity.html":{}}}],["src/modules/users/entities/user.entity.ts:47",{"_index":2042,"title":{},"body":{"entities/UserEntity.html":{}}}],["src/modules/users/entities/user.entity.ts:54",{"_index":2035,"title":{},"body":{"entities/UserEntity.html":{}}}],["src/modules/users/entities/user.entity.ts:61",{"_index":2040,"title":{},"body":{"entities/UserEntity.html":{}}}],["src/modules/users/entities/user.entity.ts:85",{"_index":2029,"title":{},"body":{"entities/UserEntity.html":{}}}],["src/modules/users/entities/user.entity.ts:92",{"_index":2041,"title":{},"body":{"entities/UserEntity.html":{}}}],["src/modules/users/entities/user.entity.ts:99",{"_index":2037,"title":{},"body":{"entities/UserEntity.html":{}}}],["src/modules/users/enums",{"_index":1483,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"classes/user1615673396368.html":{}}}],["src/modules/users/enums/user",{"_index":2461,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/modules/users/services",{"_index":1657,"title":{},"body":{"injectables/NotificationsService.html":{}}}],["src/modules/users/services/user",{"_index":2091,"title":{},"body":{"injectables/UserNotificationTokensService.html":{},"injectables/UserRefreshTokensService.html":{},"coverage.html":{}}}],["src/modules/users/services/users.service.ts",{"_index":2173,"title":{},"body":{"injectables/UsersService.html":{},"coverage.html":{}}}],["src/modules/users/services/users.service.ts:106",{"_index":2181,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/modules/users/services/users.service.ts:126",{"_index":2182,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/modules/users/services/users.service.ts:147",{"_index":2178,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/modules/users/services/users.service.ts:24",{"_index":2176,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/modules/users/services/users.service.ts:31",{"_index":2184,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/modules/users/services/users.service.ts:39",{"_index":2177,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/modules/users/services/users.service.ts:57",{"_index":2179,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/modules/users/services/users.service.ts:90",{"_index":2180,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/modules/users/users.module.ts",{"_index":2171,"title":{},"body":{"modules/UsersModule.html":{}}}],["src/multipart",{"_index":1090,"title":{},"body":{"classes/CreateFileDto.html":{},"injectables/FilesService.html":{}}}],["src/multipart/decorators",{"_index":1274,"title":{},"body":{"controllers/FilesController.html":{}}}],["src/multipart/decorators/file.decorator.ts",{"_index":2280,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/multipart/dto/uploaded",{"_index":2017,"title":{},"body":{"classes/UploadedFile.html":{},"coverage.html":{}}}],["src/multipart/interfaces/multipart",{"_index":1564,"title":{},"body":{"interfaces/MultipartModuleAsyncOptions.html":{},"interfaces/MultipartOptionsFactory.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["src/multipart/multipart.constants.ts",{"_index":2282,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/multipart/multipart.module.ts",{"_index":1528,"title":{},"body":{"modules/MultipartModule.html":{}}}],["src/multipart/multipart.module.ts:23",{"_index":1541,"title":{},"body":{"modules/MultipartModule.html":{}}}],["src/multipart/multipart.module.ts:39",{"_index":1545,"title":{},"body":{"modules/MultipartModule.html":{}}}],["src/multipart/multipart.module.ts:56",{"_index":1537,"title":{},"body":{"modules/MultipartModule.html":{}}}],["src/multipart/multipart.module.ts:73",{"_index":1533,"title":{},"body":{"modules/MultipartModule.html":{}}}],["src/multipart/pipes/file",{"_index":1234,"title":{},"body":{"injectables/FileValidationPipe.html":{},"coverage.html":{}}}],["src/multipart/storage",{"_index":1903,"title":{},"body":{"injectables/StorageS3Service.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["src/multipart/storage.service.ts",{"_index":1953,"title":{},"body":{"injectables/StorageService.html":{},"coverage.html":{}}}],["src/multipart/storage.service.ts:112",{"_index":1960,"title":{},"body":{"injectables/StorageService.html":{}}}],["src/multipart/storage.service.ts:24",{"_index":1968,"title":{},"body":{"injectables/StorageService.html":{}}}],["src/multipart/storage.service.ts:31",{"_index":1957,"title":{},"body":{"injectables/StorageService.html":{}}}],["src/multipart/storage.service.ts:41",{"_index":1966,"title":{},"body":{"injectables/StorageService.html":{}}}],["src/multipart/storage.service.ts:49",{"_index":1962,"title":{},"body":{"injectables/StorageService.html":{}}}],["src/multipart/storage.service.ts:56",{"_index":1961,"title":{},"body":{"injectables/StorageService.html":{}}}],["src/multipart/storage.service.ts:69",{"_index":1958,"title":{},"body":{"injectables/StorageService.html":{}}}],["src/multipart/storage.service.ts:97",{"_index":1964,"title":{},"body":{"injectables/StorageService.html":{}}}],["src/sendmail",{"_index":342,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{}}}],["src/sendmail/enums",{"_index":420,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/sendmail/enums/template",{"_index":2458,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/sendmail/sendmail.module.ts",{"_index":1794,"title":{},"body":{"modules/SendMailModule.html":{}}}],["src/sendmail/sendmail.service.ts",{"_index":1813,"title":{},"body":{"injectables/SendMailService.html":{},"coverage.html":{}}}],["src/sendmail/sendmail.service.ts:14",{"_index":1817,"title":{},"body":{"injectables/SendMailService.html":{}}}],["src/sendmail/sendmail.service.ts:26",{"_index":1819,"title":{},"body":{"injectables/SendMailService.html":{}}}],["src/sendmail/types",{"_index":418,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/sendmail/types/response",{"_index":2520,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["src/sendmail/types/templated",{"_index":2521,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["ssl",{"_index":1158,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["start",{"_index":1362,"title":{},"body":{"injectables/FilesService.html":{},"miscellaneous/enumerations.html":{},"index.html":{}}}],["start:dev",{"_index":2491,"title":{},"body":{"index.html":{}}}],["start:prodtest",{"_index":2492,"title":{},"body":{"index.html":{}}}],["started",{"_index":2203,"title":{"changelog.html":{},"index.html":{}},"body":{}}],["stat",{"_index":1972,"title":{},"body":{"injectables/StorageService.html":{}}}],["stat(filedest",{"_index":1994,"title":{},"body":{"injectables/StorageService.html":{}}}],["stat(filepath",{"_index":1991,"title":{},"body":{"injectables/StorageService.html":{}}}],["stat(this.destination",{"_index":1980,"title":{},"body":{"injectables/StorageService.html":{}}}],["statements",{"_index":2220,"title":{},"body":{"coverage.html":{},"unit-test.html":{}}}],["static",{"_index":1529,"title":{},"body":{"modules/MultipartModule.html":{}}}],["stats",{"_index":926,"title":{},"body":{"injectables/ChatsService.html":{}}}],["stats.newmessagescount",{"_index":951,"title":{},"body":{"injectables/ChatsService.html":{}}}],["stats[row.id].newmessagescount",{"_index":945,"title":{},"body":{"injectables/ChatsService.html":{}}}],["status",{"_index":85,"title":{},"body":{"controllers/AppController.html":{},"entities/ChatMessageEntity.html":{},"injectables/ChatMessagesService.html":{},"classes/ChatsGateway.html":{},"injectables/ChatsService.html":{},"entities/NotificationEntity.html":{},"injectables/NotificationsService.html":{},"classes/SelectNotificationsDto.html":{},"classes/SelectUsersDto.html":{},"classes/UpdateNotificationDto.html":{},"entities/UserEntity.html":{}}}],["status(200",{"_index":1347,"title":{},"body":{"injectables/FilesService.html":{}}}],["status(206",{"_index":1367,"title":{},"body":{"injectables/FilesService.html":{}}}],["status(416",{"_index":1365,"title":{},"body":{"injectables/FilesService.html":{}}}],["status.enum.ts",{"_index":2337,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["statuscode",{"_index":53,"title":{},"body":{"classes/AllExceptionFilter.html":{},"classes/HttpExceptionFilter.html":{}}}],["storage.service",{"_index":1552,"title":{},"body":{"modules/MultipartModule.html":{}}}],["storages3service",{"_index":1902,"title":{"injectables/StorageS3Service.html":{}},"body":{"injectables/StorageS3Service.html":{},"coverage.html":{}}}],["storageservice",{"_index":1302,"title":{"injectables/StorageService.html":{}},"body":{"injectables/FilesService.html":{},"modules/MultipartModule.html":{},"injectables/StorageService.html":{},"coverage.html":{}}}],["store",{"_index":331,"title":{},"body":{"modules/AuthModule.html":{},"injectables/SocketsService.html":{},"dependencies.html":{}}}],["store[socket.id",{"_index":1896,"title":{},"body":{"injectables/SocketsService.html":{}}}],["strategies",{"_index":338,"title":{},"body":{"modules/AuthModule.html":{}}}],["strategy",{"_index":1509,"title":{},"body":{"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{}}}],["stream",{"_index":1100,"title":{},"body":{"interfaces/CreateMockFileReturn.html":{}}}],["stream.readable",{"_index":1099,"title":{},"body":{"interfaces/CreateMockFileReturn.html":{}}}],["stream.readable.from(buffer.tostring",{"_index":1109,"title":{},"body":{"interfaces/CreateMockFileReturn.html":{}}}],["stream/promises",{"_index":1977,"title":{},"body":{"injectables/StorageService.html":{}}}],["strict",{"_index":1812,"title":{},"body":{"modules/SendMailModule.html":{}}}],["string",{"_index":374,"title":{},"body":{"injectables/AuthService.html":{},"entities/ChatEntity.html":{},"entities/ChatMessageEntity.html":{},"entities/ChatParticipantEntity.html":{},"injectables/ChatParticipantsService.html":{},"classes/ChatReadMessageDto.html":{},"classes/ChatReceiveMessageDto.html":{},"injectables/ChatsService.html":{},"injectables/ConfigService.html":{},"classes/ConfirmationEmailDto.html":{},"classes/CreateChatMessageDto.html":{},"classes/CreateFileDto.html":{},"interfaces/CreateMockFileReturn.html":{},"classes/CreateNotificationDto.html":{},"classes/CreateUserDto.html":{},"classes/CreateUserNotificationTokenDto.html":{},"classes/DeleteUserNotificationTokenDto.html":{},"classes/DownloadFileDto.html":{},"entities/FileEntity.html":{},"classes/FileEntityPreview.html":{},"injectables/FileValidationPipe.html":{},"controllers/FilesController.html":{},"classes/FindManyOptionsDto.html":{},"classes/FindOneOptionsDto.html":{},"classes/ID.html":{},"classes/JwtAccessTokenPayloadDto.html":{},"classes/JwtRefreshTokenDto.html":{},"classes/JwtRefreshTokenPayloadDto.html":{},"classes/JwtTokensDto.html":{},"modules/MultipartModule.html":{},"entities/NotificationEntity.html":{},"classes/ResetPasswordDto.html":{},"interfaces/Response.html":{},"classes/SelectChatMessagesDto.html":{},"classes/SelectChatsDto.html":{},"classes/SelectFileDto.html":{},"classes/SelectFilesDto.html":{},"classes/SelectNotificationsDto.html":{},"classes/SelectProfileDto.html":{},"classes/SelectUserDto.html":{},"classes/SelectUserNotificationTokenDto.html":{},"classes/SelectUserNotificationTokensDto.html":{},"classes/SelectUsersDto.html":{},"classes/SendResetPasswordDto.html":{},"injectables/SocketsService.html":{},"injectables/StorageS3Service.html":{},"injectables/StorageService.html":{},"injectables/TransformInterceptor.html":{},"classes/UpdateEmailDto.html":{},"classes/UpdatePasswordDto.html":{},"classes/UpdateProfileDto.html":{},"classes/UploadedFile.html":{},"entities/UserEntity.html":{},"entities/UserNotificationTokenEntity.html":{},"entities/UserRefreshTokenEntity.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["sub",{"_index":2588,"title":{},"body":{"miscellaneous/variables.html":{}}}],["subject",{"_index":473,"title":{},"body":{"injectables/AuthService.html":{}}}],["subscribemessage",{"_index":848,"title":{},"body":{"classes/ChatsGateway.html":{}}}],["subscribemessage(chatsocketeventsenum.chat_read_message",{"_index":840,"title":{},"body":{"classes/ChatsGateway.html":{}}}],["subscribemessage(chatsocketeventsenum.chat_send_message",{"_index":843,"title":{},"body":{"classes/ChatsGateway.html":{}}}],["subscription",{"_index":2451,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["summary",{"_index":2628,"title":{},"body":{"miscellaneous/variables.html":{}}}],["super",{"_index":1230,"title":{},"body":{"entities/FileEntity.html":{},"classes/FileEntityPreview.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtRefreshGuard.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"classes/PaginationChatMessagesDto.html":{},"classes/PaginationChatParticipantsDto.html":{},"classes/PaginationChatsDto.html":{},"classes/PaginationFilesDto.html":{},"classes/PaginationNotificationsDto.html":{},"classes/PaginationUserNotificationTokensDto.html":{},"classes/PaginationUsersDto.html":{}}}],["support",{"_index":2420,"title":{},"body":{"miscellaneous/enumerations.html":{},"modules.html":{}}}],["svg",{"_index":2499,"title":{},"body":{"modules.html":{}}}],["swagger",{"_index":2319,"title":{},"body":{"dependencies.html":{}}}],["switchtohttp",{"_index":2593,"title":{},"body":{"miscellaneous/variables.html":{}}}],["symbol",{"_index":2620,"title":{},"body":{"miscellaneous/variables.html":{}}}],["synchronize",{"_index":1173,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["t",{"_index":1020,"title":{},"body":{"injectables/ConfigService.html":{},"interfaces/Response.html":{},"injectables/SendMailService.html":{},"injectables/TransformInterceptor.html":{}}}],["table",{"_index":2290,"title":{},"body":{"coverage.html":{},"unit-test.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":2289,"title":{},"body":{"coverage.html":{},"unit-test.html":{}}}],["take",{"_index":1381,"title":{},"body":{"classes/FindManyOptionsDto.html":{},"classes/SelectChatMessagesDto.html":{},"classes/SelectChatsDto.html":{},"classes/SelectFilesDto.html":{},"classes/SelectNotificationsDto.html":{},"classes/SelectUserNotificationTokensDto.html":{},"classes/SelectUsersDto.html":{}}}],["taken",{"_index":1404,"title":{},"body":{"classes/FindManyOptionsDto.html":{},"classes/SelectChatMessagesDto.html":{},"classes/SelectChatsDto.html":{},"classes/SelectFilesDto.html":{},"classes/SelectNotificationsDto.html":{},"classes/SelectUserNotificationTokensDto.html":{},"classes/SelectUsersDto.html":{}}}],["target",{"_index":2574,"title":{},"body":{"miscellaneous/variables.html":{}}}],["target[part",{"_index":2578,"title":{},"body":{"miscellaneous/variables.html":{}}}],["target[parts[0",{"_index":2580,"title":{},"body":{"miscellaneous/variables.html":{}}}],["tbd",{"_index":864,"title":{},"body":{"classes/ChatsGateway.html":{},"classes/SocketsGateway.html":{}}}],["template",{"_index":474,"title":{},"body":{"injectables/AuthService.html":{},"modules/SendMailModule.html":{},"properties.html":{}}}],["template.git",{"_index":2509,"title":{},"body":{"properties.html":{}}}],["templatedmailconfirmationtype",{"_index":417,"title":{},"body":{"injectables/AuthService.html":{},"miscellaneous/typealiases.html":{}}}],["templatedmailresetpasswordtype",{"_index":2519,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["templatedmailtype",{"_index":1823,"title":{},"body":{"injectables/SendMailService.html":{},"miscellaneous/typealiases.html":{}}}],["templatenameenum",{"_index":419,"title":{},"body":{"injectables/AuthService.html":{},"miscellaneous/enumerations.html":{}}}],["templatenameenum.confirmation",{"_index":475,"title":{},"body":{"injectables/AuthService.html":{}}}],["templates",{"_index":1810,"title":{},"body":{"modules/SendMailModule.html":{}}}],["terminusmodule",{"_index":165,"title":{},"body":{"modules/AppModule.html":{}}}],["test",{"_index":2357,"title":{"unit-test.html":{}},"body":{"miscellaneous/enumerations.html":{},"index.html":{},"unit-test.html":{}}}],["test/.../mock",{"_index":2466,"title":{},"body":{"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["test/utils/mock",{"_index":1094,"title":{},"body":{"interfaces/CreateMockFileReturn.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["test:cov",{"_index":2497,"title":{},"body":{"index.html":{}}}],["test:e2e",{"_index":2496,"title":{},"body":{"index.html":{}}}],["tests",{"_index":2494,"title":{},"body":{"index.html":{}}}],["text",{"_index":539,"title":{},"body":{"entities/ChatMessageEntity.html":{},"classes/ChatReceiveMessageDto.html":{},"classes/CreateChatMessageDto.html":{},"miscellaneous/enumerations.html":{}}}],["then((data",{"_index":684,"title":{},"body":{"injectables/ChatMessagesService.html":{},"injectables/ChatParticipantsService.html":{},"injectables/ChatsService.html":{},"injectables/FilesService.html":{},"injectables/NotificationsService.html":{},"injectables/UsersService.html":{}}}],["this.allowedtypes",{"_index":1244,"title":{},"body":{"injectables/FileValidationPipe.html":{}}}],["this.allowedtypes.includes(value.mimetype",{"_index":1246,"title":{},"body":{"injectables/FileValidationPipe.html":{}}}],["this.asc",{"_index":1438,"title":{},"body":{"classes/FindManyOptionsDto.html":{}}}],["this.authservice.createtoken(data",{"_index":283,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.authservice.createuser(data",{"_index":285,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.authservice.generatetokens(user",{"_index":301,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.authservice.resetpassword(data",{"_index":305,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.authservice.sendresetpassword(data",{"_index":303,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.authservice.updateemail(data",{"_index":316,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.authservice.updatepassword(data",{"_index":314,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.authservice.validateemailcode(data",{"_index":307,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.authservice.validateuser",{"_index":1518,"title":{},"body":{"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{}}}],["this.bucket",{"_index":1932,"title":{},"body":{"injectables/StorageS3Service.html":{}}}],["this.cachemanager.del(id",{"_index":480,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.cachemanager.get(user.id",{"_index":466,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.cachemanager.set(id",{"_index":470,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.chatentityrepository",{"_index":997,"title":{},"body":{"injectables/ChatsService.html":{}}}],["this.chatentityrepository.create(entitylike",{"_index":919,"title":{},"body":{"injectables/ChatsService.html":{}}}],["this.chatentityrepository.createquerybuilder",{"_index":923,"title":{},"body":{"injectables/ChatsService.html":{}}}],["this.chatentityrepository.manager.transaction(async",{"_index":918,"title":{},"body":{"injectables/ChatsService.html":{}}}],["this.chatentityrepository.merge(mergeintoentity",{"_index":1003,"title":{},"body":{"injectables/ChatsService.html":{}}}],["this.chatentityrepository.metadata",{"_index":922,"title":{},"body":{"injectables/ChatsService.html":{}}}],["this.chatentityrepository.remove(entity).catch",{"_index":1004,"title":{},"body":{"injectables/ChatsService.html":{}}}],["this.chatentityrepository.save(entity",{"_index":920,"title":{},"body":{"injectables/ChatsService.html":{}}}],["this.chatmessageentityrepository",{"_index":675,"title":{},"body":{"injectables/ChatMessagesService.html":{}}}],["this.chatmessageentityrepository.create(entitylike",{"_index":624,"title":{},"body":{"injectables/ChatMessagesService.html":{}}}],["this.chatmessageentityrepository.createquerybuilder",{"_index":634,"title":{},"body":{"injectables/ChatMessagesService.html":{}}}],["this.chatmessageentityrepository.manager.transaction(async",{"_index":623,"title":{},"body":{"injectables/ChatMessagesService.html":{}}}],["this.chatmessageentityrepository.merge(mergeintoentity",{"_index":688,"title":{},"body":{"injectables/ChatMessagesService.html":{}}}],["this.chatmessageentityrepository.metadata",{"_index":632,"title":{},"body":{"injectables/ChatMessagesService.html":{}}}],["this.chatmessageentityrepository.remove(entity).catch",{"_index":689,"title":{},"body":{"injectables/ChatMessagesService.html":{}}}],["this.chatmessageentityrepository.save(entity",{"_index":625,"title":{},"body":{"injectables/ChatMessagesService.html":{}}}],["this.chatmessagesservice.createone",{"_index":872,"title":{},"body":{"classes/ChatsGateway.html":{}}}],["this.chatmessagesservice.selectall(options",{"_index":827,"title":{},"body":{"controllers/ChatsController.html":{}}}],["this.chatmessagesservice.selectnewmessagescount(user",{"_index":829,"title":{},"body":{"controllers/ChatsController.html":{}}}],["this.chatmessagesservice.updateone",{"_index":881,"title":{},"body":{"classes/ChatsGateway.html":{}}}],["this.chatparticipantentityrepository",{"_index":726,"title":{},"body":{"injectables/ChatParticipantsService.html":{}}}],["this.chatparticipantentityrepository.create(entitylike",{"_index":725,"title":{},"body":{"injectables/ChatParticipantsService.html":{}}}],["this.chatparticipantentityrepository.createquerybuilder",{"_index":732,"title":{},"body":{"injectables/ChatParticipantsService.html":{}}}],["this.chatparticipantentityrepository.manager.transaction(async",{"_index":724,"title":{},"body":{"injectables/ChatParticipantsService.html":{}}}],["this.chatparticipantentityrepository.merge(mergeintoentity",{"_index":749,"title":{},"body":{"injectables/ChatParticipantsService.html":{}}}],["this.chatparticipantentityrepository.metadata",{"_index":731,"title":{},"body":{"injectables/ChatParticipantsService.html":{}}}],["this.chatparticipantentityrepository.remove(entity).catch",{"_index":751,"title":{},"body":{"injectables/ChatParticipantsService.html":{}}}],["this.chatparticipantentityrepository.save(entity",{"_index":750,"title":{},"body":{"injectables/ChatParticipantsService.html":{}}}],["this.chatparticipantsservice.selectids",{"_index":871,"title":{},"body":{"classes/ChatsGateway.html":{}}}],["this.chatparticipantsservice.selectone",{"_index":826,"title":{},"body":{"controllers/ChatsController.html":{},"classes/ChatsGateway.html":{}}}],["this.chatsservice.createone",{"_index":818,"title":{},"body":{"controllers/ChatsController.html":{}}}],["this.chatsservice.deleteone(conditions",{"_index":824,"title":{},"body":{"controllers/ChatsController.html":{}}}],["this.chatsservice.selectall(options",{"_index":820,"title":{},"body":{"controllers/ChatsController.html":{}}}],["this.chatsservice.selectone",{"_index":817,"title":{},"body":{"controllers/ChatsController.html":{}}}],["this.chatsservice.selectonebyparticipants([user.id",{"_index":815,"title":{},"body":{"controllers/ChatsController.html":{}}}],["this.chatsservice.selectoneeager(entitylike.chat",{"_index":873,"title":{},"body":{"classes/ChatsGateway.html":{}}}],["this.chatsservice.update",{"_index":628,"title":{},"body":{"injectables/ChatMessagesService.html":{}}}],["this.configservice.get('aws_s3_bucket",{"_index":1933,"title":{},"body":{"injectables/StorageS3Service.html":{}}}],["this.configservice.get('jwt_expires_access_token",{"_index":425,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.configservice.get('jwt_expires_refresh_token",{"_index":423,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.configservice.get('jwt_secret_access_token",{"_index":429,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.configservice.get('jwt_secret_refresh_token",{"_index":427,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.configservice.get('redis_host",{"_index":133,"title":{},"body":{"controllers/AppController.html":{}}}],["this.configservice.get('redis_password",{"_index":138,"title":{},"body":{"controllers/AppController.html":{}}}],["this.configservice.get('redis_port",{"_index":135,"title":{},"body":{"controllers/AppController.html":{}}}],["this.configservice.get('redis_tls",{"_index":136,"title":{},"body":{"controllers/AppController.html":{}}}],["this.configservice.get('store_mime_type",{"_index":1245,"title":{},"body":{"injectables/FileValidationPipe.html":{}}}],["this.configservice.getdest('store_dest",{"_index":110,"title":{},"body":{"controllers/AppController.html":{},"injectables/StorageService.html":{}}}],["this.createasyncoptionsprovider(options",{"_index":1559,"title":{},"body":{"modules/MultipartModule.html":{}}}],["this.createasyncproviders(options",{"_index":1556,"title":{},"body":{"modules/MultipartModule.html":{}}}],["this.createmany",{"_index":1688,"title":{},"body":{"injectables/NotificationsService.html":{}}}],["this.createmany(users.map((user",{"_index":1682,"title":{},"body":{"injectables/NotificationsService.html":{}}}],["this.createone",{"_index":2140,"title":{},"body":{"injectables/UserRefreshTokensService.html":{}}}],["this.createone(data",{"_index":1697,"title":{},"body":{"injectables/NotificationsService.html":{}}}],["this.deleteone(filename",{"_index":1951,"title":{},"body":{"injectables/StorageS3Service.html":{},"injectables/StorageService.html":{}}}],["this.desc",{"_index":1440,"title":{},"body":{"classes/FindManyOptionsDto.html":{}}}],["this.destination",{"_index":1979,"title":{},"body":{"injectables/StorageService.html":{}}}],["this.disk.checkstorage('disk",{"_index":119,"title":{},"body":{"controllers/AppController.html":{}}}],["this.eager",{"_index":1457,"title":{},"body":{"classes/FindOneOptionsDto.html":{}}}],["this.expiresinaccesstoken",{"_index":424,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.expiresinrefreshtoken",{"_index":422,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.fileentityrepository.create(mergeintoentity",{"_index":1318,"title":{},"body":{"injectables/FilesService.html":{}}}],["this.fileentityrepository.createquerybuilder",{"_index":1324,"title":{},"body":{"injectables/FilesService.html":{}}}],["this.fileentityrepository.manager.transaction(async",{"_index":1316,"title":{},"body":{"injectables/FilesService.html":{}}}],["this.fileentityrepository.merge(entitylike",{"_index":1319,"title":{},"body":{"injectables/FilesService.html":{}}}],["this.fileentityrepository.merge(mergeintoentity",{"_index":1339,"title":{},"body":{"injectables/FilesService.html":{}}}],["this.fileentityrepository.metadata",{"_index":1323,"title":{},"body":{"injectables/FilesService.html":{}}}],["this.fileentityrepository.remove(entity",{"_index":1341,"title":{},"body":{"injectables/FilesService.html":{}}}],["this.fileentityrepository.save(entity",{"_index":1320,"title":{},"body":{"injectables/FilesService.html":{}}}],["this.filesize",{"_index":1222,"title":{},"body":{"entities/FileEntity.html":{},"classes/FileEntityPreview.html":{}}}],["this.filesservice.createone(file",{"_index":1282,"title":{},"body":{"controllers/FilesController.html":{}}}],["this.filesservice.deleteone",{"_index":1290,"title":{},"body":{"controllers/FilesController.html":{}}}],["this.filesservice.downloadone(rep",{"_index":1292,"title":{},"body":{"controllers/FilesController.html":{}}}],["this.filesservice.selectall(options",{"_index":1285,"title":{},"body":{"controllers/FilesController.html":{}}}],["this.filesservice.selectone",{"_index":1287,"title":{},"body":{"controllers/FilesController.html":{}}}],["this.filesservice.updateone(file",{"_index":1289,"title":{},"body":{"controllers/FilesController.html":{}}}],["this.find",{"_index":671,"title":{},"body":{"injectables/ChatMessagesService.html":{},"injectables/ChatParticipantsService.html":{},"injectables/ChatsService.html":{},"injectables/FilesService.html":{},"injectables/NotificationsService.html":{},"injectables/UserNotificationTokensService.html":{},"injectables/UserRefreshTokensService.html":{},"injectables/UsersService.html":{}}}],["this.find(instancetoplain(options",{"_index":662,"title":{},"body":{"injectables/ChatMessagesService.html":{},"injectables/ChatParticipantsService.html":{},"injectables/NotificationsService.html":{},"injectables/UserNotificationTokensService.html":{},"injectables/UserRefreshTokensService.html":{}}}],["this.find(instancetoplain(options)).andwhere(options.wherebrackets",{"_index":953,"title":{},"body":{"injectables/ChatsService.html":{}}}],["this.find(options",{"_index":1327,"title":{},"body":{"injectables/FilesService.html":{},"injectables/UsersService.html":{}}}],["this.generateaccesstoken(user",{"_index":437,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.generatecode",{"_index":469,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.generatename",{"_index":1944,"title":{},"body":{"injectables/StorageS3Service.html":{},"injectables/StorageService.html":{}}}],["this.generatenotificationprops(data",{"_index":1687,"title":{},"body":{"injectables/NotificationsService.html":{}}}],["this.generatenotificationprops(entity",{"_index":1693,"title":{},"body":{"injectables/NotificationsService.html":{}}}],["this.generaterefreshtoken(user",{"_index":438,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.generatetokens(user",{"_index":451,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.get(key",{"_index":1052,"title":{},"body":{"injectables/ConfigService.html":{}}}],["this.handleerror(client",{"_index":1837,"title":{},"body":{"classes/SocketsExceptionFilter.html":{}}}],["this.health.check",{"_index":118,"title":{},"body":{"controllers/AppController.html":{}}}],["this.id",{"_index":1226,"title":{},"body":{"entities/FileEntity.html":{},"classes/FileEntityPreview.html":{}}}],["this.jwtservice.sign(payload",{"_index":432,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.jwtservice.verify(token",{"_index":1858,"title":{},"body":{"classes/SocketsGateway.html":{}}}],["this.logger.error",{"_index":61,"title":{},"body":{"classes/AllExceptionFilter.html":{}}}],["this.logger.error(error",{"_index":1825,"title":{},"body":{"injectables/SendMailService.html":{}}}],["this.mailerservice.sendmail(data).catch((error",{"_index":1824,"title":{},"body":{"injectables/SendMailService.html":{}}}],["this.memory.checkheap('memory_heap",{"_index":123,"title":{},"body":{"controllers/AppController.html":{}}}],["this.memory.checkrss('memory_rss",{"_index":126,"title":{},"body":{"controllers/AppController.html":{}}}],["this.microservice.pingcheck('redis",{"_index":129,"title":{},"body":{"controllers/AppController.html":{}}}],["this.notificationentityrepository.create(entitieslike",{"_index":1660,"title":{},"body":{"injectables/NotificationsService.html":{}}}],["this.notificationentityrepository.create(entitylike",{"_index":1663,"title":{},"body":{"injectables/NotificationsService.html":{}}}],["this.notificationentityrepository.createquerybuilder",{"_index":1667,"title":{},"body":{"injectables/NotificationsService.html":{}}}],["this.notificationentityrepository.manager.transaction((transactionalentitymanager",{"_index":1673,"title":{},"body":{"injectables/NotificationsService.html":{}}}],["this.notificationentityrepository.manager.transaction(async",{"_index":1659,"title":{},"body":{"injectables/NotificationsService.html":{}}}],["this.notificationentityrepository.merge(mergeintoentity",{"_index":1676,"title":{},"body":{"injectables/NotificationsService.html":{}}}],["this.notificationentityrepository.metadata",{"_index":1666,"title":{},"body":{"injectables/NotificationsService.html":{}}}],["this.notificationentityrepository.remove(entity",{"_index":1677,"title":{},"body":{"injectables/NotificationsService.html":{}}}],["this.notificationentityrepository.save(entities",{"_index":1661,"title":{},"body":{"injectables/NotificationsService.html":{}}}],["this.notificationentityrepository.save(entity",{"_index":1664,"title":{},"body":{"injectables/NotificationsService.html":{}}}],["this.notificationsservice.deleteone",{"_index":1609,"title":{},"body":{"controllers/NotificationsController.html":{}}}],["this.notificationsservice.selectall(options",{"_index":1606,"title":{},"body":{"controllers/NotificationsController.html":{}}}],["this.notificationsservice.selectone",{"_index":1607,"title":{},"body":{"controllers/NotificationsController.html":{}}}],["this.notificationsservice.sendandcreateoneforone",{"_index":1605,"title":{},"body":{"controllers/NotificationsController.html":{}}}],["this.notificationsservice.updateone",{"_index":1608,"title":{},"body":{"controllers/NotificationsController.html":{}}}],["this.options",{"_index":1982,"title":{},"body":{"injectables/StorageService.html":{}}}],["this.page",{"_index":1445,"title":{},"body":{"classes/FindManyOptionsDto.html":{}}}],["this.password",{"_index":2054,"title":{},"body":{"entities/UserEntity.html":{}}}],["this.path",{"_index":120,"title":{},"body":{"controllers/AppController.html":{}}}],["this.reflector.get('roles",{"_index":1489,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["this.s3",{"_index":1931,"title":{},"body":{"injectables/StorageS3Service.html":{}}}],["this.s3.headobject",{"_index":1942,"title":{},"body":{"injectables/StorageS3Service.html":{}}}],["this.s3.upload",{"_index":1941,"title":{},"body":{"injectables/StorageS3Service.html":{}}}],["this.secretaccesstoken",{"_index":428,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.secretrefreshtoken",{"_index":426,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.selectallstats(rows",{"_index":987,"title":{},"body":{"injectables/ChatsService.html":{}}}],["this.selectheadone",{"_index":1948,"title":{},"body":{"injectables/StorageS3Service.html":{}}}],["this.selection",{"_index":1455,"title":{},"body":{"classes/FindOneOptionsDto.html":{}}}],["this.selectone",{"_index":630,"title":{},"body":{"injectables/ChatMessagesService.html":{},"injectables/ChatParticipantsService.html":{},"injectables/ChatsService.html":{},"injectables/NotificationsService.html":{},"injectables/UsersService.html":{}}}],["this.selectone(conditions",{"_index":687,"title":{},"body":{"injectables/ChatMessagesService.html":{},"injectables/ChatParticipantsService.html":{},"injectables/ChatsService.html":{},"injectables/FilesService.html":{},"injectables/NotificationsService.html":{},"injectables/UserNotificationTokensService.html":{},"injectables/UserRefreshTokensService.html":{},"injectables/UsersService.html":{}}}],["this.selectonestats(data",{"_index":996,"title":{},"body":{"injectables/ChatsService.html":{}}}],["this.sendmailservice.sendtemplatedemail",{"_index":471,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.server.to(socketsids).emit",{"_index":876,"title":{},"body":{"classes/ChatsGateway.html":{}}}],["this.socketsservice.addone(id",{"_index":1860,"title":{},"body":{"classes/SocketsGateway.html":{}}}],["this.socketsservice.removeone(id",{"_index":1865,"title":{},"body":{"classes/SocketsGateway.html":{}}}],["this.socketsservice.selectallids(participantsids",{"_index":875,"title":{},"body":{"classes/ChatsGateway.html":{}}}],["this.storageservice.createone(file",{"_index":1338,"title":{},"body":{"injectables/FilesService.html":{}}}],["this.storageservice.createone(multipart",{"_index":1317,"title":{},"body":{"injectables/FilesService.html":{}}}],["this.storageservice.deleteone(entity.filename",{"_index":1340,"title":{},"body":{"injectables/FilesService.html":{}}}],["this.storageservice.deleteone(entitylike.filename",{"_index":1321,"title":{},"body":{"injectables/FilesService.html":{}}}],["this.storageservice.selectone",{"_index":1356,"title":{},"body":{"injectables/FilesService.html":{}}}],["this.take",{"_index":1444,"title":{},"body":{"classes/FindManyOptionsDto.html":{}}}],["this.title",{"_index":1224,"title":{},"body":{"entities/FileEntity.html":{},"classes/FileEntityPreview.html":{}}}],["this.typeorm.pingcheck('database",{"_index":128,"title":{},"body":{"controllers/AppController.html":{}}}],["this.updateall",{"_index":666,"title":{},"body":{"injectables/ChatMessagesService.html":{},"injectables/NotificationsService.html":{}}}],["this.uploadone",{"_index":1945,"title":{},"body":{"injectables/StorageS3Service.html":{}}}],["this.userentityrepository.create(entitylike",{"_index":2186,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.userentityrepository.createquerybuilder",{"_index":2190,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.userentityrepository.manager.transaction(async",{"_index":2185,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.userentityrepository.merge(mergeintoentity",{"_index":2201,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.userentityrepository.metadata",{"_index":2189,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.userentityrepository.remove(entity",{"_index":2202,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.userentityrepository.save(entity",{"_index":2187,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.usernotificationtokenentityrepository",{"_index":2109,"title":{},"body":{"injectables/UserNotificationTokensService.html":{}}}],["this.usernotificationtokenentityrepository.create(entitylike",{"_index":2105,"title":{},"body":{"injectables/UserNotificationTokensService.html":{}}}],["this.usernotificationtokenentityrepository.manager.transaction(async",{"_index":2104,"title":{},"body":{"injectables/UserNotificationTokensService.html":{}}}],["this.usernotificationtokenentityrepository.merge(mergeintoentity",{"_index":2114,"title":{},"body":{"injectables/UserNotificationTokensService.html":{}}}],["this.usernotificationtokenentityrepository.metadata",{"_index":2108,"title":{},"body":{"injectables/UserNotificationTokensService.html":{}}}],["this.usernotificationtokenentityrepository.remove(entity",{"_index":2115,"title":{},"body":{"injectables/UserNotificationTokensService.html":{}}}],["this.usernotificationtokenentityrepository.save(entity",{"_index":2106,"title":{},"body":{"injectables/UserNotificationTokensService.html":{}}}],["this.usernotificationtokensservice",{"_index":1698,"title":{},"body":{"injectables/NotificationsService.html":{}}}],["this.usernotificationtokensservice.createone",{"_index":2086,"title":{},"body":{"controllers/UserNotificationTokensController.html":{}}}],["this.usernotificationtokensservice.deleteone",{"_index":2090,"title":{},"body":{"controllers/UserNotificationTokensController.html":{}}}],["this.usernotificationtokensservice.selectall(options",{"_index":2087,"title":{},"body":{"controllers/UserNotificationTokensController.html":{}}}],["this.usernotificationtokensservice.selectone",{"_index":2088,"title":{},"body":{"controllers/UserNotificationTokensController.html":{}}}],["this.usernotificationtokensservice.updateone",{"_index":2089,"title":{},"body":{"controllers/UserNotificationTokensController.html":{}}}],["this.userrefreshtokenentityrepository",{"_index":2146,"title":{},"body":{"injectables/UserRefreshTokensService.html":{}}}],["this.userrefreshtokenentityrepository.create(entitylike",{"_index":2142,"title":{},"body":{"injectables/UserRefreshTokensService.html":{}}}],["this.userrefreshtokenentityrepository.manager.transaction(async",{"_index":2141,"title":{},"body":{"injectables/UserRefreshTokensService.html":{}}}],["this.userrefreshtokenentityrepository.merge(mergeintoentity",{"_index":2149,"title":{},"body":{"injectables/UserRefreshTokensService.html":{}}}],["this.userrefreshtokenentityrepository.metadata",{"_index":2145,"title":{},"body":{"injectables/UserRefreshTokensService.html":{}}}],["this.userrefreshtokenentityrepository.remove(entity).catch",{"_index":2150,"title":{},"body":{"injectables/UserRefreshTokensService.html":{}}}],["this.userrefreshtokenentityrepository.save(entity",{"_index":2143,"title":{},"body":{"injectables/UserRefreshTokensService.html":{}}}],["this.userrefreshtokensservice.deleteone",{"_index":291,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.userrefreshtokensservice.generateandcreateone",{"_index":299,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["this.usersservice",{"_index":458,"title":{},"body":{"injectables/AuthService.html":{},"injectables/NotificationsService.html":{}}}],["this.usersservice.createone(data",{"_index":452,"title":{},"body":{"injectables/AuthService.html":{},"controllers/UsersController.html":{}}}],["this.usersservice.deleteone(conditions",{"_index":2167,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.usersservice.selectall(options",{"_index":2164,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.usersservice.selectone",{"_index":310,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/SocketsGateway.html":{}}}],["this.usersservice.selectone(conditions",{"_index":2165,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.usersservice.selectone(data",{"_index":468,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.usersservice.updateone",{"_index":312,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["this.usersservice.updateone(conditions",{"_index":2166,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.userssockets[userid",{"_index":1895,"title":{},"body":{"injectables/SocketsService.html":{}}}],["this.userssockets[userid][socketid",{"_index":1900,"title":{},"body":{"injectables/SocketsService.html":{}}}],["this.validateemailcode(data",{"_index":477,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.validatepassword(data.oldpassword",{"_index":482,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.validatepassword(data.password",{"_index":478,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.validatepassword(password",{"_index":447,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.validateuser",{"_index":446,"title":{},"body":{"injectables/AuthService.html":{}}}],["thresholdpercent",{"_index":121,"title":{},"body":{"controllers/AppController.html":{}}}],["throttlerguard",{"_index":162,"title":{},"body":{"modules/AppModule.html":{}}}],["throttlermodule",{"_index":163,"title":{},"body":{"modules/AppModule.html":{}}}],["throttlermodule.forrootasync",{"_index":179,"title":{},"body":{"modules/AppModule.html":{}}}],["through",{"_index":2417,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["throw",{"_index":449,"title":{},"body":{"injectables/AuthService.html":{},"injectables/ChatMessagesService.html":{},"injectables/ChatParticipantsService.html":{},"injectables/ChatsService.html":{},"injectables/ConfigService.html":{},"injectables/FileValidationPipe.html":{},"injectables/FilesService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtRefreshGuard.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/NotificationsService.html":{},"injectables/SendMailService.html":{},"injectables/StorageS3Service.html":{},"injectables/StorageService.html":{},"injectables/UserNotificationTokensService.html":{},"injectables/UserRefreshTokensService.html":{},"injectables/UsersService.html":{},"miscellaneous/variables.html":{}}}],["timestamptz",{"_index":497,"title":{},"body":{"entities/ChatEntity.html":{},"entities/ChatMessageEntity.html":{},"entities/ChatParticipantEntity.html":{},"entities/FileEntity.html":{},"classes/FileEntityPreview.html":{},"entities/NotificationEntity.html":{},"entities/UserEntity.html":{},"entities/UserNotificationTokenEntity.html":{},"entities/UserRefreshTokenEntity.html":{}}}],["timingsafeequal(keybuffer",{"_index":2563,"title":{},"body":{"miscellaneous/variables.html":{}}}],["title",{"_index":1117,"title":{},"body":{"classes/CreateNotificationDto.html":{},"entities/FileEntity.html":{},"classes/FileEntityPreview.html":{},"injectables/FilesService.html":{},"entities/NotificationEntity.html":{},"injectables/NotificationsService.html":{},"classes/SelectFilesDto.html":{},"injectables/StorageS3Service.html":{},"injectables/StorageService.html":{},"classes/UploadedFile.html":{}}}],["title.enum.ts",{"_index":2344,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["tls",{"_index":139,"title":{},"body":{"controllers/AppController.html":{},"modules/AuthModule.html":{}}}],["tlsoptions",{"_index":1155,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["toclassonly",{"_index":1220,"title":{},"body":{"entities/FileEntity.html":{},"classes/FileEntityPreview.html":{}}}],["todo",{"_index":863,"title":{},"body":{"classes/ChatsGateway.html":{},"classes/SocketsGateway.html":{}}}],["token",{"_index":436,"title":{},"body":{"injectables/AuthService.html":{},"classes/CreateUserNotificationTokenDto.html":{},"classes/DeleteUserNotificationTokenDto.html":{},"classes/JwtAccessTokenPayloadDto.html":{},"injectables/JwtRefreshGuard.html":{},"classes/JwtRefreshTokenDto.html":{},"classes/JwtRefreshTokenPayloadDto.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"classes/JwtTokensDto.html":{},"injectables/NotificationsService.html":{},"classes/SocketsGateway.html":{},"entities/UserNotificationTokenEntity.html":{}}}],["token.dto",{"_index":1186,"title":{},"body":{"classes/DeleteUserNotificationTokenDto.html":{},"classes/UpdateUserNotificationTokenDto.html":{}}}],["token.dto.ts",{"_index":1146,"title":{},"body":{"classes/CreateUserNotificationTokenDto.html":{},"classes/DeleteUserNotificationTokenDto.html":{},"classes/SelectUserNotificationTokenDto.html":{},"classes/UpdateUserNotificationTokenDto.html":{},"coverage.html":{}}}],["token.dto.ts:13",{"_index":1149,"title":{},"body":{"classes/CreateUserNotificationTokenDto.html":{}}}],["token.entity",{"_index":2050,"title":{},"body":{"entities/UserEntity.html":{}}}],["token.entity.ts",{"_index":2063,"title":{},"body":{"entities/UserNotificationTokenEntity.html":{},"entities/UserRefreshTokenEntity.html":{},"coverage.html":{}}}],["token.entity.ts:24",{"_index":2065,"title":{},"body":{"entities/UserNotificationTokenEntity.html":{},"entities/UserRefreshTokenEntity.html":{}}}],["token.entity.ts:31",{"_index":2067,"title":{},"body":{"entities/UserNotificationTokenEntity.html":{}}}],["token.entity.ts:32",{"_index":2119,"title":{},"body":{"entities/UserRefreshTokenEntity.html":{}}}],["token.entity.ts:41",{"_index":2117,"title":{},"body":{"entities/UserRefreshTokenEntity.html":{}}}],["token.entity.ts:42",{"_index":2066,"title":{},"body":{"entities/UserNotificationTokenEntity.html":{}}}],["token.entity.ts:51",{"_index":2116,"title":{},"body":{"entities/UserRefreshTokenEntity.html":{}}}],["token.entity.ts:52",{"_index":2064,"title":{},"body":{"entities/UserNotificationTokenEntity.html":{}}}],["token.entity.ts:61",{"_index":2120,"title":{},"body":{"entities/UserRefreshTokenEntity.html":{}}}],["token.entity.ts:62",{"_index":2068,"title":{},"body":{"entities/UserNotificationTokenEntity.html":{}}}],["tokens",{"_index":296,"title":{},"body":{"controllers/AuthController.html":{},"injectables/NotificationsService.html":{},"controllers/UserNotificationTokensController.html":{}}}],["tokens')@useguards(jwtrefreshguard)@apibody({type",{"_index":234,"title":{},"body":{"controllers/AuthController.html":{}}}],["tokens.controller.ts",{"_index":2072,"title":{},"body":{"controllers/UserNotificationTokensController.html":{},"coverage.html":{}}}],["tokens.controller.ts:109",{"_index":2079,"title":{},"body":{"controllers/UserNotificationTokensController.html":{}}}],["tokens.controller.ts:121",{"_index":2077,"title":{},"body":{"controllers/UserNotificationTokensController.html":{}}}],["tokens.controller.ts:52",{"_index":2076,"title":{},"body":{"controllers/UserNotificationTokensController.html":{}}}],["tokens.controller.ts:64",{"_index":2080,"title":{},"body":{"controllers/UserNotificationTokensController.html":{}}}],["tokens.controller.ts:76",{"_index":2081,"title":{},"body":{"controllers/UserNotificationTokensController.html":{}}}],["tokens.controller.ts:93",{"_index":2082,"title":{},"body":{"controllers/UserNotificationTokensController.html":{}}}],["tokens.dto.ts",{"_index":1467,"title":{},"body":{"classes/JwtAccessTokenPayloadDto.html":{},"classes/JwtRefreshTokenDto.html":{},"classes/JwtRefreshTokenPayloadDto.html":{},"classes/JwtTokensDto.html":{},"classes/PaginationUserNotificationTokensDto.html":{},"classes/SelectUserNotificationTokensDto.html":{},"coverage.html":{}}}],["tokens.dto.ts:10",{"_index":1724,"title":{},"body":{"classes/PaginationUserNotificationTokensDto.html":{}}}],["tokens.dto.ts:11",{"_index":1527,"title":{},"body":{"classes/JwtTokensDto.html":{}}}],["tokens.dto.ts:17",{"_index":1526,"title":{},"body":{"classes/JwtTokensDto.html":{}}}],["tokens.dto.ts:32",{"_index":1468,"title":{},"body":{"classes/JwtAccessTokenPayloadDto.html":{}}}],["tokens.dto.ts:37",{"_index":1469,"title":{},"body":{"classes/JwtAccessTokenPayloadDto.html":{}}}],["tokens.dto.ts:47",{"_index":1499,"title":{},"body":{"classes/JwtRefreshTokenPayloadDto.html":{}}}],["tokens.service.ts",{"_index":2092,"title":{},"body":{"injectables/UserNotificationTokensService.html":{},"injectables/UserRefreshTokensService.html":{},"coverage.html":{}}}],["tokens.service.ts:100",{"_index":2101,"title":{},"body":{"injectables/UserNotificationTokensService.html":{},"injectables/UserRefreshTokensService.html":{}}}],["tokens.service.ts:117",{"_index":2134,"title":{},"body":{"injectables/UserRefreshTokensService.html":{}}}],["tokens.service.ts:119",{"_index":2097,"title":{},"body":{"injectables/UserNotificationTokensService.html":{}}}],["tokens.service.ts:136",{"_index":2129,"title":{},"body":{"injectables/UserRefreshTokensService.html":{}}}],["tokens.service.ts:23",{"_index":2095,"title":{},"body":{"injectables/UserNotificationTokensService.html":{}}}],["tokens.service.ts:25",{"_index":2127,"title":{},"body":{"injectables/UserRefreshTokensService.html":{}}}],["tokens.service.ts:30",{"_index":2103,"title":{},"body":{"injectables/UserNotificationTokensService.html":{}}}],["tokens.service.ts:32",{"_index":2136,"title":{},"body":{"injectables/UserRefreshTokensService.html":{}}}],["tokens.service.ts:38",{"_index":2096,"title":{},"body":{"injectables/UserNotificationTokensService.html":{}}}],["tokens.service.ts:40",{"_index":2132,"title":{},"body":{"injectables/UserRefreshTokensService.html":{}}}],["tokens.service.ts:54",{"_index":2098,"title":{},"body":{"injectables/UserNotificationTokensService.html":{}}}],["tokens.service.ts:55",{"_index":2128,"title":{},"body":{"injectables/UserRefreshTokensService.html":{}}}],["tokens.service.ts:69",{"_index":2099,"title":{},"body":{"injectables/UserNotificationTokensService.html":{}}}],["tokens.service.ts:71",{"_index":2130,"title":{},"body":{"injectables/UserRefreshTokensService.html":{}}}],["tokens.service.ts:83",{"_index":2100,"title":{},"body":{"injectables/UserNotificationTokensService.html":{}}}],["tokens.service.ts:86",{"_index":2133,"title":{},"body":{"injectables/UserRefreshTokensService.html":{}}}],["toplainonly",{"_index":1436,"title":{},"body":{"classes/FindManyOptionsDto.html":{},"classes/FindOneOptionsDto.html":{}}}],["total",{"_index":1706,"title":{},"body":{"classes/PaginationChatMessagesDto.html":{},"classes/PaginationChatParticipantsDto.html":{},"classes/PaginationChatsDto.html":{},"classes/PaginationFilesDto.html":{}}}],["transaction",{"_index":595,"title":{},"body":{"injectables/ChatMessagesService.html":{},"injectables/ChatParticipantsService.html":{},"injectables/ChatsService.html":{},"injectables/FilesService.html":{},"injectables/NotificationsService.html":{},"injectables/UserNotificationTokensService.html":{},"injectables/UserRefreshTokensService.html":{},"injectables/UsersService.html":{}}}],["transactionalentitymanager.update(notificationentity",{"_index":1674,"title":{},"body":{"injectables/NotificationsService.html":{}}}],["transform",{"_index":521,"title":{},"body":{"entities/ChatEntity.html":{},"injectables/FileValidationPipe.html":{},"classes/FindManyOptionsDto.html":{},"classes/FindOneOptionsDto.html":{},"classes/SelectChatsDto.html":{},"classes/SocketsGateway.html":{},"entities/UserEntity.html":{},"miscellaneous/variables.html":{}}}],["transform(value",{"_index":1239,"title":{},"body":{"injectables/FileValidationPipe.html":{}}}],["transformer",{"_index":522,"title":{},"body":{"entities/ChatEntity.html":{},"injectables/ChatMessagesService.html":{},"injectables/ChatParticipantsService.html":{},"classes/ChatsGateway.html":{},"injectables/ChatsService.html":{},"classes/CreateUserDto.html":{},"entities/FileEntity.html":{},"classes/FileEntityPreview.html":{},"injectables/FilesService.html":{},"classes/FindManyOptionsDto.html":{},"classes/FindOneOptionsDto.html":{},"injectables/NotificationsService.html":{},"classes/SelectChatsDto.html":{},"entities/UserEntity.html":{},"injectables/UserNotificationTokensService.html":{},"entities/UserRefreshTokenEntity.html":{},"injectables/UserRefreshTokensService.html":{},"injectables/UsersService.html":{},"dependencies.html":{}}}],["transforminterceptor",{"_index":1740,"title":{"injectables/TransformInterceptor.html":{}},"body":{"interfaces/Response.html":{},"injectables/TransformInterceptor.html":{},"coverage.html":{}}}],["transformoptions",{"_index":2637,"title":{},"body":{"miscellaneous/variables.html":{}}}],["transport",{"_index":92,"title":{},"body":{"controllers/AppController.html":{},"modules/SendMailModule.html":{}}}],["transport.redis",{"_index":130,"title":{},"body":{"controllers/AppController.html":{}}}],["transports",{"_index":865,"title":{},"body":{"classes/ChatsGateway.html":{},"classes/SocketsGateway.html":{}}}],["true",{"_index":455,"title":{},"body":{"injectables/AuthService.html":{},"entities/ChatEntity.html":{},"entities/ChatMessageEntity.html":{},"injectables/ChatMessagesService.html":{},"entities/ChatParticipantEntity.html":{},"injectables/ChatParticipantsService.html":{},"controllers/ChatsController.html":{},"injectables/ChatsService.html":{},"entities/FileEntity.html":{},"classes/FileEntityPreview.html":{},"classes/FindManyOptionsDto.html":{},"classes/FindOneOptionsDto.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"entities/NotificationEntity.html":{},"injectables/NotificationsService.html":{},"modules/SendMailModule.html":{},"classes/SocketsGateway.html":{},"injectables/StorageService.html":{},"entities/UserEntity.html":{},"entities/UserNotificationTokenEntity.html":{},"entities/UserRefreshTokenEntity.html":{},"injectables/UsersService.html":{},"miscellaneous/variables.html":{}}}],["true})@apiproperty({maxlength",{"_index":1200,"title":{},"body":{"entities/FileEntity.html":{}}}],["true})@apiproperty({readonly",{"_index":1206,"title":{},"body":{"entities/FileEntity.html":{}}}],["true})@column({type",{"_index":558,"title":{},"body":{"entities/ChatMessageEntity.html":{},"entities/UserEntity.html":{}}}],["true})@createdatecolumn({readonly",{"_index":496,"title":{},"body":{"entities/ChatEntity.html":{},"entities/ChatMessageEntity.html":{},"entities/ChatParticipantEntity.html":{},"entities/FileEntity.html":{},"entities/NotificationEntity.html":{}}}],["true})@createdatecolumn({type",{"_index":2030,"title":{},"body":{"entities/UserEntity.html":{},"entities/UserNotificationTokenEntity.html":{},"entities/UserRefreshTokenEntity.html":{}}}],["true})@deletedatecolumn",{"_index":2032,"title":{},"body":{"entities/UserEntity.html":{}}}],["true})@isnotempty({each",{"_index":1386,"title":{},"body":{"classes/FindManyOptionsDto.html":{},"classes/FindOneOptionsDto.html":{},"classes/SelectChatMessagesDto.html":{},"classes/SelectChatsDto.html":{},"classes/SelectFileDto.html":{},"classes/SelectFilesDto.html":{},"classes/SelectNotificationsDto.html":{},"classes/SelectProfileDto.html":{},"classes/SelectUserDto.html":{},"classes/SelectUserNotificationTokenDto.html":{},"classes/SelectUserNotificationTokensDto.html":{},"classes/SelectUsersDto.html":{}}}],["true})@primarygeneratedcolumn('uuid",{"_index":500,"title":{},"body":{"entities/ChatEntity.html":{},"entities/ChatMessageEntity.html":{},"entities/ChatParticipantEntity.html":{},"entities/FileEntity.html":{},"entities/NotificationEntity.html":{},"entities/UserEntity.html":{},"entities/UserNotificationTokenEntity.html":{},"entities/UserRefreshTokenEntity.html":{}}}],["true})@transform",{"_index":1387,"title":{},"body":{"classes/FindManyOptionsDto.html":{},"classes/FindOneOptionsDto.html":{},"classes/SelectChatMessagesDto.html":{},"classes/SelectChatsDto.html":{},"classes/SelectFileDto.html":{},"classes/SelectFilesDto.html":{},"classes/SelectNotificationsDto.html":{},"classes/SelectProfileDto.html":{},"classes/SelectUserDto.html":{},"classes/SelectUserNotificationTokenDto.html":{},"classes/SelectUserNotificationTokensDto.html":{},"classes/SelectUsersDto.html":{}}}],["true})@updatedatecolumn({readonly",{"_index":1213,"title":{},"body":{"entities/FileEntity.html":{},"entities/NotificationEntity.html":{}}}],["true})@updatedatecolumn({type",{"_index":518,"title":{},"body":{"entities/ChatEntity.html":{},"entities/ChatMessageEntity.html":{},"entities/ChatParticipantEntity.html":{},"entities/UserEntity.html":{},"entities/UserNotificationTokenEntity.html":{},"entities/UserRefreshTokenEntity.html":{}}}],["try",{"_index":1056,"title":{},"body":{"injectables/ConfigService.html":{},"classes/SocketsGateway.html":{},"injectables/StorageS3Service.html":{},"injectables/StorageService.html":{}}}],["ttl",{"_index":182,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{}}}],["turned",{"_index":2057,"title":{},"body":{"entities/UserEntity.html":{}}}],["two",{"_index":1396,"title":{},"body":{"classes/FindManyOptionsDto.html":{},"classes/SelectChatMessagesDto.html":{},"classes/SelectChatsDto.html":{},"classes/SelectFilesDto.html":{},"classes/SelectNotificationsDto.html":{},"classes/SelectUserNotificationTokensDto.html":{},"classes/SelectUsersDto.html":{}}}],["type",{"_index":17,"title":{},"body":{"classes/AllExceptionFilter.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"entities/ChatEntity.html":{},"entities/ChatMessageEntity.html":{},"injectables/ChatMessagesService.html":{},"entities/ChatParticipantEntity.html":{},"injectables/ChatParticipantsService.html":{},"classes/ChatReadMessageDto.html":{},"classes/ChatReadMessageResponseDto.html":{},"classes/ChatReceiveMessageDto.html":{},"controllers/ChatsController.html":{},"classes/ChatsGateway.html":{},"injectables/ChatsService.html":{},"injectables/ConfigService.html":{},"classes/ConfirmationEmailDto.html":{},"classes/CreateChatDto.html":{},"classes/CreateChatMessageDto.html":{},"classes/CreateFileDto.html":{},"interfaces/CreateMockFileReturn.html":{},"classes/CreateNotificationDto.html":{},"classes/CreateUserDto.html":{},"classes/CreateUserNotificationTokenDto.html":{},"modules/DatabaseModule.html":{},"classes/DeleteUserNotificationTokenDto.html":{},"classes/DownloadFileDto.html":{},"entities/FileEntity.html":{},"classes/FileEntityPreview.html":{},"injectables/FileValidationPipe.html":{},"controllers/FilesController.html":{},"injectables/FilesService.html":{},"interfaces/FindManyBracketsOptions.html":{},"classes/FindManyOptionsDto.html":{},"classes/FindOneOptionsDto.html":{},"classes/HttpExceptionFilter.html":{},"classes/ID.html":{},"classes/JwtAccessTokenPayloadDto.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtRefreshGuard.html":{},"classes/JwtRefreshTokenPayloadDto.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"classes/JwtTokensDto.html":{},"modules/MultipartModule.html":{},"interfaces/MultipartModuleAsyncOptions.html":{},"interfaces/MultipartOptionsFactory.html":{},"entities/NotificationEntity.html":{},"controllers/NotificationsController.html":{},"injectables/NotificationsService.html":{},"classes/PaginationChatMessagesDto.html":{},"classes/PaginationChatParticipantsDto.html":{},"classes/PaginationChatsDto.html":{},"classes/PaginationFilesDto.html":{},"classes/PaginationNotificationsDto.html":{},"classes/PaginationUserNotificationTokensDto.html":{},"classes/PaginationUsersDto.html":{},"classes/ResetPasswordDto.html":{},"interfaces/Response.html":{},"classes/SelectChatMessagesDto.html":{},"classes/SelectChatsDto.html":{},"classes/SelectFileDto.html":{},"classes/SelectFilesDto.html":{},"classes/SelectNotificationsDto.html":{},"classes/SelectProfileDto.html":{},"classes/SelectUserDto.html":{},"classes/SelectUserNotificationTokenDto.html":{},"classes/SelectUserNotificationTokensDto.html":{},"classes/SelectUsersDto.html":{},"injectables/SendMailService.html":{},"classes/SocketsExceptionFilter.html":{},"classes/SocketsGateway.html":{},"injectables/SocketsService.html":{},"injectables/StorageS3Service.html":{},"injectables/StorageService.html":{},"injectables/TransformInterceptor.html":{},"classes/UpdateNotificationDto.html":{},"classes/UpdatePasswordDto.html":{},"classes/UploadedFile.html":{},"entities/UserEntity.html":{},"entities/UserNotificationTokenEntity.html":{},"controllers/UserNotificationTokensController.html":{},"injectables/UserNotificationTokensService.html":{},"entities/UserRefreshTokenEntity.html":{},"injectables/UserRefreshTokensService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"classes/user1615673396368.html":{},"miscellaneous/variables.html":{}}}],["type(mimetype",{"_index":1346,"title":{},"body":{"injectables/FilesService.html":{}}}],["type.enum.ts",{"_index":2338,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["typealiases",{"_index":2512,"title":{"miscellaneous/typealiases.html":{}},"body":{}}],["typedpropertydescriptor",{"_index":2621,"title":{},"body":{"miscellaneous/variables.html":{}}}],["typeerror(`the",{"_index":1055,"title":{},"body":{"injectables/ConfigService.html":{}}}],["typeof",{"_index":2579,"title":{},"body":{"miscellaneous/variables.html":{}}}],["typeorm",{"_index":112,"title":{},"body":{"controllers/AppController.html":{},"injectables/AuthService.html":{},"entities/ChatEntity.html":{},"entities/ChatMessageEntity.html":{},"injectables/ChatMessagesService.html":{},"entities/ChatParticipantEntity.html":{},"injectables/ChatParticipantsService.html":{},"classes/ChatsGateway.html":{},"injectables/ChatsService.html":{},"entities/FileEntity.html":{},"classes/FileEntityPreview.html":{},"injectables/FilesService.html":{},"interfaces/FindManyBracketsOptions.html":{},"classes/FindManyOptionsDto.html":{},"classes/FindOneOptionsDto.html":{},"entities/NotificationEntity.html":{},"injectables/NotificationsService.html":{},"classes/SelectChatsDto.html":{},"classes/SelectFilesDto.html":{},"classes/SelectNotificationsDto.html":{},"classes/SelectUsersDto.html":{},"entities/UserEntity.html":{},"entities/UserNotificationTokenEntity.html":{},"injectables/UserNotificationTokensService.html":{},"entities/UserRefreshTokenEntity.html":{},"injectables/UserRefreshTokensService.html":{},"injectables/UsersService.html":{},"dependencies.html":{},"properties.html":{},"classes/user1615673396368.html":{}}}],["typeormhealthindicator",{"_index":102,"title":{},"body":{"controllers/AppController.html":{}}}],["typeormmodule",{"_index":890,"title":{},"body":{"modules/ChatsModule.html":{},"modules/DatabaseModule.html":{},"modules/FilesModule.html":{},"modules/NotificationsModule.html":{},"modules/UsersModule.html":{}}}],["typeormmodule.forfeature([chatentity",{"_index":893,"title":{},"body":{"modules/ChatsModule.html":{}}}],["typeormmodule.forfeature([fileentity",{"_index":1299,"title":{},"body":{"modules/FilesModule.html":{}}}],["typeormmodule.forfeature([notificationentity",{"_index":1616,"title":{},"body":{"modules/NotificationsModule.html":{}}}],["typeormmodule.forfeature([userentity",{"_index":2172,"title":{},"body":{"modules/UsersModule.html":{}}}],["typeormmodule.forrootasync",{"_index":1157,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["typeormmoduleoptions",{"_index":1153,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["types",{"_index":1029,"title":{},"body":{"injectables/ConfigService.html":{},"injectables/SendMailService.html":{}}}],["udatedat",{"_index":976,"title":{},"body":{"injectables/ChatsService.html":{}}}],["unauthorizedexception",{"_index":1481,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"injectables/JwtRefreshGuard.html":{}}}],["unauthorizedexception(errortypeenum.auth_invalid_refresh_token",{"_index":1498,"title":{},"body":{"injectables/JwtRefreshGuard.html":{}}}],["unauthorizedexception(errortypeenum.auth_invalid_token",{"_index":1486,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["unauthorizedexception(errortypeenum.auth_unauthorized",{"_index":1487,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"injectables/JwtRefreshGuard.html":{}}}],["undefined",{"_index":194,"title":{},"body":{"modules/AppModule.html":{},"injectables/AuthService.html":{},"entities/ChatMessageEntity.html":{},"injectables/ConfigService.html":{},"classes/CreateChatMessageDto.html":{},"injectables/FilesService.html":{},"classes/FindManyOptionsDto.html":{},"classes/FindOneOptionsDto.html":{},"entities/NotificationEntity.html":{},"classes/SelectChatMessagesDto.html":{},"classes/SelectChatsDto.html":{},"classes/SelectFileDto.html":{},"classes/SelectFilesDto.html":{},"classes/SelectNotificationsDto.html":{},"classes/SelectProfileDto.html":{},"classes/SelectUserDto.html":{},"classes/SelectUserNotificationTokenDto.html":{},"classes/SelectUserNotificationTokensDto.html":{},"classes/SelectUsersDto.html":{},"entities/UserEntity.html":{}}}],["undefined})@column({type",{"_index":553,"title":{},"body":{"entities/ChatMessageEntity.html":{},"entities/NotificationEntity.html":{},"entities/UserEntity.html":{}}}],["unique",{"_index":703,"title":{},"body":{"entities/ChatParticipantEntity.html":{},"entities/UserEntity.html":{},"entities/UserNotificationTokenEntity.html":{}}}],["uniqueitems",{"_index":2034,"title":{},"body":{"entities/UserEntity.html":{}}}],["unit",{"_index":2493,"title":{"unit-test.html":{}},"body":{"index.html":{},"unit-test.html":{}}}],["unknown",{"_index":2614,"title":{},"body":{"miscellaneous/variables.html":{}}}],["unlink",{"_index":1974,"title":{},"body":{"injectables/StorageService.html":{}}}],["unlink(filedest).catch",{"_index":1997,"title":{},"body":{"injectables/StorageService.html":{}}}],["unread",{"_index":2400,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["unsupportedmediatypeexception",{"_index":1242,"title":{},"body":{"injectables/FileValidationPipe.html":{}}}],["unsupportedmediatypeexception(errortypeenum.file_unsupported_type",{"_index":1247,"title":{},"body":{"injectables/FileValidationPipe.html":{}}}],["up",{"_index":2481,"title":{},"body":{"index.html":{},"classes/user1615673396368.html":{}}}],["up(undefined",{"_index":2529,"title":{},"body":{"classes/user1615673396368.html":{}}}],["update",{"_index":898,"title":{},"body":{"injectables/ChatsService.html":{}}}],["update(conditions",{"_index":683,"title":{},"body":{"injectables/ChatMessagesService.html":{},"injectables/ChatsService.html":{}}}],["updateall",{"_index":584,"title":{},"body":{"injectables/ChatMessagesService.html":{},"injectables/NotificationsService.html":{}}}],["updateall(conditions",{"_index":609,"title":{},"body":{"injectables/ChatMessagesService.html":{},"injectables/NotificationsService.html":{}}}],["updatedat",{"_index":493,"title":{},"body":{"entities/ChatEntity.html":{},"entities/ChatMessageEntity.html":{},"entities/ChatParticipantEntity.html":{},"entities/FileEntity.html":{},"classes/FileEntityPreview.html":{},"entities/NotificationEntity.html":{},"entities/UserEntity.html":{},"entities/UserNotificationTokenEntity.html":{},"entities/UserRefreshTokenEntity.html":{}}}],["updatedatecolumn",{"_index":525,"title":{},"body":{"entities/ChatEntity.html":{},"entities/ChatMessageEntity.html":{},"entities/ChatParticipantEntity.html":{},"entities/FileEntity.html":{},"classes/FileEntityPreview.html":{},"entities/NotificationEntity.html":{},"entities/UserEntity.html":{},"entities/UserNotificationTokenEntity.html":{},"entities/UserRefreshTokenEntity.html":{}}}],["updateemail",{"_index":358,"title":{},"body":{"injectables/AuthService.html":{}}}],["updateemail(data",{"_index":389,"title":{},"body":{"injectables/AuthService.html":{}}}],["updateemaildto",{"_index":253,"title":{"classes/UpdateEmailDto.html":{}},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/UpdateEmailDto.html":{},"classes/UpdatePasswordDto.html":{},"classes/UpdateProfileDto.html":{},"coverage.html":{}}}],["updatenotificationdto",{"_index":1599,"title":{"classes/UpdateNotificationDto.html":{}},"body":{"controllers/NotificationsController.html":{},"classes/UpdateNotificationDto.html":{},"coverage.html":{}}}],["updateone",{"_index":585,"title":{},"body":{"injectables/ChatMessagesService.html":{},"injectables/ChatParticipantsService.html":{},"injectables/ChatsService.html":{},"controllers/FilesController.html":{},"injectables/FilesService.html":{},"controllers/NotificationsController.html":{},"injectables/NotificationsService.html":{},"controllers/UserNotificationTokensController.html":{},"injectables/UserNotificationTokensService.html":{},"injectables/UserRefreshTokensService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["updateone(conditions",{"_index":611,"title":{},"body":{"injectables/ChatMessagesService.html":{},"injectables/ChatParticipantsService.html":{},"injectables/ChatsService.html":{},"controllers/NotificationsController.html":{},"injectables/NotificationsService.html":{},"controllers/UserNotificationTokensController.html":{},"injectables/UserNotificationTokensService.html":{},"injectables/UserRefreshTokensService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["updateone(file",{"_index":1268,"title":{},"body":{"controllers/FilesController.html":{},"injectables/FilesService.html":{}}}],["updatepassword",{"_index":359,"title":{},"body":{"injectables/AuthService.html":{}}}],["updatepassword(data",{"_index":392,"title":{},"body":{"injectables/AuthService.html":{}}}],["updatepassworddto",{"_index":257,"title":{"classes/UpdatePasswordDto.html":{}},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/UpdateEmailDto.html":{},"classes/UpdatePasswordDto.html":{},"classes/UpdateProfileDto.html":{},"coverage.html":{}}}],["updateprofiledto",{"_index":249,"title":{"classes/UpdateProfileDto.html":{}},"body":{"controllers/AuthController.html":{},"classes/UpdateEmailDto.html":{},"classes/UpdatePasswordDto.html":{},"classes/UpdateProfileDto.html":{},"coverage.html":{}}}],["updateresult",{"_index":1656,"title":{},"body":{"injectables/NotificationsService.html":{}}}],["updateuser",{"_index":210,"title":{},"body":{"controllers/AuthController.html":{}}}],["updateuser(data",{"_index":248,"title":{},"body":{"controllers/AuthController.html":{}}}],["updateuserdto",{"_index":2002,"title":{"classes/UpdateUserDto.html":{}},"body":{"classes/UpdateEmailDto.html":{},"classes/UpdatePasswordDto.html":{},"classes/UpdateProfileDto.html":{},"classes/UpdateUserDto.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["updateuseremail",{"_index":211,"title":{},"body":{"controllers/AuthController.html":{}}}],["updateuseremail(data",{"_index":252,"title":{},"body":{"controllers/AuthController.html":{}}}],["updateusernotificationtokendto",{"_index":2015,"title":{"classes/UpdateUserNotificationTokenDto.html":{}},"body":{"classes/UpdateUserNotificationTokenDto.html":{},"controllers/UserNotificationTokensController.html":{},"coverage.html":{}}}],["updateuserpassword",{"_index":212,"title":{},"body":{"controllers/AuthController.html":{}}}],["updateuserpassword(data",{"_index":256,"title":{},"body":{"controllers/AuthController.html":{}}}],["uploadedfile",{"_index":1083,"title":{"classes/UploadedFile.html":{}},"body":{"classes/CreateFileDto.html":{},"injectables/StorageS3Service.html":{},"injectables/StorageService.html":{},"classes/UploadedFile.html":{},"coverage.html":{}}}],["uploadone",{"_index":1908,"title":{},"body":{"injectables/StorageS3Service.html":{}}}],["uploadone(options",{"_index":1918,"title":{},"body":{"injectables/StorageS3Service.html":{}}}],["url",{"_index":40,"title":{},"body":{"classes/AllExceptionFilter.html":{},"injectables/AuthService.html":{},"entities/ChatMessageEntity.html":{},"entities/FileEntity.html":{},"classes/FileEntityPreview.html":{}}}],["url'})@manytoone(undefined",{"_index":545,"title":{},"body":{"entities/ChatMessageEntity.html":{}}}],["url(join(process.env.cdn",{"_index":1223,"title":{},"body":{"entities/FileEntity.html":{},"classes/FileEntityPreview.html":{}}}],["url(request.url",{"_index":62,"title":{},"body":{"classes/AllExceptionFilter.html":{}}}],["url.searchparams.set('id",{"_index":1225,"title":{},"body":{"entities/FileEntity.html":{},"classes/FileEntityPreview.html":{}}}],["url.tostring",{"_index":1227,"title":{},"body":{"entities/FileEntity.html":{},"classes/FileEntityPreview.html":{}}}],["use",{"_index":1389,"title":{},"body":{"classes/FindManyOptionsDto.html":{},"classes/SelectChatMessagesDto.html":{},"classes/SelectChatsDto.html":{},"classes/SelectFilesDto.html":{},"classes/SelectNotificationsDto.html":{},"classes/SelectUserNotificationTokensDto.html":{},"classes/SelectUsersDto.html":{}}}],["useclass",{"_index":198,"title":{},"body":{"modules/AppModule.html":{},"modules/MultipartModule.html":{},"interfaces/MultipartModuleAsyncOptions.html":{},"interfaces/MultipartOptionsFactory.html":{}}}],["useexisting",{"_index":1567,"title":{},"body":{"interfaces/MultipartModuleAsyncOptions.html":{},"interfaces/MultipartOptionsFactory.html":{}}}],["usefactory",{"_index":181,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/DatabaseModule.html":{},"modules/MultipartModule.html":{},"interfaces/MultipartModuleAsyncOptions.html":{},"interfaces/MultipartOptionsFactory.html":{},"modules/SendMailModule.html":{},"modules/SocketsModule.html":{}}}],["usefilters",{"_index":845,"title":{},"body":{"classes/ChatsGateway.html":{},"classes/SocketsGateway.html":{}}}],["usefilters(socketsexceptionfilter",{"_index":868,"title":{},"body":{"classes/ChatsGateway.html":{},"classes/SocketsGateway.html":{}}}],["useguards",{"_index":264,"title":{},"body":{"controllers/AuthController.html":{},"controllers/ChatsController.html":{},"controllers/FilesController.html":{},"controllers/NotificationsController.html":{},"controllers/UserNotificationTokensController.html":{},"controllers/UsersController.html":{}}}],["useguards(jwtauthguard",{"_index":309,"title":{},"body":{"controllers/AuthController.html":{},"controllers/ChatsController.html":{},"controllers/FilesController.html":{},"controllers/NotificationsController.html":{},"controllers/UserNotificationTokensController.html":{},"controllers/UsersController.html":{}}}],["useguards(jwtrefreshguard",{"_index":286,"title":{},"body":{"controllers/AuthController.html":{}}}],["useinterceptors",{"_index":265,"title":{},"body":{"controllers/AuthController.html":{},"controllers/ChatsController.html":{},"controllers/FilesController.html":{},"controllers/NotificationsController.html":{},"controllers/UserNotificationTokensController.html":{},"controllers/UsersController.html":{}}}],["useinterceptors(classserializerinterceptor",{"_index":281,"title":{},"body":{"controllers/AuthController.html":{},"controllers/ChatsController.html":{},"controllers/FilesController.html":{},"controllers/NotificationsController.html":{},"controllers/UserNotificationTokensController.html":{},"controllers/UsersController.html":{}}}],["usepipes",{"_index":846,"title":{},"body":{"classes/ChatsGateway.html":{},"classes/SocketsGateway.html":{}}}],["usepipes(new",{"_index":1855,"title":{},"body":{"classes/SocketsGateway.html":{}}}],["usepipes(validationpipe",{"_index":867,"title":{},"body":{"classes/ChatsGateway.html":{}}}],["user",{"_index":72,"title":{},"body":{"classes/AllExceptionFilter.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/ChatMessagesService.html":{},"entities/ChatParticipantEntity.html":{},"controllers/ChatsController.html":{},"classes/ChatsGateway.html":{},"injectables/ChatsService.html":{},"classes/CreateUserNotificationTokenDto.html":{},"classes/DeleteUserNotificationTokenDto.html":{},"controllers/FilesController.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtRefreshGuard.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"controllers/NotificationsController.html":{},"classes/PaginationUserNotificationTokensDto.html":{},"classes/SelectUserNotificationTokenDto.html":{},"classes/SelectUserNotificationTokensDto.html":{},"modules/SendMailModule.html":{},"classes/SocketsGateway.html":{},"injectables/SocketsService.html":{},"classes/UpdateUserNotificationTokenDto.html":{},"entities/UserEntity.html":{},"controllers/UserNotificationTokensController.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["user.decorator.ts",{"_index":2226,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["user.dto",{"_index":2013,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["user.dto.ts",{"_index":1130,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/SelectUserDto.html":{},"classes/UpdateUserDto.html":{},"coverage.html":{}}}],["user.dto.ts:16",{"_index":1136,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:24",{"_index":1140,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:33",{"_index":1132,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.entity",{"_index":2121,"title":{},"body":{"entities/UserRefreshTokenEntity.html":{}}}],["user.id",{"_index":295,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/ChatMessagesService.html":{},"controllers/ChatsController.html":{},"classes/ChatsGateway.html":{},"injectables/ChatsService.html":{},"injectables/NotificationsService.html":{}}}],["user.migration.ts",{"_index":2249,"title":{},"body":{"coverage.html":{},"classes/user1615673396368.html":{},"miscellaneous/variables.html":{}}}],["user.migration.ts:18",{"_index":2530,"title":{},"body":{"classes/user1615673396368.html":{}}}],["user.migration.ts:24",{"_index":2528,"title":{},"body":{"classes/user1615673396368.html":{}}}],["user.password",{"_index":448,"title":{},"body":{"injectables/AuthService.html":{}}}],["user.refreshtokens",{"_index":289,"title":{},"body":{"controllers/AuthController.html":{},"injectables/JwtRefreshTokenStrategy.html":{}}}],["user1615673396368",{"_index":2250,"title":{"classes/user1615673396368.html":{}},"body":{"coverage.html":{},"classes/user1615673396368.html":{}}}],["user_already_exist",{"_index":2374,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["user_already_exists",{"_index":2375,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["user_not_found",{"_index":2377,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["user_notification_token_already_exist",{"_index":2381,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["user_notification_token_not_found",{"_index":2383,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["user_notification_tokens_not_found",{"_index":2382,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["user_refresh_token_already_exist",{"_index":2378,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["user_refresh_token_not_found",{"_index":2380,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["user_refresh_tokens_not_found",{"_index":2379,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["userentity",{"_index":227,"title":{"entities/UserEntity.html":{}},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"entities/ChatEntity.html":{},"entities/ChatMessageEntity.html":{},"injectables/ChatMessagesService.html":{},"entities/ChatParticipantEntity.html":{},"controllers/ChatsController.html":{},"classes/ChatsGateway.html":{},"injectables/ChatsService.html":{},"entities/FileEntity.html":{},"classes/FileEntityPreview.html":{},"controllers/FilesController.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtRefreshGuard.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"entities/NotificationEntity.html":{},"controllers/NotificationsController.html":{},"injectables/NotificationsService.html":{},"classes/PaginationUsersDto.html":{},"classes/SelectProfileDto.html":{},"classes/SelectUserDto.html":{},"classes/SelectUsersDto.html":{},"classes/SocketsGateway.html":{},"entities/UserEntity.html":{},"entities/UserNotificationTokenEntity.html":{},"controllers/UserNotificationTokensController.html":{},"entities/UserRefreshTokenEntity.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"classes/user1615673396368.html":{},"miscellaneous/variables.html":{}}}],["userentityrepository",{"_index":2174,"title":{},"body":{"injectables/UsersService.html":{}}}],["userid",{"_index":681,"title":{},"body":{"injectables/ChatMessagesService.html":{},"entities/ChatParticipantEntity.html":{},"injectables/ChatParticipantsService.html":{},"injectables/ChatsService.html":{},"injectables/SocketsService.html":{}}}],["userids",{"_index":1889,"title":{},"body":{"injectables/SocketsService.html":{}}}],["userids.reduce((acc",{"_index":1897,"title":{},"body":{"injectables/SocketsService.html":{}}}],["username",{"_index":1165,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["usernotificationtokenentity",{"_index":1658,"title":{"entities/UserNotificationTokenEntity.html":{}},"body":{"injectables/NotificationsService.html":{},"classes/PaginationUserNotificationTokensDto.html":{},"classes/SelectUserNotificationTokenDto.html":{},"classes/SelectUserNotificationTokensDto.html":{},"entities/UserEntity.html":{},"entities/UserNotificationTokenEntity.html":{},"controllers/UserNotificationTokensController.html":{},"injectables/UserNotificationTokensService.html":{},"modules/UsersModule.html":{},"coverage.html":{}}}],["usernotificationtokenentityrepository",{"_index":2093,"title":{},"body":{"injectables/UserNotificationTokensService.html":{}}}],["usernotificationtokenscontroller",{"_index":2070,"title":{"controllers/UserNotificationTokensController.html":{}},"body":{"controllers/UserNotificationTokensController.html":{},"modules/UsersModule.html":{},"coverage.html":{}}}],["usernotificationtokensservice",{"_index":1619,"title":{"injectables/UserNotificationTokensService.html":{}},"body":{"injectables/NotificationsService.html":{},"controllers/UserNotificationTokensController.html":{},"injectables/UserNotificationTokensService.html":{},"modules/UsersModule.html":{},"coverage.html":{},"overview.html":{}}}],["userole",{"_index":807,"title":{},"body":{"controllers/ChatsController.html":{},"controllers/FilesController.html":{},"controllers/UsersController.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["userole(userroleenum.admin",{"_index":822,"title":{},"body":{"controllers/ChatsController.html":{},"controllers/FilesController.html":{},"controllers/UsersController.html":{}}}],["userrefreshtoken",{"_index":385,"title":{},"body":{"injectables/AuthService.html":{}}}],["userrefreshtokenentity",{"_index":372,"title":{"entities/UserRefreshTokenEntity.html":{}},"body":{"injectables/AuthService.html":{},"entities/UserEntity.html":{},"entities/UserRefreshTokenEntity.html":{},"injectables/UserRefreshTokensService.html":{},"modules/UsersModule.html":{},"coverage.html":{}}}],["userrefreshtokenentityrepository",{"_index":2124,"title":{},"body":{"injectables/UserRefreshTokensService.html":{}}}],["userrefreshtokensservice",{"_index":269,"title":{"injectables/UserRefreshTokensService.html":{}},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/UserRefreshTokensService.html":{},"modules/UsersModule.html":{},"coverage.html":{},"overview.html":{}}}],["userroleenum",{"_index":811,"title":{},"body":{"controllers/ChatsController.html":{},"controllers/FilesController.html":{},"injectables/JwtAuthGuard.html":{},"entities/UserEntity.html":{},"controllers/UsersController.html":{},"miscellaneous/enumerations.html":{},"classes/user1615673396368.html":{},"miscellaneous/variables.html":{}}}],["userroleenum.admin",{"_index":1332,"title":{},"body":{"injectables/FilesService.html":{},"classes/user1615673396368.html":{},"miscellaneous/variables.html":{}}}],["userroleenum.user",{"_index":2052,"title":{},"body":{"entities/UserEntity.html":{}}}],["users",{"_index":337,"title":{},"body":{"modules/AuthModule.html":{},"modules/NotificationsModule.html":{},"injectables/NotificationsService.html":{},"modules/SocketsModule.html":{},"controllers/UsersController.html":{}}}],["users.dto.ts",{"_index":1726,"title":{},"body":{"classes/PaginationUsersDto.html":{},"classes/SelectUsersDto.html":{},"coverage.html":{}}}],["users.dto.ts:14",{"_index":1788,"title":{},"body":{"classes/SelectUsersDto.html":{}}}],["users.dto.ts:8",{"_index":1727,"title":{},"body":{"classes/PaginationUsersDto.html":{}}}],["users.map((user",{"_index":1689,"title":{},"body":{"injectables/NotificationsService.html":{}}}],["users.reduce",{"_index":1683,"title":{},"body":{"injectables/NotificationsService.html":{}}}],["users.reduce((acc",{"_index":1690,"title":{},"body":{"injectables/NotificationsService.html":{}}}],["users/dto",{"_index":1064,"title":{},"body":{"classes/ConfirmationEmailDto.html":{},"classes/CreateProfileDto.html":{},"classes/CredentialsDto.html":{},"classes/ResetPasswordDto.html":{},"classes/SendResetPasswordDto.html":{},"classes/UpdateEmailDto.html":{},"classes/UpdatePasswordDto.html":{},"classes/UpdateProfileDto.html":{}}}],["users/entities",{"_index":268,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/ChatsController.html":{},"controllers/FilesController.html":{},"injectables/JwtRefreshGuard.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"controllers/NotificationsController.html":{},"classes/SocketsGateway.html":{}}}],["users/enums",{"_index":812,"title":{},"body":{"controllers/ChatsController.html":{},"controllers/FilesController.html":{}}}],["users/notification",{"_index":2073,"title":{},"body":{"controllers/UserNotificationTokensController.html":{}}}],["users/services",{"_index":271,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/SocketsGateway.html":{}}}],["users_not_found",{"_index":2376,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["userscontroller",{"_index":2151,"title":{"controllers/UsersController.html":{}},"body":{"controllers/UsersController.html":{},"modules/UsersModule.html":{},"coverage.html":{}}}],["usersmodule",{"_index":156,"title":{"modules/UsersModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/NotificationsModule.html":{},"modules/SocketsModule.html":{},"modules/UsersModule.html":{},"modules.html":{},"overview.html":{}}}],["usersservice",{"_index":270,"title":{"injectables/UsersService.html":{}},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/NotificationsService.html":{},"classes/SocketsGateway.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"overview.html":{}}}],["userssockets",{"_index":1877,"title":{},"body":{"injectables/SocketsService.html":{}}}],["userstatusenum",{"_index":1789,"title":{},"body":{"classes/SelectUsersDto.html":{},"entities/UserEntity.html":{},"miscellaneous/enumerations.html":{}}}],["userstatusenum.activated",{"_index":1790,"title":{},"body":{"classes/SelectUsersDto.html":{},"entities/UserEntity.html":{}}}],["usevalue",{"_index":1554,"title":{},"body":{"modules/MultipartModule.html":{}}}],["uuid",{"_index":694,"title":{},"body":{"entities/ChatParticipantEntity.html":{}}}],["validate",{"_index":1504,"title":{},"body":{"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{}}}],["validate(undefined",{"_index":1506,"title":{},"body":{"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{}}}],["validateemailcode",{"_index":360,"title":{},"body":{"injectables/AuthService.html":{}}}],["validateemailcode(data",{"_index":394,"title":{},"body":{"injectables/AuthService.html":{}}}],["validateif",{"_index":777,"title":{},"body":{"classes/ChatReceiveMessageDto.html":{},"classes/CreateChatMessageDto.html":{}}}],["validateif((o",{"_index":784,"title":{},"body":{"classes/ChatReceiveMessageDto.html":{},"classes/CreateChatMessageDto.html":{}}}],["validatenested",{"_index":763,"title":{},"body":{"classes/ChatReadMessageDto.html":{},"classes/ChatReadMessageResponseDto.html":{},"classes/ChatReceiveMessageDto.html":{},"classes/CreateChatDto.html":{},"classes/CreateChatMessageDto.html":{},"classes/CreateUserDto.html":{}}}],["validatenested()@apiproperty({type",{"_index":1069,"title":{},"body":{"classes/CreateChatDto.html":{}}}],["validatepassword",{"_index":361,"title":{},"body":{"injectables/AuthService.html":{}}}],["validatepassword(data",{"_index":396,"title":{},"body":{"injectables/AuthService.html":{}}}],["validateuser",{"_index":362,"title":{},"body":{"injectables/AuthService.html":{}}}],["validateuser(conditions",{"_index":399,"title":{},"body":{"injectables/AuthService.html":{}}}],["validation.pipe.ts",{"_index":1235,"title":{},"body":{"injectables/FileValidationPipe.html":{},"coverage.html":{}}}],["validation.pipe.ts:15",{"_index":1238,"title":{},"body":{"injectables/FileValidationPipe.html":{}}}],["validation.pipe.ts:29",{"_index":1240,"title":{},"body":{"injectables/FileValidationPipe.html":{}}}],["validationpipe",{"_index":856,"title":{},"body":{"classes/ChatsGateway.html":{},"classes/SocketsGateway.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["validator",{"_index":764,"title":{},"body":{"classes/ChatReadMessageDto.html":{},"classes/ChatReadMessageResponseDto.html":{},"classes/ChatReceiveMessageDto.html":{},"classes/ConfirmationEmailDto.html":{},"classes/CreateChatDto.html":{},"classes/CreateChatMessageDto.html":{},"classes/CreateFileDto.html":{},"classes/CreateNotificationDto.html":{},"classes/CreateUserDto.html":{},"classes/CreateUserNotificationTokenDto.html":{},"classes/DownloadFileDto.html":{},"classes/FindManyOptionsDto.html":{},"classes/FindOneOptionsDto.html":{},"classes/ID.html":{},"classes/ResetPasswordDto.html":{},"classes/SelectChatsDto.html":{},"classes/SelectFilesDto.html":{},"classes/SelectNotificationsDto.html":{},"classes/SendResetPasswordDto.html":{},"classes/UpdateEmailDto.html":{},"classes/UpdateNotificationDto.html":{},"classes/UpdatePasswordDto.html":{},"classes/UpdateProfileDto.html":{},"dependencies.html":{}}}],["value",{"_index":20,"title":{},"body":{"classes/AllExceptionFilter.html":{},"injectables/AuthService.html":{},"entities/ChatEntity.html":{},"injectables/ChatMessagesService.html":{},"injectables/ChatParticipantsService.html":{},"injectables/ChatsService.html":{},"injectables/ConfigService.html":{},"classes/CreateChatMessageDto.html":{},"injectables/FileValidationPipe.html":{},"injectables/FilesService.html":{},"classes/FindManyOptionsDto.html":{},"classes/FindOneOptionsDto.html":{},"modules/MultipartModule.html":{},"injectables/NotificationsService.html":{},"classes/SelectChatMessagesDto.html":{},"classes/SelectChatsDto.html":{},"classes/SelectFilesDto.html":{},"classes/SelectNotificationsDto.html":{},"classes/SelectUserNotificationTokensDto.html":{},"classes/SelectUsersDto.html":{},"injectables/SendMailService.html":{},"injectables/SocketsService.html":{},"injectables/StorageService.html":{},"entities/UserEntity.html":{},"injectables/UserNotificationTokensService.html":{},"injectables/UserRefreshTokensService.html":{},"injectables/UsersService.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["value.replace(/\\s/g",{"_index":1763,"title":{},"body":{"classes/SelectChatsDto.html":{}}}],["value.tostring().padstart(digits",{"_index":443,"title":{},"body":{"injectables/AuthService.html":{}}}],["value.user",{"_index":535,"title":{},"body":{"entities/ChatEntity.html":{}}}],["value.userid",{"_index":737,"title":{},"body":{"injectables/ChatParticipantsService.html":{}}}],["valuetransformer",{"_index":2597,"title":{},"body":{"miscellaneous/variables.html":{}}}],["varchar",{"_index":559,"title":{},"body":{"entities/ChatMessageEntity.html":{},"entities/FileEntity.html":{},"classes/FileEntityPreview.html":{},"entities/NotificationEntity.html":{},"entities/UserEntity.html":{},"entities/UserNotificationTokenEntity.html":{},"entities/UserRefreshTokenEntity.html":{}}}],["variable",{"_index":1022,"title":{},"body":{"injectables/ConfigService.html":{},"coverage.html":{}}}],["variables",{"_index":2543,"title":{"miscellaneous/variables.html":{}},"body":{"miscellaneous/variables.html":{}}}],["verification_accepted",{"_index":2413,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["verification_declined",{"_index":2415,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["verified",{"_index":2414,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["version",{"_index":2504,"title":{},"body":{"properties.html":{}}}],["void",{"_index":1831,"title":{},"body":{"classes/SocketsExceptionFilter.html":{},"injectables/SocketsService.html":{},"injectables/StorageService.html":{},"miscellaneous/variables.html":{}}}],["watch",{"_index":2490,"title":{},"body":{"index.html":{}}}],["websocket",{"_index":866,"title":{},"body":{"classes/ChatsGateway.html":{},"classes/SocketsGateway.html":{}}}],["websocketgateway",{"_index":849,"title":{},"body":{"classes/ChatsGateway.html":{},"classes/SocketsGateway.html":{}}}],["websocketserver",{"_index":838,"title":{},"body":{"classes/ChatsGateway.html":{}}}],["wherebrackets",{"_index":1372,"title":{},"body":{"interfaces/FindManyBracketsOptions.html":{},"classes/SelectChatsDto.html":{},"classes/SelectFilesDto.html":{}}}],["whitelist",{"_index":2636,"title":{},"body":{"miscellaneous/variables.html":{}}}],["within",{"_index":2432,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["working",{"_index":2403,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["wsexception",{"_index":1829,"title":{},"body":{"classes/SocketsExceptionFilter.html":{}}}],["wsexceptionfilter",{"_index":1827,"title":{},"body":{"classes/SocketsExceptionFilter.html":{}}}],["year",{"_index":1935,"title":{},"body":{"injectables/StorageS3Service.html":{},"injectables/StorageService.html":{}}}],["year}/${month",{"_index":1983,"title":{},"body":{"injectables/StorageService.html":{}}}],["year}/${month}/${filename",{"_index":1940,"title":{},"body":{"injectables/StorageS3Service.html":{}}}],["yes",{"_index":404,"title":{},"body":{"injectables/AuthService.html":{},"injectables/ChatMessagesService.html":{},"injectables/ChatParticipantsService.html":{},"injectables/ChatsService.html":{},"injectables/ConfigService.html":{},"injectables/FilesService.html":{},"controllers/NotificationsController.html":{},"injectables/NotificationsService.html":{},"injectables/StorageService.html":{},"injectables/UserNotificationTokensService.html":{},"injectables/UserRefreshTokensService.html":{},"injectables/UsersService.html":{},"miscellaneous/functions.html":{}}}],["you're",{"_index":2402,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["zoom",{"_index":157,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/ChatsModule.html":{},"modules/ConfigModule.html":{},"modules/FilesModule.html":{},"modules/NotificationsModule.html":{},"modules/SendMailModule.html":{},"modules/SocketsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"classes/AllExceptionFilter.html":{"url":"classes/AllExceptionFilter.html","title":"class - AllExceptionFilter","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  AllExceptionFilter\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/filters/all-exception.filter.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                        ExceptionFilter\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                logger\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                catch\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        logger\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Logger\n\n                    \n                \n                \n                    \n                        Default value : new Logger(AllExceptionFilter.name)\n                    \n                \n                    \n                        \n                                Defined in src/common/filters/all-exception.filter.ts:16\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        catch\n                        \n                    \n                \n            \n            \n                \ncatch(exception: Error, host: ArgumentsHost)\n                \n            \n\n\n            \n                \n                    Defined in src/common/filters/all-exception.filter.ts:18\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    exception\n                                    \n                                            Error\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    host\n                                    \n                                            ArgumentsHost\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     FastifyReply\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import {\n  Catch,\n  Logger,\n  HttpStatus,\n  ArgumentsHost,\n  HttpException,\n  ExceptionFilter,\n} from '@nestjs/common';\nimport { URL } from 'node:url';\nimport { FastifyReply } from 'fastify';\n\nimport { ErrorTypeEnum } from '../enums';\n\n@Catch()\nexport class AllExceptionFilter implements ExceptionFilter {\n  private readonly logger: Logger = new Logger(AllExceptionFilter.name);\n\n  catch(exception: Error, host: ArgumentsHost): FastifyReply {\n    const ctx = host.switchToHttp();\n    const request = ctx.getRequest();\n    const response = ctx.getResponse();\n\n    const statusCode =\n      exception instanceof HttpException ? exception.getStatus() : HttpStatus.INTERNAL_SERVER_ERROR;\n\n    const { message, error } =\n      exception instanceof HttpException\n        ? (exception.getResponse() as Record)\n        : {\n            message: ErrorTypeEnum.INTERNAL_SERVER_ERROR,\n            error: ErrorTypeEnum.INTERNAL_SERVER_ERROR,\n          };\n\n    this.logger.error(\n      {\n        url: new URL(request.url, 'logger://').pathname,\n        method: request.method,\n        params: request.params,\n        query: request.query,\n        body: request.body,\n        user: request.user,\n        statusCode,\n        message,\n      },\n      exception.stack,\n    );\n\n    return response.status(statusCode).send({ error, statusCode, message: [].concat(message) });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/AppController.html":{"url":"controllers/AppController.html","title":"controller - AppController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AppController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                status\n            \n\n\n            \n                Description\n            \n            \n                [description]\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                status\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        status\n                        \n                    \n                \n            \n            \n                \n                    \n                    status()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()@HealthCheck()\n                \n            \n\n            \n                \n                    Defined in src/app.controller.ts:50\n                \n            \n\n\n            \n                \n                    [description]\n\n\n                    \n                        Returns :     Promise\n\n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Transport, RedisOptions } from '@nestjs/microservices';\nimport { Controller, Get } from '@nestjs/common';\nimport { ApiTags } from '@nestjs/swagger';\nimport {\n  HealthCheck,\n  HealthCheckResult,\n  HealthCheckService,\n  DiskHealthIndicator,\n  MemoryHealthIndicator,\n  TypeOrmHealthIndicator,\n  MicroserviceHealthIndicator,\n} from '@nestjs/terminus';\n\nimport { ConfigService } from './config';\n\n/**\n * [description]\n */\n@ApiTags('status')\n@Controller('status')\nexport class AppController {\n  /**\n   * [description]\n   * @private\n   */\n  private readonly path = this.configService.getDest('STORE_DEST');\n\n  /**\n   * [description]\n   * @param configService\n   * @param typeorm\n   * @param memory\n   * @param health\n   * @param disk\n   */\n  constructor(\n    private readonly microservice: MicroserviceHealthIndicator,\n    private readonly configService: ConfigService,\n    private readonly typeorm: TypeOrmHealthIndicator,\n    private readonly memory: MemoryHealthIndicator,\n    private readonly health: HealthCheckService,\n    private readonly disk: DiskHealthIndicator,\n  ) {}\n\n  /**\n   * [description]\n   */\n  @Get()\n  @HealthCheck()\n  public status(): Promise {\n    return this.health.check([\n      () => this.disk.checkStorage('disk', { path: this.path, thresholdPercent: 1 }),\n      () => this.memory.checkHeap('memory_heap', 2 ** 32),\n      () => this.memory.checkRSS('memory_rss', 2 ** 31),\n      () => this.typeorm.pingCheck('database'),\n      () =>\n        this.microservice.pingCheck('redis', {\n          transport: Transport.REDIS,\n          options: Object.assign(\n            {\n              host: this.configService.get('REDIS_HOST'),\n              port: this.configService.get('REDIS_PORT'),\n            },\n            this.configService.get('REDIS_TLS') && {\n              auth_pass: this.configService.get('REDIS_PASSWORD'),\n              tls: { rejectUnauthorized: false },\n            },\n          ),\n        }),\n    ]);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AppModule.html":{"url":"modules/AppModule.html","title":"module - AppModule","body":"\n                   \n\n\n\n\n    Modules\n    AppModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nChatsModule\n\nChatsModule\n\nAppModule -->\n\nChatsModule->AppModule\n\n\n\n\n\nConfigModule\n\nConfigModule\n\nAppModule -->\n\nConfigModule->AppModule\n\n\n\n\n\nDatabaseModule\n\nDatabaseModule\n\nAppModule -->\n\nDatabaseModule->AppModule\n\n\n\n\n\nFilesModule\n\nFilesModule\n\nAppModule -->\n\nFilesModule->AppModule\n\n\n\n\n\nMultipartModule\n\nMultipartModule\n\nAppModule -->\n\nMultipartModule->AppModule\n\n\n\n\n\nNotificationsModule\n\nNotificationsModule\n\nAppModule -->\n\nNotificationsModule->AppModule\n\n\n\n\n\nSocketsModule\n\nSocketsModule\n\nAppModule -->\n\nSocketsModule->AppModule\n\n\n\n\n\nUsersModule\n\nUsersModule\n\nAppModule -->\n\nUsersModule->AppModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app.module.ts\n        \n\n\n\n        \n            Description\n        \n        \n            [description]\n\n        \n\n\n        \n            \n                \n                    Controllers\n                    \n                        \n                            AppController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            AuthModule\n                        \n                        \n                            ChatsModule\n                        \n                        \n                            ConfigModule\n                        \n                        \n                            DatabaseModule\n                        \n                        \n                            FilesModule\n                        \n                        \n                            MultipartModule\n                        \n                        \n                            NotificationsModule\n                        \n                        \n                            SocketsModule\n                        \n                        \n                            UsersModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { ThrottlerGuard, ThrottlerModule } from '@nestjs/throttler';\nimport { TerminusModule } from '@nestjs/terminus';\nimport { BullModule } from '@nestjs/bull';\nimport { APP_GUARD } from '@nestjs/core';\nimport { Module } from '@nestjs/common';\n\nimport { ConfigModule, ConfigService } from './config';\nimport { MultipartModule } from './multipart';\nimport { DatabaseModule } from './database';\n\nimport { NotificationsModule } from './modules/notifications';\nimport { SocketsModule } from './modules/sockets';\nimport { ChatsModule } from './modules/chats';\nimport { UsersModule } from './modules/users';\nimport { FilesModule } from './modules/files';\nimport { AuthModule } from './modules/auth';\n\nimport { AppController } from './app.controller';\n\n/**\n * [description]\n */\n@Module({\n  imports: [\n    TerminusModule,\n    ThrottlerModule.forRootAsync({\n      inject: [ConfigService],\n      useFactory: (configService: ConfigService) => ({\n        ttl: configService.get('THROTTLE_TTL'),\n        limit: configService.get('THROTTLE_LIMIT'),\n      }),\n    }),\n    BullModule.forRootAsync({\n      useFactory: async (configService: ConfigService) => ({\n        redis: {\n          host: configService.get('REDIS_HOST'),\n          port: configService.get('REDIS_PORT'),\n          password: configService.get('REDIS_HAS_PASSWORD')\n            ? configService.get('REDIS_PASSWORD')\n            : undefined,\n        },\n      }),\n      inject: [ConfigService],\n    }),\n    MultipartModule.register(),\n    DatabaseModule,\n    ConfigModule,\n    AuthModule,\n    UsersModule,\n    FilesModule,\n    SocketsModule,\n    ChatsModule,\n    NotificationsModule,\n  ],\n  controllers: [AppController],\n  providers: [{ provide: APP_GUARD, useClass: ThrottlerGuard }],\n})\nexport class AppModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/AuthController.html":{"url":"controllers/AuthController.html","title":"controller - AuthController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AuthController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/auth/auth.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                auth\n            \n\n\n            \n                Description\n            \n            \n                [description]\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                confirmationEmail\n                            \n                            \n                                    Public\n                                    Async\n                                createToken\n                            \n                            \n                                    Public\n                                    Async\n                                createUser\n                            \n                            \n                                    Public\n                                    Async\n                                logOut\n                            \n                            \n                                    Public\n                                    Async\n                                refreshTokens\n                            \n                            \n                                    Public\n                                    Async\n                                resetPassword\n                            \n                            \n                                    Public\n                                    Async\n                                selectUser\n                            \n                            \n                                    Public\n                                    Async\n                                sendResetPassword\n                            \n                            \n                                    Public\n                                    Async\n                                updateUser\n                            \n                            \n                                    Public\n                                    Async\n                                updateUserEmail\n                            \n                            \n                                    Public\n                                    Async\n                                updateUserPassword\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        confirmationEmail\n                        \n                    \n                \n            \n            \n                \n                    \n                    confirmationEmail(data: ConfirmationEmailDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('validate/email/code')\n                \n            \n\n            \n                \n                    Defined in src/modules/auth/auth.controller.ts:122\n                \n            \n\n\n            \n                \n                    [description]\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    data\n                                    \n                                                ConfirmationEmailDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        createToken\n                        \n                    \n                \n            \n            \n                \n                    \n                    createToken(data: CredentialsDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('signin')\n                \n            \n\n            \n                \n                    Defined in src/modules/auth/auth.controller.ts:58\n                \n            \n\n\n            \n                \n                    [description]\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    data\n                                    \n                                                CredentialsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        createUser\n                        \n                    \n                \n            \n            \n                \n                    \n                    createUser(data: CreateProfileDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('signup')\n                \n            \n\n            \n                \n                    Defined in src/modules/auth/auth.controller.ts:67\n                \n            \n\n\n            \n                \n                    [description]\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    data\n                                    \n                                                CreateProfileDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        logOut\n                        \n                    \n                \n            \n            \n                \n                    \n                    logOut(user: UserEntity)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('log-out')@UseGuards(JwtRefreshGuard)@ApiBody({type: JwtRefreshTokenDto})\n                \n            \n\n            \n                \n                    Defined in src/modules/auth/auth.controller.ts:78\n                \n            \n\n\n            \n                \n                    [description]\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                                UserEntity\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        refreshTokens\n                        \n                    \n                \n            \n            \n                \n                    \n                    refreshTokens(user: UserEntity)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('refresh-tokens')@UseGuards(JwtRefreshGuard)@ApiBody({type: JwtRefreshTokenDto})\n                \n            \n\n            \n                \n                    Defined in src/modules/auth/auth.controller.ts:90\n                \n            \n\n\n            \n                \n                    [description]\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                                UserEntity\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        resetPassword\n                        \n                    \n                \n            \n            \n                \n                    \n                    resetPassword(data: ResetPasswordDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('reset-password')\n                \n            \n\n            \n                \n                    Defined in src/modules/auth/auth.controller.ts:113\n                \n            \n\n\n            \n                \n                    [description]\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    data\n                                    \n                                                ResetPasswordDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        selectUser\n                        \n                    \n                \n            \n            \n                \n                    \n                    selectUser(undefined: UserEntity, options: SelectProfileDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('profile')@ApiBearerAuth()@UseGuards(JwtAuthGuard)\n                \n            \n\n            \n                \n                    Defined in src/modules/auth/auth.controller.ts:134\n                \n            \n\n\n            \n                \n                    [description]\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    \n                                                UserEntity\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    options\n                                    \n                                                SelectProfileDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        sendResetPassword\n                        \n                    \n                \n            \n            \n                \n                    \n                    sendResetPassword(data: SendResetPasswordDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('reset-password/send/email')\n                \n            \n\n            \n                \n                    Defined in src/modules/auth/auth.controller.ts:104\n                \n            \n\n\n            \n                \n                    [description]\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    data\n                                    \n                                                SendResetPasswordDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        updateUser\n                        \n                    \n                \n            \n            \n                \n                    \n                    updateUser(data: UpdateProfileDto, user: UserEntity)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch('profile')@ApiBearerAuth()@UseGuards(JwtAuthGuard)\n                \n            \n\n            \n                \n                    Defined in src/modules/auth/auth.controller.ts:149\n                \n            \n\n\n            \n                \n                    [description]\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    data\n                                    \n                                                UpdateProfileDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    user\n                                    \n                                                UserEntity\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        updateUserEmail\n                        \n                    \n                \n            \n            \n                \n                    \n                    updateUserEmail(data: UpdateEmailDto, user: UserEntity)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch('profile/email')@ApiBearerAuth()@UseGuards(JwtAuthGuard)\n                \n            \n\n            \n                \n                    Defined in src/modules/auth/auth.controller.ts:179\n                \n            \n\n\n            \n                \n                    [description]\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    data\n                                    \n                                                UpdateEmailDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    user\n                                    \n                                                UserEntity\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        updateUserPassword\n                        \n                    \n                \n            \n            \n                \n                    \n                    updateUserPassword(data: UpdatePasswordDto, user: UserEntity)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch('profile/password')@ApiBearerAuth()@UseGuards(JwtAuthGuard)\n                \n            \n\n            \n                \n                    Defined in src/modules/auth/auth.controller.ts:164\n                \n            \n\n\n            \n                \n                    [description]\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    data\n                                    \n                                                UpdatePasswordDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    user\n                                    \n                                                UserEntity\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { ApiBearerAuth, ApiBody, ApiTags } from '@nestjs/swagger';\nimport {\n  Get,\n  Post,\n  Body,\n  Query,\n  Patch,\n  UseGuards,\n  Controller,\n  UseInterceptors,\n  ClassSerializerInterceptor,\n} from '@nestjs/common';\n\nimport { User } from 'src/common/decorators';\n\nimport { UserEntity } from '../users/entities';\nimport { UserRefreshTokensService, UsersService } from '../users/services';\n\nimport {\n  JwtTokensDto,\n  CredentialsDto,\n  UpdateEmailDto,\n  CreateProfileDto,\n  SelectProfileDto,\n  ResetPasswordDto,\n  UpdateProfileDto,\n  UpdatePasswordDto,\n  JwtRefreshTokenDto,\n  SendResetPasswordDto,\n  ConfirmationEmailDto,\n} from './dto';\nimport { AuthService } from './auth.service';\nimport { JwtRefreshGuard, JwtAuthGuard } from './guards';\n\n/**\n * [description]\n */\n@ApiTags('auth')\n@Controller('auth')\n@UseInterceptors(ClassSerializerInterceptor)\nexport class AuthController {\n  /**\n   * [description]\n   * @param usersService\n   * @param authService\n   */\n  constructor(\n    private readonly userRefreshTokensService: UserRefreshTokensService,\n    private readonly usersService: UsersService,\n    private readonly authService: AuthService,\n  ) {}\n\n  /**\n   * [description]\n   * @param data\n   */\n  @Post('signin')\n  public async createToken(@Body() data: CredentialsDto): Promise {\n    return this.authService.createToken(data);\n  }\n\n  /**\n   * [description]\n   * @param data\n   */\n  @Post('signup')\n  public async createUser(@Body() data: CreateProfileDto): Promise {\n    return this.authService.createUser(data);\n  }\n\n  /**\n   * [description]\n   * @param data\n   */\n  @Post('log-out')\n  @UseGuards(JwtRefreshGuard)\n  @ApiBody({ type: JwtRefreshTokenDto })\n  public async logOut(@User() user: UserEntity): Promise {\n    const [refreshToken] = user.refreshTokens;\n    await this.userRefreshTokensService.deleteOne({ id: refreshToken.id, owner: { id: user.id } });\n  }\n\n  /**\n   * [description]\n   * @param user\n   */\n  @Post('refresh-tokens')\n  @UseGuards(JwtRefreshGuard)\n  @ApiBody({ type: JwtRefreshTokenDto })\n  public async refreshTokens(@User() user: UserEntity): Promise {\n    const [oldRefreshToken] = user.refreshTokens;\n    const refreshToken = await this.userRefreshTokensService.generateAndCreateOne({\n      id: oldRefreshToken.id,\n      owner: { id: user.id },\n    });\n    return this.authService.generateTokens(user, refreshToken);\n  }\n\n  /**\n   * [description]\n   * @param data\n   */\n  @Post('reset-password/send/email')\n  public async sendResetPassword(@Body() data: SendResetPasswordDto): Promise {\n    return this.authService.sendResetPassword(data);\n  }\n\n  /**\n   * [description]\n   * @param data\n   */\n  @Post('reset-password')\n  public async resetPassword(@Body() data: ResetPasswordDto): Promise {\n    return this.authService.resetPassword(data);\n  }\n\n  /**\n   * [description]\n   * @param data\n   */\n  @Post('validate/email/code')\n  public async confirmationEmail(@Body() data: ConfirmationEmailDto): Promise {\n    await this.authService.validateEmailCode(data);\n  }\n\n  /**\n   * [description]\n   * @param id\n   * @param options\n   */\n  @Get('profile')\n  @ApiBearerAuth()\n  @UseGuards(JwtAuthGuard)\n  public async selectUser(\n    @User() { id }: UserEntity,\n    @Query() options: SelectProfileDto,\n  ): Promise {\n    return this.usersService.selectOne({ id }, options);\n  }\n\n  /**\n   * [description]\n   * @param user\n   * @param data\n   */\n  @Patch('profile')\n  @ApiBearerAuth()\n  @UseGuards(JwtAuthGuard)\n  public async updateUser(\n    @Body() data: UpdateProfileDto,\n    @User() user: UserEntity,\n  ): Promise {\n    return this.usersService.updateOne({ id: user.id }, data);\n  }\n\n  /**\n   * [description]\n   * @param user\n   * @param data\n   */\n  @Patch('profile/password')\n  @ApiBearerAuth()\n  @UseGuards(JwtAuthGuard)\n  public async updateUserPassword(\n    @Body() data: UpdatePasswordDto,\n    @User() user: UserEntity,\n  ): Promise {\n    return this.authService.updatePassword(data, user);\n  }\n\n  /**\n   * [description]\n   * @param user\n   * @param data\n   */\n  @Patch('profile/email')\n  @ApiBearerAuth()\n  @UseGuards(JwtAuthGuard)\n  public async updateUserEmail(\n    @Body() data: UpdateEmailDto,\n    @User() user: UserEntity,\n  ): Promise {\n    return this.authService.updateEmail(data, user);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AuthModule.html":{"url":"modules/AuthModule.html","title":"module - AuthModule","body":"\n                   \n\n\n\n\n    Modules\n    AuthModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_imports\n\n\n\ncluster_AuthModule_providers\n\n\n\ncluster_AuthModule_exports\n\n\n\n\nSendMailModule\n\nSendMailModule\n\n\n\nAuthModule\n\nAuthModule\n\nAuthModule -->\n\nSendMailModule->AuthModule\n\n\n\n\n\nUsersModule\n\nUsersModule\n\nAuthModule -->\n\nUsersModule->AuthModule\n\n\n\n\n\nAuthService \n\nAuthService \n\nAuthService  -->\n\nAuthModule->AuthService \n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\nJwtRefreshTokenStrategy\n\nJwtRefreshTokenStrategy\n\nAuthModule -->\n\nJwtRefreshTokenStrategy->AuthModule\n\n\n\n\n\nJwtStrategy\n\nJwtStrategy\n\nAuthModule -->\n\nJwtStrategy->AuthModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/modules/auth/auth.module.ts\n        \n\n\n\n        \n            Description\n        \n        \n            [description]\n\n        \n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AuthService\n                        \n                        \n                            JwtRefreshTokenStrategy\n                        \n                        \n                            JwtStrategy\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AuthController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            SendMailModule\n                        \n                        \n                            UsersModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            AuthService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { CacheModule, CacheModuleOptions, Module } from '@nestjs/common';\nimport * as redisStore from 'cache-manager-redis-store';\nimport { PassportModule } from '@nestjs/passport';\nimport { JwtModule } from '@nestjs/jwt';\n\nimport { ConfigService } from 'src/config';\n\nimport { UsersModule } from '../users';\n\nimport { JwtRefreshTokenStrategy, JwtStrategy } from './strategies';\n\nimport { CACHE_AUTH_PREFIX } from './auth.constants';\nimport { AuthController } from './auth.controller';\nimport { AuthService } from './auth.service';\nimport { SendMailModule } from 'src/sendmail';\n\n/**\n * [description]\n */\n@Module({\n  imports: [\n    PassportModule,\n    JwtModule.register({}),\n    CacheModule.registerAsync({\n      useFactory: (configService: ConfigService) =>\n        Object.assign(\n          {\n            store: redisStore,\n            prefix: CACHE_AUTH_PREFIX,\n            ttl: configService.get('CACHE_AUTH_TTL'),\n            host: configService.get('REDIS_HOST'),\n            port: configService.get('REDIS_PORT'),\n          },\n          configService.get('REDIS_HAS_PASSWORD') && {\n            auth_pass: configService.get('REDIS_PASSWORD'),\n          },\n          configService.get('REDIS_TLS') && {\n            tls: {\n              rejectUnauthorized: false,\n            },\n          },\n        ) as CacheModuleOptions,\n      inject: [ConfigService],\n    }),\n    SendMailModule,\n    UsersModule,\n  ],\n  controllers: [AuthController],\n  providers: [AuthService, JwtStrategy, JwtRefreshTokenStrategy],\n  exports: [PassportModule, JwtModule, AuthService],\n})\nexport class AuthModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AuthService.html":{"url":"injectables/AuthService.html","title":"injectable - AuthService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AuthService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/auth/auth.service.ts\n        \n\n\n            \n                Description\n            \n            \n                [description]\n\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                expiresInAccessToken\n                            \n                            \n                                    Private\n                                    Readonly\n                                expiresInRefreshToken\n                            \n                            \n                                    Private\n                                    Readonly\n                                secretAccessToken\n                            \n                            \n                                    Private\n                                    Readonly\n                                secretRefreshToken\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                createToken\n                            \n                            \n                                    Public\n                                    Async\n                                createUser\n                            \n                            \n                                    Public\n                                generateAccessToken\n                            \n                            \n                                    Public\n                                generateCode\n                            \n                            \n                                    Public\n                                generateRefreshToken\n                            \n                            \n                                    Public\n                                generateTokens\n                            \n                            \n                                    Public\n                                    Async\n                                resetPassword\n                            \n                            \n                                    Public\n                                    Async\n                                sendResetPassword\n                            \n                            \n                                    Public\n                                    Async\n                                updateEmail\n                            \n                            \n                                    Public\n                                    Async\n                                updatePassword\n                            \n                            \n                                    Public\n                                    Async\n                                validateEmailCode\n                            \n                            \n                                    Public\n                                    Async\n                                validatePassword\n                            \n                            \n                                    Public\n                                    Async\n                                validateUser\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(userRefreshTokensService: UserRefreshTokensService, sendMailService: SendMailService, configService: ConfigService, usersService: UsersService, jwtService: JwtService, cacheManager: Cache)\n                    \n                \n                        \n                            \n                                Defined in src/modules/auth/auth.service.ts:38\n                            \n                        \n\n                \n                    \n                            [description]\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        userRefreshTokensService\n                                                  \n                                                        \n                                                                        UserRefreshTokensService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        sendMailService\n                                                  \n                                                        \n                                                                        SendMailService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                        ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        usersService\n                                                  \n                                                        \n                                                                        UsersService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        jwtService\n                                                  \n                                                        \n                                                                    JwtService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        cacheManager\n                                                  \n                                                        \n                                                                    Cache\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        createToken\n                        \n                    \n                \n            \n            \n                \n                    \n                    createToken(undefined: CredentialsDto)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/auth/auth.service.ts:120\n                \n            \n\n\n            \n                \n                    [description]\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    \n                                                CredentialsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        createUser\n                        \n                    \n                \n            \n            \n                \n                    \n                    createUser(data: CreateProfileDto)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/auth/auth.service.ts:134\n                \n            \n\n\n            \n                \n                    [description]\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    data\n                                    \n                                                CreateProfileDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        generateAccessToken\n                        \n                    \n                \n            \n            \n                \n                    \n                    generateAccessToken(undefined: UserEntity, undefined: UserRefreshTokenEntity)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/auth/auth.service.ts:66\n                \n            \n\n\n            \n                \n                    [description]\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    \n                                                UserEntity\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    \n                                                UserRefreshTokenEntity\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        generateCode\n                        \n                    \n                \n            \n            \n                \n                    \n                    generateCode(digits: number, size: number)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/auth/auth.service.ts:109\n                \n            \n\n\n            \n                \n                    [description]\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    digits\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        6\n                                    \n\n                                \n                                \n                                    size\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        20\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        generateRefreshToken\n                        \n                    \n                \n            \n            \n                \n                    \n                    generateRefreshToken(undefined: UserEntity, undefined: UserRefreshTokenEntity)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/auth/auth.service.ts:82\n                \n            \n\n\n            \n                \n                    [description]\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    \n                                                UserEntity\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    \n                                                UserRefreshTokenEntity\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        generateTokens\n                        \n                    \n                \n            \n            \n                \n                    \n                    generateTokens(user: UserEntity, userRefreshToken: UserRefreshTokenEntity)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/auth/auth.service.ts:98\n                \n            \n\n\n            \n                \n                    [description]\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                                UserEntity\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userRefreshToken\n                                    \n                                                UserRefreshTokenEntity\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         JwtTokensDto\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        resetPassword\n                        \n                    \n                \n            \n            \n                \n                    \n                    resetPassword(data: ResetPasswordDto)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/auth/auth.service.ts:216\n                \n            \n\n\n            \n                \n                    [description]\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    data\n                                    \n                                                ResetPasswordDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        sendResetPassword\n                        \n                    \n                \n            \n            \n                \n                    \n                    sendResetPassword(data: SendResetPasswordDto)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/auth/auth.service.ts:195\n                \n            \n\n\n            \n                \n                    [description]\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    data\n                                    \n                                                SendResetPasswordDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        updateEmail\n                        \n                    \n                \n            \n            \n                \n                    \n                    updateEmail(data: UpdateEmailDto, user: Partial)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/auth/auth.service.ts:245\n                \n            \n\n\n            \n                \n                    [description]\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    data\n                                    \n                                                UpdateEmailDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    user\n                                    \n                                                Partial\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        updatePassword\n                        \n                    \n                \n            \n            \n                \n                    \n                    updatePassword(data: UpdatePasswordDto, user: Partial)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/auth/auth.service.ts:231\n                \n            \n\n\n            \n                \n                    [description]\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    data\n                                    \n                                                UpdatePasswordDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    user\n                                    \n                                                Partial\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        validateEmailCode\n                        \n                    \n                \n            \n            \n                \n                    \n                    validateEmailCode(data: ConfirmationEmailDto)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/auth/auth.service.ts:177\n                \n            \n\n\n            \n                \n                    [description]\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    data\n                                    \n                                                ConfirmationEmailDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        validatePassword\n                        \n                    \n                \n            \n            \n                \n                    \n                    validatePassword(data: string, encrypted: string)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/auth/auth.service.ts:167\n                \n            \n\n\n            \n                \n                    [description]\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    data\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    encrypted\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        validateUser\n                        \n                    \n                \n            \n            \n                \n                    \n                    validateUser(conditions: FindOptionsWhere, options?: FindOneOptions)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/auth/auth.service.ts:147\n                \n            \n\n\n            \n                \n                    [description]\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    conditions\n                                    \n                                                FindOptionsWhere\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    options\n                                    \n                                                FindOneOptions\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        expiresInAccessToken\n                        \n                    \n                \n            \n                    \n                        \n                                Defined in src/modules/auth/auth.service.ts:36\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        expiresInRefreshToken\n                        \n                    \n                \n            \n                    \n                        \n                                Defined in src/modules/auth/auth.service.ts:35\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        secretAccessToken\n                        \n                    \n                \n            \n                    \n                        \n                                Defined in src/modules/auth/auth.service.ts:38\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        secretRefreshToken\n                        \n                    \n                \n            \n                    \n                        \n                                Defined in src/modules/auth/auth.service.ts:37\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { BadRequestException, CACHE_MANAGER, Inject, Injectable } from '@nestjs/common';\nimport { FindOneOptions, FindOptionsWhere } from 'typeorm';\nimport { ConfigService } from 'src/config';\nimport { JwtService } from '@nestjs/jwt';\nimport { Cache } from 'cache-manager';\n\nimport { randomBytes } from 'crypto';\nimport { compare } from 'src/common/helpers';\nimport { ErrorTypeEnum } from 'src/common/enums';\nimport { SendMailService } from 'src/sendmail';\n\nimport { UserEntity, UserRefreshTokenEntity } from '../users/entities';\nimport { UserRefreshTokensService, UsersService } from '../users/services';\n\nimport {\n  JwtTokensDto,\n  CredentialsDto,\n  UpdateEmailDto,\n  CreateProfileDto,\n  ResetPasswordDto,\n  UpdatePasswordDto,\n  SendResetPasswordDto,\n  ConfirmationEmailDto,\n  JwtAccessTokenPayloadDto,\n  JwtRefreshTokenPayloadDto,\n} from './dto';\nimport { TemplatedMailConfirmationType } from 'src/sendmail/types';\nimport { TemplateNameEnum } from 'src/sendmail/enums';\n\n/**\n * [description]\n */\n@Injectable()\nexport class AuthService {\n  private readonly expiresInRefreshToken;\n  private readonly expiresInAccessToken;\n  private readonly secretRefreshToken;\n  private readonly secretAccessToken;\n\n  /**\n   * [description]\n   * @param configService\n   * @param usersService\n   * @param jwtService\n   */\n  constructor(\n    private readonly userRefreshTokensService: UserRefreshTokensService,\n    private readonly sendMailService: SendMailService,\n    private readonly configService: ConfigService,\n    private readonly usersService: UsersService,\n    private readonly jwtService: JwtService,\n    @Inject(CACHE_MANAGER)\n    private cacheManager: Cache,\n  ) {\n    this.expiresInRefreshToken = this.configService.get('JWT_EXPIRES_REFRESH_TOKEN');\n    this.expiresInAccessToken = this.configService.get('JWT_EXPIRES_ACCESS_TOKEN');\n    this.secretRefreshToken = this.configService.get('JWT_SECRET_REFRESH_TOKEN');\n    this.secretAccessToken = this.configService.get('JWT_SECRET_ACCESS_TOKEN');\n  }\n\n  /**\n   * [description]\n   * @param id\n   * @param userRefreshToken\n   */\n  public generateAccessToken(\n    { id }: UserEntity,\n    { id: refreshTokenId }: UserRefreshTokenEntity,\n  ): string {\n    const payload: JwtAccessTokenPayloadDto = { id, refreshTokenId };\n    return this.jwtService.sign(payload, {\n      expiresIn: this.expiresInAccessToken,\n      secret: this.secretAccessToken,\n    });\n  }\n\n  /**\n   * [description]\n   * @param id\n   * @param userRefreshToken\n   */\n  public generateRefreshToken(\n    { id }: UserEntity,\n    { id: refreshTokenId, ppid }: UserRefreshTokenEntity,\n  ): string {\n    const payload: JwtRefreshTokenPayloadDto = { id, refreshTokenId, ppid };\n    return this.jwtService.sign(payload, {\n      expiresIn: this.expiresInRefreshToken,\n      secret: this.secretRefreshToken,\n    });\n  }\n\n  /**\n   * [description]\n   * @param user\n   * @param userRefreshToken\n   */\n  public generateTokens(user: UserEntity, userRefreshToken: UserRefreshTokenEntity): JwtTokensDto {\n    const token = this.generateAccessToken(user, userRefreshToken);\n    const refreshToken = this.generateRefreshToken(user, userRefreshToken);\n    return { token, refreshToken };\n  }\n\n  /**\n   * [description]\n   * @param digits\n   * @param size\n   */\n  public generateCode(digits = 6, size = 20): string {\n    const buffer = randomBytes(size);\n    const value = buffer.readUInt32BE(0x0f) % 10 ** digits;\n    return value.toString().padStart(digits, '0');\n  }\n\n  /**\n   * [description]\n   * @param email\n   * @param password\n   */\n  public async createToken({ email, password }: CredentialsDto): Promise {\n    const user = await this.validateUser({ email });\n    if (!(await this.validatePassword(password, user.password)))\n      throw new BadRequestException(ErrorTypeEnum.AUTH_INCORRECT_CREDENTIALS);\n    const refreshToken = await this.userRefreshTokensService.generateAndCreateOne({\n      owner: { id: user.id },\n    });\n    return this.generateTokens(user, refreshToken);\n  }\n\n  /**\n   * [description]\n   * @param data\n   */\n  public async createUser(data: CreateProfileDto): Promise {\n    const user = await this.usersService.createOne(data);\n    const refreshToken = await this.userRefreshTokensService.generateAndCreateOne({\n      owner: { id: user.id },\n    });\n    return this.generateTokens(user, refreshToken);\n  }\n\n  /**\n   * [description]\n   * @param conditions\n   * @param options\n   */\n  public async validateUser(\n    conditions: FindOptionsWhere,\n    options?: FindOneOptions,\n  ): Promise {\n    const initialOptions: FindOneOptions = {\n      select: { id: true, password: true, role: true },\n      loadEagerRelations: false,\n    };\n    return this.usersService\n      .selectOne(conditions, Object.assign(initialOptions, options))\n      .catch(() => {\n        throw new BadRequestException(ErrorTypeEnum.AUTH_INCORRECT_CREDENTIALS);\n      });\n  }\n\n  /**\n   * [description]\n   * @param data\n   * @param encrypted\n   */\n  public async validatePassword(data: string, encrypted: string): Promise {\n    return compare(data, encrypted).catch(() => {\n      throw new BadRequestException(ErrorTypeEnum.AUTH_PASSWORDS_DO_NOT_MATCH);\n    });\n  }\n\n  /**\n   * [description]\n   * @param data\n   */\n  public async validateEmailCode(data: ConfirmationEmailDto): Promise> {\n    const { code, email } = data;\n    const user = await this.usersService.selectOne(\n      { email },\n      { loadEagerRelations: false, select: { id: true, password: true } },\n    );\n\n    const cacheCode = await this.cacheManager.get(user.id);\n    if (cacheCode !== code)\n      throw new BadRequestException(ErrorTypeEnum.AUTH_INCORRECT_CONFIRMATION_EMAIL_CODE);\n\n    return user;\n  }\n\n  /**\n   * [description]\n   * @param data\n   */\n  public async sendResetPassword(data: SendResetPasswordDto): Promise {\n    const { id } = await this.usersService.selectOne(data, {\n      loadEagerRelations: false,\n      select: { id: true },\n    });\n\n    const code = this.generateCode();\n    this.cacheManager.set(id, code);\n\n    await this.sendMailService.sendTemplatedEmail({\n      to: [data.email],\n      subject: 'Забули свій пароль?',\n      template: TemplateNameEnum.CONFIRMATION,\n      context: { CODE: code, URL: '' },\n    });\n  }\n\n  /**\n   * [description]\n   * @param data\n   */\n  public async resetPassword(data: ResetPasswordDto): Promise {\n    const { id, password } = await this.validateEmailCode(data);\n\n    if (await this.validatePassword(data.password, password))\n      throw new BadRequestException(ErrorTypeEnum.NEW_PASSWORD_AND_OLD_PASSWORD_CANNOT_BE_SAME);\n\n    await this.cacheManager.del(id);\n    await this.usersService.updateOne({ id }, { password: data.password });\n  }\n\n  /**\n   * [description]\n   * @param data\n   * @param user\n   */\n  public async updatePassword(\n    data: UpdatePasswordDto,\n    user: Partial,\n  ): Promise {\n    if (!(await this.validatePassword(data.oldPassword, user.password)))\n      throw new BadRequestException(ErrorTypeEnum.AUTH_PASSWORDS_DO_NOT_MATCH);\n    return this.usersService.updateOne({ id: user.id }, { password: data.password });\n  }\n\n  /**\n   * [description]\n   * @param data\n   * @param user\n   */\n  public async updateEmail(data: UpdateEmailDto, user: Partial): Promise {\n    if (!(await this.validatePassword(data.password, user.password)))\n      throw new BadRequestException(ErrorTypeEnum.AUTH_PASSWORDS_DO_NOT_MATCH);\n    return this.usersService.updateOne({ id: user.id }, { email: data.email });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/ChatEntity.html":{"url":"entities/ChatEntity.html","title":"entity - ChatEntity","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  ChatEntity\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/chats/entities/chat.entity.ts\n        \n\n\n            \n                Description\n            \n            \n                [description]\n\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Readonly\n                                createdAt\n                            \n                            \n                                    Public\n                                    Readonly\n                                id\n                            \n                            \n                                    Public\n                                    Readonly\n                                lastMessage\n                            \n                            \n                                    Public\n                                    Readonly\n                                messages\n                            \n                            \n                                    Public\n                                    Optional\n                                newMessagesCount\n                            \n                            \n                                    Public\n                                    Readonly\n                                participant\n                            \n                            \n                                    Public\n                                    Readonly\n                                participants\n                            \n                            \n                                    Public\n                                    Readonly\n                                updatedAt\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        createdAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({readOnly: true})@CreateDateColumn({readonly: true, type: 'timestamptz', default: () => CURRENT_TIMESTAMP})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/chats/entities/chat.entity.ts:61\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({readOnly: true})@PrimaryGeneratedColumn('uuid')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/chats/entities/chat.entity.ts:27\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        lastMessage\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Partial\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiHideProperty()@ManyToOne(undefined, {onDelete: 'SET NULL', nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/chats/entities/chat.entity.ts:43\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        messages\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Partial[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiHideProperty()@OneToMany(undefined,  => chat)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/chats/entities/chat.entity.ts:50\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        newMessagesCount\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/chats/entities/chat.entity.ts:84\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        participant\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Partial\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiHideProperty()@Transform( => )\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/chats/entities/chat.entity.ts:78\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        participants\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Partial[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiHideProperty()@OneToMany(undefined, participant => participant.chat, {cascade: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/chats/entities/chat.entity.ts:36\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        updatedAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({readOnly: true})@UpdateDateColumn({type: 'timestamptz', default: () => CURRENT_TIMESTAMP})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/chats/entities/chat.entity.ts:71\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import { ApiHideProperty, ApiProperty } from '@nestjs/swagger';\nimport { Transform } from 'class-transformer';\nimport {\n  PrimaryGeneratedColumn,\n  CreateDateColumn,\n  UpdateDateColumn,\n  OneToMany,\n  ManyToOne,\n  Entity,\n} from 'typeorm';\n\nimport { UserEntity } from 'src/modules/users/entities';\n\nimport { ChatParticipantEntity } from './chat-participant.entity';\nimport { ChatMessageEntity } from './chat-message.entity';\n\n/**\n * [description]\n */\n@Entity('chats')\nexport class ChatEntity {\n  /*\n   * [description]\n   */\n  @ApiProperty({ readOnly: true })\n  @PrimaryGeneratedColumn('uuid')\n  public readonly id: string;\n\n  /*\n   * [description]\n   */\n  @ApiHideProperty()\n  @OneToMany(() => ChatParticipantEntity, (participant) => participant.chat, {\n    cascade: true,\n  })\n  public readonly participants: Partial[];\n\n  /*\n   * [description]\n   */\n  @ApiHideProperty()\n  @ManyToOne(() => ChatMessageEntity, { onDelete: 'SET NULL', nullable: true })\n  public readonly lastMessage: Partial;\n\n  /*\n   * [description]\n   */\n  @ApiHideProperty()\n  @OneToMany(() => ChatMessageEntity, ({ chat }) => chat)\n  public readonly messages: Partial[];\n\n  /*\n   * [description]\n   */\n  @ApiProperty({ readOnly: true })\n  @CreateDateColumn({\n    readonly: true,\n    type: 'timestamptz',\n    default: () => 'CURRENT_TIMESTAMP',\n  })\n  public readonly createdAt: Date;\n\n  /*\n   * [description]\n   */\n  @ApiProperty({ readOnly: true })\n  @UpdateDateColumn({\n    type: 'timestamptz',\n    default: () => 'CURRENT_TIMESTAMP',\n  })\n  public readonly updatedAt: Date;\n\n  /*\n   * [description]\n   */\n  @ApiHideProperty()\n  @Transform(({ value }) => value && value.user)\n  public readonly participant: Partial;\n\n  /*\n   * [description]\n   */\n  @ApiProperty()\n  public newMessagesCount?: number;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/ChatMessageEntity.html":{"url":"entities/ChatMessageEntity.html","title":"entity - ChatMessageEntity","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  ChatMessageEntity\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/chats/entities/chat-message.entity.ts\n        \n\n\n            \n                Description\n            \n            \n                [description]\n\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Readonly\n                                chat\n                            \n                            \n                                    Public\n                                    Readonly\n                                createdAt\n                            \n                            \n                                    Public\n                                    Readonly\n                                file\n                            \n                            \n                                    Public\n                                    Readonly\n                                id\n                            \n                            \n                                    Public\n                                    Readonly\n                                owner\n                            \n                            \n                                    Public\n                                    Readonly\n                                reply\n                            \n                            \n                                    Public\n                                    Readonly\n                                status\n                            \n                            \n                                    Public\n                                    Readonly\n                                text\n                            \n                            \n                                    Public\n                                    Readonly\n                                type\n                            \n                            \n                                    Public\n                                    Readonly\n                                updatedAt\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        chat\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Partial\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @JoinColumn()@ApiHideProperty()@ManyToOne(undefined,  => messages, {onDelete: 'CASCADE', nullable: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/chats/entities/chat-message.entity.ts:71\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        createdAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({readOnly: true})@CreateDateColumn({readonly: true, type: 'timestamptz', default: () => CURRENT_TIMESTAMP})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/chats/entities/chat-message.entity.ts:98\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        file\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Partial\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @JoinColumn()@ApiProperty({type: String, example: 'URL'})@ManyToOne(undefined, {onDelete: 'CASCADE', nullable: true, cascade: true, eager: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/chats/entities/chat-message.entity.ts:63\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({readOnly: true})@PrimaryGeneratedColumn('uuid')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/chats/entities/chat-message.entity.ts:28\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        owner\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Partial\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @JoinColumn()@ApiHideProperty()@ManyToOne(undefined, {onDelete: 'CASCADE', nullable: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/chats/entities/chat-message.entity.ts:87\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        reply\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Partial\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @JoinColumn()@ApiHideProperty()@ManyToOne(undefined, {onDelete: 'CASCADE', nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/chats/entities/chat-message.entity.ts:79\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        status\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ChatMessageStatusEnum\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({enum: ChatMessageStatusEnum, default: undefined})@Column({type: 'enum', enum: ChatMessageStatusEnum, default: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/chats/entities/chat-message.entity.ts:43\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        text\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({maxLength: 60000, nullable: true})@Column({type: 'varchar', length: 60000, nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/chats/entities/chat-message.entity.ts:50\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        type\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ChatMessageTypeEnum\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({enum: ChatMessageTypeEnum, default: undefined})@Column({type: 'enum', enum: ChatMessageTypeEnum, default: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/chats/entities/chat-message.entity.ts:35\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        updatedAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({readOnly: true})@UpdateDateColumn({type: 'timestamptz', default: () => CURRENT_TIMESTAMP})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/chats/entities/chat-message.entity.ts:108\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import { ApiHideProperty, ApiProperty } from '@nestjs/swagger';\nimport {\n  PrimaryGeneratedColumn,\n  UpdateDateColumn,\n  CreateDateColumn,\n  JoinColumn,\n  ManyToOne,\n  Column,\n  Entity,\n} from 'typeorm';\n\nimport { FileEntity } from 'src/modules/files/entities/file.entity';\nimport { UserEntity } from 'src/modules/users/entities';\n\nimport { ChatMessageStatusEnum, ChatMessageTypeEnum } from '../enums';\nimport { ChatEntity } from './chat.entity';\n\n/**\n * [description]\n */\n@Entity('chat_messages')\nexport class ChatMessageEntity {\n  /*\n   * [description]\n   */\n  @ApiProperty({ readOnly: true })\n  @PrimaryGeneratedColumn('uuid')\n  public readonly id: string;\n\n  /*\n   * [description]\n   */\n  @ApiProperty({ enum: ChatMessageTypeEnum, default: ChatMessageTypeEnum.TEXT })\n  @Column({ type: 'enum', enum: ChatMessageTypeEnum, default: ChatMessageTypeEnum.TEXT })\n  public readonly type: ChatMessageTypeEnum;\n\n  /*\n   * [description]\n   */\n\n  @ApiProperty({ enum: ChatMessageStatusEnum, default: ChatMessageStatusEnum.SENT })\n  @Column({ type: 'enum', enum: ChatMessageStatusEnum, default: ChatMessageStatusEnum.SENT })\n  public readonly status: ChatMessageStatusEnum;\n\n  /*\n   * [description]\n   */\n  @ApiProperty({ maxLength: 6e4, nullable: true })\n  @Column({ type: 'varchar', length: 6e4, nullable: true })\n  public readonly text: string;\n\n  /*\n   * [description]\n   */\n  @JoinColumn()\n  @ApiProperty({ type: String, example: 'URL' })\n  @ManyToOne(() => FileEntity, {\n    onDelete: 'CASCADE',\n    nullable: true,\n    cascade: true,\n    eager: true,\n  })\n  public readonly file: Partial;\n\n  /*\n   * [description]\n   */\n  @JoinColumn()\n  @ApiHideProperty()\n  @ManyToOne(() => ChatEntity, ({ messages }) => messages, { onDelete: 'CASCADE', nullable: false })\n  public readonly chat: Partial;\n\n  /*\n   * [description]\n   */\n  @JoinColumn()\n  @ApiHideProperty()\n  @ManyToOne(() => ChatMessageEntity, { onDelete: 'CASCADE', nullable: true })\n  public readonly reply: Partial;\n\n  /*\n   * [description]\n   */\n  @JoinColumn()\n  @ApiHideProperty()\n  @ManyToOne(() => UserEntity, { onDelete: 'CASCADE', nullable: false })\n  public readonly owner: Partial;\n\n  /*\n   * [description]\n   */\n  @ApiProperty({ readOnly: true })\n  @CreateDateColumn({\n    readonly: true,\n    type: 'timestamptz',\n    default: () => 'CURRENT_TIMESTAMP',\n  })\n  public readonly createdAt: Date;\n\n  /*\n   * [description]\n   */\n  @ApiProperty({ readOnly: true })\n  @UpdateDateColumn({\n    type: 'timestamptz',\n    default: () => 'CURRENT_TIMESTAMP',\n  })\n  public readonly updatedAt: Date;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/ChatMessagesService.html":{"url":"injectables/ChatMessagesService.html","title":"injectable - ChatMessagesService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  ChatMessagesService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/chats/services/chat-messages.service.ts\n        \n\n\n            \n                Description\n            \n            \n                [description]\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                createOne\n                            \n                            \n                                    Public\n                                    Async\n                                deleteOne\n                            \n                            \n                                    Public\n                                find\n                            \n                            \n                                    Public\n                                    Async\n                                selectAll\n                            \n                            \n                                    Public\n                                    Async\n                                selectNewMessagesCount\n                            \n                            \n                                    Public\n                                    Async\n                                selectOne\n                            \n                            \n                                    Public\n                                    Async\n                                updateAll\n                            \n                            \n                                    Public\n                                    Async\n                                updateOne\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(chatMessageEntityRepository: Repository, chatsService: ChatsService)\n                    \n                \n                        \n                            \n                                Defined in src/modules/chats/services/chat-messages.service.ts:29\n                            \n                        \n\n                \n                    \n                            [description]\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        chatMessageEntityRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        chatsService\n                                                  \n                                                        \n                                                                        ChatsService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        createOne\n                        \n                    \n                \n            \n            \n                \n                    \n                    createOne(entityLike: Partial, options: SaveOptions)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/chats/services/chat-messages.service.ts:46\n                \n            \n\n\n            \n                \n                    [description]\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    entityLike\n                                    \n                                                Partial\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    options\n                                    \n                                            SaveOptions\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        { transaction: false }\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        deleteOne\n                        \n                    \n                \n            \n            \n                \n                    \n                    deleteOne(conditions: FindOptionsWhere, options: RemoveOptions)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/chats/services/chat-messages.service.ts:213\n                \n            \n\n\n            \n                \n                    [description]\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    conditions\n                                    \n                                                FindOptionsWhere\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    options\n                                    \n                                            RemoveOptions\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        { transaction: false }\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        find\n                        \n                    \n                \n            \n            \n                \n                    \n                    find(optionsOrConditions?: FindManyOptions)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/chats/services/chat-messages.service.ts:66\n                \n            \n\n\n            \n                \n                     [description]\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    optionsOrConditions\n                                    \n                                                FindManyOptions\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         SelectQueryBuilder\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        selectAll\n                        \n                    \n                \n            \n            \n                \n                    \n                    selectAll(options: FindManyOptions, chat: Partial, user: Partial)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/chats/services/chat-messages.service.ts:105\n                \n            \n\n\n            \n                \n                    [description]\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    options\n                                    \n                                                FindManyOptions\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        { loadEagerRelations: false }\n                                    \n\n                                \n                                \n                                    chat\n                                    \n                                                Partial\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    user\n                                    \n                                                Partial\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        selectNewMessagesCount\n                        \n                    \n                \n            \n            \n                \n                    \n                    selectNewMessagesCount(user: Partial)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/chats/services/chat-messages.service.ts:149\n                \n            \n\n\n            \n                \n                    [description]\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                                Partial\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        selectOne\n                        \n                    \n                \n            \n            \n                \n                    \n                    selectOne(conditions: FindOptionsWhere, options: FindOneOptions)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/chats/services/chat-messages.service.ts:134\n                \n            \n\n\n            \n                \n                    [description]\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    conditions\n                                    \n                                                FindOptionsWhere\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    options\n                                    \n                                                FindOneOptions\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        { loadEagerRelations: false }\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        updateAll\n                        \n                    \n                \n            \n            \n                \n                    \n                    updateAll(conditions: FindOptionsWhere, entityLike: Partial)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/chats/services/chat-messages.service.ts:174\n                \n            \n\n\n            \n                \n                    [description]\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    conditions\n                                    \n                                                FindOptionsWhere\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    entityLike\n                                    \n                                                Partial\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        updateOne\n                        \n                    \n                \n            \n            \n                \n                    \n                    updateOne(conditions: FindOptionsWhere, entityLike: Partial, options: SaveOptions)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/chats/services/chat-messages.service.ts:194\n                \n            \n\n\n            \n                \n                    [description]\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    conditions\n                                    \n                                                FindOptionsWhere\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    entityLike\n                                    \n                                                Partial\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    options\n                                    \n                                            SaveOptions\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        { transaction: false }\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { NotFoundException, ConflictException, Injectable } from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { instanceToPlain } from 'class-transformer';\nimport {\n  SelectQueryBuilder,\n  FindOptionsUtils,\n  FindOptionsWhere,\n  FindManyOptions,\n  FindOneOptions,\n  RemoveOptions,\n  SaveOptions,\n  Repository,\n  Not,\n} from 'typeorm';\n\nimport { ErrorTypeEnum } from 'src/common/enums';\n\nimport { UserEntity } from 'src/modules/users/entities';\n\nimport { ChatEntity, ChatMessageEntity, ChatParticipantEntity } from '../entities';\nimport { PaginationChatMessagesDto, PaginationChatsDto } from '../dto';\nimport { ChatMessageStatusEnum } from '../enums';\nimport { ChatsService } from './chats.service';\n\n/**\n * [description]\n */\n@Injectable()\nexport class ChatMessagesService {\n  /**\n   * [description]\n   * @param chatMessageEntityRepository\n   * @param chatsService\n   */\n  constructor(\n    @InjectRepository(ChatMessageEntity)\n    private readonly chatMessageEntityRepository: Repository,\n    private readonly chatsService: ChatsService,\n  ) {}\n\n  /**\n   * [description]\n   * @param entityLike\n   * @param options\n   */\n  public async createOne(\n    entityLike: Partial,\n    options: SaveOptions = { transaction: false },\n  ): Promise {\n    return this.chatMessageEntityRepository.manager.transaction(async () => {\n      const entity = this.chatMessageEntityRepository.create(entityLike);\n      const { id } = await this.chatMessageEntityRepository.save(entity, options).catch(() => {\n        throw new ConflictException(ErrorTypeEnum.CHAT_MESSAGE_ALREADY_EXIST);\n      });\n\n      await this.chatsService.update({ id: entityLike.chat.id }, { lastMessage: { id } });\n\n      return this.selectOne({ id }, { loadEagerRelations: true });\n    });\n  }\n\n  /**\n   *  [description]\n   * @param optionsOrConditions\n   */\n  public find(\n    optionsOrConditions?: FindManyOptions,\n  ): SelectQueryBuilder {\n    const metadata = this.chatMessageEntityRepository.metadata;\n    const qb = this.chatMessageEntityRepository.createQueryBuilder(\n      FindOptionsUtils.extractFindManyOptionsAlias(optionsOrConditions) || metadata.name,\n    );\n\n    if (\n      !FindOptionsUtils.isFindManyOptions(optionsOrConditions) ||\n      optionsOrConditions.loadEagerRelations !== false\n    ) {\n      FindOptionsUtils.joinEagerRelations(qb, qb.alias, metadata);\n\n      /**\n       * Place for common relation\n       * @example qb.leftJoinAndSelect('ChatMessageEntity.relation_field', 'ChatMessageEntity_relation_field')\n       */\n\n      qb.leftJoinAndSelect('ChatMessageEntity.reply', 'ChatMessageEntity_reply');\n      qb.leftJoinAndSelect('ChatMessageEntity_reply.file', 'ChatMessageEntity_reply_file');\n      qb.leftJoinAndSelect('ChatMessageEntity_reply.owner', 'ChatMessageEntity_reply_owner');\n      qb.leftJoinAndSelect(\n        'ChatMessageEntity_reply_owner.cover',\n        'ChatMessageEntity_reply_owner_cover',\n      );\n      qb.leftJoinAndSelect('ChatMessageEntity.owner', 'ChatMessageEntity_owner');\n      qb.leftJoinAndSelect('ChatMessageEntity_owner.cover', 'ChatMessageEntity_owner_cover');\n    }\n\n    return qb.setFindOptions(optionsOrConditions);\n  }\n\n  /**\n   * [description]\n   * @param options\n   * @param chat\n   * @param user\n   */\n  public async selectAll(\n    options: FindManyOptions = { loadEagerRelations: false },\n    chat: Partial,\n    user: Partial,\n  ): Promise {\n    const [rows, count] = await this.find(instanceToPlain(options))\n      .andWhere({ chat })\n      .getManyAndCount()\n      .catch(() => {\n        throw new NotFoundException(ErrorTypeEnum.CHAT_MESSAGES_NOT_FOUND);\n      });\n\n    await this.updateAll(\n      {\n        status: ChatMessageStatusEnum.SENT,\n        owner: { id: Not(user.id) },\n        chat: { id: chat.id },\n      },\n      { status: ChatMessageStatusEnum.READ },\n    );\n\n    return new PaginationChatMessagesDto([rows.reverse(), count]);\n  }\n\n  /**\n   * [description]\n   * @param conditions\n   * @param options\n   */\n  public async selectOne(\n    conditions: FindOptionsWhere,\n    options: FindOneOptions = { loadEagerRelations: false },\n  ): Promise {\n    return this.find({ ...instanceToPlain(options), where: conditions })\n      .getOneOrFail()\n      .catch(() => {\n        throw new NotFoundException(ErrorTypeEnum.CHAT_MESSAGE_NOT_FOUND);\n      });\n  }\n\n  /**\n   * [description]\n   * @param user\n   */\n  public async selectNewMessagesCount(user: Partial): Promise {\n    return this.chatMessageEntityRepository\n      .createQueryBuilder()\n      .innerJoin(\n        ChatParticipantEntity,\n        'ChatParticipantEntity',\n        'ChatParticipantEntity.chatId = ChatMessageEntity.chatId AND ChatParticipantEntity.userId = :userId',\n        { userId: user.id },\n      )\n      .where({\n        status: ChatMessageStatusEnum.SENT,\n        owner: { id: Not(user.id) },\n      })\n      .getCount()\n      .catch(() => {\n        throw new NotFoundException(ErrorTypeEnum.CHAT_MESSAGE_NOT_FOUND);\n      });\n  }\n\n  /**\n   * [description]\n   * @param conditions\n   * @param entityLike\n   * @param options\n   */\n  public async updateAll(\n    conditions: FindOptionsWhere,\n    entityLike: Partial,\n  ): Promise {\n    return this.chatMessageEntityRepository.manager.transaction(async () => {\n      return this.chatMessageEntityRepository\n        .update(conditions, entityLike)\n        .then((data) => data.affected)\n        .catch(() => {\n          throw new ConflictException(ErrorTypeEnum.CHAT_MESSAGE_ALREADY_EXIST);\n        });\n    });\n  }\n\n  /**\n   * [description]\n   * @param conditions\n   * @param entityLike\n   * @param options\n   */\n  public async updateOne(\n    conditions: FindOptionsWhere,\n    entityLike: Partial,\n    options: SaveOptions = { transaction: false },\n  ): Promise {\n    return this.chatMessageEntityRepository.manager.transaction(async () => {\n      const mergeIntoEntity = await this.selectOne(conditions);\n      const entity = this.chatMessageEntityRepository.merge(mergeIntoEntity, entityLike);\n      return this.chatMessageEntityRepository.save(entity, options).catch(() => {\n        throw new ConflictException(ErrorTypeEnum.CHAT_MESSAGE_ALREADY_EXIST);\n      });\n    });\n  }\n\n  /**\n   * [description]\n   * @param conditions\n   * @param options\n   */\n  public async deleteOne(\n    conditions: FindOptionsWhere,\n    options: RemoveOptions = { transaction: false },\n  ): Promise {\n    return this.chatMessageEntityRepository.manager.transaction(async () => {\n      const entity = await this.selectOne(conditions, options);\n      return this.chatMessageEntityRepository.remove(entity).catch(() => {\n        throw new NotFoundException(ErrorTypeEnum.CHAT_MESSAGE_NOT_FOUND);\n      });\n    });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/ChatParticipantEntity.html":{"url":"entities/ChatParticipantEntity.html","title":"entity - ChatParticipantEntity","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  ChatParticipantEntity\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/chats/entities/chat-participant.entity.ts\n        \n\n\n            \n                Description\n            \n            \n                [description]\n\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Readonly\n                                chat\n                            \n                            \n                                    Public\n                                    Readonly\n                                chatId\n                            \n                            \n                                    Public\n                                    Readonly\n                                createdAt\n                            \n                            \n                                    Public\n                                    Readonly\n                                id\n                            \n                            \n                                    Public\n                                    Readonly\n                                updatedAt\n                            \n                            \n                                    Public\n                                    Readonly\n                                user\n                            \n                            \n                                    Public\n                                    Readonly\n                                userId\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        chat\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Partial\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @JoinColumn()@ApiHideProperty()@ManyToOne(undefined, {onDelete: 'CASCADE', nullable: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/chats/entities/chat-participant.entity.ts:57\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        chatId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@Column({type: 'uuid', nullable: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/chats/entities/chat-participant.entity.ts:49\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        createdAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({readOnly: true})@CreateDateColumn({readonly: true, type: 'timestamptz', default: () => CURRENT_TIMESTAMP})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/chats/entities/chat-participant.entity.ts:68\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({readOnly: true})@PrimaryGeneratedColumn('uuid')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/chats/entities/chat-participant.entity.ts:27\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        updatedAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({readOnly: true})@UpdateDateColumn({type: 'timestamptz', default: () => CURRENT_TIMESTAMP})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/chats/entities/chat-participant.entity.ts:78\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        user\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Partial\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @JoinColumn()@ApiHideProperty()@ManyToOne(undefined, {onDelete: 'CASCADE', nullable: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/chats/entities/chat-participant.entity.ts:42\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        userId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@Column({type: 'uuid', nullable: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/chats/entities/chat-participant.entity.ts:34\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import { ApiHideProperty, ApiProperty } from '@nestjs/swagger';\nimport {\n  PrimaryGeneratedColumn,\n  CreateDateColumn,\n  UpdateDateColumn,\n  JoinColumn,\n  ManyToOne,\n  Column,\n  Entity,\n  Index,\n} from 'typeorm';\n\nimport { UserEntity } from 'src/modules/users/entities';\nimport { ChatEntity } from './chat.entity';\n\n/**\n * [description]\n */\n@Entity('chat_participants')\n@Index('unique_chat_participants', ['user', 'chat'], { unique: true })\nexport class ChatParticipantEntity {\n  /*\n   * [description]\n   */\n  @ApiProperty({ readOnly: true })\n  @PrimaryGeneratedColumn('uuid')\n  public readonly id: string;\n\n  /*\n   * [description]\n   */\n  @ApiProperty()\n  @Column({ type: 'uuid', nullable: false })\n  public readonly userId: string;\n\n  /*\n   * [description]\n   */\n  @JoinColumn()\n  @ApiHideProperty()\n  @ManyToOne(() => UserEntity, { onDelete: 'CASCADE', nullable: false })\n  public readonly user: Partial;\n\n  /*\n   * [description]\n   */\n  @ApiProperty()\n  @Column({ type: 'uuid', nullable: false })\n  public readonly chatId: string;\n\n  /*\n   * [description]\n   */\n  @JoinColumn()\n  @ApiHideProperty()\n  @ManyToOne(() => ChatEntity, { onDelete: 'CASCADE', nullable: false })\n  public readonly chat: Partial;\n\n  /*\n   * [description]\n   */\n  @ApiProperty({ readOnly: true })\n  @CreateDateColumn({\n    readonly: true,\n    type: 'timestamptz',\n    default: () => 'CURRENT_TIMESTAMP',\n  })\n  public readonly createdAt: Date;\n\n  /*\n   * [description]\n   */\n  @ApiProperty({ readOnly: true })\n  @UpdateDateColumn({\n    type: 'timestamptz',\n    default: () => 'CURRENT_TIMESTAMP',\n  })\n  public readonly updatedAt: Date;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/ChatParticipantsService.html":{"url":"injectables/ChatParticipantsService.html","title":"injectable - ChatParticipantsService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  ChatParticipantsService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/chats/services/chat-participants.service.ts\n        \n\n\n            \n                Description\n            \n            \n                [description]\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                createOne\n                            \n                            \n                                    Public\n                                    Async\n                                deleteOne\n                            \n                            \n                                    Public\n                                find\n                            \n                            \n                                    Public\n                                    Async\n                                selectAll\n                            \n                            \n                                    Public\n                                    Async\n                                selectIds\n                            \n                            \n                                    Public\n                                    Async\n                                selectOne\n                            \n                            \n                                    Public\n                                    Async\n                                selectOneByParticipants\n                            \n                            \n                                    Public\n                                    Async\n                                updateOne\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(chatParticipantEntityRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/modules/chats/services/chat-participants.service.ts:24\n                            \n                        \n\n                \n                    \n                            [description]\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        chatParticipantEntityRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        createOne\n                        \n                    \n                \n            \n            \n                \n                    \n                    createOne(entityLike: Partial, options: SaveOptions)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/chats/services/chat-participants.service.ts:39\n                \n            \n\n\n            \n                \n                    [description]\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    entityLike\n                                    \n                                                Partial\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    options\n                                    \n                                            SaveOptions\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        { transaction: false }\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        deleteOne\n                        \n                    \n                \n            \n            \n                \n                    \n                    deleteOne(conditions: FindOptionsWhere, options: RemoveOptions)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/chats/services/chat-participants.service.ts:173\n                \n            \n\n\n            \n                \n                    [description]\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    conditions\n                                    \n                                                FindOptionsWhere\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    options\n                                    \n                                            RemoveOptions\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        { transaction: false }\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        find\n                        \n                    \n                \n            \n            \n                \n                    \n                    find(optionsOrConditions?: FindManyOptions)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/chats/services/chat-participants.service.ts:60\n                \n            \n\n\n            \n                \n                     [description]\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    optionsOrConditions\n                                    \n                                                FindManyOptions\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         SelectQueryBuilder\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        selectAll\n                        \n                    \n                \n            \n            \n                \n                    \n                    selectAll(options: FindManyOptions)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/chats/services/chat-participants.service.ts:105\n                \n            \n\n\n            \n                \n                    [description]\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    options\n                                    \n                                                FindManyOptions\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        { loadEagerRelations: false }\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        selectIds\n                        \n                    \n                \n            \n            \n                \n                    \n                    selectIds(options: FindManyOptions)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/chats/services/chat-participants.service.ts:87\n                \n            \n\n\n            \n                \n                    [description]\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    options\n                                    \n                                                FindManyOptions\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        {\n      loadEagerRelations: false,\n      select: ['userId'],\n    }\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        selectOne\n                        \n                    \n                \n            \n            \n                \n                    \n                    selectOne(conditions: FindOptionsWhere, options: FindOneOptions)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/chats/services/chat-participants.service.ts:121\n                \n            \n\n\n            \n                \n                    [description]\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    conditions\n                                    \n                                                FindOptionsWhere\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    options\n                                    \n                                                FindOneOptions\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        { loadEagerRelations: false }\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        selectOneByParticipants\n                        \n                    \n                \n            \n            \n                \n                    \n                    selectOneByParticipants(participantIds: string[])\n                \n            \n\n\n            \n                \n                    Defined in src/modules/chats/services/chat-participants.service.ts:136\n                \n            \n\n\n            \n                \n                    [description]\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    participantIds\n                                    \n                                            string[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        updateOne\n                        \n                    \n                \n            \n            \n                \n                    \n                    updateOne(conditions: FindOptionsWhere, entityLike: Partial, options: SaveOptions)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/chats/services/chat-participants.service.ts:154\n                \n            \n\n\n            \n                \n                    [description]\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    conditions\n                                    \n                                                FindOptionsWhere\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    entityLike\n                                    \n                                                Partial\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    options\n                                    \n                                            SaveOptions\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        { transaction: false }\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { NotFoundException, ConflictException, Injectable } from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { instanceToPlain } from 'class-transformer';\nimport {\n  SelectQueryBuilder,\n  FindOptionsUtils,\n  FindOptionsWhere,\n  FindManyOptions,\n  FindOneOptions,\n  RemoveOptions,\n  SaveOptions,\n  Repository,\n} from 'typeorm';\n\nimport { ErrorTypeEnum } from 'src/common/enums';\n\nimport { PaginationChatParticipantsDto, PaginationChatsDto } from '../dto';\nimport { ChatEntity, ChatParticipantEntity } from '../entities';\n\n/**\n * [description]\n */\n@Injectable()\nexport class ChatParticipantsService {\n  /**\n   * [description]\n   * @param chatParticipantEntityRepository\n   */\n  constructor(\n    @InjectRepository(ChatParticipantEntity)\n    private readonly chatParticipantEntityRepository: Repository,\n  ) {}\n\n  /**\n   * [description]\n   * @param entityLike\n   * @param options\n   */\n  public async createOne(\n    entityLike: Partial,\n    options: SaveOptions = { transaction: false },\n  ): Promise {\n    return this.chatParticipantEntityRepository.manager.transaction(async () => {\n      const entity = this.chatParticipantEntityRepository.create(entityLike);\n      const { id } = await this.chatParticipantEntityRepository\n        .save(entity, options)\n        .catch((err) => {\n          console.log(err);\n          throw new ConflictException(ErrorTypeEnum.CHAT_PARTICIPANT_ALREADY_EXIST);\n        });\n\n      return this.selectOne({ id }, { loadEagerRelations: true });\n    });\n  }\n\n  /**\n   *  [description]\n   * @param optionsOrConditions\n   */\n  public find(\n    optionsOrConditions?: FindManyOptions,\n  ): SelectQueryBuilder {\n    const metadata = this.chatParticipantEntityRepository.metadata;\n    const qb = this.chatParticipantEntityRepository.createQueryBuilder(\n      FindOptionsUtils.extractFindManyOptionsAlias(optionsOrConditions) || metadata.name,\n    );\n\n    if (\n      !FindOptionsUtils.isFindManyOptions(optionsOrConditions) ||\n      optionsOrConditions.loadEagerRelations !== false\n    ) {\n      FindOptionsUtils.joinEagerRelations(qb, qb.alias, metadata);\n\n      /**\n       * Place for common relation\n       * @example qb.leftJoinAndSelect('ChatParticipantEntity.relation_field', 'ChatParticipantEntity_relation_field')\n       */\n    }\n\n    return qb.setFindOptions(optionsOrConditions);\n  }\n\n  /**\n   * [description]\n   * @param options\n   */\n  public async selectIds(\n    options: FindManyOptions = {\n      loadEagerRelations: false,\n      select: ['userId'],\n    },\n  ): Promise {\n    return this.find(instanceToPlain(options))\n      .getMany()\n      .then((data) => data.map((value) => value.userId))\n      .catch(() => {\n        throw new NotFoundException(ErrorTypeEnum.CHAT_PARTICIPANTS_NOT_FOUND);\n      });\n  }\n\n  /**\n   * [description]\n   * @param options\n   */\n  public async selectAll(\n    options: FindManyOptions = { loadEagerRelations: false },\n  ): Promise {\n    return this.find(instanceToPlain(options))\n      .getManyAndCount()\n      .then((data) => new PaginationChatParticipantsDto(data))\n      .catch(() => {\n        throw new NotFoundException(ErrorTypeEnum.CHAT_PARTICIPANTS_NOT_FOUND);\n      });\n  }\n\n  /**\n   * [description]\n   * @param conditions\n   * @param options\n   */\n  public async selectOne(\n    conditions: FindOptionsWhere,\n    options: FindOneOptions = { loadEagerRelations: false },\n  ): Promise {\n    return this.find({ ...instanceToPlain(options), where: conditions })\n      .getOneOrFail()\n      .catch(() => {\n        throw new NotFoundException(ErrorTypeEnum.CHAT_PARTICIPANT_NOT_FOUND);\n      });\n  }\n\n  /**\n   * [description]\n   * @param participantIds\n   */\n  public async selectOneByParticipants(participantIds: string[]): Promise> {\n    return this.chatParticipantEntityRepository\n      .createQueryBuilder('ChatParticipantEntity')\n      .select('ChatParticipantEntity.chatId', 'id')\n      .andWhere('ChatParticipantEntity.userId IN (:...participantIds)', { participantIds })\n      .having(\n        `ARRAY_LENGTH(ARRAY_AGG(ChatParticipantEntity.userId), 1) >= ${participantIds.length}`,\n      )\n      .groupBy('ChatParticipantEntity.chatId')\n      .getRawOne();\n  }\n\n  /**\n   * [description]\n   * @param conditions\n   * @param entityLike\n   * @param options\n   */\n  public async updateOne(\n    conditions: FindOptionsWhere,\n    entityLike: Partial,\n    options: SaveOptions = { transaction: false },\n  ): Promise {\n    return this.chatParticipantEntityRepository.manager.transaction(async () => {\n      const mergeIntoEntity = await this.selectOne(conditions);\n      const entity = this.chatParticipantEntityRepository.merge(mergeIntoEntity, entityLike);\n      return this.chatParticipantEntityRepository.save(entity, options).catch(() => {\n        throw new ConflictException(ErrorTypeEnum.CHAT_PARTICIPANT_ALREADY_EXIST);\n      });\n    });\n  }\n\n  /**\n   * [description]\n   * @param conditions\n   * @param options\n   */\n  public async deleteOne(\n    conditions: FindOptionsWhere,\n    options: RemoveOptions = { transaction: false },\n  ): Promise {\n    return this.chatParticipantEntityRepository.manager.transaction(async () => {\n      const entity = await this.selectOne(conditions, options);\n      return this.chatParticipantEntityRepository.remove(entity).catch(() => {\n        throw new NotFoundException(ErrorTypeEnum.CHAT_PARTICIPANT_NOT_FOUND);\n      });\n    });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ChatReadMessageDto.html":{"url":"classes/ChatReadMessageDto.html","title":"class - ChatReadMessageDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ChatReadMessageDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/chats/dto/chat-read-message.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                [description]\n\n            \n\n            \n                Extends\n            \n            \n                        ID\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Readonly\n                                chat\n                            \n                            \n                                    Public\n                                    Readonly\n                                id\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        chat\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ID\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()@ValidateNested()@ApiProperty({type: () => ID})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/chats/dto/chat-read-message.dto.ts:17\n                        \n                    \n\n            \n                \n                    [description]\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsUUID()@ApiProperty()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         ID\n\n                            \n                        \n                    \n                        \n                                Defined in         ID:13\n\n                        \n                    \n\n            \n                \n                    Entity ID\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsNotEmpty, ValidateNested } from 'class-validator';\nimport { ApiProperty } from '@nestjs/swagger';\n\nimport { ID } from 'src/common/dto';\nimport { ChatEntity, ChatMessageEntity } from '../entities';\n\n/**\n * [description]\n */\nexport class ChatReadMessageDto extends ID {\n  /**\n   * [description]\n   */\n  @IsNotEmpty()\n  @ValidateNested()\n  @ApiProperty({ type: () => ID })\n  public readonly chat: ID;\n}\n\n/**\n * [description]\n */\nexport class ChatReadMessageResponseDto {\n  /**\n   * [description]\n   */\n  @ApiProperty({ type: () => ID })\n  public readonly chat: ID;\n\n  /**\n   * [description]\n   */\n  @ApiProperty({ type: () => ID })\n  public readonly message: ID;\n\n  /**\n   * [description]\n   * @param data\n   */\n  constructor(data: { chat: Partial; message: Partial }) {\n    Object.assign(this, data);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ChatReadMessageResponseDto.html":{"url":"classes/ChatReadMessageResponseDto.html","title":"class - ChatReadMessageResponseDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ChatReadMessageResponseDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/chats/dto/chat-read-message.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                [description]\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Readonly\n                                chat\n                            \n                            \n                                    Public\n                                    Readonly\n                                message\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(data: literal type)\n                    \n                \n                        \n                            \n                                Defined in src/modules/chats/dto/chat-read-message.dto.ts:34\n                            \n                        \n\n                \n                    \n                            [description]\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        data\n                                                  \n                                                        \n                                                                    literal type\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        chat\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ID\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: () => ID})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/chats/dto/chat-read-message.dto.ts:28\n                        \n                    \n\n            \n                \n                    [description]\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        message\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ID\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: () => ID})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/chats/dto/chat-read-message.dto.ts:34\n                        \n                    \n\n            \n                \n                    [description]\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsNotEmpty, ValidateNested } from 'class-validator';\nimport { ApiProperty } from '@nestjs/swagger';\n\nimport { ID } from 'src/common/dto';\nimport { ChatEntity, ChatMessageEntity } from '../entities';\n\n/**\n * [description]\n */\nexport class ChatReadMessageDto extends ID {\n  /**\n   * [description]\n   */\n  @IsNotEmpty()\n  @ValidateNested()\n  @ApiProperty({ type: () => ID })\n  public readonly chat: ID;\n}\n\n/**\n * [description]\n */\nexport class ChatReadMessageResponseDto {\n  /**\n   * [description]\n   */\n  @ApiProperty({ type: () => ID })\n  public readonly chat: ID;\n\n  /**\n   * [description]\n   */\n  @ApiProperty({ type: () => ID })\n  public readonly message: ID;\n\n  /**\n   * [description]\n   * @param data\n   */\n  constructor(data: { chat: Partial; message: Partial }) {\n    Object.assign(this, data);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ChatReceiveMessageDto.html":{"url":"classes/ChatReceiveMessageDto.html","title":"class - ChatReceiveMessageDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ChatReceiveMessageDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/chats/dto/create-chat-message.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                [description]\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Readonly\n                                chat\n                            \n                            \n                                    Public\n                                    Readonly\n                                message\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(data: literal type)\n                    \n                \n                        \n                            \n                                Defined in src/modules/chats/dto/create-chat-message.dto.ts:79\n                            \n                        \n\n                \n                    \n                            [description]\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        data\n                                                  \n                                                        \n                                                                    literal type\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        chat\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Partial\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: () => ChatEntity})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/chats/dto/create-chat-message.dto.ts:73\n                        \n                    \n\n            \n                \n                    [description]\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        message\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Partial\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: () => ChatMessageEntity})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/chats/dto/create-chat-message.dto.ts:79\n                        \n                    \n\n            \n                \n                    [description]\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport {\n  ValidateNested,\n  IsNotEmpty,\n  ValidateIf,\n  IsOptional,\n  MaxLength,\n  IsString,\n  IsEnum,\n} from 'class-validator';\n\nimport { ID } from 'src/common/dto';\n\nimport { ChatEntity, ChatMessageEntity } from '../entities';\nimport { ChatMessageTypeEnum } from '../enums';\n\n/**\n * [description]\n */\nexport class CreateChatMessageDto {\n  /**\n   * [description]\n   */\n  @IsNotEmpty()\n  @IsEnum(ChatMessageTypeEnum)\n  @ApiProperty({ enum: ChatMessageTypeEnum, default: ChatMessageTypeEnum.TEXT })\n  public readonly type = ChatMessageTypeEnum.TEXT;\n\n  /**\n   * [description]\n   */\n  @IsNotEmpty()\n  @ValidateNested()\n  @ApiProperty({ type: () => ID })\n  public readonly chat: ID;\n\n  /**\n   * [description]\n   */\n  @IsOptional()\n  @ValidateNested()\n  @ApiProperty({ type: () => ID })\n  public readonly reply?: ID;\n\n  /**\n   * [description]\n   */\n  @IsString()\n  @IsNotEmpty()\n  @IsOptional()\n  @MaxLength(6e4)\n  @ValidateIf((o) => o.type === ChatMessageTypeEnum.TEXT)\n  public readonly text?: string;\n\n  /**\n   * [description]\n   */\n  @IsOptional()\n  @ValidateNested()\n  @ApiProperty({ type: () => ID })\n  @ValidateIf((o) => o.type === ChatMessageTypeEnum.FILE)\n  public readonly file?: ID;\n}\n\n/**\n * [description]\n */\nexport class ChatReceiveMessageDto {\n  /**\n   * [description]\n   */\n  @ApiProperty({ type: () => ChatEntity })\n  public readonly chat: Partial;\n\n  /**\n   * [description]\n   */\n  @ApiProperty({ type: () => ChatMessageEntity })\n  public readonly message: Partial;\n\n  /**\n   * [description]\n   * @param data\n   */\n  constructor(data: { chat: Partial; message: Partial }) {\n    Object.assign(this, data);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/ChatsController.html":{"url":"controllers/ChatsController.html","title":"controller - ChatsController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  ChatsController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/chats/chats.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                chats\n            \n\n\n            \n                Description\n            \n            \n                [description]\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                createOne\n                            \n                            \n                                    Public\n                                    Async\n                                deleteOne\n                            \n                            \n                                    Public\n                                    Async\n                                selectAll\n                            \n                            \n                                    Public\n                                    Async\n                                selectAllMessages\n                            \n                            \n                                    Public\n                                    Async\n                                selectNewMessagesCount\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        createOne\n                        \n                    \n                \n            \n            \n                \n                    \n                    createOne(dto: CreateChatDto, user: UserEntity)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()\n                \n            \n\n            \n                \n                    Defined in src/modules/chats/chats.controller.ts:69\n                \n            \n\n\n            \n                \n                    [description]\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    dto\n                                    \n                                                CreateChatDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    user\n                                    \n                                                UserEntity\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        deleteOne\n                        \n                    \n                \n            \n            \n                \n                    \n                    deleteOne(conditions: ID)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete(':id')@UseRole(UserRoleEnum.ADMIN)\n                \n            \n\n            \n                \n                    Defined in src/modules/chats/chats.controller.ts:100\n                \n            \n\n\n            \n                \n                    [description]\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    conditions\n                                    \n                                                ID\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        selectAll\n                        \n                    \n                \n            \n            \n                \n                    \n                    selectAll(options: SelectChatsDto, user: UserEntity)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()\n                \n            \n\n            \n                \n                    Defined in src/modules/chats/chats.controller.ts:87\n                \n            \n\n\n            \n                \n                    [description]\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    options\n                                    \n                                                SelectChatsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    user\n                                    \n                                                UserEntity\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        selectAllMessages\n                        \n                    \n                \n            \n            \n                \n                    \n                    selectAllMessages(chatConditions: ID, options: SelectChatMessagesDto, user: UserEntity)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/:id/messages')\n                \n            \n\n            \n                \n                    Defined in src/modules/chats/chats.controller.ts:111\n                \n            \n\n\n            \n                \n                    [description]\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    chatConditions\n                                    \n                                                ID\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    options\n                                    \n                                                SelectChatMessagesDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    user\n                                    \n                                                UserEntity\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        selectNewMessagesCount\n                        \n                    \n                \n            \n            \n                \n                    \n                    selectNewMessagesCount(user: UserEntity)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/messages/count/new')\n                \n            \n\n            \n                \n                    Defined in src/modules/chats/chats.controller.ts:127\n                \n            \n\n\n            \n                \n                    [description]\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                                UserEntity\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { ApiTags, ApiBearerAuth, ApiExtraModels } from '@nestjs/swagger';\nimport {\n  ClassSerializerInterceptor,\n  UseInterceptors,\n  Controller,\n  UseGuards,\n  Delete,\n  Param,\n  Query,\n  Body,\n  Post,\n  Get,\n} from '@nestjs/common';\n\nimport { User, UseRole } from 'src/common/decorators';\nimport { JwtAuthGuard } from '../auth/guards';\nimport { ID } from '../../common/dto';\n\nimport { UserEntity } from '../users/entities';\n\nimport { ChatMessagesService, ChatParticipantsService, ChatsService } from './services';\nimport { ChatEntity } from './entities';\nimport {\n  ChatReadMessageResponseDto,\n  PaginationChatMessagesDto,\n  SelectChatMessagesDto,\n  ChatReceiveMessageDto,\n  CreateChatMessageDto,\n  PaginationChatsDto,\n  ChatReadMessageDto,\n  SelectChatsDto,\n  CreateChatDto,\n} from './dto';\nimport { UserRoleEnum } from '../users/enums';\n\n/**\n * [description]\n */\n@ApiBearerAuth()\n@ApiTags('chats')\n@Controller('chats')\n@UseGuards(JwtAuthGuard)\n@ApiExtraModels(\n  ChatReadMessageDto,\n  CreateChatMessageDto,\n  ChatReceiveMessageDto,\n  ChatReadMessageResponseDto,\n)\n@UseInterceptors(ClassSerializerInterceptor)\nexport class ChatsController {\n  /**\n   * [description]\n   * @param chatsService\n   * @param chatMessagesService\n   * @param chatParticipantsService\n   */\n  constructor(\n    private readonly chatsService: ChatsService,\n    private readonly chatMessagesService: ChatMessagesService,\n    private readonly chatParticipantsService: ChatParticipantsService,\n  ) {}\n\n  /**\n   * [description]\n   * @param dto\n   * @param user\n   */\n  @Post()\n  public async createOne(\n    @Body() dto: CreateChatDto,\n    @User() user: UserEntity,\n  ): Promise {\n    const chat = await this.chatsService.selectOneByParticipants([user.id, dto.participant.id]);\n    if (chat) return this.chatsService.selectOne({ id: chat.id }, { loadEagerRelations: true });\n\n    return this.chatsService.createOne({\n      participants: [{ user: { id: user.id } }, { user: dto.participant }],\n    });\n  }\n\n  /**\n   * [description]\n   * @param options\n   * @param user\n   */\n  @Get()\n  public async selectAll(\n    @Query() options: SelectChatsDto,\n    @User() user: UserEntity,\n  ): Promise {\n    return this.chatsService.selectAll(options, user);\n  }\n\n  /**\n   * [description]\n   * @param conditions\n   */\n  @Delete(':id')\n  @UseRole(UserRoleEnum.ADMIN)\n  public async deleteOne(@Param() conditions: ID): Promise {\n    return this.chatsService.deleteOne(conditions);\n  }\n\n  /**\n   * [description]\n   * @param condition\n   * @param options\n   * @param user\n   */\n  @Get('/:id/messages')\n  public async selectAllMessages(\n    @Param() chatConditions: ID,\n    @Query() options: SelectChatMessagesDto,\n    @User() user: UserEntity,\n  ): Promise {\n    await this.chatParticipantsService.selectOne({ user: { id: user.id }, chat: chatConditions });\n    return this.chatMessagesService.selectAll(options, chatConditions, user);\n  }\n\n  /**\n   * [description]\n   * @param condition\n   * @param options\n   * @param user\n   */\n  @Get('/messages/count/new')\n  public async selectNewMessagesCount(@User() user: UserEntity): Promise {\n    return this.chatMessagesService.selectNewMessagesCount(user);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ChatsGateway.html":{"url":"classes/ChatsGateway.html","title":"class - ChatsGateway","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ChatsGateway\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/chats/services/chats.gateway.ts\n        \n\n\n            \n                Description\n            \n            \n                [description]\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                server\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                handleReadMessage\n                            \n                            \n                                    Public\n                                    Async\n                                handleSendMessage\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(chatsService: ChatsService, socketsService: SocketsService, chatMessagesService: ChatMessagesService, chatParticipantsService: ChatParticipantsService)\n                    \n                \n                        \n                            \n                                Defined in src/modules/chats/services/chats.gateway.ts:44\n                            \n                        \n\n                \n                    \n                            [description]\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        chatsService\n                                                  \n                                                        \n                                                                        ChatsService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        socketsService\n                                                  \n                                                        \n                                                                        SocketsService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        chatMessagesService\n                                                  \n                                                        \n                                                                        ChatMessagesService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        chatParticipantsService\n                                                  \n                                                        \n                                                                        ChatParticipantsService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        server\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Server\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @WebSocketServer()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/chats/services/chats.gateway.ts:44\n                        \n                    \n\n            \n                \n                    [description]\n\n                \n            \n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        handleReadMessage\n                        \n                    \n                \n            \n            \n                \n                    \n                    handleReadMessage(conditions: ChatReadMessageDto, user: UserEntity)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @SubscribeMessage(ChatSocketEventsEnum.CHAT_READ_MESSAGE)\n                \n            \n\n            \n                \n                    Defined in src/modules/chats/services/chats.gateway.ts:98\n                \n            \n\n\n            \n                \n                    [description]\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    conditions\n                                    \n                                                ChatReadMessageDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    user\n                                    \n                                                UserEntity\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        handleSendMessage\n                        \n                    \n                \n            \n            \n                \n                    \n                    handleSendMessage(entityLike: CreateChatMessageDto, user: UserEntity)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @SubscribeMessage(ChatSocketEventsEnum.CHAT_SEND_MESSAGE)\n                \n            \n\n            \n                \n                    Defined in src/modules/chats/services/chats.gateway.ts:66\n                \n            \n\n\n            \n                \n                    [description]\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    entityLike\n                                    \n                                                CreateChatMessageDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    user\n                                    \n                                                UserEntity\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { UseFilters, UsePipes } from '@nestjs/common';\nimport { instanceToPlain } from 'class-transformer';\nimport { Server } from 'socket.io';\nimport { Not } from 'typeorm';\nimport {\n  SubscribeMessage,\n  WebSocketGateway,\n  WebSocketServer,\n  MessageBody,\n} from '@nestjs/websockets';\n\nimport { SocketsExceptionFilter } from 'src/common/filters';\nimport { SocketsService } from 'src/modules/sockets';\nimport { SocketUser } from 'src/common/decorators';\nimport { validationPipe } from 'src/common/pipes';\n\nimport { UserEntity } from 'src/modules/users/entities';\n\nimport { ChatMessageStatusEnum, ChatSocketEventsEnum } from '../enums';\nimport { ChatParticipantsService } from './chat-participants.service';\nimport { ChatMessagesService } from './chat-messages.service';\nimport { ChatsService } from './chats.service';\nimport {\n  ChatReadMessageResponseDto,\n  ChatReceiveMessageDto,\n  CreateChatMessageDto,\n  ChatReadMessageDto,\n} from '../dto';\n\n/**\n * [description]\n */\n@WebSocketGateway({\n  cors: { origin: '*' }, // TODO, TBD\n  transports: ['websocket'],\n})\n@UsePipes(validationPipe)\n@UseFilters(SocketsExceptionFilter)\nexport class ChatsGateway {\n  /**\n   * [description]\n   */\n  @WebSocketServer()\n  private readonly server: Server;\n\n  /**\n   * [description]\n   * @param chatsService\n   * @param socketsService\n   * @param chatMessagesService\n   * @param chatParticipantsService\n   */\n  constructor(\n    private readonly chatsService: ChatsService,\n    private readonly socketsService: SocketsService,\n    private readonly chatMessagesService: ChatMessagesService,\n    private readonly chatParticipantsService: ChatParticipantsService,\n  ) {}\n\n  /**\n   * [description]\n   * @param entityLike\n   * @param user\n   */\n  @SubscribeMessage(ChatSocketEventsEnum.CHAT_SEND_MESSAGE)\n  public async handleSendMessage(\n    @MessageBody() entityLike: CreateChatMessageDto,\n    @SocketUser() user: UserEntity,\n  ): Promise {\n    await this.chatParticipantsService.selectOne({ user: { id: user.id }, chat: entityLike.chat });\n\n    const participantsIds = await this.chatParticipantsService.selectIds({\n      where: { chat: entityLike.chat },\n    });\n\n    const message = await this.chatMessagesService.createOne({\n      ...entityLike,\n      owner: { id: user.id },\n    });\n    const chat = await this.chatsService.selectOneEager(entityLike.chat, user);\n\n    const socketsIds = this.socketsService.selectAllIds(participantsIds);\n    this.server.to(socketsIds).emit(\n      ChatSocketEventsEnum.CHAT_RECEIVE_MESSAGE,\n      new ChatReceiveMessageDto({\n        chat: instanceToPlain(chat),\n        message: instanceToPlain(message),\n      }),\n    );\n  }\n\n  /**\n   * [description]\n   * @param conditions\n   * @param user\n   */\n  @SubscribeMessage(ChatSocketEventsEnum.CHAT_READ_MESSAGE)\n  public async handleReadMessage(\n    @MessageBody() conditions: ChatReadMessageDto,\n    @SocketUser() user: UserEntity,\n  ): Promise {\n    await this.chatParticipantsService.selectOne({ user: { id: user.id }, chat: conditions.chat });\n    await this.chatMessagesService.updateOne(\n      { ...conditions, owner: { id: Not(user.id) } },\n      { status: ChatMessageStatusEnum.READ },\n    );\n\n    const participantsIds = await this.chatParticipantsService.selectIds({\n      where: { chat: conditions.chat },\n    });\n    const socketsIds = this.socketsService.selectAllIds(participantsIds);\n\n    this.server.to(socketsIds).emit(\n      ChatSocketEventsEnum.CHAT_READ_MESSAGE,\n      new ChatReadMessageResponseDto({\n        chat: { id: conditions.chat.id },\n        message: { id: conditions.id },\n      }),\n    );\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/ChatsModule.html":{"url":"modules/ChatsModule.html","title":"module - ChatsModule","body":"\n                   \n\n\n\n\n    Modules\n    ChatsModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_ChatsModule\n\n\n\ncluster_ChatsModule_exports\n\n\n\ncluster_ChatsModule_imports\n\n\n\ncluster_ChatsModule_providers\n\n\n\n\nSocketsModule\n\nSocketsModule\n\n\n\nChatsModule\n\nChatsModule\n\nChatsModule -->\n\nSocketsModule->ChatsModule\n\n\n\n\n\nChatMessagesService \n\nChatMessagesService \n\nChatMessagesService  -->\n\nChatsModule->ChatMessagesService \n\n\n\n\n\nChatParticipantsService \n\nChatParticipantsService \n\nChatParticipantsService  -->\n\nChatsModule->ChatParticipantsService \n\n\n\n\n\nChatsService \n\nChatsService \n\nChatsService  -->\n\nChatsModule->ChatsService \n\n\n\n\n\nChatMessagesService\n\nChatMessagesService\n\nChatsModule -->\n\nChatMessagesService->ChatsModule\n\n\n\n\n\nChatParticipantsService\n\nChatParticipantsService\n\nChatsModule -->\n\nChatParticipantsService->ChatsModule\n\n\n\n\n\nChatsService\n\nChatsService\n\nChatsModule -->\n\nChatsService->ChatsModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/modules/chats/chats.module.ts\n        \n\n\n\n        \n            Description\n        \n        \n            [description]\n\n        \n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            ChatMessagesService\n                        \n                        \n                            ChatParticipantsService\n                        \n                        \n                            ChatsService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            ChatsController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            SocketsModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            ChatMessagesService\n                        \n                        \n                            ChatParticipantsService\n                        \n                        \n                            ChatsService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { TypeOrmModule } from '@nestjs/typeorm';\nimport { Module } from '@nestjs/common';\n\nimport { SocketsModule } from '../sockets';\n\nimport { ChatEntity, ChatMessageEntity, ChatParticipantEntity } from './entities';\nimport { ChatsController } from './chats.controller';\nimport {\n  ChatParticipantsService,\n  ChatMessagesService,\n  ChatsGateway,\n  ChatsService,\n} from './services';\n\n/**\n * [description]\n */\n@Module({\n  imports: [\n    TypeOrmModule.forFeature([ChatEntity, ChatMessageEntity, ChatParticipantEntity]),\n    SocketsModule,\n  ],\n  controllers: [ChatsController],\n  providers: [ChatsService, ChatMessagesService, ChatParticipantsService, ChatsGateway],\n  exports: [ChatsService, ChatMessagesService, ChatParticipantsService],\n})\nexport class ChatsModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/ChatsService.html":{"url":"injectables/ChatsService.html","title":"injectable - ChatsService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  ChatsService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/chats/services/chats.service.ts\n        \n\n\n            \n                Description\n            \n            \n                [description]\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                createOne\n                            \n                            \n                                    Public\n                                    Async\n                                deleteOne\n                            \n                            \n                                    Public\n                                find\n                            \n                            \n                                    Public\n                                    Async\n                                selectAll\n                            \n                            \n                                    Public\n                                    Async\n                                selectAllStats\n                            \n                            \n                                    Public\n                                    Async\n                                selectOne\n                            \n                            \n                                    Public\n                                    Async\n                                selectOneByParticipants\n                            \n                            \n                                    Public\n                                    Async\n                                selectOneEager\n                            \n                            \n                                    Public\n                                    Async\n                                selectOneStats\n                            \n                            \n                                    Public\n                                    Async\n                                update\n                            \n                            \n                                    Public\n                                    Async\n                                updateOne\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(chatEntityRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/modules/chats/services/chats.service.ts:28\n                            \n                        \n\n                \n                    \n                            [description]\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        chatEntityRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        createOne\n                        \n                    \n                \n            \n            \n                \n                    \n                    createOne(entityLike: Partial, options: SaveOptions)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/chats/services/chats.service.ts:43\n                \n            \n\n\n            \n                \n                    [description]\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    entityLike\n                                    \n                                                Partial\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    options\n                                    \n                                            SaveOptions\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        { transaction: false }\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        deleteOne\n                        \n                    \n                \n            \n            \n                \n                    \n                    deleteOne(conditions: FindOptionsWhere, options: RemoveOptions)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/chats/services/chats.service.ts:322\n                \n            \n\n\n            \n                \n                    [description]\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    conditions\n                                    \n                                                FindOptionsWhere\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    options\n                                    \n                                            RemoveOptions\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        { transaction: false }\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        find\n                        \n                    \n                \n            \n            \n                \n                    \n                    find(optionsOrConditions?: FindManyOptions)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/chats/services/chats.service.ts:61\n                \n            \n\n\n            \n                \n                     [description]\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    optionsOrConditions\n                                    \n                                                FindManyOptions\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         SelectQueryBuilder\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        selectAll\n                        \n                    \n                \n            \n            \n                \n                    \n                    selectAll(options: SelectChatsDto, user: Partial)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/chats/services/chats.service.ts:144\n                \n            \n\n\n            \n                \n                    [description]\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    options\n                                    \n                                                SelectChatsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    user\n                                    \n                                                Partial\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        selectAllStats\n                        \n                    \n                \n            \n            \n                \n                    \n                    selectAllStats(data: ChatEntity[], user: Partial)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/chats/services/chats.service.ts:87\n                \n            \n\n\n            \n                \n                    [description]\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    data\n                                    \n                                                ChatEntity[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    user\n                                    \n                                                Partial\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        selectOne\n                        \n                    \n                \n            \n            \n                \n                    \n                    selectOne(conditions: FindOptionsWhere, options: FindOneOptions)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/chats/services/chats.service.ts:203\n                \n            \n\n\n            \n                \n                    [description]\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    conditions\n                                    \n                                                FindOptionsWhere\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    options\n                                    \n                                                FindOneOptions\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        { loadEagerRelations: false }\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        selectOneByParticipants\n                        \n                    \n                \n            \n            \n                \n                    \n                    selectOneByParticipants(participantIds: string[])\n                \n            \n\n\n            \n                \n                    Defined in src/modules/chats/services/chats.service.ts:261\n                \n            \n\n\n            \n                \n                    [description]\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    participantIds\n                                    \n                                            string[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        selectOneEager\n                        \n                    \n                \n            \n            \n                \n                    \n                    selectOneEager(conditions: FindOptionsWhere, user: Partial, options: FindOneOptions)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/chats/services/chats.service.ts:220\n                \n            \n\n\n            \n                \n                    [description]\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    conditions\n                                    \n                                                FindOptionsWhere\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    user\n                                    \n                                                Partial\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    options\n                                    \n                                                FindOneOptions\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        { loadEagerRelations: true }\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        selectOneStats\n                        \n                    \n                \n            \n            \n                \n                    \n                    selectOneStats(data: ChatEntity, user: Partial, equal)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/chats/services/chats.service.ts:113\n                \n            \n\n\n            \n                \n                    [description]\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    data\n                                    \n                                                ChatEntity\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    user\n                                    \n                                                Partial\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    equal\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        false\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                    \n                    update(conditions: FindOptionsWhere, entityLike: Partial)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/chats/services/chats.service.ts:303\n                \n            \n\n\n            \n                \n                    [description]\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    conditions\n                                    \n                                                FindOptionsWhere\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    entityLike\n                                    \n                                                Partial\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        updateOne\n                        \n                    \n                \n            \n            \n                \n                    \n                    updateOne(conditions: FindOptionsWhere, entityLike: Partial, options: SaveOptions)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/chats/services/chats.service.ts:284\n                \n            \n\n\n            \n                \n                    [description]\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    conditions\n                                    \n                                                FindOptionsWhere\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    entityLike\n                                    \n                                                Partial\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    options\n                                    \n                                            SaveOptions\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        { transaction: false }\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { NotFoundException, ConflictException, Injectable } from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { instanceToPlain } from 'class-transformer';\nimport {\n  SelectQueryBuilder,\n  FindOptionsWhere,\n  FindOptionsUtils,\n  FindManyOptions,\n  FindOneOptions,\n  RemoveOptions,\n  SaveOptions,\n  Repository,\n  In,\n} from 'typeorm';\n\nimport { ErrorTypeEnum } from 'src/common/enums';\n\nimport { UserEntity } from 'src/modules/users/entities';\n\nimport { PaginationChatsDto, SelectChatsDto } from '../dto';\nimport { ChatMessageStatusEnum } from '../enums';\nimport { ChatEntity } from '../entities';\n\n/**\n * [description]\n */\n@Injectable()\nexport class ChatsService {\n  /**\n   * [description]\n   * @param chatEntityRepository\n   */\n  constructor(\n    @InjectRepository(ChatEntity)\n    private readonly chatEntityRepository: Repository,\n  ) {}\n\n  /**\n   * [description]\n   * @param entityLike\n   * @param options\n   */\n  public async createOne(\n    entityLike: Partial,\n    options: SaveOptions = { transaction: false },\n  ): Promise {\n    return this.chatEntityRepository.manager.transaction(async () => {\n      const entity = this.chatEntityRepository.create(entityLike);\n      const { id } = await this.chatEntityRepository.save(entity, options).catch(() => {\n        throw new ConflictException(ErrorTypeEnum.CHAT_ALREADY_EXIST);\n      });\n\n      return this.selectOne({ id }, { loadEagerRelations: true });\n    });\n  }\n\n  /**\n   *  [description]\n   * @param optionsOrConditions\n   */\n  public find(optionsOrConditions?: FindManyOptions): SelectQueryBuilder {\n    const metadata = this.chatEntityRepository.metadata;\n    const qb = this.chatEntityRepository.createQueryBuilder(\n      FindOptionsUtils.extractFindManyOptionsAlias(optionsOrConditions) || metadata.name,\n    );\n\n    if (\n      !FindOptionsUtils.isFindManyOptions(optionsOrConditions) ||\n      optionsOrConditions.loadEagerRelations !== false\n    ) {\n      FindOptionsUtils.joinEagerRelations(qb, qb.alias, metadata);\n\n      /**\n       * Place for common relation\n       * @example qb.leftJoinAndSelect('ChatEntity.relation_field', 'ChatEntity_relation_field')\n       */\n    }\n\n    return qb.setFindOptions(optionsOrConditions);\n  }\n\n  /**\n   * [description]\n   * @param data\n   * @param user\n   */\n  public async selectAllStats(\n    data: ChatEntity[],\n    user: Partial,\n  ): Promise {\n    const stats: Record = await this.find({ loadEagerRelations: false })\n      .select('ChatEntity.id', 'id')\n      .addSelect('COUNT(ChatEntity_messages.id)::INT', 'newMessagesCount')\n      .leftJoin(\n        'ChatEntity.messages',\n        'ChatEntity_messages',\n        'ChatEntity_messages.status = :status AND ChatEntity_messages.ownerId != :ownerId',\n        { status: ChatMessageStatusEnum.SENT, ownerId: user.id },\n      )\n      .groupBy('ChatEntity.id')\n      .where({ id: In(data.map((row) => row.id)) })\n      .getRawMany()\n      .then((data) => data.reduce((acc, curr) => ((acc[curr.id] = curr), acc), {}));\n\n    return data.map((row) => ((row.newMessagesCount = stats[row.id].newMessagesCount), row));\n  }\n\n  /**\n   * [description]\n   * @param data\n   * @param user\n   */\n  public async selectOneStats(\n    data: ChatEntity,\n    user: Partial,\n    equal = false,\n  ): Promise {\n    const qb = this.find({ loadEagerRelations: false })\n      .select('ChatEntity.id', 'id')\n      .addSelect('COUNT(ChatEntity_messages.id)::INT', 'newMessagesCount')\n      .leftJoin(\n        'ChatEntity.messages',\n        'ChatEntity_messages',\n        'ChatEntity_messages.status = :status',\n        { status: ChatMessageStatusEnum.SENT, ownerId: user.id },\n      )\n      .groupBy('ChatEntity.id')\n      .where({ id: data.id });\n\n    equal\n      ? qb.andWhere('ChatEntity_messages.ownerId = :ownerId')\n      : qb.andWhere('ChatEntity_messages.ownerId != :ownerId');\n\n    const stats: Partial = await qb.getRawOne();\n    data.newMessagesCount = stats.newMessagesCount;\n    return data;\n  }\n\n  /**\n   * [description]\n   * @param options\n   * @param user\n   */\n  public async selectAll(\n    options: SelectChatsDto,\n    user: Partial,\n  ): Promise {\n    const { activeChatId } = options;\n    const qb = this.find(instanceToPlain(options)).andWhere(options.whereBrackets);\n\n    /**\n     * Join last message\n     */\n    qb.leftJoinAndSelect('ChatEntity.lastMessage', 'ChatEntity_lastMessage');\n\n    /**\n     * Join current user\n     */\n    qb.innerJoin(\n      'ChatEntity.participants',\n      'ChatEntity_participant_owner',\n      'ChatEntity_participant_owner.userId = :userId',\n      { userId: user.id },\n    );\n\n    /**\n     * Join other user with cover\n     */\n    qb.innerJoinAndMapOne(\n      'ChatEntity.participant',\n      'ChatEntity.participants',\n      'ChatEntity_participant_other',\n      'ChatEntity_participant_other.userId != :userId',\n    )\n      .innerJoinAndSelect('ChatEntity_participant_other.user', 'ChatEntity_participant_other_user')\n      .leftJoinAndSelect(\n        'ChatEntity_participant_other_user.cover',\n        'ChatEntity_participant_other_user_cover',\n      );\n\n    /**\n     * Order by active or/and udatedAt\n     */\n    if (activeChatId)\n      qb.addSelect(\n        `(CASE \"ChatEntity\".\"id\" WHEN '${activeChatId}' THEN 1 ELSE 0 END)`,\n        'active',\n      ).orderBy('active', 'DESC');\n    qb.addOrderBy('ChatEntity.updatedAt', 'DESC');\n\n    const [rows, count] = await qb.getManyAndCount().catch(() => {\n      throw new NotFoundException(ErrorTypeEnum.CHATS_NOT_FOUND);\n    });\n    return new PaginationChatsDto([await this.selectAllStats(rows, user), count]);\n  }\n\n  /**\n   * [description]\n   *\n   * @param conditions\n   * @param options\n   */\n  public async selectOne(\n    conditions: FindOptionsWhere,\n    options: FindOneOptions = { loadEagerRelations: false },\n  ): Promise {\n    return this.find({ ...instanceToPlain(options), where: conditions })\n      .getOneOrFail()\n      .catch(() => {\n        throw new NotFoundException(ErrorTypeEnum.CHAT_NOT_FOUND);\n      });\n  }\n\n  /**\n   * [description]\n   *\n   * @param conditions\n   * @param options\n   */\n  public async selectOneEager(\n    conditions: FindOptionsWhere,\n    user: Partial,\n    options: FindOneOptions = { loadEagerRelations: true },\n  ): Promise {\n    return (\n      this.find({ ...instanceToPlain(options), where: conditions })\n        /**\n         * Join last message\n         */\n        .leftJoinAndSelect('ChatEntity.lastMessage', 'ChatEntity_lastMessage')\n        /**\n         * Join owner user with cover\n         */\n        .innerJoinAndMapOne(\n          'ChatEntity.participant',\n          'ChatEntity.participants',\n          'ChatEntity_participant_owner',\n          'ChatEntity_participant_owner.userId = :userId',\n          { userId: user.id },\n        )\n        .innerJoinAndSelect(\n          'ChatEntity_participant_owner.user',\n          'ChatEntity_participant_owner_user',\n        )\n        .leftJoinAndSelect(\n          'ChatEntity_participant_owner_user.cover',\n          'ChatEntity_participant_owner_user_cover',\n        )\n        .getOneOrFail()\n        .then((data) => this.selectOneStats(data, user, true))\n        .catch(() => {\n          throw new NotFoundException(ErrorTypeEnum.CHAT_NOT_FOUND);\n        })\n    );\n  }\n\n  /**\n   * [description]\n   * @param participantIds\n   */\n  public async selectOneByParticipants(participantIds: string[]): Promise {\n    return this.chatEntityRepository\n      .createQueryBuilder('ChatEntity')\n      .select('ChatEntity.id')\n      .innerJoin(\n        'ChatEntity.participants',\n        'ChatEntity_participants',\n        'ChatEntity_participants.userId IN (:...participantIds)',\n        { participantIds },\n      )\n      .having(\n        `ARRAY_LENGTH(ARRAY_AGG(ChatEntity_participants.userId), 1) >= ${participantIds.length}`,\n      )\n      .groupBy('ChatEntity.id')\n      .getOne();\n  }\n\n  /**\n   * [description]\n   * @param conditions\n   * @param entityLike\n   * @param options\n   */\n  public async updateOne(\n    conditions: FindOptionsWhere,\n    entityLike: Partial,\n    options: SaveOptions = { transaction: false },\n  ): Promise {\n    return this.chatEntityRepository.manager.transaction(async () => {\n      const mergeIntoEntity = await this.selectOne(conditions);\n      const entity = this.chatEntityRepository.merge(mergeIntoEntity, entityLike);\n      return this.chatEntityRepository.save(entity, options).catch(() => {\n        throw new ConflictException(ErrorTypeEnum.CHAT_ALREADY_EXIST);\n      });\n    });\n  }\n\n  /**\n   * [description]\n   * @param conditions\n   * @param entityLike\n   */\n  public async update(\n    conditions: FindOptionsWhere,\n    entityLike: Partial,\n  ): Promise {\n    return this.chatEntityRepository.manager.transaction(async () => {\n      return this.chatEntityRepository\n        .update(conditions, entityLike)\n        .then((data) => data.affected)\n        .catch(() => {\n          throw new ConflictException(ErrorTypeEnum.CHAT_ALREADY_EXIST);\n        });\n    });\n  }\n\n  /**\n   * [description]\n   * @param conditions\n   * @param options\n   */\n  public async deleteOne(\n    conditions: FindOptionsWhere,\n    options: RemoveOptions = { transaction: false },\n  ): Promise {\n    return this.chatEntityRepository.manager.transaction(async () => {\n      const entity = await this.selectOne(conditions, options);\n      return this.chatEntityRepository.remove(entity).catch(() => {\n        throw new NotFoundException(ErrorTypeEnum.CHAT_NOT_FOUND);\n      });\n    });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/ConfigModule.html":{"url":"modules/ConfigModule.html","title":"module - ConfigModule","body":"\n                   \n\n\n\n\n    Modules\n    ConfigModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_ConfigModule\n\n\n\ncluster_ConfigModule_exports\n\n\n\ncluster_ConfigModule_providers\n\n\n\n\nConfigService \n\nConfigService \n\n\n\nConfigModule\n\nConfigModule\n\nConfigService  -->\n\nConfigModule->ConfigService \n\n\n\n\n\nConfigService\n\nConfigService\n\nConfigModule -->\n\nConfigService->ConfigModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/config/config.module.ts\n        \n\n\n\n        \n            Description\n        \n        \n            [description]\n\n        \n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            ConfigService\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            ConfigService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module, Global } from '@nestjs/common';\n\nimport { ConfigService } from './config.service';\n\n/**\n * [description]\n */\n@Global()\n@Module({\n  providers: [ConfigService],\n  exports: [ConfigService],\n})\nexport class ConfigModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/ConfigService.html":{"url":"injectables/ConfigService.html","title":"injectable - ConfigService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  ConfigService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/config/config.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Configuration service\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                get\n                            \n                            \n                                    Public\n                                getDest\n                            \n                            \n                                    Public\n                                getMode\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/config/config.service.ts:11\n                            \n                        \n\n                \n                    \n                            Configuration service constructor\nDotEnv config\n\n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        get\n                        \n                    \n                \n            \n            \n                \n                    \n                    get(key: string)\n                \n            \n\n\n            \n                \n                    Defined in src/config/config.service.ts:46\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        T\n                    \n                \n            \n\n            \n                \n                    Method for getting the value of a variable in the environment\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    key\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The key in the environment variable object must be a string\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     T\n\n                    \n                    \n                        Returns the generated type limited the function types JSON.parse()\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        getDest\n                        \n                    \n                \n            \n            \n                \n                    \n                    getDest(key: string, filename?: string)\n                \n            \n\n\n            \n                \n                    Defined in src/config/config.service.ts:27\n                \n            \n\n\n            \n                \n                    Method to get the path to a directory or file in this directory based on an environment variable\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    key\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The key in the environment variable object must be a string\n\n                                    \n                                \n                                \n                                    filename\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                    \n                                        The file name for a specific directory must be string, is optional\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        Returns the absolute path to a file or directory as a string\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        getMode\n                        \n                    \n                \n            \n            \n                \n                    \n                    getMode(mode: ConfigMode)\n                \n            \n\n\n            \n                \n                    Defined in src/config/config.service.ts:37\n                \n            \n\n\n            \n                \n                    Method for checking application operating modes\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    mode\n                                    \n                                                ConfigMode\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The mode to be checked must be enum modes in ConfigMode\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         boolean\n\n                    \n                    \n                        Returns the boolean value\n\n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { config } from 'dotenv';\nimport { join } from 'path';\n\nimport { ConfigMode } from './interfaces/config.interface';\n\n/**\n * Configuration service\n */\n@Injectable()\nexport class ConfigService {\n  /**\n   * Configuration service constructor\n   * DotEnv config\n   */\n  constructor() {\n    const { error } = config({ path: `env/.env.${process.env.NODE_ENV}` });\n    if (error) throw error;\n  }\n\n  /**\n   * Method to get the path to a directory or file in this directory based on an environment variable\n   * @param  key      The key in the environment variable object must be a string\n   * @param  filename The file name for a specific directory must be string, is optional\n   * @return          Returns the absolute path to a file or directory as a string\n   */\n  public getDest(key: string, filename?: string): string {\n    filename = process.env[filename] || filename || '/';\n    return join(process.cwd(), this.get(key), filename);\n  }\n\n  /**\n   * Method for checking application operating modes\n   * @param  mode The mode to be checked must be enum modes in ConfigMode\n   * @return     Returns the boolean value\n   */\n  public getMode(mode: ConfigMode): boolean {\n    return process.env['NODE_ENV'] === mode;\n  }\n\n  /**\n   * Method for getting the value of a variable in the environment\n   * @param  key The key in the environment variable object must be a string\n   * @return     Returns the generated type limited the function types JSON.parse()\n   */\n  public get(key: string): T {\n    const variable = process.env[key];\n    if (!variable) throw TypeError(`The ${key} cannot be undefined`);\n    try {\n      return JSON.parse(variable);\n    } catch {\n      return (variable);\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ConfirmationEmailDto.html":{"url":"classes/ConfirmationEmailDto.html","title":"class - ConfirmationEmailDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ConfirmationEmailDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/auth/dto/confirmation-email.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                [description]\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Readonly\n                                code\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        code\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Length(6)@IsString()@ApiProperty({example: '123456', maxLength: 6})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/auth/dto/confirmation-email.dto.ts:15\n                        \n                    \n\n            \n                \n                    [description]\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { CreateUserDto } from '../../users/dto';\nimport { ApiProperty, PickType } from '@nestjs/swagger';\nimport { IsString, Length } from 'class-validator';\n\n/**\n * [description]\n */\nexport class ConfirmationEmailDto extends PickType(CreateUserDto, ['email']) {\n  /**\n   * [description]\n   */\n  @Length(6)\n  @IsString()\n  @ApiProperty({ example: '123456', maxLength: 6 })\n  public readonly code: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateChatDto.html":{"url":"classes/CreateChatDto.html","title":"class - CreateChatDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateChatDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/chats/dto/create-chat.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                [description]\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Readonly\n                                participant\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        participant\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ID\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ValidateNested()@ApiProperty({type: () => ID})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/chats/dto/create-chat.dto.ts:15\n                        \n                    \n\n            \n                \n                    [description]\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ValidateNested } from 'class-validator';\nimport { ApiProperty } from '@nestjs/swagger';\n\nimport { ID } from 'src/common/dto';\n\n/**\n * [description]\n */\nexport class CreateChatDto {\n  /**\n   * [description]\n   */\n  @ValidateNested()\n  @ApiProperty({ type: () => ID })\n  public readonly participant: ID;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateChatMessageDto.html":{"url":"classes/CreateChatMessageDto.html","title":"class - CreateChatMessageDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateChatMessageDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/chats/dto/create-chat-message.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                [description]\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Readonly\n                                chat\n                            \n                            \n                                    Public\n                                    Readonly\n                                    Optional\n                                file\n                            \n                            \n                                    Public\n                                    Readonly\n                                    Optional\n                                reply\n                            \n                            \n                                    Public\n                                    Readonly\n                                    Optional\n                                text\n                            \n                            \n                                    Public\n                                    Readonly\n                                type\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        chat\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ID\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()@ValidateNested()@ApiProperty({type: () => ID})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/chats/dto/create-chat-message.dto.ts:35\n                        \n                    \n\n            \n                \n                    [description]\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                            Optional\n                        file\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ID\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@ValidateNested()@ApiProperty({type: () => ID})@ValidateIf(o => )\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/chats/dto/create-chat-message.dto.ts:62\n                        \n                    \n\n            \n                \n                    [description]\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                            Optional\n                        reply\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ID\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@ValidateNested()@ApiProperty({type: () => ID})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/chats/dto/create-chat-message.dto.ts:43\n                        \n                    \n\n            \n                \n                    [description]\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                            Optional\n                        text\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()@IsOptional()@MaxLength(60000)@ValidateIf(o => )\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/chats/dto/create-chat-message.dto.ts:53\n                        \n                    \n\n            \n                \n                    [description]\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        type\n                        \n                    \n                \n            \n                \n                    \n                        Default value : ChatMessageTypeEnum.TEXT\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()@IsEnum(ChatMessageTypeEnum)@ApiProperty({enum: ChatMessageTypeEnum, default: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/chats/dto/create-chat-message.dto.ts:27\n                        \n                    \n\n            \n                \n                    [description]\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport {\n  ValidateNested,\n  IsNotEmpty,\n  ValidateIf,\n  IsOptional,\n  MaxLength,\n  IsString,\n  IsEnum,\n} from 'class-validator';\n\nimport { ID } from 'src/common/dto';\n\nimport { ChatEntity, ChatMessageEntity } from '../entities';\nimport { ChatMessageTypeEnum } from '../enums';\n\n/**\n * [description]\n */\nexport class CreateChatMessageDto {\n  /**\n   * [description]\n   */\n  @IsNotEmpty()\n  @IsEnum(ChatMessageTypeEnum)\n  @ApiProperty({ enum: ChatMessageTypeEnum, default: ChatMessageTypeEnum.TEXT })\n  public readonly type = ChatMessageTypeEnum.TEXT;\n\n  /**\n   * [description]\n   */\n  @IsNotEmpty()\n  @ValidateNested()\n  @ApiProperty({ type: () => ID })\n  public readonly chat: ID;\n\n  /**\n   * [description]\n   */\n  @IsOptional()\n  @ValidateNested()\n  @ApiProperty({ type: () => ID })\n  public readonly reply?: ID;\n\n  /**\n   * [description]\n   */\n  @IsString()\n  @IsNotEmpty()\n  @IsOptional()\n  @MaxLength(6e4)\n  @ValidateIf((o) => o.type === ChatMessageTypeEnum.TEXT)\n  public readonly text?: string;\n\n  /**\n   * [description]\n   */\n  @IsOptional()\n  @ValidateNested()\n  @ApiProperty({ type: () => ID })\n  @ValidateIf((o) => o.type === ChatMessageTypeEnum.FILE)\n  public readonly file?: ID;\n}\n\n/**\n * [description]\n */\nexport class ChatReceiveMessageDto {\n  /**\n   * [description]\n   */\n  @ApiProperty({ type: () => ChatEntity })\n  public readonly chat: Partial;\n\n  /**\n   * [description]\n   */\n  @ApiProperty({ type: () => ChatMessageEntity })\n  public readonly message: Partial;\n\n  /**\n   * [description]\n   * @param data\n   */\n  constructor(data: { chat: Partial; message: Partial }) {\n    Object.assign(this, data);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateFileDto.html":{"url":"classes/CreateFileDto.html","title":"class - CreateFileDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateFileDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/files/dto/create-file.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                [description]\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Readonly\n                                file\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        file\n                        \n                    \n                \n            \n                \n                    \n                        Type :         UploadedFile\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()@ApiProperty({type: String, format: 'binary', description: 'multipart file field'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/files/dto/create-file.dto.ts:19\n                        \n                    \n\n            \n                \n                    Fastify multipart instance\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport { IsNotEmpty } from 'class-validator';\n\nimport { UploadedFile } from 'src/multipart';\n\n/**\n * [description]\n */\nexport class CreateFileDto {\n  /**\n   * Fastify multipart instance\n   */\n  @IsNotEmpty()\n  @ApiProperty({\n    type: String,\n    format: 'binary',\n    description: 'multipart file field',\n  })\n  public readonly file: UploadedFile;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/CreateMockFileReturn.html":{"url":"interfaces/CreateMockFileReturn.html","title":"interface - CreateMockFileReturn","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  CreateMockFileReturn\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            test/utils/mock-file.util.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            buffer\n                                        \n                                \n                                \n                                        \n                                            encoding\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            file\n                                        \n                                \n                                \n                                        \n                                            filename\n                                        \n                                \n                                \n                                        \n                                            filePath\n                                        \n                                \n                                \n                                        \n                                            mimetype\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        buffer\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        buffer:     Buffer\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     Buffer\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        encoding\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        encoding:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        file\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        file:     stream.Readable\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     stream.Readable\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        filename\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        filename:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        filePath\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        filePath:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        mimetype\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        mimetype:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import * as crypto from 'crypto';\nimport * as stream from 'stream';\nimport * as fs from 'fs';\n\nimport { ConfigService } from 'src/config';\n\nconst configService = new ConfigService();\n\nexport interface CreateMockFileReturn {\n  filename: string;\n  encoding: string;\n  mimetype: string;\n  filePath: string;\n  buffer: Buffer;\n  file?: stream.Readable;\n}\n\nexport function createMockFileMeta(data?: Partial): CreateMockFileReturn {\n  const filename = crypto.randomBytes(8).toString('hex') + '.png';\n  const filePath = configService.getDest('STORE_DEST', filename);\n  const encoding = '7bit';\n  const mimetype = 'image/png';\n  const buffer = crypto.randomBytes(64);\n  const file = stream.Readable.from(buffer.toString());\n  return Object.assign({ filename, encoding, mimetype, filePath, file, buffer }, data);\n}\n\nexport function createMockFile(data?: Partial): CreateMockFileReturn {\n  const { filename, encoding, mimetype, filePath, buffer } = createMockFileMeta();\n  fs.writeFileSync(filePath, buffer);\n  expect(fs.existsSync(filePath)).toEqual(true);\n  return Object.assign({ filename, encoding, mimetype, filePath, buffer }, data);\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateNotificationDto.html":{"url":"classes/CreateNotificationDto.html","title":"class - CreateNotificationDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateNotificationDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/notifications/dto/create-notification.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Readonly\n                                title\n                            \n                            \n                                    Public\n                                    Readonly\n                                type\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        title\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @MinLength(1)@MaxLength(256)@ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/notifications/dto/create-notification.dto.ts:10\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        type\n                        \n                    \n                \n            \n                \n                    \n                        Type :         NotificationsTypeEnum\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsEnum(NotificationsTypeEnum)@ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/notifications/dto/create-notification.dto.ts:14\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { MaxLength, MinLength, IsEnum } from 'class-validator';\nimport { ApiProperty } from '@nestjs/swagger';\n\nimport { NotificationsTypeEnum } from '../enums';\n\nexport class CreateNotificationDto {\n  @MinLength(1)\n  @MaxLength(256)\n  @ApiProperty()\n  public readonly title: string;\n\n  @IsEnum(NotificationsTypeEnum)\n  @ApiProperty()\n  public readonly type: NotificationsTypeEnum;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateProfileDto.html":{"url":"classes/CreateProfileDto.html","title":"class - CreateProfileDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateProfileDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/auth/dto/create-profile.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                [description]\n\n            \n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PickType } from '@nestjs/swagger';\nimport { CreateUserDto } from '../../users/dto';\n\n/**\n * [description]\n */\nexport class CreateProfileDto extends PickType(CreateUserDto, ['password', 'email']) {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateUserDto.html":{"url":"classes/CreateUserDto.html","title":"class - CreateUserDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateUserDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/users/dto/create-user.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                [description]\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Readonly\n                                    Optional\n                                cover\n                            \n                            \n                                    Public\n                                    Readonly\n                                email\n                            \n                            \n                                    Public\n                                    Readonly\n                                password\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                            Optional\n                        cover\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ID\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@ValidateNested()@Type(undefined)@ApiProperty({type: () => ID})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/users/dto/create-user.dto.ts:33\n                        \n                    \n\n            \n                \n                    [description]\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsEmail()@ApiProperty({example: 'admin@gmail.com', maxLength: 320})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/users/dto/create-user.dto.ts:16\n                        \n                    \n\n            \n                \n                    [description]\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @MinLength(8)@MaxLength(64)@ApiProperty({minLength: 8, maxLength: 64, example: 'password'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/users/dto/create-user.dto.ts:24\n                        \n                    \n\n            \n                \n                    [description]\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsEmail, IsOptional, MaxLength, MinLength, ValidateNested } from 'class-validator';\nimport { ApiProperty } from '@nestjs/swagger';\nimport { Type } from 'class-transformer';\n\nimport { ID } from 'src/common/dto';\n\n/**\n * [description]\n */\nexport class CreateUserDto {\n  /**\n   * [description]\n   */\n  @IsEmail()\n  @ApiProperty({ example: 'admin@gmail.com', maxLength: 320 })\n  public readonly email: string;\n\n  /**\n   * [description]\n   */\n  @MinLength(8)\n  @MaxLength(64)\n  @ApiProperty({ minLength: 8, maxLength: 64, example: 'password' })\n  public readonly password: string;\n\n  /**\n   * [description]\n   */\n  @IsOptional()\n  @ValidateNested()\n  @Type(() => ID)\n  @ApiProperty({ type: () => ID })\n  public readonly cover?: ID;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateUserNotificationTokenDto.html":{"url":"classes/CreateUserNotificationTokenDto.html","title":"class - CreateUserNotificationTokenDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateUserNotificationTokenDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/users/dto/create-user-notification-token.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                [description]\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Readonly\n                                token\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        token\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @MaxLength(1024)@ApiProperty({maxLength: 1024})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/users/dto/create-user-notification-token.dto.ts:13\n                        \n                    \n\n            \n                \n                    [description]\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport { MaxLength } from 'class-validator';\n\n/**\n * [description]\n */\nexport class CreateUserNotificationTokenDto {\n  /**\n   * [description]\n   */\n  @MaxLength(1024)\n  @ApiProperty({ maxLength: 1024 })\n  public readonly token: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CredentialsDto.html":{"url":"classes/CredentialsDto.html","title":"class - CredentialsDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CredentialsDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/auth/dto/credentials.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                [description]\n\n            \n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PickType } from '@nestjs/swagger';\n\nimport { CreateUserDto } from '../../users/dto';\n\n/**\n * [description]\n */\nexport class CredentialsDto extends PickType(CreateUserDto, ['email', 'password']) {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/DatabaseModule.html":{"url":"modules/DatabaseModule.html","title":"module - DatabaseModule","body":"\n                   \n\n\n\n\n    Modules\n    DatabaseModule\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/database/database.module.ts\n        \n\n\n\n        \n            Description\n        \n        \n            [description]\n\n        \n\n\n        \n            \n            \n        \n\n\n    \n\n\n    \n        import { TypeOrmModule, TypeOrmModuleOptions } from '@nestjs/typeorm';\nimport { Module } from '@nestjs/common';\nimport { dirname } from 'path';\n\nimport { ConfigService } from 'src/config';\nimport { TlsOptions } from 'node:tls';\n\n/**\n * [description]\n */\n@Module({\n  imports: [\n    TypeOrmModule.forRootAsync({\n      useFactory: (configService: ConfigService) => {\n        const ssl: TlsOptions = configService.get('TYPEORM_SSL') && {\n          rejectUnauthorized: false,\n        };\n\n        return {\n          name: configService.get('TYPEORM_NAME'),\n          type: configService.get('TYPEORM_TYPE'),\n          host: configService.get('TYPEORM_HOST'),\n          port: configService.get('TYPEORM_PORT'),\n          database: configService.get('TYPEORM_DATABASE'),\n          username: configService.get('TYPEORM_USERNAME'),\n          password: configService.get('TYPEORM_PASSWORD'),\n          cache: configService.get('TYPEORM_CACHE'),\n          logging: configService.get('TYPEORM_LOGGING'),\n          dropSchema: configService.get('TYPEORM_DROP_SCHEMA'),\n          synchronize: configService.get('TYPEORM_SYNCHRONIZE'),\n          migrationsRun: configService.get('TYPEORM_MIGRATIONS_RUN'),\n          entities: [dirname(__dirname) + '/modules/**/*.entity.{ts,js}'],\n          migrations: [__dirname + '/migrations/*.{ts,js}'],\n          ssl,\n        } as TypeOrmModuleOptions;\n      },\n      inject: [ConfigService],\n    }),\n  ],\n})\nexport class DatabaseModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/DeleteUserNotificationTokenDto.html":{"url":"classes/DeleteUserNotificationTokenDto.html","title":"class - DeleteUserNotificationTokenDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  DeleteUserNotificationTokenDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/users/dto/delete-user-notification-token.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                [description]\n\n            \n\n            \n                Extends\n            \n            \n                        CreateUserNotificationTokenDto\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Readonly\n                                token\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        token\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @MaxLength(1024)@ApiProperty({maxLength: 1024})\n                        \n                    \n                \n                        \n                            \n                                Inherited from         CreateUserNotificationTokenDto\n\n                            \n                        \n                    \n                        \n                                Defined in         CreateUserNotificationTokenDto:13\n\n                        \n                    \n\n            \n                \n                    [description]\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { CreateUserNotificationTokenDto } from './create-user-notification-token.dto';\n\n/**\n * [description]\n */\nexport class DeleteUserNotificationTokenDto extends CreateUserNotificationTokenDto {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/DownloadFileDto.html":{"url":"classes/DownloadFileDto.html","title":"class - DownloadFileDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  DownloadFileDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/files/dto/download-file.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                [description]\n\n            \n\n            \n                Extends\n            \n            \n                        ID\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Readonly\n                                    Optional\n                                download\n                            \n                            \n                                    Public\n                                    Readonly\n                                id\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                            Optional\n                        download\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsBoolean()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/files/dto/download-file.dto.ts:13\n                        \n                    \n\n            \n                \n                    [description]\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsUUID()@ApiProperty()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         ID\n\n                            \n                        \n                    \n                        \n                                Defined in         ID:13\n\n                        \n                    \n\n            \n                \n                    Entity ID\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsBoolean, IsOptional } from 'class-validator';\nimport { ID } from 'src/common/dto';\n\n/**\n * [description]\n */\nexport class DownloadFileDto extends ID {\n  /**\n   * [description]\n   */\n  @IsOptional()\n  @IsBoolean()\n  public readonly download?: boolean;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/FileEntity.html":{"url":"entities/FileEntity.html","title":"entity - FileEntity","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  FileEntity\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/files/entities/file.entity.ts\n        \n\n\n            \n                Description\n            \n            \n                [description]\n\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Readonly\n                                createdAt\n                            \n                            \n                                    Public\n                                    Readonly\n                                encoding\n                            \n                            \n                                    Public\n                                    Readonly\n                                extname\n                            \n                            \n                                    Public\n                                    Readonly\n                                filename\n                            \n                            \n                                    Public\n                                    Readonly\n                                fileSize\n                            \n                            \n                                    Public\n                                    Readonly\n                                id\n                            \n                            \n                                    Public\n                                    Readonly\n                                mimetype\n                            \n                            \n                                    Public\n                                    Readonly\n                                owner\n                            \n                            \n                                    Public\n                                    Readonly\n                                title\n                            \n                            \n                                    Public\n                                    Readonly\n                                updatedAt\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        createdAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({readOnly: true})@CreateDateColumn({readonly: true, type: 'timestamptz', default: () => NOW()})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/files/entities/file.entity.ts:105\n                        \n                    \n\n            \n                \n                    [description]\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        encoding\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', length: 7, nullable: true})@ApiProperty({maxLength: 7, readOnly: true, nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/files/entities/file.entity.ts:87\n                        \n                    \n\n            \n                \n                    [description]\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        extname\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', length: 256, nullable: true})@ApiProperty({maxLength: 256, readOnly: true, nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/files/entities/file.entity.ts:94\n                        \n                    \n\n            \n                \n                    [description]\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        filename\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', length: 256, nullable: true})@ApiProperty({maxLength: 256, readOnly: true, nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/files/entities/file.entity.ts:66\n                        \n                    \n\n            \n                \n                    [description]\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        fileSize\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'bigint', nullable: true})@ApiProperty({readOnly: true, minimum: 1, nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/files/entities/file.entity.ts:73\n                        \n                    \n\n            \n                \n                    [description]\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({readOnly: true})@PrimaryGeneratedColumn('uuid')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/files/entities/file.entity.ts:27\n                        \n                    \n\n            \n                \n                    [description]\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        mimetype\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', length: 256, nullable: true})@ApiProperty({maxLength: 256, readOnly: true, nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/files/entities/file.entity.ts:80\n                        \n                    \n\n            \n                \n                    [description]\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        owner\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Partial\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @JoinColumn()@ApiHideProperty()@ManyToOne(undefined, {onDelete: 'CASCADE', nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/files/entities/file.entity.ts:52\n                        \n                    \n\n            \n                \n                    [description]\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        title\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', length: 256, nullable: true})@ApiProperty({maxLength: 256, readOnly: true, nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/files/entities/file.entity.ts:59\n                        \n                    \n\n            \n                \n                    [description]\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        updatedAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({readOnly: true})@UpdateDateColumn({readonly: true, type: 'timestamptz', default: () => NOW()})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/files/entities/file.entity.ts:116\n                        \n                    \n\n            \n                \n                    [description]\n\n                \n            \n\n        \n    \n\n    \n\n\n    \n        import { ApiHideProperty, ApiProperty, PickType } from '@nestjs/swagger';\nimport { Multipart } from 'fastify-multipart';\nimport { Expose } from 'class-transformer';\nimport { join } from 'node:path';\nimport {\n  Column,\n  Entity,\n  ManyToOne,\n  JoinColumn,\n  CreateDateColumn,\n  UpdateDateColumn,\n  PrimaryGeneratedColumn,\n} from 'typeorm';\n\nimport { UserEntity } from 'src/modules/users/entities';\n\n/**\n * [description]\n */\n@Entity('files')\nexport class FileEntity implements Partial {\n  /**\n   * [description]\n   */\n  @ApiProperty({ readOnly: true })\n  @PrimaryGeneratedColumn('uuid')\n  public readonly id: string;\n\n  /**\n   * [description]\n   * @example for s3\n   * return `${process.env.CDN}/${this.filename}${this.extname}`;\n   */\n  @Expose({ toClassOnly: true })\n  @ApiProperty({ readOnly: true })\n  get src(): string {\n    if (!this.fileSize) return null;\n    const url = new URL(join(process.env.CDN, this.title));\n    url.searchParams.set('id', this.id);\n    return url.toString();\n  }\n\n  /**\n   * [description]\n   */\n  @JoinColumn()\n  @ApiHideProperty()\n  @ManyToOne(() => UserEntity, {\n    onDelete: 'CASCADE',\n    nullable: true,\n  })\n  public readonly owner: Partial;\n\n  /**\n   * [description]\n   */\n  @Column({ type: 'varchar', length: 256, nullable: true })\n  @ApiProperty({ maxLength: 256, readOnly: true, nullable: true })\n  public readonly title: string;\n\n  /**\n   * [description]\n   */\n  @Column({ type: 'varchar', length: 256, nullable: true })\n  @ApiProperty({ maxLength: 256, readOnly: true, nullable: true })\n  public readonly filename: string;\n\n  /**\n   * [description]\n   */\n  @Column({ type: 'bigint', nullable: true })\n  @ApiProperty({ readOnly: true, minimum: 1, nullable: true })\n  public readonly fileSize: string;\n\n  /**\n   * [description]\n   */\n  @Column({ type: 'varchar', length: 256, nullable: true })\n  @ApiProperty({ maxLength: 256, readOnly: true, nullable: true })\n  public readonly mimetype: string;\n\n  /**\n   * [description]\n   */\n  @Column({ type: 'varchar', length: 7, nullable: true })\n  @ApiProperty({ maxLength: 7, readOnly: true, nullable: true })\n  public readonly encoding: string;\n\n  /**\n   * [description]\n   */\n  @Column({ type: 'varchar', length: 256, nullable: true })\n  @ApiProperty({ maxLength: 256, readOnly: true, nullable: true })\n  public readonly extname: string;\n\n  /**\n   * [description]\n   */\n  @ApiProperty({ readOnly: true })\n  @CreateDateColumn({\n    readonly: true,\n    type: 'timestamptz',\n    default: () => 'NOW()',\n  })\n  public readonly createdAt: Date;\n\n  /**\n   * [description]\n   */\n  @ApiProperty({ readOnly: true })\n  @UpdateDateColumn({\n    readonly: true,\n    type: 'timestamptz',\n    default: () => 'NOW()',\n  })\n  public readonly updatedAt: Date;\n}\n\n/**\n * [description]\n */\nexport class FileEntityPreview extends PickType(FileEntity, ['id', 'src']) {\n  /**\n   * [description]\n   * @param id\n   * @param src\n   * @param fileSize\n   */\n  constructor({ id, src }: Partial) {\n    super();\n    Object.assign(this, { id, src });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/FileEntityPreview.html":{"url":"classes/FileEntityPreview.html","title":"class - FileEntityPreview","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  FileEntityPreview\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/files/entities/file.entity.ts\n        \n\n\n            \n                Description\n            \n            \n                [description]\n\n            \n\n\n\n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(undefined: Partial)\n                    \n                \n                        \n                            \n                                Defined in src/modules/files/entities/file.entity.ts:122\n                            \n                        \n\n                \n                    \n                            [description]\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                  \n                                                        \n                                                                        Partial\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiHideProperty, ApiProperty, PickType } from '@nestjs/swagger';\nimport { Multipart } from 'fastify-multipart';\nimport { Expose } from 'class-transformer';\nimport { join } from 'node:path';\nimport {\n  Column,\n  Entity,\n  ManyToOne,\n  JoinColumn,\n  CreateDateColumn,\n  UpdateDateColumn,\n  PrimaryGeneratedColumn,\n} from 'typeorm';\n\nimport { UserEntity } from 'src/modules/users/entities';\n\n/**\n * [description]\n */\n@Entity('files')\nexport class FileEntity implements Partial {\n  /**\n   * [description]\n   */\n  @ApiProperty({ readOnly: true })\n  @PrimaryGeneratedColumn('uuid')\n  public readonly id: string;\n\n  /**\n   * [description]\n   * @example for s3\n   * return `${process.env.CDN}/${this.filename}${this.extname}`;\n   */\n  @Expose({ toClassOnly: true })\n  @ApiProperty({ readOnly: true })\n  get src(): string {\n    if (!this.fileSize) return null;\n    const url = new URL(join(process.env.CDN, this.title));\n    url.searchParams.set('id', this.id);\n    return url.toString();\n  }\n\n  /**\n   * [description]\n   */\n  @JoinColumn()\n  @ApiHideProperty()\n  @ManyToOne(() => UserEntity, {\n    onDelete: 'CASCADE',\n    nullable: true,\n  })\n  public readonly owner: Partial;\n\n  /**\n   * [description]\n   */\n  @Column({ type: 'varchar', length: 256, nullable: true })\n  @ApiProperty({ maxLength: 256, readOnly: true, nullable: true })\n  public readonly title: string;\n\n  /**\n   * [description]\n   */\n  @Column({ type: 'varchar', length: 256, nullable: true })\n  @ApiProperty({ maxLength: 256, readOnly: true, nullable: true })\n  public readonly filename: string;\n\n  /**\n   * [description]\n   */\n  @Column({ type: 'bigint', nullable: true })\n  @ApiProperty({ readOnly: true, minimum: 1, nullable: true })\n  public readonly fileSize: string;\n\n  /**\n   * [description]\n   */\n  @Column({ type: 'varchar', length: 256, nullable: true })\n  @ApiProperty({ maxLength: 256, readOnly: true, nullable: true })\n  public readonly mimetype: string;\n\n  /**\n   * [description]\n   */\n  @Column({ type: 'varchar', length: 7, nullable: true })\n  @ApiProperty({ maxLength: 7, readOnly: true, nullable: true })\n  public readonly encoding: string;\n\n  /**\n   * [description]\n   */\n  @Column({ type: 'varchar', length: 256, nullable: true })\n  @ApiProperty({ maxLength: 256, readOnly: true, nullable: true })\n  public readonly extname: string;\n\n  /**\n   * [description]\n   */\n  @ApiProperty({ readOnly: true })\n  @CreateDateColumn({\n    readonly: true,\n    type: 'timestamptz',\n    default: () => 'NOW()',\n  })\n  public readonly createdAt: Date;\n\n  /**\n   * [description]\n   */\n  @ApiProperty({ readOnly: true })\n  @UpdateDateColumn({\n    readonly: true,\n    type: 'timestamptz',\n    default: () => 'NOW()',\n  })\n  public readonly updatedAt: Date;\n}\n\n/**\n * [description]\n */\nexport class FileEntityPreview extends PickType(FileEntity, ['id', 'src']) {\n  /**\n   * [description]\n   * @param id\n   * @param src\n   * @param fileSize\n   */\n  constructor({ id, src }: Partial) {\n    super();\n    Object.assign(this, { id, src });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/FileValidationPipe.html":{"url":"injectables/FileValidationPipe.html","title":"injectable - FileValidationPipe","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  FileValidationPipe\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/multipart/pipes/file-validation.pipe.ts\n        \n\n\n            \n                Description\n            \n            \n                [description]\n\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                allowedTypes\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                transform\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(configService: ConfigService)\n                    \n                \n                        \n                            \n                                Defined in src/multipart/pipes/file-validation.pipe.ts:15\n                            \n                        \n\n                \n                    \n                            [description]\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                        ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        transform\n                        \n                    \n                \n            \n            \n                \ntransform(value: Multipart)\n                \n            \n\n\n            \n                \n                    Defined in src/multipart/pipes/file-validation.pipe.ts:29\n                \n            \n\n\n            \n                \n                    [description]\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                            Multipart\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Multipart\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        allowedTypes\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                    \n                        \n                                Defined in src/multipart/pipes/file-validation.pipe.ts:15\n                        \n                    \n\n            \n                \n                    [description]\n\n                \n            \n\n        \n    \n\n\n    \n\n\n    \n        import { Injectable, PipeTransform, UnsupportedMediaTypeException } from '@nestjs/common';\nimport { Multipart } from 'fastify-multipart';\n\nimport { ErrorTypeEnum } from 'src/common/enums';\nimport { ConfigService } from 'src/config';\n\n/**\n * [description]\n */\n@Injectable()\nexport class FileValidationPipe implements PipeTransform {\n  /**\n   * [description]\n   */\n  private readonly allowedTypes: string[];\n\n  /**\n   * [description]\n   * @param configService\n   */\n  constructor(private readonly configService: ConfigService) {\n    this.allowedTypes = this.configService.get('STORE_MIME_TYPE');\n  }\n\n  /**\n   * [description]\n   * @param value\n   */\n  transform(value: Multipart) {\n    if (!this.allowedTypes.includes(value.mimetype))\n      throw new UnsupportedMediaTypeException(ErrorTypeEnum.FILE_UNSUPPORTED_TYPE);\n    return value;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/FilesController.html":{"url":"controllers/FilesController.html","title":"controller - FilesController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  FilesController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/files/files.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                files\n            \n\n\n            \n                Description\n            \n            \n                [description]\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                createOne\n                            \n                            \n                                    Public\n                                    Async\n                                deleteOne\n                            \n                            \n                                    Public\n                                    Async\n                                downloadOne\n                            \n                            \n                                    Public\n                                    Async\n                                selectAll\n                            \n                            \n                                    Public\n                                    Async\n                                selectOne\n                            \n                            \n                                    Public\n                                    Async\n                                updateOne\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        createOne\n                        \n                    \n                \n            \n            \n                \n                    \n                    createOne(file: Multipart, owner: UserEntity)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('')@ApiBearerAuth()@UseGuards(JwtAuthGuard)@ApiBody({type: CreateFileDto})@ApiConsumes('multipart/form-data')\n                \n            \n\n            \n                \n                    Defined in src/modules/files/files.controller.ts:60\n                \n            \n\n\n            \n                \n                    [description]\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    file\n                                    \n                                            Multipart\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    owner\n                                    \n                                                UserEntity\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        deleteOne\n                        \n                    \n                \n            \n            \n                \n                    \n                    deleteOne(conditions: ID, owner: UserEntity)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete(':id')@ApiBearerAuth()@UseGuards(JwtAuthGuard)@UseRole(UserRoleEnum.ADMIN)\n                \n            \n\n            \n                \n                    Defined in src/modules/files/files.controller.ts:122\n                \n            \n\n\n            \n                \n                    [description]\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    conditions\n                                    \n                                                ID\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    owner\n                                    \n                                                UserEntity\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        downloadOne\n                        \n                    \n                \n            \n            \n                \n                    \n                    downloadOne(rep: FastifyReply, options: DownloadFileDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('download/:filename')@ApiParam({name: 'filename', type: String})\n                \n            \n\n            \n                \n                    Defined in src/modules/files/files.controller.ts:134\n                \n            \n\n\n            \n                \n                    [description]\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    rep\n                                    \n                                            FastifyReply\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    options\n                                    \n                                                DownloadFileDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        selectAll\n                        \n                    \n                \n            \n            \n                \n                    \n                    selectAll(options: SelectFilesDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()@ApiBearerAuth()@UseGuards(JwtAuthGuard)@UseRole(UserRoleEnum.ADMIN)\n                \n            \n\n            \n                \n                    Defined in src/modules/files/files.controller.ts:72\n                \n            \n\n\n            \n                \n                    [description]\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    options\n                                    \n                                                SelectFilesDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        selectOne\n                        \n                    \n                \n            \n            \n                \n                    \n                    selectOne(conditions: ID, owner: UserEntity, options: SelectFileDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get(':id')@ApiBearerAuth()@UseGuards(JwtAuthGuard)@UseRole(UserRoleEnum.ADMIN)\n                \n            \n\n            \n                \n                    Defined in src/modules/files/files.controller.ts:86\n                \n            \n\n\n            \n                \n                    [description]\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    conditions\n                                    \n                                                ID\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    owner\n                                    \n                                                UserEntity\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    options\n                                    \n                                                SelectFileDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        updateOne\n                        \n                    \n                \n            \n            \n                \n                    \n                    updateOne(file: Multipart, conditions: ID, owner: UserEntity)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch(':id')@ApiBearerAuth()@UseGuards(JwtAuthGuard)@ApiBody({type: CreateFileDto})@ApiConsumes('multipart/form-data')\n                \n            \n\n            \n                \n                    Defined in src/modules/files/files.controller.ts:105\n                \n            \n\n\n            \n                \n                    [description]\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    file\n                                    \n                                            Multipart\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    conditions\n                                    \n                                                ID\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    owner\n                                    \n                                                UserEntity\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { ApiTags, ApiBearerAuth, ApiConsumes, ApiBody, ApiParam } from '@nestjs/swagger';\nimport { Multipart } from 'fastify-multipart';\nimport { FastifyReply } from 'fastify';\nimport {\n  Res,\n  Get,\n  Post,\n  Patch,\n  Param,\n  Query,\n  Delete,\n  UseGuards,\n  Controller,\n  UseInterceptors,\n  ClassSerializerInterceptor,\n} from '@nestjs/common';\n\nimport { User, UseRole } from 'src/common/decorators';\nimport { File } from 'src/multipart/decorators';\nimport { ID } from 'src/common/dto';\n\nimport { JwtAuthGuard } from '../auth/guards';\n\nimport { FileEntity } from './entities';\nimport {\n  SelectFileDto,\n  CreateFileDto,\n  SelectFilesDto,\n  DownloadFileDto,\n  PaginationFilesDto,\n} from './dto';\n\nimport { UserEntity } from '../users/entities';\nimport { FilesService } from './files.service';\nimport { UserRoleEnum } from '../users/enums';\n\n/**\n * [description]\n */\n@ApiTags('files')\n@Controller('files')\n@UseInterceptors(ClassSerializerInterceptor)\nexport class FilesController {\n  /**\n   * [description]\n   * @param filesService\n   */\n  constructor(private readonly filesService: FilesService) {}\n\n  /**\n   * [description]\n   * @param file\n   * @param owner\n   */\n  @Post('')\n  @ApiBearerAuth()\n  @UseGuards(JwtAuthGuard)\n  @ApiBody({ type: CreateFileDto })\n  @ApiConsumes('multipart/form-data')\n  public async createOne(@File() file: Multipart, @User() owner: UserEntity): Promise {\n    return this.filesService.createOne(file, { owner: { id: owner.id } });\n  }\n\n  /**\n   * [description]\n   * @param options\n   */\n  @Get()\n  @ApiBearerAuth()\n  @UseGuards(JwtAuthGuard)\n  @UseRole(UserRoleEnum.ADMIN)\n  public async selectAll(@Query() options: SelectFilesDto): Promise {\n    return this.filesService.selectAll(options);\n  }\n\n  /**\n   * [description]\n   * @param conditions\n   * @param owner\n   * @param options\n   */\n  @Get(':id')\n  @ApiBearerAuth()\n  @UseGuards(JwtAuthGuard)\n  @UseRole(UserRoleEnum.ADMIN)\n  public async selectOne(\n    @Param() conditions: ID,\n    @User() owner: UserEntity,\n    @Query() options: SelectFileDto,\n  ): Promise {\n    return this.filesService.selectOne({ ...conditions, owner: { id: owner.id } }, options);\n  }\n\n  /**\n   * [description]\n   * @param file\n   * @param conditions\n   * @param owner\n   */\n  @Patch(':id')\n  @ApiBearerAuth()\n  @UseGuards(JwtAuthGuard)\n  @ApiBody({ type: CreateFileDto })\n  @ApiConsumes('multipart/form-data')\n  public async updateOne(\n    @File() file: Multipart,\n    @Param() conditions: ID,\n    @User() owner: UserEntity,\n  ): Promise {\n    return this.filesService.updateOne(file, { ...conditions, owner: { id: owner.id } });\n  }\n\n  /**\n   * [description]\n   * @param conditions\n   * @param owner\n   */\n  @Delete(':id')\n  @ApiBearerAuth()\n  @UseGuards(JwtAuthGuard)\n  @UseRole(UserRoleEnum.ADMIN)\n  public async deleteOne(@Param() conditions: ID, @User() owner: UserEntity): Promise {\n    return this.filesService.deleteOne({ ...conditions, owner: { id: owner.id } });\n  }\n\n  /**\n   * [description]\n   * @param rep\n   * @param owner\n   * @param options\n   */\n  @Get('download/:filename')\n  @ApiParam({ name: 'filename', type: String })\n  public async downloadOne(\n    @Res() rep: FastifyReply,\n    @Query() options: DownloadFileDto,\n  ): Promise {\n    return this.filesService.downloadOne(rep, { id: options.id }, options);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/FilesModule.html":{"url":"modules/FilesModule.html","title":"module - FilesModule","body":"\n                   \n\n\n\n\n    Modules\n    FilesModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_FilesModule\n\n\n\ncluster_FilesModule_providers\n\n\n\ncluster_FilesModule_exports\n\n\n\n\nFilesService \n\nFilesService \n\n\n\nFilesModule\n\nFilesModule\n\nFilesService  -->\n\nFilesModule->FilesService \n\n\n\n\n\nFilesService\n\nFilesService\n\nFilesModule -->\n\nFilesService->FilesModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/modules/files/files.module.ts\n        \n\n\n\n        \n            Description\n        \n        \n            [description]\n\n        \n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            FilesService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            FilesController\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            FilesService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { TypeOrmModule } from '@nestjs/typeorm';\nimport { Module } from '@nestjs/common';\n\nimport { FileEntity } from './entities';\n\nimport { FilesController } from './files.controller';\nimport { FilesService } from './files.service';\n\n/**\n * [description]\n */\n@Module({\n  imports: [TypeOrmModule.forFeature([FileEntity])],\n  controllers: [FilesController],\n  providers: [FilesService],\n  exports: [FilesService],\n})\nexport class FilesModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/FilesService.html":{"url":"injectables/FilesService.html","title":"injectable - FilesService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  FilesService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/files/files.service.ts\n        \n\n\n            \n                Description\n            \n            \n                [description]\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                createOne\n                            \n                            \n                                    Public\n                                    Async\n                                deleteOne\n                            \n                            \n                                    Public\n                                    Async\n                                downloadOne\n                            \n                            \n                                    Public\n                                find\n                            \n                            \n                                    Public\n                                    Async\n                                selectAll\n                            \n                            \n                                    Public\n                                    Async\n                                selectOne\n                            \n                            \n                                    Public\n                                    Async\n                                updateOne\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(fileEntityRepository: Repository, storageService: StorageService)\n                    \n                \n                        \n                            \n                                Defined in src/modules/files/files.service.ts:28\n                            \n                        \n\n                \n                    \n                            [description]\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        fileEntityRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        storageService\n                                                  \n                                                        \n                                                                        StorageService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        createOne\n                        \n                    \n                \n            \n            \n                \n                    \n                    createOne(multipart: Multipart, data?: Partial, options: SaveOptions)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/files/files.service.ts:45\n                \n            \n\n\n            \n                \n                    [description]\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    multipart\n                                    \n                                            Multipart\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    data\n                                    \n                                                Partial\n                                    \n\n                                    \n                                        Yes\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    options\n                                    \n                                            SaveOptions\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        { transaction: false }\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        deleteOne\n                        \n                    \n                \n            \n            \n                \n                    \n                    deleteOne(conditions: FindOptionsWhere, options: RemoveOptions)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/files/files.service.ts:154\n                \n            \n\n\n            \n                \n                    [description]\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    conditions\n                                    \n                                                FindOptionsWhere\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    options\n                                    \n                                            RemoveOptions\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        { transaction: false }\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        downloadOne\n                        \n                    \n                \n            \n            \n                \n                    \n                    downloadOne(rep: FastifyReply, conditions: FindOptionsWhere, undefined: DownloadFileDto)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/files/files.service.ts:173\n                \n            \n\n\n            \n                \n                    [description]\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    rep\n                                    \n                                            FastifyReply\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    conditions\n                                    \n                                                FindOptionsWhere\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    \n                                                DownloadFileDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        find\n                        \n                    \n                \n            \n            \n                \n                    \n                    find(optionsOrConditions?: FindManyOptions)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/files/files.service.ts:65\n                \n            \n\n\n            \n                \n                     [description]\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    optionsOrConditions\n                                    \n                                                FindManyOptions\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         SelectQueryBuilder\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        selectAll\n                        \n                    \n                \n            \n            \n                \n                    \n                    selectAll(options: FindManyBracketsOptions)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/files/files.service.ts:90\n                \n            \n\n\n            \n                \n                    [description]\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    options\n                                    \n                                                FindManyBracketsOptions\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        { loadEagerRelations: false }\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        selectOne\n                        \n                    \n                \n            \n            \n                \n                    \n                    selectOne(conditions: FindOptionsWhere, options: FindOneOptions)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/files/files.service.ts:106\n                \n            \n\n\n            \n                \n                    [description]\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    conditions\n                                    \n                                                FindOptionsWhere\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    options\n                                    \n                                                FindOneOptions\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        { loadEagerRelations: false }\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        updateOne\n                        \n                    \n                \n            \n            \n                \n                    \n                    updateOne(file: Multipart, conditions: FindOptionsWhere, options: SaveOptions)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/files/files.service.ts:133\n                \n            \n\n\n            \n                \n                    [description]\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    file\n                                    \n                                            Multipart\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    conditions\n                                    \n                                                FindOptionsWhere\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    options\n                                    \n                                            SaveOptions\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        { transaction: false }\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, ConflictException, NotFoundException } from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { instanceToPlain } from 'class-transformer';\nimport { Multipart } from 'fastify-multipart';\nimport { FastifyReply } from 'fastify';\nimport {\n  Repository,\n  SaveOptions,\n  RemoveOptions,\n  FindOneOptions,\n  FindManyOptions,\n  FindOptionsUtils,\n  FindOptionsWhere,\n  SelectQueryBuilder,\n} from 'typeorm';\n\nimport { FindManyBracketsOptions } from 'src/common/interfaces';\nimport { ErrorTypeEnum } from 'src/common/enums';\nimport { StorageService } from 'src/multipart';\n\nimport { DownloadFileDto, PaginationFilesDto } from './dto';\nimport { FileEntity } from './entities';\n\n/**\n * [description]\n */\n@Injectable()\nexport class FilesService {\n  /**\n   * [description]\n   * @param fileEntityRepository\n   * @param storageService\n   */\n  constructor(\n    @InjectRepository(FileEntity)\n    private readonly fileEntityRepository: Repository,\n    private readonly storageService: StorageService,\n  ) {}\n\n  /**\n   * [description]\n   * @param file\n   * @param options\n   */\n  public async createOne(\n    multipart: Multipart,\n    data?: Partial,\n    options: SaveOptions = { transaction: false },\n  ): Promise {\n    return this.fileEntityRepository.manager.transaction(async () => {\n      const mergeIntoEntity = await this.storageService.createOne(multipart);\n      const entityLike = this.fileEntityRepository.create(mergeIntoEntity);\n      const entity = this.fileEntityRepository.merge(entityLike, data);\n      return this.fileEntityRepository.save(entity, options).catch(() => {\n        this.storageService.deleteOne(entityLike.filename);\n        throw new ConflictException(ErrorTypeEnum.FILE_ALREADY_EXIST);\n      });\n    });\n  }\n\n  /**\n   *  [description]\n   * @param optionsOrConditions\n   */\n  public find(optionsOrConditions?: FindManyOptions): SelectQueryBuilder {\n    const metadata = this.fileEntityRepository.metadata;\n    const qb = this.fileEntityRepository.createQueryBuilder(\n      FindOptionsUtils.extractFindManyOptionsAlias(optionsOrConditions) || metadata.name,\n    );\n\n    if (\n      !FindOptionsUtils.isFindManyOptions(optionsOrConditions) ||\n      optionsOrConditions.loadEagerRelations !== false\n    ) {\n      FindOptionsUtils.joinEagerRelations(qb, qb.alias, metadata);\n\n      /**\n       * Place for common relation\n       * @example qb.leftJoinAndSelect('FileEntity.relation_field', 'FileEntity_relation_field')\n       */\n    }\n\n    return qb.setFindOptions(optionsOrConditions);\n  }\n\n  /**\n   * [description]\n   * @param options\n   */\n  public async selectAll(\n    options: FindManyBracketsOptions = { loadEagerRelations: false },\n  ): Promise {\n    return this.find(options)\n      .getManyAndCount()\n      .then((data) => new PaginationFilesDto(data))\n      .catch(() => {\n        throw new NotFoundException(ErrorTypeEnum.FILES_NOT_FOUND);\n      });\n  }\n\n  /**\n   * [description]\n   * @param conditions\n   * @param options\n   */\n  public async selectOne(\n    conditions: FindOptionsWhere,\n    options: FindOneOptions = { loadEagerRelations: false },\n  ): Promise {\n    const qb = this.find({\n      ...instanceToPlain(options),\n      where: conditions,\n    });\n\n    /**\n     * Check owner of file\n     */\n    /* if (owner && owner['role'] !== UserRoleEnum.ADMIN)\n      qb.andWhere([{ owner: IsNull() }, { owner: { id: owner['id'] } }]);\n    else if (!owner) qb.andWhere({ owner: IsNull() }); */\n\n    return qb.getOneOrFail().catch(() => {\n      throw new NotFoundException(ErrorTypeEnum.FILE_NOT_FOUND);\n    });\n  }\n\n  /**\n   * [description]\n   * @param file\n   * @param conditions\n   * @param options\n   */\n  public async updateOne(\n    file: Multipart,\n    conditions: FindOptionsWhere,\n    options: SaveOptions = { transaction: false },\n  ): Promise {\n    return this.fileEntityRepository.manager.transaction(async () => {\n      const mergeIntoEntity = await this.selectOne(conditions);\n      const entityLike = await this.storageService.createOne(file);\n      const entity = this.fileEntityRepository.merge(mergeIntoEntity, entityLike);\n      return this.fileEntityRepository.save(entity, options).catch(() => {\n        this.storageService.deleteOne(entityLike.filename);\n        throw new ConflictException(ErrorTypeEnum.FILE_ALREADY_EXIST);\n      });\n    });\n  }\n\n  /**\n   * [description]\n   * @param conditions\n   * @param options\n   */\n  public async deleteOne(\n    conditions: FindOptionsWhere,\n    options: RemoveOptions = { transaction: false },\n  ): Promise {\n    return this.fileEntityRepository.manager.transaction(async () => {\n      const entity = await this.selectOne(conditions);\n      this.storageService.deleteOne(entity.filename);\n      return this.fileEntityRepository.remove(entity, options).catch(() => {\n        throw new NotFoundException(ErrorTypeEnum.FILE_NOT_FOUND);\n      });\n    });\n  }\n\n  /**\n   * [description]\n   * @param rep\n   * @param conditions\n   * @param options\n   */\n  public async downloadOne(\n    rep: FastifyReply,\n    conditions: FindOptionsWhere,\n    { download, ...options }: DownloadFileDto,\n  ): Promise {\n    const { filename, title, fileSize, mimetype } = await this.selectOne(conditions);\n    const disposition = download ? 'attachment' : 'inline';\n    if (!rep.request.headers.range)\n      return rep\n        .type(mimetype)\n        .status(200)\n        .headers({\n          'accept-ranges': 'bytes',\n          'content-length': +fileSize,\n          'content-disposition': `${disposition}; filename*=utf-8''${title}`,\n        })\n        .send(await this.storageService.selectOne({ filename }, options));\n\n    const range = rep.request.headers.range.replace(/bytes=/, '').split('-');\n    const end = range[1] ? parseInt(range[1], 10) : +fileSize - 1;\n    const start = range[0] ? parseInt(range[0], 10) : +fileSize - end;\n\n    if (start >= +fileSize || end >= +fileSize)\n      return rep\n        .status(416)\n        .headers({ 'Content-Range': `bytes */${+fileSize}` })\n        .send();\n\n    return rep\n      .type(mimetype)\n      .status(206)\n      .headers({\n        'accept-ranges': 'bytes',\n        'content-length': end - start + 1,\n        'content-disposition': `${disposition}; filename*=utf-8''${title}`,\n        'content-range': `bytes ${start}-${end}/${+fileSize}`,\n      })\n      .send(await this.storageService.selectOne({ filename }, { start, end }));\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/FindManyBracketsOptions.html":{"url":"interfaces/FindManyBracketsOptions.html","title":"interface - FindManyBracketsOptions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  FindManyBracketsOptions\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/interfaces/find-many-brackets.interface.ts\n        \n\n\n            \n                Description\n            \n            \n                [description]\n\n            \n\n            \n                Extends\n            \n            \n                    FindManyOptions\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            whereBrackets\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        whereBrackets\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        whereBrackets:     Brackets\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     Brackets\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    [description]\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { Brackets, FindManyOptions } from 'typeorm';\n\n/**\n * [description]\n */\nexport interface FindManyBracketsOptions extends FindManyOptions {\n  /**\n   * [description]\n   */\n  whereBrackets?: Brackets;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/FindManyOptionsDto.html":{"url":"classes/FindManyOptionsDto.html","title":"class - FindManyOptionsDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  FindManyOptionsDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/dto/find-many-options/find-many-options.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                [description]\n\n            \n\n            \n                Extends\n            \n            \n                        FindOneOptionsDto\n            \n\n            \n                Implements\n            \n            \n                            FindManyBracketsOptions\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Readonly\n                                    Optional\n                                asc\n                            \n                            \n                                    Public\n                                    Readonly\n                                    Optional\n                                desc\n                            \n                            \n                                    Public\n                                    Readonly\n                                    Optional\n                                page\n                            \n                            \n                                    Public\n                                    Readonly\n                                    Optional\n                                take\n                            \n                            \n                                    Public\n                                    Readonly\n                                    Optional\n                                eager\n                            \n                            \n                                    Public\n                                    Readonly\n                                    Optional\n                                selection\n                            \n                        \n                    \n                \n\n\n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    order\n                                \n                                \n                                    skip\n                                \n                            \n                        \n                    \n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                            Optional\n                        asc\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsArray()@IsOptional()@IsString({each: true})@IsNotEmpty({each: true})@Transform( => )@ApiProperty({type: undefined, description: Order, in which entities should be ordered. For order by relation field use elation.field})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/common/dto/find-many-options/find-many-options.dto.ts:30\n                        \n                    \n\n            \n                \n                    Order, in which entities should be ordered\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                            Optional\n                        desc\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsArray()@IsOptional()@IsString({each: true})@IsNotEmpty({each: true})@Transform( => )@ApiProperty({type: undefined, description: 'If the same fields are specified for sorting in two directions, the priority is given to DESC'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/common/dto/find-many-options/find-many-options.dto.ts:45\n                        \n                    \n\n            \n                \n                    If the same fields are specified for sorting in two directions, the priority is given to DESC\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                            Optional\n                        page\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 1\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@Min(1)@ApiProperty({type: String, example: 1, description: 'Offset (paginated) where from entities should be taken'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/common/dto/find-many-options/find-many-options.dto.ts:69\n                        \n                    \n\n            \n                \n                    Offset (paginated) where from entities should be taken\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                            Optional\n                        take\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 50\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@Min(1)@Max(100)@ApiProperty({type: String, example: 5, default: 50, description: 'Limit (paginated) - max number of entities should be taken'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/common/dto/find-many-options/find-many-options.dto.ts:83\n                        \n                    \n\n            \n                \n                    Limit (paginated) - max number of entities should be taken\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                            Optional\n                        eager\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsBooleanString()@ApiProperty({type: 'boolean', description: 'Indicates what relations of entity should be loaded'})\n                        \n                    \n                \n                        \n                            \n                                Inherited from         FindOneOptionsDto\n\n                            \n                        \n                    \n                        \n                                Defined in         FindOneOptionsDto:43\n\n                        \n                    \n\n            \n                \n                    Indicates what relations of entity should be loaded (simplified left join form)\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                            Optional\n                        selection\n                        \n                    \n                \n            \n                \n                    \n                        Type :     ()[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsArray()@IsOptional()@IsString({each: true})@IsNotEmpty({each: true})@Transform( => )@ApiProperty({type: undefined, example: undefined, description: 'Specifies what columns should be retrieved'})\n                        \n                    \n                \n                        \n                            \n                                Inherited from         FindOneOptionsDto\n\n                            \n                        \n                    \n                        \n                                Defined in         FindOneOptionsDto:24\n\n                        \n                    \n\n            \n                \n                    Specifies what columns should be retrieved\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        order\n                    \n                \n\n                \n                    \n                        getorder()\n                    \n                \n                            \n                                \n                                    Defined in src/common/dto/find-many-options/find-many-options.dto.ts:51\n                                \n                            \n                    \n                        \n                                Getter to form an object of order. Available after calling instanceToPlain\n\n\n                        \n                    \n\n            \n        \n        \n            \n                \n                    \n                        \n                        skip\n                    \n                \n\n                \n                    \n                        getskip()\n                    \n                \n                            \n                                \n                                    Defined in src/common/dto/find-many-options/find-many-options.dto.ts:89\n                                \n                            \n                    \n                        \n                                Getter to form an object of skip. Available after calling instanceToPlain\n\n\n                                \n                                    Returns :         number\n\n                                \n                        \n                    \n\n            \n        \n\n    \n\n\n    \n        import { IsArray, IsString, IsNotEmpty, IsOptional, Min, Max } from 'class-validator';\nimport { Expose, Transform } from 'class-transformer';\nimport { ApiProperty } from '@nestjs/swagger';\nimport { FindManyOptions } from 'typeorm';\n\nimport { FindManyBracketsOptions } from 'src/common/interfaces';\nimport { dotNotation } from 'src/common/helpers';\n\nimport { FindOneOptionsDto } from '../find-one-options';\n\n/**\n * [description]\n */\nexport class FindManyOptionsDto\n  extends FindOneOptionsDto\n  implements FindManyBracketsOptions\n{\n  /**\n   * Order, in which entities should be ordered\n   */\n  @IsArray()\n  @IsOptional()\n  @IsString({ each: true })\n  @IsNotEmpty({ each: true })\n  @Transform(({ value }) => [].concat(value))\n  @ApiProperty({\n    type: [String],\n    description: `Order, in which entities should be ordered. For order by relation field use elation.field`,\n  })\n  public readonly asc?: string[];\n\n  /**\n   * If the same fields are specified for sorting in two directions, the priority is given to DESC\n   */\n  @IsArray()\n  @IsOptional()\n  @IsString({ each: true })\n  @IsNotEmpty({ each: true })\n  @Transform(({ value }) => [].concat(value))\n  @ApiProperty({\n    type: [String],\n    description:\n      'If the same fields are specified for sorting in two directions, the priority is given to DESC',\n  })\n  public readonly desc?: string[];\n\n  /**\n   * Getter to form an object of order. Available after calling instanceToPlain\n   */\n  @Expose({ toPlainOnly: true })\n  public get order(): FindManyOptions['order'] {\n    return Object.assign(\n      {},\n      this.asc && dotNotation(this.asc, 'ASC'),\n      this.desc && dotNotation(this.desc, 'DESC'),\n    );\n  }\n\n  /**\n   * Offset (paginated) where from entities should be taken\n   */\n  @IsOptional()\n  @Min(1)\n  @ApiProperty({\n    type: String,\n    example: 1,\n    description: 'Offset (paginated) where from entities should be taken',\n  })\n  public readonly page?: number = 1;\n\n  /**\n   * Limit (paginated) - max number of entities should be taken\n   */\n  @IsOptional()\n  @Min(1)\n  @Max(100)\n  @ApiProperty({\n    type: String,\n    example: 5,\n    default: 50,\n    description: 'Limit (paginated) - max number of entities should be taken',\n  })\n  public readonly take?: number = 50;\n\n  /**\n   * Getter to form an object of skip. Available after calling instanceToPlain\n   */\n  @Expose({ toPlainOnly: true })\n  public get skip(): number {\n    return this.take * (this.page - 1);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/FindOneOptionsDto.html":{"url":"classes/FindOneOptionsDto.html","title":"class - FindOneOptionsDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  FindOneOptionsDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/dto/find-one-options/find-one-options.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                [description]\n\n            \n\n\n            \n                Implements\n            \n            \n                        FindOneOptions\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Readonly\n                                    Optional\n                                eager\n                            \n                            \n                                    Public\n                                    Readonly\n                                    Optional\n                                selection\n                            \n                        \n                    \n                \n\n\n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    select\n                                \n                                \n                                    loadEagerRelations\n                                \n                            \n                        \n                    \n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                            Optional\n                        eager\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsBooleanString()@ApiProperty({type: 'boolean', description: 'Indicates what relations of entity should be loaded'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/common/dto/find-one-options/find-one-options.dto.ts:43\n                        \n                    \n\n            \n                \n                    Indicates what relations of entity should be loaded (simplified left join form)\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                            Optional\n                        selection\n                        \n                    \n                \n            \n                \n                    \n                        Type :     ()[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsArray()@IsOptional()@IsString({each: true})@IsNotEmpty({each: true})@Transform( => )@ApiProperty({type: undefined, example: undefined, description: 'Specifies what columns should be retrieved'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/common/dto/find-one-options/find-one-options.dto.ts:24\n                        \n                    \n\n            \n                \n                    Specifies what columns should be retrieved\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        select\n                    \n                \n\n                \n                    \n                        getselect()\n                    \n                \n                            \n                                \n                                    Defined in src/common/dto/find-one-options/find-one-options.dto.ts:30\n                                \n                            \n                    \n                        \n                                Expose field select, specifies what columns should be retrieved\n\n\n                                \n                                    Returns :     FindOptionsSelect\n\n                                \n                        \n                    \n\n            \n        \n        \n            \n                \n                    \n                        \n                        loadEagerRelations\n                    \n                \n\n                \n                    \n                        getloadEagerRelations()\n                    \n                \n                            \n                                \n                                    Defined in src/common/dto/find-one-options/find-one-options.dto.ts:49\n                                \n                            \n                    \n                        \n                                Getter to form an property of loadEagerRelations. Available after calling instanceToPlain\n\n\n                                \n                                    Returns :         boolean\n\n                                \n                        \n                    \n\n            \n        \n\n    \n\n\n    \n        import { IsArray, IsString, IsNotEmpty, IsOptional, IsBooleanString } from 'class-validator';\nimport { FindOneOptions, FindOptionsSelect } from 'typeorm';\nimport { Expose, Transform } from 'class-transformer';\nimport { ApiProperty } from '@nestjs/swagger';\nimport { dotNotation } from 'src/common/helpers';\n\n/**\n * [description]\n */\nexport class FindOneOptionsDto implements FindOneOptions {\n  /**\n   * Specifies what columns should be retrieved\n   */\n  @IsArray()\n  @IsOptional()\n  @IsString({ each: true })\n  @IsNotEmpty({ each: true })\n  @Transform(({ value }) => [].concat(value))\n  @ApiProperty({\n    type: [String],\n    example: [],\n    description: 'Specifies what columns should be retrieved',\n  })\n  public readonly selection?: (keyof Entity)[];\n\n  /**\n   * Expose field `select`, specifies what columns should be retrieved\n   */\n  @Expose({ toPlainOnly: true })\n  public get select(): FindOptionsSelect {\n    return Object.assign({}, this.selection && dotNotation(this.selection as string[], true));\n  }\n\n  /**\n   * Indicates what relations of entity should be loaded (simplified left join form)\n   */\n  @IsOptional()\n  @IsBooleanString()\n  @ApiProperty({\n    type: 'boolean',\n    description: 'Indicates what relations of entity should be loaded',\n  })\n  public readonly eager?: string;\n\n  /**\n   * Getter to form an property of loadEagerRelations. Available after calling instanceToPlain\n   */\n  @Expose({ toPlainOnly: true })\n  public get loadEagerRelations(): boolean {\n    return !!this.eager ? JSON.parse(this.eager) : true;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/HttpExceptionFilter.html":{"url":"classes/HttpExceptionFilter.html","title":"class - HttpExceptionFilter","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  HttpExceptionFilter\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/filters/http-exception.filter.ts\n        \n\n\n            \n                Description\n            \n            \n                [description]\n\n            \n\n\n            \n                Implements\n            \n            \n                        ExceptionFilter\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                catch\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        catch\n                        \n                    \n                \n            \n            \n                \ncatch(exception: HttpException, host: ArgumentsHost)\n                \n            \n\n\n            \n                \n                    Defined in src/common/filters/http-exception.filter.ts:12\n                \n            \n\n\n            \n                \n                    [description]\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    exception\n                                    \n                                            HttpException\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    host\n                                    \n                                            ArgumentsHost\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     FastifyReply\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { ExceptionFilter, Catch, ArgumentsHost, HttpException } from '@nestjs/common';\nimport { FastifyReply } from 'fastify';\n\n/**\n * [description]\n */\n@Catch(HttpException)\nexport class HttpExceptionFilter implements ExceptionFilter {\n  /**\n   * [description]\n   */\n  catch(exception: HttpException, host: ArgumentsHost): FastifyReply {\n    const ctx = host.switchToHttp();\n    const response = ctx.getResponse();\n    const statusCode = exception.getStatus();\n    const { message, error } = exception.getResponse() as Record;\n    return response.status(statusCode).send({ error, statusCode, message: [].concat(message) });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ID.html":{"url":"classes/ID.html","title":"class - ID","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ID\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/dto/id/id.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                [description]\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Readonly\n                                id\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsUUID()@ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/common/dto/id/id.dto.ts:13\n                        \n                    \n\n            \n                \n                    Entity ID\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport { IsUUID } from 'class-validator';\n\n/**\n * [description]\n */\nexport class ID {\n  /**\n   * Entity ID\n   */\n  @IsUUID()\n  @ApiProperty()\n  public readonly id: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/JwtAccessTokenPayloadDto.html":{"url":"classes/JwtAccessTokenPayloadDto.html","title":"class - JwtAccessTokenPayloadDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  JwtAccessTokenPayloadDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/auth/dto/jwt-tokens.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                [description]\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Readonly\n                                id\n                            \n                            \n                                    Public\n                                    Readonly\n                                refreshTokenId\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/modules/auth/dto/jwt-tokens.dto.ts:32\n                        \n                    \n\n            \n                \n                    [description]\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        refreshTokenId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/modules/auth/dto/jwt-tokens.dto.ts:37\n                        \n                    \n\n            \n                \n                    [description]\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty, PickType } from '@nestjs/swagger';\n\n/**\n * [description]\n */\nexport class JwtTokensDto {\n  /**\n   * [description]\n   */\n  @ApiProperty()\n  public readonly token: string;\n\n  /**\n   * [description]\n   */\n  @ApiProperty()\n  public readonly refreshToken: string;\n}\n\n/**\n * [description]\n */\nexport class JwtRefreshTokenDto extends PickType(JwtTokensDto, ['refreshToken']) {}\n\n/**\n * [description]\n */\nexport class JwtAccessTokenPayloadDto {\n  /**\n   * [description]\n   */\n  public readonly id: string;\n\n  /**\n   * [description]\n   */\n  public readonly refreshTokenId: string;\n}\n\n/**\n * [description]\n */\nexport class JwtRefreshTokenPayloadDto extends JwtAccessTokenPayloadDto {\n  /**\n   * [description]\n   */\n  public readonly ppid: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/JwtAuthGuard.html":{"url":"injectables/JwtAuthGuard.html","title":"injectable - JwtAuthGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  JwtAuthGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/auth/guards/jwt.guard.ts\n        \n\n\n            \n                Description\n            \n            \n                [description]\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                handleRequest\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(reflector: Reflector)\n                    \n                \n                        \n                            \n                                Defined in src/modules/auth/guards/jwt.guard.ts:19\n                            \n                        \n\n                \n                    \n                            [description]\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        reflector\n                                                  \n                                                        \n                                                                    Reflector\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        handleRequest\n                        \n                    \n                \n            \n            \n                \n                    \n                    handleRequest(_err: Error, user: UserEntity, info: Error, ctx: ExecutionContext)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/auth/guards/jwt.guard.ts:35\n                \n            \n\n\n            \n                \n                    [description]\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    _err\n                                    \n                                            Error\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    user\n                                    \n                                                UserEntity\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    info\n                                    \n                                            Error\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    ctx\n                                    \n                                            ExecutionContext\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         UserEntity | any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { AuthGuard } from '@nestjs/passport';\nimport { Reflector } from '@nestjs/core';\nimport {\n  UnauthorizedException,\n  ForbiddenException,\n  ExecutionContext,\n  Injectable,\n} from '@nestjs/common';\n\nimport { ErrorTypeEnum } from 'src/common/enums';\n\nimport { UserEntity } from 'src/modules/users/entities';\nimport { UserRoleEnum } from 'src/modules/users/enums';\n\n/**\n * [description]\n */\n@Injectable()\nexport class JwtAuthGuard extends AuthGuard('jwt') {\n  /**\n   * [description]\n   * @param reflector\n   */\n  constructor(private readonly reflector: Reflector) {\n    super();\n  }\n\n  /**\n   * [description]\n   * @param err\n   * @param user\n   * @param info\n   * @param ctx\n   */\n  public handleRequest(\n    _err: Error,\n    user: UserEntity,\n    info: Error,\n    ctx: ExecutionContext,\n  ): UserEntity | any {\n    if (info) throw new UnauthorizedException(ErrorTypeEnum.AUTH_INVALID_TOKEN);\n    if (!user) throw new UnauthorizedException(ErrorTypeEnum.AUTH_UNAUTHORIZED);\n\n    const roles = this.reflector.get('roles', ctx.getHandler());\n    if (roles && !roles.includes(user.role))\n      throw new ForbiddenException(ErrorTypeEnum.AUTH_FORBIDDEN);\n    return user;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/JwtRefreshGuard.html":{"url":"injectables/JwtRefreshGuard.html","title":"injectable - JwtRefreshGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  JwtRefreshGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/auth/guards/jwt-refresh.guard.ts\n        \n\n\n            \n                Description\n            \n            \n                [description]\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                handleRequest\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/modules/auth/guards/jwt-refresh.guard.ts:12\n                            \n                        \n\n                \n                    \n                            [description]\n\n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        handleRequest\n                        \n                    \n                \n            \n            \n                \n                    \n                    handleRequest(_err: Error, user: UserEntity, info: Error)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/auth/guards/jwt-refresh.guard.ts:27\n                \n            \n\n\n            \n                \n                    [description]\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    _err\n                                    \n                                            Error\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    user\n                                    \n                                                UserEntity\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    info\n                                    \n                                            Error\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         UserEntity | any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { AuthGuard } from '@nestjs/passport';\nimport { Injectable, UnauthorizedException } from '@nestjs/common';\n\nimport { ErrorTypeEnum } from 'src/common/enums';\n\nimport { UserEntity } from '../../users/entities';\n\n/**\n * [description]\n */\n@Injectable()\nexport class JwtRefreshGuard extends AuthGuard('jwt-refresh-token') {\n  /**\n   * [description]\n   */\n  constructor() {\n    super();\n  }\n\n  /**\n   * [description]\n   * @param _err\n   * @param user\n   * @param info\n   * @param ctx\n   */\n  public handleRequest(_err: Error, user: UserEntity, info: Error): UserEntity | any {\n    if (info) throw new UnauthorizedException(ErrorTypeEnum.AUTH_INVALID_REFRESH_TOKEN);\n    if (!user) throw new UnauthorizedException(ErrorTypeEnum.AUTH_UNAUTHORIZED);\n    return user;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/JwtRefreshTokenDto.html":{"url":"classes/JwtRefreshTokenDto.html","title":"class - JwtRefreshTokenDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  JwtRefreshTokenDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/auth/dto/jwt-tokens.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                [description]\n\n            \n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty, PickType } from '@nestjs/swagger';\n\n/**\n * [description]\n */\nexport class JwtTokensDto {\n  /**\n   * [description]\n   */\n  @ApiProperty()\n  public readonly token: string;\n\n  /**\n   * [description]\n   */\n  @ApiProperty()\n  public readonly refreshToken: string;\n}\n\n/**\n * [description]\n */\nexport class JwtRefreshTokenDto extends PickType(JwtTokensDto, ['refreshToken']) {}\n\n/**\n * [description]\n */\nexport class JwtAccessTokenPayloadDto {\n  /**\n   * [description]\n   */\n  public readonly id: string;\n\n  /**\n   * [description]\n   */\n  public readonly refreshTokenId: string;\n}\n\n/**\n * [description]\n */\nexport class JwtRefreshTokenPayloadDto extends JwtAccessTokenPayloadDto {\n  /**\n   * [description]\n   */\n  public readonly ppid: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/JwtRefreshTokenPayloadDto.html":{"url":"classes/JwtRefreshTokenPayloadDto.html","title":"class - JwtRefreshTokenPayloadDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  JwtRefreshTokenPayloadDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/auth/dto/jwt-tokens.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                [description]\n\n            \n\n            \n                Extends\n            \n            \n                        JwtAccessTokenPayloadDto\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Readonly\n                                ppid\n                            \n                            \n                                    Public\n                                    Readonly\n                                id\n                            \n                            \n                                    Public\n                                    Readonly\n                                refreshTokenId\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        ppid\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/modules/auth/dto/jwt-tokens.dto.ts:47\n                        \n                    \n\n            \n                \n                    [description]\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                        \n                            \n                                Inherited from         JwtAccessTokenPayloadDto\n\n                            \n                        \n                    \n                        \n                                Defined in         JwtAccessTokenPayloadDto:32\n\n                        \n                    \n\n            \n                \n                    [description]\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        refreshTokenId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                        \n                            \n                                Inherited from         JwtAccessTokenPayloadDto\n\n                            \n                        \n                    \n                        \n                                Defined in         JwtAccessTokenPayloadDto:37\n\n                        \n                    \n\n            \n                \n                    [description]\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty, PickType } from '@nestjs/swagger';\n\n/**\n * [description]\n */\nexport class JwtTokensDto {\n  /**\n   * [description]\n   */\n  @ApiProperty()\n  public readonly token: string;\n\n  /**\n   * [description]\n   */\n  @ApiProperty()\n  public readonly refreshToken: string;\n}\n\n/**\n * [description]\n */\nexport class JwtRefreshTokenDto extends PickType(JwtTokensDto, ['refreshToken']) {}\n\n/**\n * [description]\n */\nexport class JwtAccessTokenPayloadDto {\n  /**\n   * [description]\n   */\n  public readonly id: string;\n\n  /**\n   * [description]\n   */\n  public readonly refreshTokenId: string;\n}\n\n/**\n * [description]\n */\nexport class JwtRefreshTokenPayloadDto extends JwtAccessTokenPayloadDto {\n  /**\n   * [description]\n   */\n  public readonly ppid: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/JwtRefreshTokenStrategy.html":{"url":"injectables/JwtRefreshTokenStrategy.html","title":"injectable - JwtRefreshTokenStrategy","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  JwtRefreshTokenStrategy\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/auth/strategies/jwt-refresh.strategy.ts\n        \n\n\n            \n                Description\n            \n            \n                [description]\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(configService: ConfigService, authService: AuthService)\n                    \n                \n                        \n                            \n                                Defined in src/modules/auth/strategies/jwt-refresh.strategy.ts:18\n                            \n                        \n\n                \n                    \n                            [description]\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                        ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        authService\n                                                  \n                                                        \n                                                                        AuthService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        validate\n                        \n                    \n                \n            \n            \n                \n                    \n                    validate(undefined: JwtRefreshTokenPayloadDto)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/auth/strategies/jwt-refresh.strategy.ts:38\n                \n            \n\n\n            \n                \n                    [description]\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    \n                                                JwtRefreshTokenPayloadDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { BadRequestException, Injectable } from '@nestjs/common';\nimport { ExtractJwt, Strategy } from 'passport-jwt';\nimport { PassportStrategy } from '@nestjs/passport';\nimport { compare } from 'src/common/helpers';\n\nimport { ErrorTypeEnum } from 'src/common/enums';\nimport { ConfigService } from 'src/config';\n\nimport { UserEntity } from '../../users/entities';\n\nimport { JwtRefreshTokenPayloadDto } from '../dto';\nimport { AuthService } from '../auth.service';\n\n/**\n * [description]\n */\n@Injectable()\nexport class JwtRefreshTokenStrategy extends PassportStrategy(Strategy, 'jwt-refresh-token') {\n  /**\n   * [description]\n   * @param configService\n   * @param authService\n   */\n  constructor(\n    private readonly configService: ConfigService,\n    private readonly authService: AuthService,\n  ) {\n    super({\n      jwtFromRequest: ExtractJwt.fromBodyField('refreshToken'),\n      secretOrKey: configService.get('JWT_SECRET_REFRESH_TOKEN'),\n    });\n  }\n\n  /**\n   * [description]\n   * @param id\n   */\n  public async validate({\n    id,\n    ppid,\n    refreshTokenId,\n  }: JwtRefreshTokenPayloadDto): Promise {\n    const user = await this.authService.validateUser(\n      { id, refreshTokens: { id: refreshTokenId } },\n      { relations: { refreshTokens: true } },\n    );\n    const [refreshToken] = user.refreshTokens;\n    if (!(await compare(ppid, refreshToken.ppid)))\n      throw new BadRequestException(ErrorTypeEnum.AUTH_INCORRECT_CREDENTIALS);\n    return user;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/JwtStrategy.html":{"url":"injectables/JwtStrategy.html","title":"injectable - JwtStrategy","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  JwtStrategy\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/auth/strategies/jwt.strategy.ts\n        \n\n\n            \n                Description\n            \n            \n                [description]\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(configService: ConfigService, authService: AuthService)\n                    \n                \n                        \n                            \n                                Defined in src/modules/auth/strategies/jwt.strategy.ts:16\n                            \n                        \n\n                \n                    \n                            [description]\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                        ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        authService\n                                                  \n                                                        \n                                                                        AuthService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        validate\n                        \n                    \n                \n            \n            \n                \n                    \n                    validate(undefined: JwtAccessTokenPayloadDto)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/auth/strategies/jwt.strategy.ts:36\n                \n            \n\n\n            \n                \n                    [description]\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    \n                                                JwtAccessTokenPayloadDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { ExtractJwt, Strategy } from 'passport-jwt';\nimport { PassportStrategy } from '@nestjs/passport';\nimport { Injectable } from '@nestjs/common';\n\nimport { ConfigService } from 'src/config';\n\nimport { UserEntity } from '../../users/entities';\n\nimport { JwtAccessTokenPayloadDto } from '../dto';\nimport { AuthService } from '../auth.service';\n\n/**\n * [description]\n */\n@Injectable()\nexport class JwtStrategy extends PassportStrategy(Strategy) {\n  /**\n   * [description]\n   * @param configService\n   * @param authService\n   */\n  constructor(\n    private readonly configService: ConfigService,\n    private readonly authService: AuthService,\n  ) {\n    super({\n      jwtFromRequest: ExtractJwt.fromAuthHeaderAsBearerToken(),\n      secretOrKey: configService.get('JWT_SECRET_ACCESS_TOKEN'),\n    });\n  }\n\n  /**\n   * [description]\n   * @param id\n   */\n  public async validate({ id, refreshTokenId }: JwtAccessTokenPayloadDto): Promise {\n    return this.authService.validateUser({ id, refreshTokens: { id: refreshTokenId } });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/JwtTokensDto.html":{"url":"classes/JwtTokensDto.html","title":"class - JwtTokensDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  JwtTokensDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/auth/dto/jwt-tokens.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                [description]\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Readonly\n                                refreshToken\n                            \n                            \n                                    Public\n                                    Readonly\n                                token\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        refreshToken\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/auth/dto/jwt-tokens.dto.ts:17\n                        \n                    \n\n            \n                \n                    [description]\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        token\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/auth/dto/jwt-tokens.dto.ts:11\n                        \n                    \n\n            \n                \n                    [description]\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty, PickType } from '@nestjs/swagger';\n\n/**\n * [description]\n */\nexport class JwtTokensDto {\n  /**\n   * [description]\n   */\n  @ApiProperty()\n  public readonly token: string;\n\n  /**\n   * [description]\n   */\n  @ApiProperty()\n  public readonly refreshToken: string;\n}\n\n/**\n * [description]\n */\nexport class JwtRefreshTokenDto extends PickType(JwtTokensDto, ['refreshToken']) {}\n\n/**\n * [description]\n */\nexport class JwtAccessTokenPayloadDto {\n  /**\n   * [description]\n   */\n  public readonly id: string;\n\n  /**\n   * [description]\n   */\n  public readonly refreshTokenId: string;\n}\n\n/**\n * [description]\n */\nexport class JwtRefreshTokenPayloadDto extends JwtAccessTokenPayloadDto {\n  /**\n   * [description]\n   */\n  public readonly ppid: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/MultipartModule.html":{"url":"modules/MultipartModule.html","title":"module - MultipartModule","body":"\n                   \n\n\n\n\n    Modules\n    MultipartModule\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/multipart/multipart.module.ts\n        \n\n\n\n        \n            Description\n        \n        \n            [description]\n\n        \n\n\n        \n            \n            \n        \n\n        \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        Static\n                        createAsyncOptionsProvider\n                        \n                    \n                \n            \n            \n                \n                    \n                    createAsyncOptionsProvider(options: MultipartModuleAsyncOptions)\n                \n            \n\n\n            \n                \n                    Defined in src/multipart/multipart.module.ts:73\n                \n            \n\n\n            \n                \n                    [description]\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    options\n                                    \n                                                MultipartModuleAsyncOptions\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        [description]\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Provider\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        Static\n                        createAsyncProviders\n                        \n                    \n                \n            \n            \n                \n                    \n                    createAsyncProviders(options: MultipartModuleAsyncOptions)\n                \n            \n\n\n            \n                \n                    Defined in src/multipart/multipart.module.ts:56\n                \n            \n\n\n            \n                \n                    [description]\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    options\n                                    \n                                                MultipartModuleAsyncOptions\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        [description]\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Provider[]\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Static\n                        register\n                        \n                    \n                \n            \n            \n                \n                    \n                    register(options: MultipartModuleOptions)\n                \n            \n\n\n            \n                \n                    Defined in src/multipart/multipart.module.ts:23\n                \n            \n\n\n            \n                \n                    [description]\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                    Description\n                                \n                            \n                            \n                                \n                                    options\n                                    \n                                                MultipartModuleOptions\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        {}\n                                    \n\n                                    \n                                        [description]\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     DynamicModule\n\n                    \n                    \n                        [description]\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Static\n                        registerAsync\n                        \n                    \n                \n            \n            \n                \n                    \n                    registerAsync(options: MultipartModuleAsyncOptions)\n                \n            \n\n\n            \n                \n                    Defined in src/multipart/multipart.module.ts:39\n                \n            \n\n\n            \n                \n                    [description]\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    options\n                                    \n                                                MultipartModuleAsyncOptions\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        [description]\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     DynamicModule\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n    \n\n\n    \n        import { randomStringGenerator } from '@nestjs/common/utils/random-string-generator.util';\nimport { Module, DynamicModule, Provider, Global } from '@nestjs/common';\n\nimport { MULTIPART_MODULE_OPTIONS, MULTIPART_MODULE } from './multipart.constants';\nimport { StorageService } from './storage.service';\nimport {\n  MultipartModuleAsyncOptions,\n  MultipartOptionsFactory,\n  MultipartModuleOptions,\n} from './interfaces';\n\n/**\n * [description]\n */\n@Global()\n@Module({})\nexport class MultipartModule {\n  /**\n   * [description]\n   * @param  options [description]\n   * @return         [description]\n   */\n  static register(options: MultipartModuleOptions = {}): DynamicModule {\n    return {\n      module: MultipartModule,\n      providers: [\n        { provide: MULTIPART_MODULE_OPTIONS, useValue: options },\n        { provide: MULTIPART_MODULE, useValue: randomStringGenerator() },\n        { provide: StorageService, useClass: StorageService },\n      ],\n      exports: [MULTIPART_MODULE, MULTIPART_MODULE_OPTIONS, StorageService],\n    };\n  }\n\n  /**\n   * [description]\n   * @param  options [description]\n   */\n  public static registerAsync(options: MultipartModuleAsyncOptions): DynamicModule {\n    return {\n      module: MultipartModule,\n      imports: options.imports,\n      providers: [\n        ...this.createAsyncProviders(options),\n        { provide: MULTIPART_MODULE, useValue: randomStringGenerator() },\n        { provide: StorageService, useClass: StorageService },\n      ],\n      exports: [MULTIPART_MODULE, MULTIPART_MODULE_OPTIONS, StorageService],\n    };\n  }\n\n  /**\n   * [description]\n   * @param  options [description]\n   */\n  private static createAsyncProviders(options: MultipartModuleAsyncOptions): Provider[] {\n    if (options.useExisting || options.useFactory) {\n      return [this.createAsyncOptionsProvider(options)];\n    }\n    return [\n      this.createAsyncOptionsProvider(options),\n      {\n        provide: options.useClass,\n        useClass: options.useClass,\n      },\n    ];\n  }\n\n  /**\n   * [description]\n   * @param  options [description]\n   */\n  private static createAsyncOptionsProvider(options: MultipartModuleAsyncOptions): Provider {\n    if (options.useFactory) {\n      return {\n        provide: MULTIPART_MODULE_OPTIONS,\n        useFactory: options.useFactory,\n        inject: options.inject || [],\n      };\n    }\n    return {\n      provide: MULTIPART_MODULE_OPTIONS,\n      useFactory: async (optionsFactory: MultipartOptionsFactory) =>\n        optionsFactory.createMultipartOptions(),\n      inject: [options.useExisting || options.useClass],\n    };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/MultipartModuleAsyncOptions.html":{"url":"interfaces/MultipartModuleAsyncOptions.html","title":"interface - MultipartModuleAsyncOptions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  MultipartModuleAsyncOptions\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/multipart/interfaces/multipart-module.interface.ts\n        \n\n\n            \n                Description\n            \n            \n                [description]\n\n            \n\n            \n                Extends\n            \n            \n                    Pick\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            inject\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            useClass\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            useExisting\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            useFactory\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        inject\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        inject:     any[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     any[]\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    [description]\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        useClass\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        useClass:         Type\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Type\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    [description]\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        useExisting\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        useExisting:         Type\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Type\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    [description]\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        useFactory\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        useFactory:         function\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         function\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    [description]\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { FastifyMultipartOptions } from 'fastify-multipart';\nimport { ModuleMetadata } from '@nestjs/common/interfaces';\nimport { Type } from '@nestjs/common';\n\n/**\n * [description]\n */\nexport type MultipartModuleOptions = FastifyMultipartOptions;\n\n/**\n * [description]\n */\nexport interface MultipartOptionsFactory {\n  /**\n   * [description]\n   */\n  createMultipartOptions(): Promise | MultipartModuleOptions;\n}\n\n/**\n * [description]\n */\nexport interface MultipartModuleAsyncOptions extends Pick {\n  /**\n   * [description]\n   */\n  useExisting?: Type;\n\n  /**\n   * [description]\n   */\n  useClass?: Type;\n\n  /**\n   * [description]\n   */\n  useFactory?: (...args: any[]) => Promise | MultipartModuleOptions;\n\n  /**\n   * [description]\n   */\n  inject?: any[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/MultipartOptionsFactory.html":{"url":"interfaces/MultipartOptionsFactory.html","title":"interface - MultipartOptionsFactory","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  MultipartOptionsFactory\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/multipart/interfaces/multipart-module.interface.ts\n        \n\n\n            \n                Description\n            \n            \n                [description]\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Methods\n                        \n                    \n                    \n                        \n                            \n                                \n                                    \n                                        createMultipartOptions\n                                    \n                                \n                            \n                        \n                    \n                \n            \n        \n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        createMultipartOptions\n                        \n                    \n                \n            \n            \n                \ncreateMultipartOptions()\n                \n            \n\n\n            \n                \n                    Defined in src/multipart/interfaces/multipart-module.interface.ts:17\n                \n            \n\n\n            \n                \n                    [description]\n\n\n                    \n                        Returns :         Promise | MultipartModuleOptions\n\n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { FastifyMultipartOptions } from 'fastify-multipart';\nimport { ModuleMetadata } from '@nestjs/common/interfaces';\nimport { Type } from '@nestjs/common';\n\n/**\n * [description]\n */\nexport type MultipartModuleOptions = FastifyMultipartOptions;\n\n/**\n * [description]\n */\nexport interface MultipartOptionsFactory {\n  /**\n   * [description]\n   */\n  createMultipartOptions(): Promise | MultipartModuleOptions;\n}\n\n/**\n * [description]\n */\nexport interface MultipartModuleAsyncOptions extends Pick {\n  /**\n   * [description]\n   */\n  useExisting?: Type;\n\n  /**\n   * [description]\n   */\n  useClass?: Type;\n\n  /**\n   * [description]\n   */\n  useFactory?: (...args: any[]) => Promise | MultipartModuleOptions;\n\n  /**\n   * [description]\n   */\n  inject?: any[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/NotificationEntity.html":{"url":"entities/NotificationEntity.html","title":"entity - NotificationEntity","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  NotificationEntity\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/notifications/entities/notification.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Readonly\n                                createdAt\n                            \n                            \n                                    Public\n                                    Readonly\n                                id\n                            \n                            \n                                    Public\n                                    Readonly\n                                owner\n                            \n                            \n                                    Public\n                                    Readonly\n                                status\n                            \n                            \n                                    Public\n                                    Readonly\n                                title\n                            \n                            \n                                    Public\n                                    Readonly\n                                type\n                            \n                            \n                                    Public\n                                    Readonly\n                                updatedAt\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        createdAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({readOnly: true})@CreateDateColumn({readonly: true, type: 'timestamptz', default: () => CURRENT_TIMESTAMP})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/notifications/entities/notification.entity.ts:66\n                        \n                    \n\n            \n                \n                    [description]\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({readOnly: true})@PrimaryGeneratedColumn('uuid')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/notifications/entities/notification.entity.ts:23\n                        \n                    \n\n            \n                \n                    [description]\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        owner\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Partial\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @JoinColumn()@ApiHideProperty()@ManyToOne(undefined, {onDelete: 'CASCADE', nullable: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/notifications/entities/notification.entity.ts:48\n                        \n                    \n\n            \n                \n                    [description]\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        status\n                        \n                    \n                \n            \n                \n                    \n                        Type :         NotificationsStatusEnum\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({enum: NotificationsStatusEnum, default: undefined})@Column({type: 'enum', enum: NotificationsStatusEnum, default: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/notifications/entities/notification.entity.ts:30\n                        \n                    \n\n            \n                \n                    [description]\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        title\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({maxLength: 256})@Column({type: 'varchar', length: 256})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/notifications/entities/notification.entity.ts:55\n                        \n                    \n\n            \n                \n                    [description]\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        type\n                        \n                    \n                \n            \n                \n                    \n                        Type :         NotificationsTypeEnum\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({enum: NotificationsTypeEnum})@Column({type: 'enum', enum: NotificationsTypeEnum})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/notifications/entities/notification.entity.ts:37\n                        \n                    \n\n            \n                \n                    [description]\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        updatedAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({readOnly: true})@UpdateDateColumn({readonly: true, type: 'timestamptz', default: () => CURRENT_TIMESTAMP, onUpdate: 'CURRENT_TIMESTAMP'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/notifications/entities/notification.entity.ts:78\n                        \n                    \n\n            \n                \n                    [description]\n\n                \n            \n\n        \n    \n\n    \n\n\n    \n        import { ApiHideProperty, ApiProperty } from '@nestjs/swagger';\nimport {\n  PrimaryGeneratedColumn,\n  CreateDateColumn,\n  UpdateDateColumn,\n  JoinColumn,\n  ManyToOne,\n  Entity,\n  Column,\n} from 'typeorm';\n\nimport { UserEntity } from 'src/modules/users/entities';\n\nimport { NotificationsStatusEnum, NotificationsTypeEnum } from '../enums';\n\n@Entity('notifications')\nexport class NotificationEntity {\n  /**\n   * [description]\n   */\n  @ApiProperty({ readOnly: true })\n  @PrimaryGeneratedColumn('uuid')\n  public readonly id: string;\n\n  /**\n   * [description]\n   */\n  @ApiProperty({ enum: NotificationsStatusEnum, default: NotificationsStatusEnum.UNREAD })\n  @Column({ type: 'enum', enum: NotificationsStatusEnum, default: NotificationsStatusEnum.UNREAD })\n  public readonly status: NotificationsStatusEnum;\n\n  /**\n   * [description]\n   */\n  @ApiProperty({ enum: NotificationsTypeEnum })\n  @Column({ type: 'enum', enum: NotificationsTypeEnum })\n  public readonly type: NotificationsTypeEnum;\n\n  /**\n   * [description]\n   */\n  @JoinColumn()\n  @ApiHideProperty()\n  @ManyToOne(() => UserEntity, {\n    onDelete: 'CASCADE',\n    nullable: false,\n  })\n  public readonly owner: Partial;\n\n  /**\n   * [description]\n   */\n  @ApiProperty({ maxLength: 256 })\n  @Column({ type: 'varchar', length: 256 })\n  public readonly title: string;\n\n  /**\n   * [description]\n   */\n  @ApiProperty({ readOnly: true })\n  @CreateDateColumn({\n    readonly: true,\n    type: 'timestamptz',\n    default: () => 'CURRENT_TIMESTAMP',\n  })\n  public readonly createdAt: Date;\n\n  /**\n   * [description]\n   */\n  @ApiProperty({ readOnly: true })\n  @UpdateDateColumn({\n    readonly: true,\n    type: 'timestamptz',\n    default: () => 'CURRENT_TIMESTAMP',\n    onUpdate: 'CURRENT_TIMESTAMP',\n  })\n  public readonly updatedAt: Date;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/NotificationsController.html":{"url":"controllers/NotificationsController.html","title":"controller - NotificationsController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  NotificationsController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/notifications/notifications.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                notifications\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                deleteOne\n                            \n                            \n                                    Public\n                                    Async\n                                selectAll\n                            \n                            \n                                    Public\n                                    Async\n                                selectOne\n                            \n                            \n                                    Public\n                                    Async\n                                sendAndCreateOne\n                            \n                            \n                                    Public\n                                    Async\n                                updateOne\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        deleteOne\n                        \n                    \n                \n            \n            \n                \n                    \n                    deleteOne(conditions: ID, owner: UserEntity)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete(':id')\n                \n            \n\n            \n                \n                    Defined in src/modules/notifications/notifications.controller.ts:104\n                \n            \n\n\n            \n                \n                    [description]\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    conditions\n                                    \n                                                ID\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    owner\n                                    \n                                                UserEntity\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        selectAll\n                        \n                    \n                \n            \n            \n                \n                    \n                    selectAll(options: SelectNotificationsDto, owner: UserEntity)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()\n                \n            \n\n            \n                \n                    Defined in src/modules/notifications/notifications.controller.ts:61\n                \n            \n\n\n            \n                \n                    [description]\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    options\n                                    \n                                                SelectNotificationsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    owner\n                                    \n                                                UserEntity\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        selectOne\n                        \n                    \n                \n            \n            \n                \n                    \n                    selectOne(conditions: ID, owner: UserEntity, options?: FindOneOptionsDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get(':id')\n                \n            \n\n            \n                \n                    Defined in src/modules/notifications/notifications.controller.ts:75\n                \n            \n\n\n            \n                \n                    [description]\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    conditions\n                                    \n                                                ID\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    owner\n                                    \n                                                UserEntity\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    options\n                                    \n                                                FindOneOptionsDto\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        sendAndCreateOne\n                        \n                    \n                \n            \n            \n                \n                    \n                    sendAndCreateOne(data: CreateNotificationDto, owner: UserEntity)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()\n                \n            \n\n            \n                \n                    Defined in src/modules/notifications/notifications.controller.ts:45\n                \n            \n\n\n            \n                \n                    [description]\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    data\n                                    \n                                                CreateNotificationDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    owner\n                                    \n                                                UserEntity\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        updateOne\n                        \n                    \n                \n            \n            \n                \n                    \n                    updateOne(conditions: ID, data: UpdateNotificationDto, owner: UserEntity)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch(':id')\n                \n            \n\n            \n                \n                    Defined in src/modules/notifications/notifications.controller.ts:90\n                \n            \n\n\n            \n                \n                    UpdateNotificationDto\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    conditions\n                                    \n                                                ID\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    data\n                                    \n                                                UpdateNotificationDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    owner\n                                    \n                                                UserEntity\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { ApiBearerAuth, ApiTags } from '@nestjs/swagger';\nimport {\n  ClassSerializerInterceptor,\n  UseInterceptors,\n  Controller,\n  UseGuards,\n  Delete,\n  Patch,\n  Query,\n  Param,\n  Post,\n  Body,\n  Get,\n} from '@nestjs/common';\n\nimport { FindOneOptionsDto, ID } from 'src/common/dto';\nimport { User } from 'src/common/decorators';\n\nimport { UserEntity } from '../users/entities';\nimport { JwtAuthGuard } from '../auth/guards';\n\nimport { NotificationsService } from './services';\nimport { NotificationEntity } from './entities';\nimport {\n  PaginationNotificationsDto,\n  SelectNotificationsDto,\n  CreateNotificationDto,\n  UpdateNotificationDto,\n} from './dto';\n\n@ApiBearerAuth()\n@UseGuards(JwtAuthGuard)\n@ApiTags('notifications')\n@Controller('notifications')\n@UseInterceptors(ClassSerializerInterceptor)\nexport class NotificationsController {\n  constructor(private readonly notificationsService: NotificationsService) {}\n\n  /**\n   * [description]\n   * @param data\n   * @param owner\n   */\n  @Post()\n  public async sendAndCreateOne(\n    @Body() data: CreateNotificationDto,\n    @User() owner: UserEntity,\n  ): Promise {\n    return this.notificationsService.sendAndCreateOneForOne(\n      { owner: { id: owner.id } },\n      { ...data, owner: { id: owner.id } },\n    );\n  }\n\n  /**\n   * [description]\n   * @param options\n   * @param owner\n   */\n  @Get()\n  public async selectAll(\n    @Query() options: SelectNotificationsDto,\n    @User() owner: UserEntity,\n  ): Promise {\n    return this.notificationsService.selectAll(options, owner);\n  }\n\n  /**\n   * [description]\n   * @param conditions\n   * @param owner\n   * @param options\n   */\n  @Get(':id')\n  public async selectOne(\n    @Param() conditions: ID,\n    @User() owner: UserEntity,\n    @Query() options?: FindOneOptionsDto,\n  ): Promise {\n    return this.notificationsService.selectOne({ ...conditions, owner: { id: owner.id } }, options);\n  }\n\n  /**\n   UpdateNotificationDto\n   * @param conditions \n   * @param data \n   * @param owner\n   */\n  @Patch(':id')\n  public async updateOne(\n    @Param() conditions: ID,\n    @Body() data: UpdateNotificationDto,\n    @User() owner: UserEntity,\n  ): Promise {\n    return this.notificationsService.updateOne({ ...conditions, owner: { id: owner.id } }, data);\n  }\n\n  /**\n   * [description]\n   * @param conditions\n   * @param owner\n   */\n  @Delete(':id')\n  public async deleteOne(\n    @Param() conditions: ID,\n    @User() owner: UserEntity,\n  ): Promise {\n    return this.notificationsService.deleteOne({ ...conditions, owner: { id: owner.id } });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/NotificationsModule.html":{"url":"modules/NotificationsModule.html","title":"module - NotificationsModule","body":"\n                   \n\n\n\n\n    Modules\n    NotificationsModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_NotificationsModule\n\n\n\ncluster_NotificationsModule_exports\n\n\n\ncluster_NotificationsModule_imports\n\n\n\ncluster_NotificationsModule_providers\n\n\n\n\nUsersModule\n\nUsersModule\n\n\n\nNotificationsModule\n\nNotificationsModule\n\nNotificationsModule -->\n\nUsersModule->NotificationsModule\n\n\n\n\n\nNotificationsService \n\nNotificationsService \n\nNotificationsService  -->\n\nNotificationsModule->NotificationsService \n\n\n\n\n\nNotificationsService\n\nNotificationsService\n\nNotificationsModule -->\n\nNotificationsService->NotificationsModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/modules/notifications/notifications.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            NotificationsService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            NotificationsController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            UsersModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            NotificationsService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { TypeOrmModule } from '@nestjs/typeorm';\nimport { Module } from '@nestjs/common';\n\nimport { NotificationsController } from './notifications.controller';\nimport { NotificationsService } from './services';\nimport { NotificationEntity } from './entities';\nimport { UsersModule } from '../users';\n\n@Module({\n  imports: [TypeOrmModule.forFeature([NotificationEntity]), UsersModule],\n  controllers: [NotificationsController],\n  providers: [NotificationsService],\n  exports: [NotificationsService],\n})\nexport class NotificationsModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/NotificationsService.html":{"url":"injectables/NotificationsService.html","title":"injectable - NotificationsService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  NotificationsService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/notifications/services/notifications.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Readonly\n                                notificationEntityRepository\n                            \n                            \n                                    Public\n                                    Readonly\n                                userNotificationTokensService\n                            \n                            \n                                    Public\n                                    Readonly\n                                usersService\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                createMany\n                            \n                            \n                                    Public\n                                    Async\n                                createOne\n                            \n                            \n                                    Public\n                                    Async\n                                deleteOne\n                            \n                            \n                                    Public\n                                find\n                            \n                            \n                                    Public\n                                generateNotificationProps\n                            \n                            \n                                    Public\n                                    Async\n                                selectAll\n                            \n                            \n                                    Public\n                                    Async\n                                selectOne\n                            \n                            \n                                    Public\n                                    Async\n                                sendAndCreateOneForMany\n                            \n                            \n                                    Public\n                                    Async\n                                sendAndCreateOneForManyMulticast\n                            \n                            \n                                    Public\n                                    Async\n                                sendAndCreateOneForOne\n                            \n                            \n                                    Public\n                                    Async\n                                updateAll\n                            \n                            \n                                    Public\n                                    Async\n                                updateOne\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(notificationEntityRepository: Repository, userNotificationTokensService: UserNotificationTokensService, usersService: UsersService)\n                    \n                \n                        \n                            \n                                Defined in src/modules/notifications/services/notifications.service.ts:29\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        notificationEntityRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        userNotificationTokensService\n                                                  \n                                                        \n                                                                        UserNotificationTokensService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        usersService\n                                                  \n                                                        \n                                                                        UsersService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        createMany\n                        \n                    \n                \n            \n            \n                \n                    \n                    createMany(entitiesLike: Partial[], options: SaveOptions)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/notifications/services/notifications.service.ts:42\n                \n            \n\n\n            \n                \n                    [description]\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    entitiesLike\n                                    \n                                                Partial[]\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    options\n                                    \n                                            SaveOptions\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        { transaction: false }\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        createOne\n                        \n                    \n                \n            \n            \n                \n                    \n                    createOne(entityLike: Partial, options: SaveOptions)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/notifications/services/notifications.service.ts:59\n                \n            \n\n\n            \n                \n                    [description]\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    entityLike\n                                    \n                                                Partial\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    options\n                                    \n                                            SaveOptions\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        { transaction: false }\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        deleteOne\n                        \n                    \n                \n            \n            \n                \n                    \n                    deleteOne(conditions: FindOptionsWhere, options: RemoveOptions)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/notifications/services/notifications.service.ts:176\n                \n            \n\n\n            \n                \n                    [description]\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    conditions\n                                    \n                                                FindOptionsWhere\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    options\n                                    \n                                            RemoveOptions\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        { transaction: false }\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        find\n                        \n                    \n                \n            \n            \n                \n                    \n                    find(optionsOrConditions?: FindManyOptions)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/notifications/services/notifications.service.ts:75\n                \n            \n\n\n            \n                \n                     [description]\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    optionsOrConditions\n                                    \n                                                FindManyOptions\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         SelectQueryBuilder\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        generateNotificationProps\n                        \n                    \n                \n            \n            \n                \n                    \n                    generateNotificationProps(entity: Partial)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/notifications/services/notifications.service.ts:192\n                \n            \n\n\n            \n                \n                    [description]\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    entity\n                                    \n                                                Partial\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     BaseMessage\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        selectAll\n                        \n                    \n                \n            \n            \n                \n                    \n                    selectAll(options: SelectNotificationsDto, owner?: Partial)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/notifications/services/notifications.service.ts:103\n                \n            \n\n\n            \n                \n                    [description]\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    options\n                                    \n                                                SelectNotificationsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    owner\n                                    \n                                                Partial\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        selectOne\n                        \n                    \n                \n            \n            \n                \n                    \n                    selectOne(conditions: FindOptionsWhere, options: FindOneOptions)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/notifications/services/notifications.service.ts:123\n                \n            \n\n\n            \n                \n                    [description]\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    conditions\n                                    \n                                                FindOptionsWhere\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    options\n                                    \n                                                FindOneOptions\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        { loadEagerRelations: false }\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        sendAndCreateOneForMany\n                        \n                    \n                \n            \n            \n                \n                    \n                    sendAndCreateOneForMany(conditions: FindOptionsWhere, data: Partial)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/notifications/services/notifications.service.ts:227\n                \n            \n\n\n            \n                \n                    [description]\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    conditions\n                                    \n                                                FindOptionsWhere\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    data\n                                    \n                                                Partial\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        sendAndCreateOneForManyMulticast\n                        \n                    \n                \n            \n            \n                \n                    \n                    sendAndCreateOneForManyMulticast(conditions: FindOptionsWhere, data: Partial)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/notifications/services/notifications.service.ts:203\n                \n            \n\n\n            \n                \n                    [description]\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    conditions\n                                    \n                                                FindOptionsWhere\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    data\n                                    \n                                                Partial\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        sendAndCreateOneForOne\n                        \n                    \n                \n            \n            \n                \n                    \n                    sendAndCreateOneForOne(conditions: FindOptionsWhere, data: Partial)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/notifications/services/notifications.service.ts:258\n                \n            \n\n\n            \n                \n                    [description]\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    conditions\n                                    \n                                                FindOptionsWhere\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    data\n                                    \n                                                Partial\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        updateAll\n                        \n                    \n                \n            \n            \n                \n                    \n                    updateAll(conditions: FindOptionsWhere, entityLike: DeepPartial)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/notifications/services/notifications.service.ts:139\n                \n            \n\n\n            \n                \n                    [description]\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    conditions\n                                    \n                                                FindOptionsWhere\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        { status: NotificationsStatusEnum.UNREAD }\n                                    \n\n                                \n                                \n                                    entityLike\n                                    \n                                                DeepPartial\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        { status: NotificationsStatusEnum.READ }\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        updateOne\n                        \n                    \n                \n            \n            \n                \n                    \n                    updateOne(conditions: FindOptionsWhere, entityLike: Partial, options: SaveOptions)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/notifications/services/notifications.service.ts:156\n                \n            \n\n\n            \n                \n                    [description]\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    conditions\n                                    \n                                                FindOptionsWhere\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    entityLike\n                                    \n                                                Partial\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    options\n                                    \n                                            SaveOptions\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        { transaction: false }\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        notificationEntityRepository\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Repository\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @InjectRepository(NotificationEntity)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/notifications/services/notifications.service.ts:32\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        userNotificationTokensService\n                        \n                    \n                \n            \n                \n                    \n                        Type :         UserNotificationTokensService\n\n                    \n                \n                    \n                        \n                                Defined in src/modules/notifications/services/notifications.service.ts:33\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        usersService\n                        \n                    \n                \n            \n                \n                    \n                        Type :         UsersService\n\n                    \n                \n                    \n                        \n                                Defined in src/modules/notifications/services/notifications.service.ts:34\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { Injectable, NotFoundException } from '@nestjs/common';\nimport { instanceToPlain } from 'class-transformer';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { BaseMessage, Message, Notification } from 'firebase-admin/messaging';\nimport { messaging } from 'firebase-admin';\nimport {\n  Repository,\n  DeepPartial,\n  SaveOptions,\n  UpdateResult,\n  RemoveOptions,\n  FindOneOptions,\n  FindManyOptions,\n  FindOptionsWhere,\n  FindOptionsUtils,\n  SelectQueryBuilder,\n} from 'typeorm';\n\nimport { ErrorTypeEnum } from 'src/common/enums';\n\nimport { UserNotificationTokensService, UsersService } from 'src/modules/users/services';\nimport { UserEntity, UserNotificationTokenEntity } from 'src/modules/users/entities';\n\nimport { PaginationNotificationsDto, SelectNotificationsDto } from '../dto';\nimport { NotificationsStatusEnum } from '../enums';\nimport { NotificationEntity } from '../entities';\n\n@Injectable()\nexport class NotificationsService {\n  constructor(\n    @InjectRepository(NotificationEntity)\n    public readonly notificationEntityRepository: Repository,\n    public readonly userNotificationTokensService: UserNotificationTokensService,\n    public readonly usersService: UsersService,\n  ) {}\n\n  /**\n   * [description]\n   * @param entitiesLike\n   * @param options\n   */\n  public async createMany(\n    entitiesLike: Partial[],\n    options: SaveOptions = { transaction: false },\n  ): Promise {\n    return this.notificationEntityRepository.manager.transaction(async () => {\n      const entities = this.notificationEntityRepository.create(entitiesLike);\n      return this.notificationEntityRepository.save(entities, options).catch(() => {\n        throw new NotFoundException(ErrorTypeEnum.NOTIFICATIONS_ALREADY_EXIST);\n      });\n    });\n  }\n\n  /**\n   * [description]\n   * @param entityLike\n   * @param options\n   */\n  public async createOne(\n    entityLike: Partial,\n    options: SaveOptions = { transaction: false },\n  ): Promise {\n    return this.notificationEntityRepository.manager.transaction(async () => {\n      const entity = this.notificationEntityRepository.create(entityLike);\n      return this.notificationEntityRepository.save(entity, options).catch(() => {\n        throw new NotFoundException(ErrorTypeEnum.NOTIFICATION_ALREADY_EXIST);\n      });\n    });\n  }\n\n  /**\n   *  [description]\n   * @param optionsOrConditions\n   */\n  public find(\n    optionsOrConditions?: FindManyOptions,\n  ): SelectQueryBuilder {\n    const metadata = this.notificationEntityRepository.metadata;\n    const qb = this.notificationEntityRepository.createQueryBuilder(\n      FindOptionsUtils.extractFindManyOptionsAlias(optionsOrConditions) || metadata.name,\n    );\n\n    if (\n      !FindOptionsUtils.isFindManyOptions(optionsOrConditions) ||\n      optionsOrConditions.loadEagerRelations !== false\n    ) {\n      FindOptionsUtils.joinEagerRelations(qb, qb.alias, metadata);\n\n      /**\n       * Place for common relation\n       * @example qb.leftJoinAndSelect('NotificationEntity.relation_field', 'NotificationEntity_relation_field')\n       */\n    }\n\n    return qb.setFindOptions(optionsOrConditions);\n  }\n\n  /**\n   * [description]\n   * @param options\n   * @param owner\n   */\n  public async selectAll(\n    options: SelectNotificationsDto,\n    owner?: Partial,\n  ): Promise {\n    const qb = this.find(instanceToPlain(options));\n    if (owner) qb.andWhere({ owner });\n\n    const data = await qb.getManyAndCount().catch(() => {\n      throw new NotFoundException(ErrorTypeEnum.NOTIFICATIONS_NOT_FOUND);\n    });\n    await this.updateAll();\n\n    return new PaginationNotificationsDto(data);\n  }\n\n  /**\n   * [description]\n   * @param conditions\n   * @param options\n   */\n  public async selectOne(\n    conditions: FindOptionsWhere,\n    options: FindOneOptions = { loadEagerRelations: false },\n  ): Promise {\n    return this.find({ ...instanceToPlain(options), where: conditions })\n      .getOneOrFail()\n      .catch(() => {\n        throw new NotFoundException(ErrorTypeEnum.NOTIFICATION_NOT_FOUND);\n      });\n  }\n\n  /**\n   * [description]\n   * @param conditions\n   * @param entityLike\n   */\n  public async updateAll(\n    conditions: FindOptionsWhere = { status: NotificationsStatusEnum.UNREAD },\n    entityLike: DeepPartial = { status: NotificationsStatusEnum.READ },\n  ): Promise {\n    return this.notificationEntityRepository.manager.transaction((transactionalEntityManager) =>\n      transactionalEntityManager.update(NotificationEntity, conditions, entityLike).catch(() => {\n        throw new NotFoundException(ErrorTypeEnum.NOTIFICATIONS_NOT_FOUND);\n      }),\n    );\n  }\n\n  /**\n   * [description]\n   * @param conditions\n   * @param entityLike\n   * @param options\n   */\n  public async updateOne(\n    conditions: FindOptionsWhere,\n    entityLike: Partial,\n    options: SaveOptions = { transaction: false },\n  ): Promise {\n    return this.notificationEntityRepository.manager.transaction(async () => {\n      const mergeIntoEntity = await this.selectOne(conditions);\n      const entity = this.notificationEntityRepository.merge(mergeIntoEntity, entityLike);\n      const { id } = await this.notificationEntityRepository.save(entity, options).catch(() => {\n        throw new NotFoundException(ErrorTypeEnum.NOTIFICATION_NOT_FOUND);\n      });\n      return this.selectOne({ id }, { loadEagerRelations: true });\n    });\n  }\n\n  /**\n   * [description]\n   * @param conditions\n   * @param options\n   */\n  public async deleteOne(\n    conditions: FindOptionsWhere,\n    options: RemoveOptions = { transaction: false },\n  ): Promise {\n    return this.notificationEntityRepository.manager.transaction(async () => {\n      const entity = await this.selectOne(conditions);\n      return this.notificationEntityRepository.remove(entity, options).catch(() => {\n        throw new NotFoundException(ErrorTypeEnum.NOTIFICATION_NOT_FOUND);\n      });\n    });\n  }\n\n  /**\n   * [description]\n   * @param entity\n   */\n  public generateNotificationProps(entity: Partial): BaseMessage {\n    const notification: Notification = { title: entity.title };\n    const data = { json: JSON.stringify(entity) };\n    return { notification, data };\n  }\n\n  /**\n   * [description]\n   * @param conditions\n   * @param data\n   */\n  public async sendAndCreateOneForManyMulticast(\n    conditions: FindOptionsWhere,\n    data: Partial,\n  ): Promise {\n    const users = await this.usersService\n      .find({ where: conditions, select: { id: true }, relations: { notificationTokens: true } })\n      .getMany();\n    await this.createMany(users.map((user) => ({ ...data, owner: { id: user.id } })));\n\n    const tokens = users.reduce(\n      (acc, current) => (acc.concat(current.notificationTokens.map((el) => el.token)), acc),\n      [],\n    );\n    return messaging().sendMulticast({\n      ...this.generateNotificationProps(data),\n      tokens,\n    });\n  }\n\n  /**\n   * [description]\n   * @param conditions\n   * @param data\n   */\n  public async sendAndCreateOneForMany(\n    conditions: FindOptionsWhere,\n    data: Partial,\n  ): Promise {\n    const users = await this.usersService\n      .find({ where: conditions, select: { id: true }, relations: { notificationTokens: true } })\n      .getMany();\n    const entities = await this.createMany(\n      users.map((user) => ({ ...data, owner: { id: user.id } })),\n    );\n\n    const messages = users.reduce((acc, current, index) => {\n      if (current.notificationTokens.length) {\n        const entity = entities[index];\n        const data = this.generateNotificationProps(entity);\n        const messages = current.notificationTokens.map((el) => ({\n          ...data,\n          token: el.token,\n        }));\n        acc.concat(messages);\n      }\n      return acc;\n    }, []);\n    return messaging().sendAll(messages);\n  }\n\n  /**\n   * [description]\n   * @param conditions\n   * @param data\n   */\n  public async sendAndCreateOneForOne(\n    conditions: FindOptionsWhere,\n    data: Partial,\n  ): Promise {\n    const entity = await this.createOne(data);\n    const tokens = await this.userNotificationTokensService\n      .selectAll({ where: conditions })\n      .then((data) => data.map((el) => el.token));\n    return messaging().sendMulticast({\n      ...this.generateNotificationProps(entity),\n      tokens,\n    });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PaginationChatMessagesDto.html":{"url":"classes/PaginationChatMessagesDto.html","title":"class - PaginationChatMessagesDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PaginationChatMessagesDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/chats/dto/pagination-chat-messages.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                [description]\n\n            \n\n\n\n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(undefined: [ChatMessageEntity[], number])\n                    \n                \n                        \n                            \n                                Defined in src/modules/chats/dto/pagination-chat-messages.dto.ts:8\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                  \n                                                        \n                                                                        [ChatMessageEntity[], number]\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PaginationMixin } from 'src/common/dto';\n\nimport { ChatMessageEntity } from '../entities';\n\n/**\n * [description]\n */\nexport class PaginationChatMessagesDto extends PaginationMixin(ChatMessageEntity) {\n  constructor([result, total]: [ChatMessageEntity[], number]) {\n    super();\n    Object.assign(this, { result, total });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PaginationChatParticipantsDto.html":{"url":"classes/PaginationChatParticipantsDto.html","title":"class - PaginationChatParticipantsDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PaginationChatParticipantsDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/chats/dto/pagination-chat-participants.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                [description]\n\n            \n\n\n\n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(undefined: [ChatParticipantEntity[], number])\n                    \n                \n                        \n                            \n                                Defined in src/modules/chats/dto/pagination-chat-participants.dto.ts:8\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                  \n                                                        \n                                                                        [ChatParticipantEntity[], number]\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PaginationMixin } from 'src/common/dto';\n\nimport { ChatParticipantEntity } from '../entities';\n\n/**\n * [description]\n */\nexport class PaginationChatParticipantsDto extends PaginationMixin(ChatParticipantEntity) {\n  constructor([result, total]: [ChatParticipantEntity[], number]) {\n    super();\n    Object.assign(this, { result, total });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PaginationChatsDto.html":{"url":"classes/PaginationChatsDto.html","title":"class - PaginationChatsDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PaginationChatsDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/chats/dto/pagination-chats.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                [description]\n\n            \n\n\n\n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(undefined: [ChatEntity[], number])\n                    \n                \n                        \n                            \n                                Defined in src/modules/chats/dto/pagination-chats.dto.ts:8\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                  \n                                                        \n                                                                        [ChatEntity[], number]\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PaginationMixin } from 'src/common/dto';\n\nimport { ChatEntity } from '../entities';\n\n/**\n * [description]\n */\nexport class PaginationChatsDto extends PaginationMixin(ChatEntity) {\n  constructor([result, total]: [ChatEntity[], number]) {\n    super();\n    Object.assign(this, { result, total });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PaginationFilesDto.html":{"url":"classes/PaginationFilesDto.html","title":"class - PaginationFilesDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PaginationFilesDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/files/dto/pagination-files.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                [description]\n\n            \n\n\n\n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(undefined: [FileEntity[], number])\n                    \n                \n                        \n                            \n                                Defined in src/modules/files/dto/pagination-files.dto.ts:8\n                            \n                        \n\n                \n                    \n                            [description]\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                  \n                                                        \n                                                                        [FileEntity[], number]\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PaginationMixin } from 'src/common/dto';\n\nimport { FileEntity } from '../entities';\n\n/**\n * [description]\n */\nexport class PaginationFilesDto extends PaginationMixin(FileEntity) {\n  /**\n   * [description]\n   * @param result\n   * @param total\n   */\n  constructor([result, total]: [FileEntity[], number]) {\n    super();\n    Object.assign(this, { result, total });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PaginationNotificationsDto.html":{"url":"classes/PaginationNotificationsDto.html","title":"class - PaginationNotificationsDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PaginationNotificationsDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/notifications/dto/pagination-notifications.dto.ts\n        \n\n\n\n\n\n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(undefined: [NotificationEntity[], number])\n                    \n                \n                        \n                            \n                                Defined in src/modules/notifications/dto/pagination-notifications.dto.ts:5\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                  \n                                                        \n                                                                        [NotificationEntity[], number]\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PaginationMixin } from 'src/common/dto';\n\nimport { NotificationEntity } from '../entities';\n\nexport class PaginationNotificationsDto extends PaginationMixin(NotificationEntity) {\n  constructor([result, count]: [NotificationEntity[], number]) {\n    super();\n    Object.assign(this, { result, count });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PaginationUserNotificationTokensDto.html":{"url":"classes/PaginationUserNotificationTokensDto.html","title":"class - PaginationUserNotificationTokensDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PaginationUserNotificationTokensDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/users/dto/pagination-user-notification-tokens.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                [description]\n\n            \n\n\n\n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(undefined: [UserNotificationTokenEntity[], number])\n                    \n                \n                        \n                            \n                                Defined in src/modules/users/dto/pagination-user-notification-tokens.dto.ts:10\n                            \n                        \n\n                \n                    \n                            [description]\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                  \n                                                        \n                                                                        [UserNotificationTokenEntity[], number]\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PaginationMixin } from 'src/common/dto';\n\nimport { UserNotificationTokenEntity } from '../entities';\n\n/**\n * [description]\n */\nexport class PaginationUserNotificationTokensDto extends PaginationMixin(\n  UserNotificationTokenEntity,\n) {\n  /**\n   * [description]\n   * @param result\n   * @param count\n   */\n  constructor([result, count]: [UserNotificationTokenEntity[], number]) {\n    super();\n    Object.assign(this, { result, count });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PaginationUsersDto.html":{"url":"classes/PaginationUsersDto.html","title":"class - PaginationUsersDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PaginationUsersDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/users/dto/pagination-users.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                [description]\n\n            \n\n\n\n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(undefined: [UserEntity[], number])\n                    \n                \n                        \n                            \n                                Defined in src/modules/users/dto/pagination-users.dto.ts:8\n                            \n                        \n\n                \n                    \n                            [description]\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                  \n                                                        \n                                                                        [UserEntity[], number]\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PaginationMixin } from 'src/common/dto';\n\nimport { UserEntity } from '../entities';\n\n/**\n * [description]\n */\nexport class PaginationUsersDto extends PaginationMixin(UserEntity) {\n  /**\n   * [description]\n   * @param result\n   * @param count\n   */\n  constructor([result, count]: [UserEntity[], number]) {\n    super();\n    Object.assign(this, { result, count });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ResetPasswordDto.html":{"url":"classes/ResetPasswordDto.html","title":"class - ResetPasswordDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ResetPasswordDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/auth/dto/reset-password.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                [description]\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Readonly\n                                code\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        code\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@Length(6)@ApiProperty({example: '123456', maxLength: 6})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/auth/dto/reset-password.dto.ts:15\n                        \n                    \n\n            \n                \n                    [description]\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { CreateUserDto } from '../../users/dto';\nimport { ApiProperty, PickType } from '@nestjs/swagger';\nimport { IsString, Length } from 'class-validator';\n\n/**\n * [description]\n */\nexport class ResetPasswordDto extends PickType(CreateUserDto, ['email', 'password']) {\n  /**\n   * [description]\n   */\n  @IsString()\n  @Length(6)\n  @ApiProperty({ example: '123456', maxLength: 6 })\n  public readonly code: string;\n}\n\n/**\n * [description]\n */\nexport class SendResetPasswordDto extends PickType(CreateUserDto, ['email']) {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/Response.html":{"url":"interfaces/Response.html","title":"interface - Response","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  Response\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/interceptors/transform.interceptor.ts\n        \n\n\n            \n                Description\n            \n            \n                [description]\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            data\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        data\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        data:     string[] | T\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     string[] | T\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { map } from 'rxjs/operators';\nimport { Observable } from 'rxjs';\nimport { Injectable, CallHandler, NestInterceptor, ExecutionContext } from '@nestjs/common';\n\n/**\n * [description]\n */\nexport interface Response {\n  data: string[] | T;\n}\n\n/**\n * [description]\n */\n@Injectable()\nexport class TransformInterceptor implements NestInterceptor> {\n  /**\n   * [description]\n   * @param context\n   * @param next\n   */\n  intercept(context: ExecutionContext, next: CallHandler): Observable> {\n    return next.handle().pipe(map((data) => ({ data })));\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/SelectChatMessagesDto.html":{"url":"classes/SelectChatMessagesDto.html","title":"class - SelectChatMessagesDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  SelectChatMessagesDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/chats/dto/select-chat-messages.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                [description]\n\n            \n\n            \n                Extends\n            \n            \n                        FindManyOptionsDto\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Readonly\n                                    Optional\n                                desc\n                            \n                            \n                                    Public\n                                    Readonly\n                                    Optional\n                                asc\n                            \n                            \n                                    Public\n                                    Readonly\n                                    Optional\n                                page\n                            \n                            \n                                    Public\n                                    Readonly\n                                    Optional\n                                take\n                            \n                            \n                                    Public\n                                    Readonly\n                                    Optional\n                                eager\n                            \n                            \n                                    Public\n                                    Readonly\n                                    Optional\n                                selection\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                            Optional\n                        desc\n                        \n                    \n                \n            \n                \n                    \n                        Type :     []\n\n                    \n                \n                \n                    \n                        Default value : ['createdAt']\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: undefined, example: undefined, default: undefined, description: 'If the same fields are specified for sorting in two directions, the priority is given to DESC'})\n                        \n                    \n                \n                        \n                            \n                                Inherited from         FindManyOptionsDto\n\n                            \n                        \n                    \n                        \n                                Defined in         FindManyOptionsDto:21\n\n                        \n                    \n\n            \n                \n                    [description]\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                            Optional\n                        asc\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsArray()@IsOptional()@IsString({each: true})@IsNotEmpty({each: true})@Transform( => )@ApiProperty({type: undefined, description: Order, in which entities should be ordered. For order by relation field use elation.field})\n                        \n                    \n                \n                        \n                            \n                                Inherited from         FindManyOptionsDto\n\n                            \n                        \n                    \n                        \n                                Defined in         FindManyOptionsDto:30\n\n                        \n                    \n\n            \n                \n                    Order, in which entities should be ordered\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                            Optional\n                        page\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 1\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@Min(1)@ApiProperty({type: String, example: 1, description: 'Offset (paginated) where from entities should be taken'})\n                        \n                    \n                \n                        \n                            \n                                Inherited from         FindManyOptionsDto\n\n                            \n                        \n                    \n                        \n                                Defined in         FindManyOptionsDto:69\n\n                        \n                    \n\n            \n                \n                    Offset (paginated) where from entities should be taken\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                            Optional\n                        take\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 50\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@Min(1)@Max(100)@ApiProperty({type: String, example: 5, default: 50, description: 'Limit (paginated) - max number of entities should be taken'})\n                        \n                    \n                \n                        \n                            \n                                Inherited from         FindManyOptionsDto\n\n                            \n                        \n                    \n                        \n                                Defined in         FindManyOptionsDto:83\n\n                        \n                    \n\n            \n                \n                    Limit (paginated) - max number of entities should be taken\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                            Optional\n                        eager\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsBooleanString()@ApiProperty({type: 'boolean', description: 'Indicates what relations of entity should be loaded'})\n                        \n                    \n                \n                        \n                            \n                                Inherited from         FindOneOptionsDto\n\n                            \n                        \n                    \n                        \n                                Defined in         FindOneOptionsDto:43\n\n                        \n                    \n\n            \n                \n                    Indicates what relations of entity should be loaded (simplified left join form)\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                            Optional\n                        selection\n                        \n                    \n                \n            \n                \n                    \n                        Type :     ()[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsArray()@IsOptional()@IsString({each: true})@IsNotEmpty({each: true})@Transform( => )@ApiProperty({type: undefined, example: undefined, description: 'Specifies what columns should be retrieved'})\n                        \n                    \n                \n                        \n                            \n                                Inherited from         FindOneOptionsDto\n\n                            \n                        \n                    \n                        \n                                Defined in         FindOneOptionsDto:24\n\n                        \n                    \n\n            \n                \n                    Specifies what columns should be retrieved\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\n\nimport { FindManyOptionsDto } from 'src/common/dto';\n\nimport { ChatMessageEntity } from '../entities';\n\n/**\n * [description]\n */\nexport class SelectChatMessagesDto extends FindManyOptionsDto {\n  /**\n   * [description]\n   */\n  @ApiProperty({\n    type: [String],\n    example: ['createdAt'],\n    default: ['createdAt'],\n    description:\n      'If the same fields are specified for sorting in two directions, the priority is given to DESC',\n  })\n  public readonly desc?: [keyof ChatMessageEntity] = ['createdAt'];\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/SelectChatsDto.html":{"url":"classes/SelectChatsDto.html","title":"class - SelectChatsDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  SelectChatsDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/chats/dto/select-chats.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                [description]\n\n            \n\n            \n                Extends\n            \n            \n                        FindManyOptionsDto\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Readonly\n                                    Optional\n                                activeChatId\n                            \n                            \n                                    Public\n                                    Readonly\n                                    Optional\n                                search\n                            \n                            \n                                    Public\n                                    Readonly\n                                    Optional\n                                asc\n                            \n                            \n                                    Public\n                                    Readonly\n                                    Optional\n                                desc\n                            \n                            \n                                    Public\n                                    Readonly\n                                    Optional\n                                page\n                            \n                            \n                                    Public\n                                    Readonly\n                                    Optional\n                                take\n                            \n                            \n                                    Public\n                                    Readonly\n                                    Optional\n                                eager\n                            \n                            \n                                    Public\n                                    Readonly\n                                    Optional\n                                selection\n                            \n                        \n                    \n                \n\n\n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    whereBrackets\n                                \n                            \n                        \n                    \n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                            Optional\n                        activeChatId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsUUID()@IsOptional()@ApiPropertyOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/chats/dto/select-chats.dto.ts:31\n                        \n                    \n\n            \n                \n                    Active chat will sort as first in the list\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                            Optional\n                        search\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@MinLength(3)@MaxLength(256)@ApiPropertyOptional()@Transform( => )\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/chats/dto/select-chats.dto.ts:23\n                        \n                    \n\n            \n                \n                    [description]\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                            Optional\n                        asc\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsArray()@IsOptional()@IsString({each: true})@IsNotEmpty({each: true})@Transform( => )@ApiProperty({type: undefined, description: Order, in which entities should be ordered. For order by relation field use elation.field})\n                        \n                    \n                \n                        \n                            \n                                Inherited from         FindManyOptionsDto\n\n                            \n                        \n                    \n                        \n                                Defined in         FindManyOptionsDto:30\n\n                        \n                    \n\n            \n                \n                    Order, in which entities should be ordered\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                            Optional\n                        desc\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsArray()@IsOptional()@IsString({each: true})@IsNotEmpty({each: true})@Transform( => )@ApiProperty({type: undefined, description: 'If the same fields are specified for sorting in two directions, the priority is given to DESC'})\n                        \n                    \n                \n                        \n                            \n                                Inherited from         FindManyOptionsDto\n\n                            \n                        \n                    \n                        \n                                Defined in         FindManyOptionsDto:45\n\n                        \n                    \n\n            \n                \n                    If the same fields are specified for sorting in two directions, the priority is given to DESC\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                            Optional\n                        page\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 1\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@Min(1)@ApiProperty({type: String, example: 1, description: 'Offset (paginated) where from entities should be taken'})\n                        \n                    \n                \n                        \n                            \n                                Inherited from         FindManyOptionsDto\n\n                            \n                        \n                    \n                        \n                                Defined in         FindManyOptionsDto:69\n\n                        \n                    \n\n            \n                \n                    Offset (paginated) where from entities should be taken\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                            Optional\n                        take\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 50\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@Min(1)@Max(100)@ApiProperty({type: String, example: 5, default: 50, description: 'Limit (paginated) - max number of entities should be taken'})\n                        \n                    \n                \n                        \n                            \n                                Inherited from         FindManyOptionsDto\n\n                            \n                        \n                    \n                        \n                                Defined in         FindManyOptionsDto:83\n\n                        \n                    \n\n            \n                \n                    Limit (paginated) - max number of entities should be taken\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                            Optional\n                        eager\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsBooleanString()@ApiProperty({type: 'boolean', description: 'Indicates what relations of entity should be loaded'})\n                        \n                    \n                \n                        \n                            \n                                Inherited from         FindOneOptionsDto\n\n                            \n                        \n                    \n                        \n                                Defined in         FindOneOptionsDto:43\n\n                        \n                    \n\n            \n                \n                    Indicates what relations of entity should be loaded (simplified left join form)\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                            Optional\n                        selection\n                        \n                    \n                \n            \n                \n                    \n                        Type :     ()[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsArray()@IsOptional()@IsString({each: true})@IsNotEmpty({each: true})@Transform( => )@ApiProperty({type: undefined, example: undefined, description: 'Specifies what columns should be retrieved'})\n                        \n                    \n                \n                        \n                            \n                                Inherited from         FindOneOptionsDto\n\n                            \n                        \n                    \n                        \n                                Defined in         FindOneOptionsDto:24\n\n                        \n                    \n\n            \n                \n                    Specifies what columns should be retrieved\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        whereBrackets\n                    \n                \n\n                \n                    \n                        getwhereBrackets()\n                    \n                \n                            \n                                \n                                    Defined in src/modules/chats/dto/select-chats.dto.ts:36\n                                \n                            \n                    \n                        \n                                [description]\n\n\n                                \n                                    Returns :     Brackets\n\n                                \n                        \n                    \n\n            \n        \n\n    \n\n\n    \n        import { IsOptional, IsUUID, MaxLength, MinLength } from 'class-validator';\nimport { ApiPropertyOptional } from '@nestjs/swagger';\nimport { Transform } from 'class-transformer';\nimport { Brackets } from 'typeorm';\n\nimport { FindManyOptionsDto } from 'src/common/dto';\nimport { querySearch } from 'src/common/helpers';\n\nimport { ChatEntity } from '../entities';\n\n/**\n * [description]\n */\nexport class SelectChatsDto extends FindManyOptionsDto {\n  /**\n   * [description]\n   */\n  @IsOptional()\n  @MinLength(3)\n  @MaxLength(256)\n  @ApiPropertyOptional()\n  @Transform(({ value }) => value && value.replace(/\\s/g, ''))\n  public readonly search?: string;\n\n  /**\n   * Active chat will sort as first in the list\n   */\n  @IsUUID()\n  @IsOptional()\n  @ApiPropertyOptional()\n  public readonly activeChatId?: string;\n\n  /**\n   * [description]\n   */\n  public get whereBrackets(): Brackets {\n    const { search } = this;\n    return new Brackets((qb) => {\n      if (search)\n        qb.andWhere(querySearch('ChatEntity_participant_other_user.email'), {\n          search: `%${search}%`,\n        });\n    });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/SelectFileDto.html":{"url":"classes/SelectFileDto.html","title":"class - SelectFileDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  SelectFileDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/files/dto/select.file.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                [description]\n\n            \n\n            \n                Extends\n            \n            \n                        FindOneOptionsDto\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Readonly\n                                    Optional\n                                eager\n                            \n                            \n                                    Public\n                                    Readonly\n                                    Optional\n                                selection\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                            Optional\n                        eager\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsBooleanString()@ApiProperty({type: 'boolean', description: 'Indicates what relations of entity should be loaded'})\n                        \n                    \n                \n                        \n                            \n                                Inherited from         FindOneOptionsDto\n\n                            \n                        \n                    \n                        \n                                Defined in         FindOneOptionsDto:43\n\n                        \n                    \n\n            \n                \n                    Indicates what relations of entity should be loaded (simplified left join form)\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                            Optional\n                        selection\n                        \n                    \n                \n            \n                \n                    \n                        Type :     ()[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsArray()@IsOptional()@IsString({each: true})@IsNotEmpty({each: true})@Transform( => )@ApiProperty({type: undefined, example: undefined, description: 'Specifies what columns should be retrieved'})\n                        \n                    \n                \n                        \n                            \n                                Inherited from         FindOneOptionsDto\n\n                            \n                        \n                    \n                        \n                                Defined in         FindOneOptionsDto:24\n\n                        \n                    \n\n            \n                \n                    Specifies what columns should be retrieved\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { FindOneOptionsDto } from 'src/common/dto';\n\nimport { FileEntity } from '../entities';\n\n/**\n * [description]\n */\nexport class SelectFileDto extends FindOneOptionsDto {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/SelectFilesDto.html":{"url":"classes/SelectFilesDto.html","title":"class - SelectFilesDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  SelectFilesDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/files/dto/select.files.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                [description]\n\n            \n\n            \n                Extends\n            \n            \n                        FindManyOptionsDto\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Readonly\n                                    Optional\n                                title\n                            \n                            \n                                    Public\n                                    Readonly\n                                    Optional\n                                asc\n                            \n                            \n                                    Public\n                                    Readonly\n                                    Optional\n                                desc\n                            \n                            \n                                    Public\n                                    Readonly\n                                    Optional\n                                page\n                            \n                            \n                                    Public\n                                    Readonly\n                                    Optional\n                                take\n                            \n                            \n                                    Public\n                                    Readonly\n                                    Optional\n                                eager\n                            \n                            \n                                    Public\n                                    Readonly\n                                    Optional\n                                selection\n                            \n                        \n                    \n                \n\n\n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    where\n                                \n                            \n                        \n                    \n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                            Optional\n                        title\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@MinLength(1)@MaxLength(256)@ApiProperty({example: 'example.md'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/files/dto/select.files.dto.ts:20\n                        \n                    \n\n            \n                \n                    [description]\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                            Optional\n                        asc\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsArray()@IsOptional()@IsString({each: true})@IsNotEmpty({each: true})@Transform( => )@ApiProperty({type: undefined, description: Order, in which entities should be ordered. For order by relation field use elation.field})\n                        \n                    \n                \n                        \n                            \n                                Inherited from         FindManyOptionsDto\n\n                            \n                        \n                    \n                        \n                                Defined in         FindManyOptionsDto:30\n\n                        \n                    \n\n            \n                \n                    Order, in which entities should be ordered\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                            Optional\n                        desc\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsArray()@IsOptional()@IsString({each: true})@IsNotEmpty({each: true})@Transform( => )@ApiProperty({type: undefined, description: 'If the same fields are specified for sorting in two directions, the priority is given to DESC'})\n                        \n                    \n                \n                        \n                            \n                                Inherited from         FindManyOptionsDto\n\n                            \n                        \n                    \n                        \n                                Defined in         FindManyOptionsDto:45\n\n                        \n                    \n\n            \n                \n                    If the same fields are specified for sorting in two directions, the priority is given to DESC\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                            Optional\n                        page\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 1\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@Min(1)@ApiProperty({type: String, example: 1, description: 'Offset (paginated) where from entities should be taken'})\n                        \n                    \n                \n                        \n                            \n                                Inherited from         FindManyOptionsDto\n\n                            \n                        \n                    \n                        \n                                Defined in         FindManyOptionsDto:69\n\n                        \n                    \n\n            \n                \n                    Offset (paginated) where from entities should be taken\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                            Optional\n                        take\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 50\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@Min(1)@Max(100)@ApiProperty({type: String, example: 5, default: 50, description: 'Limit (paginated) - max number of entities should be taken'})\n                        \n                    \n                \n                        \n                            \n                                Inherited from         FindManyOptionsDto\n\n                            \n                        \n                    \n                        \n                                Defined in         FindManyOptionsDto:83\n\n                        \n                    \n\n            \n                \n                    Limit (paginated) - max number of entities should be taken\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                            Optional\n                        eager\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsBooleanString()@ApiProperty({type: 'boolean', description: 'Indicates what relations of entity should be loaded'})\n                        \n                    \n                \n                        \n                            \n                                Inherited from         FindOneOptionsDto\n\n                            \n                        \n                    \n                        \n                                Defined in         FindOneOptionsDto:43\n\n                        \n                    \n\n            \n                \n                    Indicates what relations of entity should be loaded (simplified left join form)\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                            Optional\n                        selection\n                        \n                    \n                \n            \n                \n                    \n                        Type :     ()[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsArray()@IsOptional()@IsString({each: true})@IsNotEmpty({each: true})@Transform( => )@ApiProperty({type: undefined, example: undefined, description: 'Specifies what columns should be retrieved'})\n                        \n                    \n                \n                        \n                            \n                                Inherited from         FindOneOptionsDto\n\n                            \n                        \n                    \n                        \n                                Defined in         FindOneOptionsDto:24\n\n                        \n                    \n\n            \n                \n                    Specifies what columns should be retrieved\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        where\n                    \n                \n\n                \n                    \n                        getwhere()\n                    \n                \n                            \n                                \n                                    Defined in src/modules/files/dto/select.files.dto.ts:25\n                                \n                            \n                    \n                        \n                                [description]\n\n\n                        \n                    \n\n            \n        \n\n    \n\n\n    \n        import { IsOptional, MaxLength, MinLength } from 'class-validator';\nimport { FindOneOptions, ILike } from 'typeorm';\nimport { ApiProperty } from '@nestjs/swagger';\n\nimport { FindManyOptionsDto } from 'src/common/dto';\n\nimport { FileEntity } from '../entities';\n\n/**\n * [description]\n */\nexport class SelectFilesDto extends FindManyOptionsDto {\n  /**\n   * [description]\n   */\n  @IsOptional()\n  @MinLength(1)\n  @MaxLength(256)\n  @ApiProperty({ example: 'example.md' })\n  public readonly title?: string;\n\n  /**\n   * [description]\n   */\n  public get where(): FindOneOptions['where'] {\n    const { title } = this;\n    return Object.assign(\n      {},\n      title && {\n        title: ILike(`%${title}%`),\n      },\n    );\n  }\n\n  /**\n   * [description]\n   */\n  /* public get whereBrackets(): Brackets {\n    const { title } = this;\n    return new Brackets((qb) => {\n      if (title) qb.andWhere({ title: ILike(`%${title}%`) });\n    });\n  } */\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/SelectNotificationsDto.html":{"url":"classes/SelectNotificationsDto.html","title":"class - SelectNotificationsDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  SelectNotificationsDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/notifications/dto/select-notifications.dto.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        FindManyOptionsDto\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Readonly\n                                    Optional\n                                status\n                            \n                            \n                                    Public\n                                    Readonly\n                                    Optional\n                                asc\n                            \n                            \n                                    Public\n                                    Readonly\n                                    Optional\n                                desc\n                            \n                            \n                                    Public\n                                    Readonly\n                                    Optional\n                                page\n                            \n                            \n                                    Public\n                                    Readonly\n                                    Optional\n                                take\n                            \n                            \n                                    Public\n                                    Readonly\n                                    Optional\n                                eager\n                            \n                            \n                                    Public\n                                    Readonly\n                                    Optional\n                                selection\n                            \n                        \n                    \n                \n\n\n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    where\n                                \n                            \n                        \n                    \n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                            Optional\n                        status\n                        \n                    \n                \n            \n                \n                    \n                        Type :         NotificationsStatusEnum\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsEnum(NotificationsStatusEnum)@ApiProperty({enum: NotificationsStatusEnum})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/notifications/dto/select-notifications.dto.ts:14\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                            Optional\n                        asc\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsArray()@IsOptional()@IsString({each: true})@IsNotEmpty({each: true})@Transform( => )@ApiProperty({type: undefined, description: Order, in which entities should be ordered. For order by relation field use elation.field})\n                        \n                    \n                \n                        \n                            \n                                Inherited from         FindManyOptionsDto\n\n                            \n                        \n                    \n                        \n                                Defined in         FindManyOptionsDto:30\n\n                        \n                    \n\n            \n                \n                    Order, in which entities should be ordered\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                            Optional\n                        desc\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsArray()@IsOptional()@IsString({each: true})@IsNotEmpty({each: true})@Transform( => )@ApiProperty({type: undefined, description: 'If the same fields are specified for sorting in two directions, the priority is given to DESC'})\n                        \n                    \n                \n                        \n                            \n                                Inherited from         FindManyOptionsDto\n\n                            \n                        \n                    \n                        \n                                Defined in         FindManyOptionsDto:45\n\n                        \n                    \n\n            \n                \n                    If the same fields are specified for sorting in two directions, the priority is given to DESC\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                            Optional\n                        page\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 1\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@Min(1)@ApiProperty({type: String, example: 1, description: 'Offset (paginated) where from entities should be taken'})\n                        \n                    \n                \n                        \n                            \n                                Inherited from         FindManyOptionsDto\n\n                            \n                        \n                    \n                        \n                                Defined in         FindManyOptionsDto:69\n\n                        \n                    \n\n            \n                \n                    Offset (paginated) where from entities should be taken\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                            Optional\n                        take\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 50\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@Min(1)@Max(100)@ApiProperty({type: String, example: 5, default: 50, description: 'Limit (paginated) - max number of entities should be taken'})\n                        \n                    \n                \n                        \n                            \n                                Inherited from         FindManyOptionsDto\n\n                            \n                        \n                    \n                        \n                                Defined in         FindManyOptionsDto:83\n\n                        \n                    \n\n            \n                \n                    Limit (paginated) - max number of entities should be taken\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                            Optional\n                        eager\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsBooleanString()@ApiProperty({type: 'boolean', description: 'Indicates what relations of entity should be loaded'})\n                        \n                    \n                \n                        \n                            \n                                Inherited from         FindOneOptionsDto\n\n                            \n                        \n                    \n                        \n                                Defined in         FindOneOptionsDto:43\n\n                        \n                    \n\n            \n                \n                    Indicates what relations of entity should be loaded (simplified left join form)\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                            Optional\n                        selection\n                        \n                    \n                \n            \n                \n                    \n                        Type :     ()[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsArray()@IsOptional()@IsString({each: true})@IsNotEmpty({each: true})@Transform( => )@ApiProperty({type: undefined, example: undefined, description: 'Specifies what columns should be retrieved'})\n                        \n                    \n                \n                        \n                            \n                                Inherited from         FindOneOptionsDto\n\n                            \n                        \n                    \n                        \n                                Defined in         FindOneOptionsDto:24\n\n                        \n                    \n\n            \n                \n                    Specifies what columns should be retrieved\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        where\n                    \n                \n\n                \n                    \n                        getwhere()\n                    \n                \n                            \n                                \n                                    Defined in src/modules/notifications/dto/select-notifications.dto.ts:16\n                                \n                            \n\n            \n        \n\n    \n\n\n    \n        import { IsOptional, IsEnum } from 'class-validator';\nimport { ApiProperty } from '@nestjs/swagger';\nimport { Brackets } from 'typeorm';\n\nimport { FindManyOptionsDto } from 'src/common/dto';\n\nimport { NotificationsStatusEnum } from '../enums';\nimport { NotificationEntity } from '../entities';\n\nexport class SelectNotificationsDto extends FindManyOptionsDto {\n  @IsOptional()\n  @IsEnum(NotificationsStatusEnum)\n  @ApiProperty({ enum: NotificationsStatusEnum })\n  public readonly status?: NotificationsStatusEnum;\n\n  public get where(): Brackets {\n    const { status } = this;\n\n    return new Brackets((qb) => {\n      qb.where(Object.assign({}, status && { status }));\n    });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/SelectProfileDto.html":{"url":"classes/SelectProfileDto.html","title":"class - SelectProfileDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  SelectProfileDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/auth/dto/select-profile.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                [description]\n\n            \n\n            \n                Extends\n            \n            \n                        FindOneOptionsDto\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Readonly\n                                    Optional\n                                eager\n                            \n                            \n                                    Public\n                                    Readonly\n                                    Optional\n                                selection\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                            Optional\n                        eager\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsBooleanString()@ApiProperty({type: 'boolean', description: 'Indicates what relations of entity should be loaded'})\n                        \n                    \n                \n                        \n                            \n                                Inherited from         FindOneOptionsDto\n\n                            \n                        \n                    \n                        \n                                Defined in         FindOneOptionsDto:43\n\n                        \n                    \n\n            \n                \n                    Indicates what relations of entity should be loaded (simplified left join form)\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                            Optional\n                        selection\n                        \n                    \n                \n            \n                \n                    \n                        Type :     ()[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsArray()@IsOptional()@IsString({each: true})@IsNotEmpty({each: true})@Transform( => )@ApiProperty({type: undefined, example: undefined, description: 'Specifies what columns should be retrieved'})\n                        \n                    \n                \n                        \n                            \n                                Inherited from         FindOneOptionsDto\n\n                            \n                        \n                    \n                        \n                                Defined in         FindOneOptionsDto:24\n\n                        \n                    \n\n            \n                \n                    Specifies what columns should be retrieved\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { FindOneOptionsDto } from 'src/common/dto';\nimport { UserEntity } from 'src/modules/users/entities';\n\n/**\n * [description]\n */\nexport class SelectProfileDto extends FindOneOptionsDto {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/SelectUserDto.html":{"url":"classes/SelectUserDto.html","title":"class - SelectUserDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  SelectUserDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/users/dto/select-user.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                [description]\n\n            \n\n            \n                Extends\n            \n            \n                        FindOneOptionsDto\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Readonly\n                                    Optional\n                                eager\n                            \n                            \n                                    Public\n                                    Readonly\n                                    Optional\n                                selection\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                            Optional\n                        eager\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsBooleanString()@ApiProperty({type: 'boolean', description: 'Indicates what relations of entity should be loaded'})\n                        \n                    \n                \n                        \n                            \n                                Inherited from         FindOneOptionsDto\n\n                            \n                        \n                    \n                        \n                                Defined in         FindOneOptionsDto:43\n\n                        \n                    \n\n            \n                \n                    Indicates what relations of entity should be loaded (simplified left join form)\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                            Optional\n                        selection\n                        \n                    \n                \n            \n                \n                    \n                        Type :     ()[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsArray()@IsOptional()@IsString({each: true})@IsNotEmpty({each: true})@Transform( => )@ApiProperty({type: undefined, example: undefined, description: 'Specifies what columns should be retrieved'})\n                        \n                    \n                \n                        \n                            \n                                Inherited from         FindOneOptionsDto\n\n                            \n                        \n                    \n                        \n                                Defined in         FindOneOptionsDto:24\n\n                        \n                    \n\n            \n                \n                    Specifies what columns should be retrieved\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { FindOneOptionsDto } from 'src/common/dto';\nimport { UserEntity } from '../entities';\n\n/**\n * [description]\n */\nexport class SelectUserDto extends FindOneOptionsDto {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/SelectUserNotificationTokenDto.html":{"url":"classes/SelectUserNotificationTokenDto.html","title":"class - SelectUserNotificationTokenDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  SelectUserNotificationTokenDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/users/dto/select-user-notification-token.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                [description]\n\n            \n\n            \n                Extends\n            \n            \n                        FindOneOptionsDto\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Readonly\n                                    Optional\n                                eager\n                            \n                            \n                                    Public\n                                    Readonly\n                                    Optional\n                                selection\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                            Optional\n                        eager\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsBooleanString()@ApiProperty({type: 'boolean', description: 'Indicates what relations of entity should be loaded'})\n                        \n                    \n                \n                        \n                            \n                                Inherited from         FindOneOptionsDto\n\n                            \n                        \n                    \n                        \n                                Defined in         FindOneOptionsDto:43\n\n                        \n                    \n\n            \n                \n                    Indicates what relations of entity should be loaded (simplified left join form)\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                            Optional\n                        selection\n                        \n                    \n                \n            \n                \n                    \n                        Type :     ()[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsArray()@IsOptional()@IsString({each: true})@IsNotEmpty({each: true})@Transform( => )@ApiProperty({type: undefined, example: undefined, description: 'Specifies what columns should be retrieved'})\n                        \n                    \n                \n                        \n                            \n                                Inherited from         FindOneOptionsDto\n\n                            \n                        \n                    \n                        \n                                Defined in         FindOneOptionsDto:24\n\n                        \n                    \n\n            \n                \n                    Specifies what columns should be retrieved\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { FindOneOptionsDto } from 'src/common/dto';\nimport { UserNotificationTokenEntity } from '../entities';\n\n/**\n * [description]\n */\nexport class SelectUserNotificationTokenDto extends FindOneOptionsDto {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/SelectUserNotificationTokensDto.html":{"url":"classes/SelectUserNotificationTokensDto.html","title":"class - SelectUserNotificationTokensDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  SelectUserNotificationTokensDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/users/dto/select-user-notification-tokens.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                [description]\n\n            \n\n            \n                Extends\n            \n            \n                        FindManyOptionsDto\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Readonly\n                                    Optional\n                                asc\n                            \n                            \n                                    Public\n                                    Readonly\n                                    Optional\n                                desc\n                            \n                            \n                                    Public\n                                    Readonly\n                                    Optional\n                                page\n                            \n                            \n                                    Public\n                                    Readonly\n                                    Optional\n                                take\n                            \n                            \n                                    Public\n                                    Readonly\n                                    Optional\n                                eager\n                            \n                            \n                                    Public\n                                    Readonly\n                                    Optional\n                                selection\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                            Optional\n                        asc\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsArray()@IsOptional()@IsString({each: true})@IsNotEmpty({each: true})@Transform( => )@ApiProperty({type: undefined, description: Order, in which entities should be ordered. For order by relation field use elation.field})\n                        \n                    \n                \n                        \n                            \n                                Inherited from         FindManyOptionsDto\n\n                            \n                        \n                    \n                        \n                                Defined in         FindManyOptionsDto:30\n\n                        \n                    \n\n            \n                \n                    Order, in which entities should be ordered\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                            Optional\n                        desc\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsArray()@IsOptional()@IsString({each: true})@IsNotEmpty({each: true})@Transform( => )@ApiProperty({type: undefined, description: 'If the same fields are specified for sorting in two directions, the priority is given to DESC'})\n                        \n                    \n                \n                        \n                            \n                                Inherited from         FindManyOptionsDto\n\n                            \n                        \n                    \n                        \n                                Defined in         FindManyOptionsDto:45\n\n                        \n                    \n\n            \n                \n                    If the same fields are specified for sorting in two directions, the priority is given to DESC\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                            Optional\n                        page\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 1\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@Min(1)@ApiProperty({type: String, example: 1, description: 'Offset (paginated) where from entities should be taken'})\n                        \n                    \n                \n                        \n                            \n                                Inherited from         FindManyOptionsDto\n\n                            \n                        \n                    \n                        \n                                Defined in         FindManyOptionsDto:69\n\n                        \n                    \n\n            \n                \n                    Offset (paginated) where from entities should be taken\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                            Optional\n                        take\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 50\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@Min(1)@Max(100)@ApiProperty({type: String, example: 5, default: 50, description: 'Limit (paginated) - max number of entities should be taken'})\n                        \n                    \n                \n                        \n                            \n                                Inherited from         FindManyOptionsDto\n\n                            \n                        \n                    \n                        \n                                Defined in         FindManyOptionsDto:83\n\n                        \n                    \n\n            \n                \n                    Limit (paginated) - max number of entities should be taken\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                            Optional\n                        eager\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsBooleanString()@ApiProperty({type: 'boolean', description: 'Indicates what relations of entity should be loaded'})\n                        \n                    \n                \n                        \n                            \n                                Inherited from         FindOneOptionsDto\n\n                            \n                        \n                    \n                        \n                                Defined in         FindOneOptionsDto:43\n\n                        \n                    \n\n            \n                \n                    Indicates what relations of entity should be loaded (simplified left join form)\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                            Optional\n                        selection\n                        \n                    \n                \n            \n                \n                    \n                        Type :     ()[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsArray()@IsOptional()@IsString({each: true})@IsNotEmpty({each: true})@Transform( => )@ApiProperty({type: undefined, example: undefined, description: 'Specifies what columns should be retrieved'})\n                        \n                    \n                \n                        \n                            \n                                Inherited from         FindOneOptionsDto\n\n                            \n                        \n                    \n                        \n                                Defined in         FindOneOptionsDto:24\n\n                        \n                    \n\n            \n                \n                    Specifies what columns should be retrieved\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { FindManyOptionsDto } from 'src/common/dto';\n\nimport { UserNotificationTokenEntity } from '../entities';\n\n/**\n * [description]\n */\nexport class SelectUserNotificationTokensDto extends FindManyOptionsDto {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/SelectUsersDto.html":{"url":"classes/SelectUsersDto.html","title":"class - SelectUsersDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  SelectUsersDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/users/dto/select-users.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                [description]\n\n            \n\n            \n                Extends\n            \n            \n                        FindManyOptionsDto\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Readonly\n                                    Optional\n                                asc\n                            \n                            \n                                    Public\n                                    Readonly\n                                    Optional\n                                desc\n                            \n                            \n                                    Public\n                                    Readonly\n                                    Optional\n                                page\n                            \n                            \n                                    Public\n                                    Readonly\n                                    Optional\n                                take\n                            \n                            \n                                    Public\n                                    Readonly\n                                    Optional\n                                eager\n                            \n                            \n                                    Public\n                                    Readonly\n                                    Optional\n                                selection\n                            \n                        \n                    \n                \n\n\n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    where\n                                \n                            \n                        \n                    \n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                            Optional\n                        asc\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsArray()@IsOptional()@IsString({each: true})@IsNotEmpty({each: true})@Transform( => )@ApiProperty({type: undefined, description: Order, in which entities should be ordered. For order by relation field use elation.field})\n                        \n                    \n                \n                        \n                            \n                                Inherited from         FindManyOptionsDto\n\n                            \n                        \n                    \n                        \n                                Defined in         FindManyOptionsDto:30\n\n                        \n                    \n\n            \n                \n                    Order, in which entities should be ordered\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                            Optional\n                        desc\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsArray()@IsOptional()@IsString({each: true})@IsNotEmpty({each: true})@Transform( => )@ApiProperty({type: undefined, description: 'If the same fields are specified for sorting in two directions, the priority is given to DESC'})\n                        \n                    \n                \n                        \n                            \n                                Inherited from         FindManyOptionsDto\n\n                            \n                        \n                    \n                        \n                                Defined in         FindManyOptionsDto:45\n\n                        \n                    \n\n            \n                \n                    If the same fields are specified for sorting in two directions, the priority is given to DESC\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                            Optional\n                        page\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 1\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@Min(1)@ApiProperty({type: String, example: 1, description: 'Offset (paginated) where from entities should be taken'})\n                        \n                    \n                \n                        \n                            \n                                Inherited from         FindManyOptionsDto\n\n                            \n                        \n                    \n                        \n                                Defined in         FindManyOptionsDto:69\n\n                        \n                    \n\n            \n                \n                    Offset (paginated) where from entities should be taken\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                            Optional\n                        take\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 50\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@Min(1)@Max(100)@ApiProperty({type: String, example: 5, default: 50, description: 'Limit (paginated) - max number of entities should be taken'})\n                        \n                    \n                \n                        \n                            \n                                Inherited from         FindManyOptionsDto\n\n                            \n                        \n                    \n                        \n                                Defined in         FindManyOptionsDto:83\n\n                        \n                    \n\n            \n                \n                    Limit (paginated) - max number of entities should be taken\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                            Optional\n                        eager\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsBooleanString()@ApiProperty({type: 'boolean', description: 'Indicates what relations of entity should be loaded'})\n                        \n                    \n                \n                        \n                            \n                                Inherited from         FindOneOptionsDto\n\n                            \n                        \n                    \n                        \n                                Defined in         FindOneOptionsDto:43\n\n                        \n                    \n\n            \n                \n                    Indicates what relations of entity should be loaded (simplified left join form)\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                            Optional\n                        selection\n                        \n                    \n                \n            \n                \n                    \n                        Type :     ()[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsArray()@IsOptional()@IsString({each: true})@IsNotEmpty({each: true})@Transform( => )@ApiProperty({type: undefined, example: undefined, description: 'Specifies what columns should be retrieved'})\n                        \n                    \n                \n                        \n                            \n                                Inherited from         FindOneOptionsDto\n\n                            \n                        \n                    \n                        \n                                Defined in         FindOneOptionsDto:24\n\n                        \n                    \n\n            \n                \n                    Specifies what columns should be retrieved\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        where\n                    \n                \n\n                \n                    \n                        getwhere()\n                    \n                \n                            \n                                \n                                    Defined in src/modules/users/dto/select-users.dto.ts:14\n                                \n                            \n                    \n                        \n                                [description]\n\n\n                        \n                    \n\n            \n        \n\n    \n\n\n    \n        import { FindManyOptionsDto } from 'src/common/dto';\nimport { FindOneOptions } from 'typeorm';\n\nimport { UserEntity } from '../entities';\nimport { UserStatusEnum } from '../enums';\n\n/**\n * [description]\n */\nexport class SelectUsersDto extends FindManyOptionsDto {\n  /**\n   * [description]\n   */\n  public get where(): FindOneOptions['where'] {\n    return {\n      status: UserStatusEnum.ACTIVATED,\n    };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/SendMailModule.html":{"url":"modules/SendMailModule.html","title":"module - SendMailModule","body":"\n                   \n\n\n\n\n    Modules\n    SendMailModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_SendMailModule\n\n\n\ncluster_SendMailModule_exports\n\n\n\ncluster_SendMailModule_providers\n\n\n\n\nSendMailService \n\nSendMailService \n\n\n\nSendMailModule\n\nSendMailModule\n\nSendMailService  -->\n\nSendMailModule->SendMailService \n\n\n\n\n\nSendMailService\n\nSendMailService\n\nSendMailModule -->\n\nSendMailService->SendMailModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/sendmail/sendmail.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            SendMailService\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            SendMailService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { HandlebarsAdapter } from '@nestjs-modules/mailer/dist/adapters/handlebars.adapter';\nimport { MailerModule } from '@nestjs-modules/mailer';\nimport { Module } from '@nestjs/common';\n\nimport { ConfigService } from 'src/config';\n\nimport { SendMailService } from './sendmail.service';\n\n@Module({\n  imports: [\n    MailerModule.forRootAsync({\n      useFactory: (config: ConfigService) => ({\n        transport: {\n          host: config.get('SMTP_HOST'),\n          port: config.get('SMTP_PORT'),\n          auth: {\n            user: config.get('SMTP_USER'),\n            pass: config.get('SMTP_PASS'),\n          },\n        },\n        defaults: {\n          from: config.get('SMTP_FROM'),\n        },\n        template: {\n          dir: __dirname + '/templates',\n          adapter: new HandlebarsAdapter(),\n          options: {\n            strict: true,\n          },\n        },\n      }),\n      inject: [ConfigService],\n    }),\n  ],\n  providers: [SendMailService],\n  exports: [SendMailService],\n})\nexport class SendMailModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/SendMailService.html":{"url":"injectables/SendMailService.html","title":"injectable - SendMailService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  SendMailService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/sendmail/sendmail.service.ts\n        \n\n\n            \n                Description\n            \n            \n                [description]\n\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                logger\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                sendTemplatedEmail\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(mailerService: MailerService)\n                    \n                \n                        \n                            \n                                Defined in src/sendmail/sendmail.service.ts:14\n                            \n                        \n\n                \n                    \n                            [description]\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        mailerService\n                                                  \n                                                        \n                                                                    MailerService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        sendTemplatedEmail\n                        \n                    \n                \n            \n            \n                \n                    \n                    sendTemplatedEmail(data: T)\n                \n            \n\n\n            \n                \n                    Defined in src/sendmail/sendmail.service.ts:26\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        T\n                    \n                \n            \n\n            \n                \n                    [description]\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    data\n                                    \n                                            T\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        logger\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new Logger(SendMailService.name)\n                    \n                \n                    \n                        \n                                Defined in src/sendmail/sendmail.service.ts:14\n                        \n                    \n\n            \n                \n                    [description]\n\n                \n            \n\n        \n    \n\n\n    \n\n\n    \n        import { BadGatewayException, Injectable, Logger } from '@nestjs/common';\nimport { MailerService } from '@nestjs-modules/mailer';\n\nimport { ResponseMailType, TemplatedMailType } from './types';\n\n/**\n * [description]\n */\n@Injectable()\nexport class SendMailService {\n  /**\n   * [description]\n   */\n  private readonly logger = new Logger(SendMailService.name);\n\n  /**\n   * [description]\n   * @param mailerService\n   */\n  constructor(private readonly mailerService: MailerService) {}\n\n  /**\n   * [description]\n   * @param data\n   */\n  public async sendTemplatedEmail(data: T): Promise {\n    return this.mailerService.sendMail(data).catch((error) => {\n      this.logger.error(error);\n      throw new BadGatewayException();\n    });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/SendResetPasswordDto.html":{"url":"classes/SendResetPasswordDto.html","title":"class - SendResetPasswordDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  SendResetPasswordDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/auth/dto/reset-password.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                [description]\n\n            \n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { CreateUserDto } from '../../users/dto';\nimport { ApiProperty, PickType } from '@nestjs/swagger';\nimport { IsString, Length } from 'class-validator';\n\n/**\n * [description]\n */\nexport class ResetPasswordDto extends PickType(CreateUserDto, ['email', 'password']) {\n  /**\n   * [description]\n   */\n  @IsString()\n  @Length(6)\n  @ApiProperty({ example: '123456', maxLength: 6 })\n  public readonly code: string;\n}\n\n/**\n * [description]\n */\nexport class SendResetPasswordDto extends PickType(CreateUserDto, ['email']) {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/SocketsExceptionFilter.html":{"url":"classes/SocketsExceptionFilter.html","title":"class - SocketsExceptionFilter","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  SocketsExceptionFilter\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/filters/sockets-exception.filter.ts\n        \n\n\n            \n                Description\n            \n            \n                [description]\n\n            \n\n\n            \n                Implements\n            \n            \n                        WsExceptionFilter\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                catch\n                            \n                            \n                                    Public\n                                handleError\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        catch\n                        \n                    \n                \n            \n            \n                \ncatch(exception: WsException | HttpException | Error, host: ArgumentsHost)\n                \n            \n\n\n            \n                \n                    Defined in src/common/filters/sockets-exception.filter.ts:15\n                \n            \n\n\n            \n                \n                    [description]\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    exception\n                                    \n                                            WsException | HttpException | Error\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    host\n                                    \n                                            ArgumentsHost\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        handleError\n                        \n                    \n                \n            \n            \n                \n                    \n                    handleError(client: Socket, exception: WsException | HttpException | Error)\n                \n            \n\n\n            \n                \n                    Defined in src/common/filters/sockets-exception.filter.ts:23\n                \n            \n\n\n            \n                \n                    [description]\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    client\n                                    \n                                            Socket\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    exception\n                                    \n                                            WsException | HttpException | Error\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { ArgumentsHost, Catch, HttpException, WsExceptionFilter } from '@nestjs/common';\nimport { WsException } from '@nestjs/websockets';\nimport { Socket } from 'socket.io';\n\nimport { ErrorTypeEnum } from '../enums';\n\n/**\n * [description]\n */\n@Catch()\nexport class SocketsExceptionFilter implements WsExceptionFilter {\n  /**\n   * [description]\n   */\n  catch(exception: WsException | HttpException | Error, host: ArgumentsHost): void {\n    const client = host.switchToWs().getClient();\n    this.handleError(client, exception);\n  }\n\n  /**\n   * [description]\n   */\n  public handleError(client: Socket, exception: WsException | HttpException | Error): void {\n    if (exception instanceof WsException) {\n      client.emit(ErrorTypeEnum.SOCKET_ERROR, { message: exception.getError() });\n    } else if (exception instanceof HttpException) {\n      const { message, error } = exception.getResponse() as Record;\n      client.emit(ErrorTypeEnum.SOCKET_ERROR, { message, error });\n    } else {\n      client.emit(ErrorTypeEnum.SOCKET_ERROR, { message: exception.message || exception });\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/SocketsGateway.html":{"url":"classes/SocketsGateway.html","title":"class - SocketsGateway","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  SocketsGateway\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/sockets/sockets.gateway.ts\n        \n\n\n            \n                Description\n            \n            \n                [description]\n\n            \n\n\n            \n                Implements\n            \n            \n                        OnGatewayConnection\n                        OnGatewayDisconnect\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                handleConnection\n                            \n                            \n                                    Public\n                                    Async\n                                handleDisconnect\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(jwtService: JwtService, usersService: UsersService, socketsService: SocketsService)\n                    \n                \n                        \n                            \n                                Defined in src/modules/sockets/sockets.gateway.ts:27\n                            \n                        \n\n                \n                    \n                            [description]\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        jwtService\n                                                  \n                                                        \n                                                                    JwtService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        usersService\n                                                  \n                                                        \n                                                                        UsersService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        socketsService\n                                                  \n                                                        \n                                                                        SocketsService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        handleConnection\n                        \n                    \n                \n            \n            \n                \n                    \n                    handleConnection(socket: Socket)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/sockets/sockets.gateway.ts:44\n                \n            \n\n\n            \n                \n                    [description]\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    socket\n                                    \n                                            Socket\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        handleDisconnect\n                        \n                    \n                \n            \n            \n                \n                    \n                    handleDisconnect(socket: Socket)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/sockets/sockets.gateway.ts:63\n                \n            \n\n\n            \n                \n                    [description]\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    socket\n                                    \n                                            Socket\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { ValidationPipe, UseFilters, UsePipes } from '@nestjs/common';\nimport { JwtService } from '@nestjs/jwt';\nimport { Socket } from 'socket.io';\nimport {\n  OnGatewayConnection,\n  OnGatewayDisconnect,\n  WebSocketGateway,\n  ConnectedSocket,\n} from '@nestjs/websockets';\n\nimport { SocketsExceptionFilter } from 'src/common/filters';\nimport { ErrorTypeEnum } from 'src/common/enums';\n\nimport { SocketsService } from './sockets.service';\nimport { UsersService } from '../users/services';\nimport { UserEntity } from '../users/entities';\n\n/**\n * [description]\n */\n@WebSocketGateway({\n  cors: { origin: '*' }, // TODO, TBD\n  transports: ['websocket'],\n})\n@UseFilters(SocketsExceptionFilter)\n@UsePipes(new ValidationPipe({ transform: true }))\nexport class SocketsGateway implements OnGatewayConnection, OnGatewayDisconnect {\n  /**\n   * [description]\n   * @param jwtService\n   * @param usersService\n   * @param socketsService\n   */\n  constructor(\n    private readonly jwtService: JwtService,\n    private readonly usersService: UsersService,\n    private readonly socketsService: SocketsService,\n  ) {}\n\n  /**\n   * [description]\n   * @param socket\n   */\n  public async handleConnection(@ConnectedSocket() socket: Socket): Promise {\n    try {\n      const { token } = socket.handshake.auth;\n      const { id } = this.jwtService.verify(token);\n\n      await this.usersService.selectOne({ id }, { select: ['id'], loadEagerRelations: false });\n\n      socket.data = { user: { id } };\n      this.socketsService.addOne(id, socket);\n    } catch (error) {\n      socket.emit(ErrorTypeEnum.SOCKET_ERROR, { message: error.message });\n      socket.disconnect();\n    }\n  }\n\n  /**\n   * [description]\n   * @param socket\n   */\n  public async handleDisconnect(@ConnectedSocket() socket: Socket): Promise {\n    const { token } = socket.handshake.auth;\n    const { id } = this.jwtService.verify(token);\n\n    this.socketsService.removeOne(id, socket.id);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/SocketsModule.html":{"url":"modules/SocketsModule.html","title":"module - SocketsModule","body":"\n                   \n\n\n\n\n    Modules\n    SocketsModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_SocketsModule\n\n\n\ncluster_SocketsModule_exports\n\n\n\ncluster_SocketsModule_imports\n\n\n\ncluster_SocketsModule_providers\n\n\n\n\nUsersModule\n\nUsersModule\n\n\n\nSocketsModule\n\nSocketsModule\n\nSocketsModule -->\n\nUsersModule->SocketsModule\n\n\n\n\n\nSocketsService \n\nSocketsService \n\nSocketsService  -->\n\nSocketsModule->SocketsService \n\n\n\n\n\nSocketsService\n\nSocketsService\n\nSocketsModule -->\n\nSocketsService->SocketsModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/modules/sockets/sockets.module.ts\n        \n\n\n\n        \n            Description\n        \n        \n            [description]\n\n        \n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            SocketsService\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            UsersModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            SocketsService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { JwtModule } from '@nestjs/jwt';\nimport { Module } from '@nestjs/common';\n\nimport { ConfigService } from 'src/config';\n\nimport { SocketsService } from './sockets.service';\nimport { SocketsGateway } from './sockets.gateway';\nimport { UsersModule } from '../users';\n\n/**\n * [description]\n */\n@Module({\n  imports: [\n    JwtModule.registerAsync({\n      useFactory: (configService: ConfigService) => {\n        const expiresIn = configService.get('JWT_EXPIRES_ACCESS_TOKEN');\n        return {\n          secret: configService.get('JWT_SECRET_ACCESS_TOKEN'),\n          signOptions: Object.assign({}, expiresIn && { expiresIn }),\n        };\n      },\n      inject: [ConfigService],\n    }),\n    UsersModule,\n  ],\n  providers: [SocketsGateway, SocketsService],\n  exports: [SocketsService],\n})\nexport class SocketsModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/SocketsService.html":{"url":"injectables/SocketsService.html","title":"injectable - SocketsService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  SocketsService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/sockets/sockets.service.ts\n        \n\n\n            \n                Description\n            \n            \n                [description]\n\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                usersSockets\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                addOne\n                            \n                            \n                                    Public\n                                removeOne\n                            \n                            \n                                    Public\n                                selectAllIds\n                            \n                            \n                                    Public\n                                selectOne\n                            \n                            \n                                    Public\n                                selectOneIds\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        addOne\n                        \n                    \n                \n            \n            \n                \n                    \n                    addOne(userId: string, socket: Socket)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/sockets/sockets.service.ts:24\n                \n            \n\n\n            \n                \n                    [description]\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    socket\n                                    \n                                            Socket\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        removeOne\n                        \n                    \n                \n            \n            \n                \n                    \n                    removeOne(userId: string, socketId: string)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/sockets/sockets.service.ts:61\n                \n            \n\n\n            \n                \n                    [description]\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    socketId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        selectAllIds\n                        \n                    \n                \n            \n            \n                \n                    \n                    selectAllIds(userIds: string[])\n                \n            \n\n\n            \n                \n                    Defined in src/modules/sockets/sockets.service.ts:33\n                \n            \n\n\n            \n                \n                    [description]\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userIds\n                                    \n                                            string[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     string[]\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        selectOne\n                        \n                    \n                \n            \n            \n                \n                    \n                    selectOne(userId: string, socketId: string)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/sockets/sockets.service.ts:51\n                \n            \n\n\n            \n                \n                    [description]\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    socketId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Socket\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        selectOneIds\n                        \n                    \n                \n            \n            \n                \n                    \n                    selectOneIds(userId: string)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/sockets/sockets.service.ts:41\n                \n            \n\n\n            \n                \n                    [description]\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     string[]\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        usersSockets\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Record>\n\n                    \n                \n                \n                    \n                        Default value : {}\n                    \n                \n                    \n                        \n                                Defined in src/modules/sockets/sockets.service.ts:17\n                        \n                    \n\n            \n                \n                    [description]\n{\n   'user-id': {\n       'socket-id': Socket\n   }\n}\n\n                \n            \n\n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { Socket } from 'socket.io';\n\n/**\n * [description]\n */\n@Injectable()\nexport class SocketsService {\n  /**\n   * [description]\n   * {\n   *    'user-id': {\n   *        'socket-id': Socket\n   *    }\n   * }\n   */\n  private usersSockets: Record> = {};\n\n  /**\n   * [description]\n   * @param userId\n   * @param socket\n   */\n  public addOne(userId: string, socket: Socket): void {\n    const store = (this.usersSockets[userId] = this.usersSockets[userId] || {});\n    store[socket.id] = socket;\n  }\n\n  /**\n   * [description]\n   * @param userId\n   */\n  public selectAllIds(userIds: string[]): string[] {\n    return userIds.reduce((acc, current) => acc.concat(this.selectOneIds(current)), []);\n  }\n\n  /**\n   * [description]\n   * @param userId\n   */\n  public selectOneIds(userId: string): string[] {\n    if (!this.usersSockets[userId]) return [];\n    return Object.keys(this.usersSockets[userId]);\n  }\n\n  /**\n   * [description]\n   * @param userId\n   * @param socketId\n   */\n  public selectOne(userId: string, socketId: string): Socket {\n    if (!this.usersSockets[userId]) return null;\n    return this.usersSockets[userId][socketId];\n  }\n\n  /**\n   * [description]\n   * @param userId\n   * @param socketId\n   */\n  public removeOne(userId: string, socketId: string): void {\n    if (!this.usersSockets[userId]) return;\n    delete this.usersSockets[userId][socketId];\n\n    if (!Object.keys(this.usersSockets[userId]).length) delete this.usersSockets[userId];\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/StorageS3Service.html":{"url":"injectables/StorageS3Service.html","title":"injectable - StorageS3Service","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  StorageS3Service\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/multipart/storage-s3.service.ts\n        \n\n\n            \n                Description\n            \n            \n                [description]\n\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                bucket\n                            \n                            \n                                    Private\n                                    Readonly\n                                s3\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                createOne\n                            \n                            \n                                    Public\n                                    Async\n                                deleteOne\n                            \n                            \n                                    Public\n                                generateName\n                            \n                            \n                                    Public\n                                    Async\n                                selectHeadOne\n                            \n                            \n                                    Public\n                                    Async\n                                uploadOne\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(configService: ConfigService)\n                    \n                \n                        \n                            \n                                Defined in src/multipart/storage-s3.service.ts:23\n                            \n                        \n\n                \n                    \n                            [description]\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                        ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        createOne\n                        \n                    \n                \n            \n            \n                \n                    \n                    createOne(multipart: Multipart)\n                \n            \n\n\n            \n                \n                    Defined in src/multipart/storage-s3.service.ts:67\n                \n            \n\n\n            \n                \n                    [description]\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    multipart\n                                    \n                                            Multipart\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        deleteOne\n                        \n                    \n                \n            \n            \n                \n                    \n                    deleteOne(Key: S3.ObjectKey)\n                \n            \n\n\n            \n                \n                    Defined in src/multipart/storage-s3.service.ts:94\n                \n            \n\n\n            \n                \n                    [description]\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    Key\n                                    \n                                            S3.ObjectKey\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        generateName\n                        \n                    \n                \n            \n            \n                \n                    \n                    generateName()\n                \n            \n\n\n            \n                \n                    Defined in src/multipart/storage-s3.service.ts:37\n                \n            \n\n\n            \n                \n                    [description]\n\n\n                    \n                        Returns :         string\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        selectHeadOne\n                        \n                    \n                \n            \n            \n                \n                    \n                    selectHeadOne(options: HeadObjectRequest)\n                \n            \n\n\n            \n                \n                    Defined in src/multipart/storage-s3.service.ts:57\n                \n            \n\n\n            \n                \n                    [description]\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    options\n                                    \n                                                HeadObjectRequest\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        uploadOne\n                        \n                    \n                \n            \n            \n                \n                    \n                    uploadOne(options: PutObjectRequest)\n                \n            \n\n\n            \n                \n                    Defined in src/multipart/storage-s3.service.ts:49\n                \n            \n\n\n            \n                \n                    [description]\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    options\n                                    \n                                                PutObjectRequest\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        bucket\n                        \n                    \n                \n            \n                \n                    \n                        Type :     S3.BucketName\n\n                    \n                \n                    \n                        \n                                Defined in src/multipart/storage-s3.service.ts:23\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        s3\n                        \n                    \n                \n            \n                \n                    \n                        Type :     S3\n\n                    \n                \n                    \n                        \n                                Defined in src/multipart/storage-s3.service.ts:22\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { Injectable, NotFoundException } from '@nestjs/common';\nimport { PromiseResult } from 'aws-sdk/lib/request';\nimport { extname as extName } from 'node:path';\nimport { Multipart } from 'fastify-multipart';\nimport { AWSError } from 'aws-sdk/lib/error';\nimport { randomBytes } from 'node:crypto';\nimport S3 from 'aws-sdk/clients/s3';\n\nimport { ErrorTypeEnum } from 'src/common/enums';\nimport { ConfigService } from 'src/config';\n\nimport { UploadedFile } from './dto';\n\ntype PutObjectRequest = Omit;\ntype HeadObjectRequest = Omit;\n\n/**\n * [description]\n */\n@Injectable()\nexport class StorageS3Service {\n  private readonly s3: S3;\n  private readonly bucket: S3.BucketName;\n\n  /**\n   * [description]\n   * @param configService\n   */\n  constructor(private readonly configService: ConfigService) {\n    this.s3 = new S3();\n    this.bucket = this.configService.get('AWS_S3_BUCKET');\n  }\n\n  /**\n   * [description]\n   */\n  public generateName(): string {\n    const filename = randomBytes(16).toString('hex');\n    const now = new Date();\n    const year = now.getFullYear();\n    const month = (now.getMonth() + 1).toString().padStart(2, '0');\n    return `${year}/${month}/${filename}`;\n  }\n\n  /**\n   * [description]\n   * @param options\n   */\n  public async uploadOne(options: PutObjectRequest): Promise {\n    return this.s3.upload({ ...options, Bucket: this.bucket }).promise();\n  }\n\n  /**\n   * [description]\n   * @param options\n   */\n  public async selectHeadOne(\n    options: HeadObjectRequest,\n  ): Promise> {\n    return this.s3.headObject({ ...options, Bucket: this.bucket }).promise();\n  }\n\n  /**\n   * [description]\n   * @param multipart\n   */\n  public async createOne(multipart: Multipart): Promise {\n    const { file, encoding, mimetype } = multipart;\n    const extname = extName(multipart.filename);\n    const filename = this.generateName();\n\n    try {\n      const Key = filename + extname;\n      await this.uploadOne({ Key, Body: file, ContentType: mimetype });\n      const { ContentLength: size } = await this.selectHeadOne({ Key });\n\n      return new UploadedFile({\n        filename,\n        mimetype,\n        encoding,\n        extname,\n        title: multipart.filename,\n        fileSize: size.toString(),\n      });\n    } catch {\n      this.deleteOne(filename);\n    }\n  }\n\n  /**\n   * [description]\n   * @param Key\n   */\n  public async deleteOne(\n    Key: S3.ObjectKey,\n  ): Promise> {\n    return this.s3\n      .deleteObject({ Key, Bucket: this.bucket })\n      .promise()\n      .catch(() => {\n        throw new NotFoundException(ErrorTypeEnum.FILE_NOT_FOUND);\n      });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/StorageService.html":{"url":"injectables/StorageService.html","title":"injectable - StorageService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  StorageService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/multipart/storage.service.ts\n        \n\n\n            \n                Description\n            \n            \n                [description]\n\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Readonly\n                                    Optional\n                                busboyConfig\n                            \n                            \n                                    Private\n                                    Readonly\n                                destination\n                            \n                            \n                                    Private\n                                    Readonly\n                                options\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                createOne\n                            \n                            \n                                    Public\n                                    Async\n                                deleteOne\n                            \n                            \n                                    Public\n                                generateName\n                            \n                            \n                                    Public\n                                    Async\n                                onModuleInit\n                            \n                            \n                                    Public\n                                    Async\n                                selectOne\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(configService: ConfigService, busboyConfig?: BusboyConfig)\n                    \n                \n                        \n                            \n                                Defined in src/multipart/storage.service.ts:31\n                            \n                        \n\n                \n                    \n                            [description]\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                        ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                [description]\n\n                                                        \n                                                \n                                                \n                                                        busboyConfig\n                                                  \n                                                        \n                                                                    BusboyConfig\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                        \n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        createOne\n                        \n                    \n                \n            \n            \n                \n                    \n                    createOne(multipart: Multipart)\n                \n            \n\n\n            \n                \n                    Defined in src/multipart/storage.service.ts:69\n                \n            \n\n\n            \n                \n                    [description]\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    multipart\n                                    \n                                            Multipart\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        deleteOne\n                        \n                    \n                \n            \n            \n                \n                    \n                    deleteOne(filename: string)\n                \n            \n\n\n            \n                \n                    Defined in src/multipart/storage.service.ts:112\n                \n            \n\n\n            \n                \n                    [description]\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    filename\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        [description]\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        generateName\n                        \n                    \n                \n            \n            \n                \n                    \n                    generateName()\n                \n            \n\n\n            \n                \n                    Defined in src/multipart/storage.service.ts:56\n                \n            \n\n\n            \n                \n                    [description]\n\n\n                    \n                        Returns :     literal type\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        onModuleInit\n                        \n                    \n                \n            \n            \n                \n                    \n                    onModuleInit()\n                \n            \n\n\n            \n                \n                    Defined in src/multipart/storage.service.ts:49\n                \n            \n\n\n            \n                \n                    [description]\n\n\n                    \n                        Returns :     Promise\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        selectOne\n                        \n                    \n                \n            \n            \n                \n                    \n                    selectOne(file: Partial, options: any)\n                \n            \n\n\n            \n                \n                    Defined in src/multipart/storage.service.ts:97\n                \n            \n\n\n            \n                \n                    [description]\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                    Description\n                                \n                            \n                            \n                                \n                                    file\n                                    \n                                            Partial\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                    \n                                        [description]\n\n                                    \n                                \n                                \n                                    options\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        {}\n                                    \n\n                                    \n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                            Optional\n                        busboyConfig\n                        \n                    \n                \n            \n                \n                    \n                        Type :     BusboyConfig\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Inject(MULTIPART_MODULE_OPTIONS)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/multipart/storage.service.ts:41\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        destination\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/multipart/storage.service.ts:31\n                        \n                    \n\n            \n                \n                    [description]\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        options\n                        \n                    \n                \n            \n                \n                    \n                        Type :         object\n\n                    \n                \n                \n                    \n                        Default value : {\n    mode: parseInt('0700', 8),\n  }\n                    \n                \n                    \n                        \n                                Defined in src/multipart/storage.service.ts:24\n                        \n                    \n\n            \n                \n                    [description]\n\n                \n            \n\n        \n    \n\n\n    \n\n\n    \n        import { Inject, Injectable, NotFoundException, OnModuleInit } from '@nestjs/common';\nimport { ReadStream, createWriteStream, createReadStream } from 'fs';\nimport { stat, mkdir, unlink } from 'fs/promises';\nimport { Multipart } from 'fastify-multipart';\nimport { pipeline } from 'stream/promises';\nimport { BusboyConfig } from 'busboy';\nimport { randomBytes } from 'crypto';\nimport { join, extname } from 'path';\n\nimport { ErrorTypeEnum } from 'src/common/enums';\nimport { ConfigService } from 'src/config';\n\nimport { MULTIPART_MODULE_OPTIONS } from './multipart.constants';\nimport { UploadedFile } from './dto';\n\n/**\n * [description]\n */\n@Injectable()\nexport class StorageService implements OnModuleInit {\n  /**\n   * [description]\n   */\n  private readonly options = {\n    mode: parseInt('0700', 8),\n  };\n\n  /**\n   * [description]\n   */\n  private readonly destination: string;\n\n  /**\n   * [description]\n   * @param configService [description]\n   * @param busboyConfig\n   */\n  constructor(\n    private readonly configService: ConfigService,\n    @Inject(MULTIPART_MODULE_OPTIONS)\n    public readonly busboyConfig?: BusboyConfig,\n  ) {\n    this.destination = this.configService.getDest('STORE_DEST');\n  }\n\n  /**\n   * [description]\n   */\n  public async onModuleInit(): Promise {\n    if (await !stat(this.destination)) await mkdir(this.destination, this.options);\n  }\n\n  /**\n   * [description]\n   */\n  public generateName(): { prefix: string; filename: string } {\n    const filename = randomBytes(16).toString('hex');\n    const now = new Date();\n    const year = now.getFullYear();\n    const month = (now.getMonth() + 1).toString().padStart(2, '0');\n    const prefix = `${year}/${month}`;\n    return { prefix, filename: `${prefix}/${filename}` };\n  }\n\n  /**\n   * [description]\n   * @param multipart\n   */\n  public async createOne(multipart: Multipart): Promise {\n    const { file, encoding, mimetype } = multipart;\n    const { prefix, filename } = this.generateName();\n    const filePath = join(this.destination, filename);\n    const ext = extname(multipart.filename);\n\n    try {\n      await mkdir(join(this.destination, prefix), { recursive: true });\n      await pipeline(file, createWriteStream(filePath, this.options));\n      const { size } = await stat(filePath);\n      return new UploadedFile({\n        filename,\n        mimetype,\n        encoding,\n        extname: ext,\n        title: multipart.filename,\n        fileSize: size.toString(),\n      });\n    } catch {\n      this.deleteOne(filename);\n    }\n  }\n\n  /**\n   * [description]\n   * @param file    [description]\n   * @param options\n   */\n  public async selectOne(file: Partial, options: any = {}): Promise {\n    try {\n      const fileDest = join(this.destination, file.filename);\n      await stat(fileDest);\n      return createReadStream(fileDest, { emitClose: false, ...options });\n    } catch {\n      throw new NotFoundException(ErrorTypeEnum.FILE_NOT_FOUND);\n    }\n  }\n\n  /**\n   * [description]\n   * @param filename {string} [description]\n   * @return {void}\n   */\n  public async deleteOne(filename: string): Promise {\n    const fileDest = join(this.destination, filename);\n    return unlink(fileDest).catch(() => {\n      throw new NotFoundException(ErrorTypeEnum.FILE_NOT_FOUND);\n    });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/TransformInterceptor.html":{"url":"injectables/TransformInterceptor.html","title":"injectable - TransformInterceptor","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  TransformInterceptor\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/interceptors/transform.interceptor.ts\n        \n\n\n            \n                Description\n            \n            \n                [description]\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                intercept\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        intercept\n                        \n                    \n                \n            \n            \n                \nintercept(context: ExecutionContext, next: CallHandler)\n                \n            \n\n\n            \n                \n                    Defined in src/common/interceptors/transform.interceptor.ts:22\n                \n            \n\n\n            \n                \n                    [description]\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    context\n                                    \n                                            ExecutionContext\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    next\n                                    \n                                            CallHandler\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Observable>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { map } from 'rxjs/operators';\nimport { Observable } from 'rxjs';\nimport { Injectable, CallHandler, NestInterceptor, ExecutionContext } from '@nestjs/common';\n\n/**\n * [description]\n */\nexport interface Response {\n  data: string[] | T;\n}\n\n/**\n * [description]\n */\n@Injectable()\nexport class TransformInterceptor implements NestInterceptor> {\n  /**\n   * [description]\n   * @param context\n   * @param next\n   */\n  intercept(context: ExecutionContext, next: CallHandler): Observable> {\n    return next.handle().pipe(map((data) => ({ data })));\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateEmailDto.html":{"url":"classes/UpdateEmailDto.html","title":"class - UpdateEmailDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateEmailDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/auth/dto/update-profile.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                [description]\n\n            \n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty, OmitType, PickType } from '@nestjs/swagger';\nimport { MaxLength, MinLength } from 'class-validator';\nimport { UpdateUserDto } from '../../users/dto';\n\n/**\n * [description]\n */\nexport class UpdateProfileDto extends OmitType(UpdateUserDto, ['password', 'email']) {}\n\n/**\n * [description]\n */\nexport class UpdateEmailDto extends PickType(UpdateUserDto, ['email', 'password']) {}\n\n/**\n * [description]\n */\nexport class UpdatePasswordDto extends PickType(UpdateUserDto, ['password']) {\n  /**\n   * [description]\n   */\n  @MinLength(8)\n  @MaxLength(64)\n  @ApiProperty({ minLength: 8, maxLength: 64, example: 'password' })\n  public readonly oldPassword: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateNotificationDto.html":{"url":"classes/UpdateNotificationDto.html","title":"class - UpdateNotificationDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateNotificationDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/notifications/dto/update-notification.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Readonly\n                                    Optional\n                                status\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                            Optional\n                        status\n                        \n                    \n                \n            \n                \n                    \n                        Type :         NotificationsStatusEnum\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsEnum(NotificationsStatusEnum)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/notifications/dto/update-notification.dto.ts:10\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsEnum, IsOptional } from 'class-validator';\nimport { PartialType } from '@nestjs/swagger';\n\nimport { CreateNotificationDto } from './create-notification.dto';\nimport { NotificationsStatusEnum } from '../enums';\n\nexport class UpdateNotificationDto extends PartialType(CreateNotificationDto) {\n  @IsOptional()\n  @IsEnum(NotificationsStatusEnum)\n  public readonly status?: NotificationsStatusEnum;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdatePasswordDto.html":{"url":"classes/UpdatePasswordDto.html","title":"class - UpdatePasswordDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdatePasswordDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/auth/dto/update-profile.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                [description]\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Readonly\n                                oldPassword\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        oldPassword\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @MinLength(8)@MaxLength(64)@ApiProperty({minLength: 8, maxLength: 64, example: 'password'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/auth/dto/update-profile.dto.ts:25\n                        \n                    \n\n            \n                \n                    [description]\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty, OmitType, PickType } from '@nestjs/swagger';\nimport { MaxLength, MinLength } from 'class-validator';\nimport { UpdateUserDto } from '../../users/dto';\n\n/**\n * [description]\n */\nexport class UpdateProfileDto extends OmitType(UpdateUserDto, ['password', 'email']) {}\n\n/**\n * [description]\n */\nexport class UpdateEmailDto extends PickType(UpdateUserDto, ['email', 'password']) {}\n\n/**\n * [description]\n */\nexport class UpdatePasswordDto extends PickType(UpdateUserDto, ['password']) {\n  /**\n   * [description]\n   */\n  @MinLength(8)\n  @MaxLength(64)\n  @ApiProperty({ minLength: 8, maxLength: 64, example: 'password' })\n  public readonly oldPassword: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateProfileDto.html":{"url":"classes/UpdateProfileDto.html","title":"class - UpdateProfileDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateProfileDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/auth/dto/update-profile.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                [description]\n\n            \n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty, OmitType, PickType } from '@nestjs/swagger';\nimport { MaxLength, MinLength } from 'class-validator';\nimport { UpdateUserDto } from '../../users/dto';\n\n/**\n * [description]\n */\nexport class UpdateProfileDto extends OmitType(UpdateUserDto, ['password', 'email']) {}\n\n/**\n * [description]\n */\nexport class UpdateEmailDto extends PickType(UpdateUserDto, ['email', 'password']) {}\n\n/**\n * [description]\n */\nexport class UpdatePasswordDto extends PickType(UpdateUserDto, ['password']) {\n  /**\n   * [description]\n   */\n  @MinLength(8)\n  @MaxLength(64)\n  @ApiProperty({ minLength: 8, maxLength: 64, example: 'password' })\n  public readonly oldPassword: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateUserDto.html":{"url":"classes/UpdateUserDto.html","title":"class - UpdateUserDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateUserDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/users/dto/update-user.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                [description]\n\n            \n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PartialType } from '@nestjs/swagger';\n\nimport { CreateUserDto } from './create-user.dto';\n\n/**\n * [description]\n */\nexport class UpdateUserDto extends PartialType(CreateUserDto) {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateUserNotificationTokenDto.html":{"url":"classes/UpdateUserNotificationTokenDto.html","title":"class - UpdateUserNotificationTokenDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateUserNotificationTokenDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/users/dto/update-user-notification-token.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                [description]\n\n            \n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PartialType } from '@nestjs/swagger';\n\nimport { CreateUserNotificationTokenDto } from './create-user-notification-token.dto';\n\n/**\n * [description]\n */\nexport class UpdateUserNotificationTokenDto extends PartialType(CreateUserNotificationTokenDto) {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UploadedFile.html":{"url":"classes/UploadedFile.html","title":"class - UploadedFile","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UploadedFile\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/multipart/dto/uploaded-file.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                [description]\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Readonly\n                                encoding\n                            \n                            \n                                    Public\n                                    Readonly\n                                extname\n                            \n                            \n                                    Public\n                                    Readonly\n                                filename\n                            \n                            \n                                    Public\n                                    Readonly\n                                fileSize\n                            \n                            \n                                    Public\n                                    Readonly\n                                mimetype\n                            \n                            \n                                    Public\n                                    Readonly\n                                title\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(data: Partial)\n                    \n                \n                        \n                            \n                                Defined in src/multipart/dto/uploaded-file.dto.ts:4\n                            \n                        \n\n                \n                    \n                            description]\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        data\n                                                  \n                                                        \n                                                                        Partial\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                [description]\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        encoding\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/multipart/dto/uploaded-file.dto.ts:36\n                        \n                    \n\n            \n                \n                    [description]\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        extname\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/multipart/dto/uploaded-file.dto.ts:41\n                        \n                    \n\n            \n                \n                    [description]\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        filename\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/multipart/dto/uploaded-file.dto.ts:21\n                        \n                    \n\n            \n                \n                    [description]\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        fileSize\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/multipart/dto/uploaded-file.dto.ts:26\n                        \n                    \n\n            \n                \n                    [description]\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        mimetype\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/multipart/dto/uploaded-file.dto.ts:31\n                        \n                    \n\n            \n                \n                    [description]\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        title\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/multipart/dto/uploaded-file.dto.ts:16\n                        \n                    \n\n            \n                \n                    [description]\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class UploadedFile {\n  /**\n   * description]\n   * @param data [description]\n   */\n  constructor(data: Partial) {\n    Object.assign(this, data);\n  }\n\n  /**\n   * [description]\n   */\n  public readonly title: string;\n\n  /**\n   * [description]\n   */\n  public readonly filename: string;\n\n  /**\n   * [description]\n   */\n  public readonly fileSize: string;\n\n  /**\n   * [description]\n   */\n  public readonly mimetype: string;\n\n  /**\n   * [description]\n   */\n  public readonly encoding: string;\n\n  /**\n   * [description]\n   */\n  public readonly extname: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/UserEntity.html":{"url":"entities/UserEntity.html","title":"entity - UserEntity","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  UserEntity\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/users/entities/user.entity.ts\n        \n\n\n            \n                Description\n            \n            \n                [description]\n\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Readonly\n                                cover\n                            \n                            \n                                    Public\n                                    Readonly\n                                createdAt\n                            \n                            \n                                    Public\n                                    Readonly\n                                deletedAt\n                            \n                            \n                                    Public\n                                    Readonly\n                                email\n                            \n                            \n                                    Public\n                                    Readonly\n                                id\n                            \n                            \n                                    Public\n                                    Readonly\n                                notificationTokens\n                            \n                            \n                                    Public\n                                password\n                            \n                            \n                                    Public\n                                    Readonly\n                                refreshTokens\n                            \n                            \n                                    Public\n                                    Readonly\n                                role\n                            \n                            \n                                    Public\n                                    Readonly\n                                status\n                            \n                            \n                                    Public\n                                    Readonly\n                                updatedAt\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        cover\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Partial\n\n                    \n                \n                \n                    \n                        Default value : new FileEntity()\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @JoinColumn()@ApiProperty({type: () => FileEntityPreview})@Transform( => )@ManyToOne(undefined, {onDelete: 'SET NULL', nullable: true, eager: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/users/entities/user.entity.ts:85\n                        \n                    \n\n            \n                \n                    [description]\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        createdAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({readOnly: true})@CreateDateColumn({type: 'timestamptz', default: () => CURRENT_TIMESTAMP})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/users/entities/user.entity.ts:109\n                        \n                    \n\n            \n                \n                    [description]\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        deletedAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({readOnly: true})@DeleteDateColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/users/entities/user.entity.ts:126\n                        \n                    \n\n            \n                \n                    [description]\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({maxLength: 320, uniqueItems: true})@Column({type: 'varchar', length: 320, unique: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/users/entities/user.entity.ts:54\n                        \n                    \n\n            \n                \n                    [description]\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({readOnly: true})@PrimaryGeneratedColumn('uuid')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/users/entities/user.entity.ts:33\n                        \n                    \n\n            \n                \n                    [description]\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        notificationTokens\n                        \n                    \n                \n            \n                \n                    \n                        Type :         UserNotificationTokenEntity[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiHideProperty()@OneToMany(undefined,  => owner)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/users/entities/user.entity.ts:99\n                        \n                    \n\n            \n                \n                    [description]\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiHideProperty()@Column({type: 'varchar', length: 149, select: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/users/entities/user.entity.ts:61\n                        \n                    \n\n            \n                \n                    [description]\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        refreshTokens\n                        \n                    \n                \n            \n                \n                    \n                        Type :         UserRefreshTokenEntity[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiHideProperty()@OneToMany(undefined,  => owner)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/users/entities/user.entity.ts:92\n                        \n                    \n\n            \n                \n                    [description]\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        role\n                        \n                    \n                \n            \n                \n                    \n                        Type :         UserRoleEnum\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({enum: UserRoleEnum, default: undefined})@Column({type: 'enum', enum: UserRoleEnum, default: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/users/entities/user.entity.ts:47\n                        \n                    \n\n            \n                \n                    [description]\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        status\n                        \n                    \n                \n            \n                \n                    \n                        Type :         UserStatusEnum\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({enum: UserStatusEnum, default: undefined})@Column({type: 'enum', enum: UserStatusEnum, default: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/users/entities/user.entity.ts:40\n                        \n                    \n\n            \n                \n                    [description]\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        updatedAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({readOnly: true})@UpdateDateColumn({type: 'timestamptz', default: () => CURRENT_TIMESTAMP})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/users/entities/user.entity.ts:119\n                        \n                    \n\n            \n                \n                    [description]\n\n                \n            \n\n        \n    \n\n    \n\n\n    \n        import { FileEntity, FileEntityPreview } from 'src/modules/files/entities';\nimport { ApiHideProperty, ApiProperty } from '@nestjs/swagger';\nimport { Transform } from 'class-transformer';\nimport { hash } from 'src/common/helpers';\nimport {\n  Column,\n  Entity,\n  OneToMany,\n  ManyToOne,\n  JoinColumn,\n  BeforeInsert,\n  BeforeUpdate,\n  CreateDateColumn,\n  UpdateDateColumn,\n  DeleteDateColumn,\n  PrimaryGeneratedColumn,\n} from 'typeorm';\n\nimport { UserNotificationTokenEntity } from './user-notification-token.entity';\nimport { UserRefreshTokenEntity } from './user-refresh-token.entity';\nimport { UserRoleEnum, UserStatusEnum } from '../enums';\n\n/**\n * [description]\n */\n@Entity('users')\nexport class UserEntity {\n  /**\n   * [description]\n   */\n  @ApiProperty({ readOnly: true })\n  @PrimaryGeneratedColumn('uuid')\n  public readonly id: string;\n\n  /**\n   * [description]\n   */\n  @ApiProperty({ enum: UserStatusEnum, default: UserStatusEnum.ACTIVATED })\n  @Column({ type: 'enum', enum: UserStatusEnum, default: UserStatusEnum.ACTIVATED })\n  public readonly status: UserStatusEnum;\n\n  /**\n   * [description]\n   */\n  @ApiProperty({ enum: UserRoleEnum, default: UserRoleEnum.USER })\n  @Column({ type: 'enum', enum: UserRoleEnum, default: UserRoleEnum.USER })\n  public readonly role: UserRoleEnum;\n\n  /**\n   * [description]\n   */\n  @ApiProperty({ maxLength: 320, uniqueItems: true })\n  @Column({ type: 'varchar', length: 320, unique: true })\n  public readonly email: string;\n\n  /**\n   * [description]\n   */\n  @ApiHideProperty()\n  @Column({ type: 'varchar', length: 149, select: false })\n  public password: string;\n\n  /**\n   * [description]\n   */\n  @BeforeInsert()\n  @BeforeUpdate()\n  public async hashPassword(): Promise {\n    if (!this.password) return;\n    this.password = await hash(this.password);\n  }\n\n  /**\n   * [description]\n   */\n  @JoinColumn()\n  @ApiProperty({ type: () => FileEntityPreview })\n  @Transform(({ value }) => value && new FileEntityPreview(value))\n  @ManyToOne(() => FileEntity, {\n    onDelete: 'SET NULL',\n    nullable: true,\n    // cascade: true, // Turned off cause have 'Cyclic dependency' on FileEntity {owner}; Choose one of these\n    eager: true,\n  })\n  public readonly cover: Partial = new FileEntity();\n\n  /**\n   * [description]\n   */\n  @ApiHideProperty()\n  @OneToMany(() => UserRefreshTokenEntity, ({ owner }) => owner)\n  public readonly refreshTokens: UserRefreshTokenEntity[];\n\n  /**\n   * [description]\n   */\n  @ApiHideProperty()\n  @OneToMany(() => UserNotificationTokenEntity, ({ owner }) => owner)\n  public readonly notificationTokens: UserNotificationTokenEntity[];\n\n  /**\n   * [description]\n   */\n  @ApiProperty({ readOnly: true })\n  @CreateDateColumn({\n    type: 'timestamptz',\n    default: () => 'CURRENT_TIMESTAMP',\n  })\n  public readonly createdAt: Date;\n\n  /**\n   * [description]\n   */\n  @ApiProperty({ readOnly: true })\n  @UpdateDateColumn({\n    type: 'timestamptz',\n    default: () => 'CURRENT_TIMESTAMP',\n  })\n  public readonly updatedAt: Date;\n\n  /**\n   * [description]\n   */\n  @ApiProperty({ readOnly: true })\n  @DeleteDateColumn()\n  public readonly deletedAt: Date;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/UserNotificationTokenEntity.html":{"url":"entities/UserNotificationTokenEntity.html","title":"entity - UserNotificationTokenEntity","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  UserNotificationTokenEntity\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/users/entities/user-notification-token.entity.ts\n        \n\n\n            \n                Description\n            \n            \n                [description]\n\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Readonly\n                                createdAt\n                            \n                            \n                                    Public\n                                    Readonly\n                                id\n                            \n                            \n                                    Public\n                                    Readonly\n                                owner\n                            \n                            \n                                    Public\n                                    Readonly\n                                token\n                            \n                            \n                                    Public\n                                    Readonly\n                                updatedAt\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        createdAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({readOnly: true})@CreateDateColumn({type: 'timestamptz', default: () => CURRENT_TIMESTAMP})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/users/entities/user-notification-token.entity.ts:52\n                        \n                    \n\n            \n                \n                    [description]\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({readOnly: true})@PrimaryGeneratedColumn('uuid')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/users/entities/user-notification-token.entity.ts:24\n                        \n                    \n\n            \n                \n                    [description]\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        owner\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Partial\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @JoinColumn()@ApiHideProperty()@ManyToOne(undefined,  => notificationTokens, {onDelete: 'CASCADE', nullable: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/users/entities/user-notification-token.entity.ts:42\n                        \n                    \n\n            \n                \n                    [description]\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        token\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({maxLength: 256})@Column({type: 'varchar', length: 256, nullable: false, unique: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/users/entities/user-notification-token.entity.ts:31\n                        \n                    \n\n            \n                \n                    [description]\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        updatedAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({readOnly: true})@UpdateDateColumn({type: 'timestamptz', default: () => CURRENT_TIMESTAMP})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/users/entities/user-notification-token.entity.ts:62\n                        \n                    \n\n            \n                \n                    [description]\n\n                \n            \n\n        \n    \n\n    \n\n\n    \n        import {\n  Column,\n  Entity,\n  ManyToOne,\n  JoinColumn,\n  CreateDateColumn,\n  UpdateDateColumn,\n  PrimaryGeneratedColumn,\n} from 'typeorm';\nimport { ApiHideProperty, ApiProperty } from '@nestjs/swagger';\n\nimport { UserEntity } from 'src/modules/users/entities';\n\n/**\n * [description]\n */\n@Entity('user_notification_tokens')\nexport class UserNotificationTokenEntity {\n  /**\n   * [description]\n   */\n  @ApiProperty({ readOnly: true })\n  @PrimaryGeneratedColumn('uuid')\n  public readonly id: string;\n\n  /**\n   * [description]\n   */\n  @ApiProperty({ maxLength: 256 })\n  @Column({ type: 'varchar', length: 256, nullable: false, unique: true })\n  public readonly token: string;\n\n  /**\n   * [description]\n   */\n  @JoinColumn()\n  @ApiHideProperty()\n  @ManyToOne(() => UserEntity, ({ notificationTokens }) => notificationTokens, {\n    onDelete: 'CASCADE',\n    nullable: false,\n  })\n  public readonly owner: Partial;\n\n  /**\n   * [description]\n   */\n  @ApiProperty({ readOnly: true })\n  @CreateDateColumn({\n    type: 'timestamptz',\n    default: () => 'CURRENT_TIMESTAMP',\n  })\n  public readonly createdAt: Date;\n\n  /**\n   * [description]\n   */\n  @ApiProperty({ readOnly: true })\n  @UpdateDateColumn({\n    type: 'timestamptz',\n    default: () => 'CURRENT_TIMESTAMP',\n  })\n  public readonly updatedAt: Date;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/UserNotificationTokensController.html":{"url":"controllers/UserNotificationTokensController.html","title":"controller - UserNotificationTokensController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  UserNotificationTokensController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/users/controllers/user-notification-tokens.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                users/notification-tokens\n            \n\n\n            \n                Description\n            \n            \n                [description]\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                createOne\n                            \n                            \n                                    Public\n                                    Async\n                                deleteOne\n                            \n                            \n                                    Public\n                                    Async\n                                deleteOneByToken\n                            \n                            \n                                    Public\n                                    Async\n                                selectAll\n                            \n                            \n                                    Public\n                                    Async\n                                selectOne\n                            \n                            \n                                    Public\n                                    Async\n                                updateOne\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        createOne\n                        \n                    \n                \n            \n            \n                \n                    \n                    createOne(data: CreateUserNotificationTokenDto, owner: UserEntity)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()\n                \n            \n\n            \n                \n                    Defined in src/modules/users/controllers/user-notification-tokens.controller.ts:52\n                \n            \n\n\n            \n                \n                    [description]\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    data\n                                    \n                                                CreateUserNotificationTokenDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    owner\n                                    \n                                                UserEntity\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        deleteOne\n                        \n                    \n                \n            \n            \n                \n                    \n                    deleteOne(conditions: ID, owner: UserEntity)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete(':id')\n                \n            \n\n            \n                \n                    Defined in src/modules/users/controllers/user-notification-tokens.controller.ts:121\n                \n            \n\n\n            \n                \n                    [description]\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    conditions\n                                    \n                                                ID\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    owner\n                                    \n                                                UserEntity\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        deleteOneByToken\n                        \n                    \n                \n            \n            \n                \n                    \n                    deleteOneByToken(conditions: DeleteUserNotificationTokenDto, owner: UserEntity)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete('')\n                \n            \n\n            \n                \n                    Defined in src/modules/users/controllers/user-notification-tokens.controller.ts:109\n                \n            \n\n\n            \n                \n                    [description]\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    conditions\n                                    \n                                                DeleteUserNotificationTokenDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    owner\n                                    \n                                                UserEntity\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        selectAll\n                        \n                    \n                \n            \n            \n                \n                    \n                    selectAll(options: SelectUserNotificationTokensDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()\n                \n            \n\n            \n                \n                    Defined in src/modules/users/controllers/user-notification-tokens.controller.ts:64\n                \n            \n\n\n            \n                \n                    [description]\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    options\n                                    \n                                                SelectUserNotificationTokensDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        selectOne\n                        \n                    \n                \n            \n            \n                \n                    \n                    selectOne(conditions: ID, options: SelectUserNotificationTokenDto, owner: UserEntity)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get(':id')\n                \n            \n\n            \n                \n                    Defined in src/modules/users/controllers/user-notification-tokens.controller.ts:76\n                \n            \n\n\n            \n                \n                    [description]\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    conditions\n                                    \n                                                ID\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    options\n                                    \n                                                SelectUserNotificationTokenDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    owner\n                                    \n                                                UserEntity\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        updateOne\n                        \n                    \n                \n            \n            \n                \n                    \n                    updateOne(conditions: ID, data: UpdateUserNotificationTokenDto, owner: UserEntity)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch(':id')\n                \n            \n\n            \n                \n                    Defined in src/modules/users/controllers/user-notification-tokens.controller.ts:93\n                \n            \n\n\n            \n                \n                    [description]\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    conditions\n                                    \n                                                ID\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    data\n                                    \n                                                UpdateUserNotificationTokenDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    owner\n                                    \n                                                UserEntity\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { ApiBearerAuth, ApiTags } from '@nestjs/swagger';\nimport {\n  Get,\n  Post,\n  Body,\n  Param,\n  Patch,\n  Query,\n  Delete,\n  UseGuards,\n  Controller,\n  UseInterceptors,\n  ClassSerializerInterceptor,\n} from '@nestjs/common';\n\nimport { User } from 'src/common/decorators';\nimport { ID } from 'src/common/dto';\n\nimport { JwtAuthGuard } from 'src/modules/auth/guards';\n\nimport { UserNotificationTokensService } from '../services';\nimport { UserEntity, UserNotificationTokenEntity } from '../entities';\nimport {\n  PaginationUserNotificationTokensDto,\n  SelectUserNotificationTokensDto,\n  CreateUserNotificationTokenDto,\n  SelectUserNotificationTokenDto,\n  UpdateUserNotificationTokenDto,\n  DeleteUserNotificationTokenDto,\n} from '../dto';\n\n/**\n * [description]\n */\n@ApiBearerAuth()\n@UseGuards(JwtAuthGuard)\n@ApiTags('users/notification-tokens')\n@Controller('users/notification-tokens')\n@UseInterceptors(ClassSerializerInterceptor)\nexport class UserNotificationTokensController {\n  /**\n   * [description]\n   * @param userNotificationTokensService\n   */\n  constructor(private readonly userNotificationTokensService: UserNotificationTokensService) {}\n\n  /**\n   * [description]\n   * @param data\n   */\n  @Post()\n  public async createOne(\n    @Body() data: CreateUserNotificationTokenDto,\n    @User() owner: UserEntity,\n  ): Promise {\n    return this.userNotificationTokensService.createOne({ ...data, owner: { id: owner.id } });\n  }\n\n  /**\n   * [description]\n   * @param options\n   */\n  @Get()\n  public async selectAll(\n    @Query() options: SelectUserNotificationTokensDto,\n  ): Promise {\n    return this.userNotificationTokensService.selectAll(options);\n  }\n\n  /**\n   * [description]\n   * @param conditions\n   * @param options\n   */\n  @Get(':id')\n  public async selectOne(\n    @Param() conditions: ID,\n    @Query() options: SelectUserNotificationTokenDto,\n    @User() owner: UserEntity,\n  ): Promise {\n    return this.userNotificationTokensService.selectOne(\n      { ...conditions, owner: { id: owner.id } },\n      options,\n    );\n  }\n\n  /**\n   * [description]\n   * @param conditions\n   * @param data\n   */\n  @Patch(':id')\n  public async updateOne(\n    @Param() conditions: ID,\n    @Body() data: UpdateUserNotificationTokenDto,\n    @User() owner: UserEntity,\n  ): Promise {\n    return this.userNotificationTokensService.updateOne(\n      { ...conditions, owner: { id: owner.id } },\n      data,\n    );\n  }\n\n  /**\n   * [description]\n   * @param conditions\n   */\n  @Delete('')\n  public async deleteOneByToken(\n    @Query() conditions: DeleteUserNotificationTokenDto,\n    @User() owner: UserEntity,\n  ): Promise {\n    return this.userNotificationTokensService.deleteOne({ ...conditions, owner: { id: owner.id } });\n  }\n\n  /**\n   * [description]\n   * @param conditions\n   */\n  @Delete(':id')\n  public async deleteOne(\n    @Param() conditions: ID,\n    @User() owner: UserEntity,\n  ): Promise {\n    return this.userNotificationTokensService.deleteOne({ ...conditions, owner: { id: owner.id } });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/UserNotificationTokensService.html":{"url":"injectables/UserNotificationTokensService.html","title":"injectable - UserNotificationTokensService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  UserNotificationTokensService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/users/services/user-notification-tokens.service.ts\n        \n\n\n            \n                Description\n            \n            \n                [description]\n\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Readonly\n                                userNotificationTokenEntityRepository\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                createOne\n                            \n                            \n                                    Public\n                                    Async\n                                deleteOne\n                            \n                            \n                                    Public\n                                find\n                            \n                            \n                                    Public\n                                    Async\n                                selectAll\n                            \n                            \n                                    Public\n                                    Async\n                                selectOne\n                            \n                            \n                                    Public\n                                    Async\n                                updateOne\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(userNotificationTokenEntityRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/modules/users/services/user-notification-tokens.service.ts:23\n                            \n                        \n\n                \n                    \n                            [description]\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        userNotificationTokenEntityRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        createOne\n                        \n                    \n                \n            \n            \n                \n                    \n                    createOne(entityLike: Partial, options: SaveOptions)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/users/services/user-notification-tokens.service.ts:38\n                \n            \n\n\n            \n                \n                    [description]\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    entityLike\n                                    \n                                                Partial\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    options\n                                    \n                                            SaveOptions\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        { transaction: false }\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        deleteOne\n                        \n                    \n                \n            \n            \n                \n                    \n                    deleteOne(conditions: FindOptionsWhere, options: RemoveOptions)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/users/services/user-notification-tokens.service.ts:119\n                \n            \n\n\n            \n                \n                    [description]\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    conditions\n                                    \n                                                FindOptionsWhere\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    options\n                                    \n                                            RemoveOptions\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        { transaction: false }\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        find\n                        \n                    \n                \n            \n            \n                \n                    \n                    find(optionsOrConditions?: FindManyOptions)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/users/services/user-notification-tokens.service.ts:54\n                \n            \n\n\n            \n                \n                     [description]\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    optionsOrConditions\n                                    \n                                                FindManyOptions\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         SelectQueryBuilder\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        selectAll\n                        \n                    \n                \n            \n            \n                \n                    \n                    selectAll(options: FindManyOptions)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/users/services/user-notification-tokens.service.ts:69\n                \n            \n\n\n            \n                \n                    [description]\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    options\n                                    \n                                                FindManyOptions\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        { loadEagerRelations: false }\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        selectOne\n                        \n                    \n                \n            \n            \n                \n                    \n                    selectOne(conditions: FindOptionsWhere, options: FindOneOptions)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/users/services/user-notification-tokens.service.ts:83\n                \n            \n\n\n            \n                \n                    [description]\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    conditions\n                                    \n                                                FindOptionsWhere\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    options\n                                    \n                                                FindOneOptions\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        { loadEagerRelations: false }\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        updateOne\n                        \n                    \n                \n            \n            \n                \n                    \n                    updateOne(conditions: FindOptionsWhere, entityLike: Partial, options: SaveOptions)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/users/services/user-notification-tokens.service.ts:100\n                \n            \n\n\n            \n                \n                    [description]\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    conditions\n                                    \n                                                FindOptionsWhere\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    entityLike\n                                    \n                                                Partial\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    options\n                                    \n                                            SaveOptions\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        { transaction: false }\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        userNotificationTokenEntityRepository\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Repository\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @InjectRepository(UserNotificationTokenEntity)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/users/services/user-notification-tokens.service.ts:30\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { ConflictException, Injectable, NotFoundException } from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { instanceToPlain } from 'class-transformer';\nimport {\n  Repository,\n  SaveOptions,\n  RemoveOptions,\n  FindOneOptions,\n  FindManyOptions,\n  FindOptionsWhere,\n  FindOptionsUtils,\n  SelectQueryBuilder,\n} from 'typeorm';\n\nimport { ErrorTypeEnum } from 'src/common/enums';\n\nimport { UserNotificationTokenEntity } from '../entities';\n\n/**\n * [description]\n */\n@Injectable()\nexport class UserNotificationTokensService {\n  /**\n   * [description]\n   * @param userNotificationTokenEntityRepository\n   */\n  constructor(\n    @InjectRepository(UserNotificationTokenEntity)\n    public readonly userNotificationTokenEntityRepository: Repository,\n  ) {}\n\n  /**\n   * [description]\n   * @param entityLike\n   * @param options\n   */\n  public async createOne(\n    entityLike: Partial,\n    options: SaveOptions = { transaction: false },\n  ): Promise {\n    return this.userNotificationTokenEntityRepository.manager.transaction(async () => {\n      const entity = this.userNotificationTokenEntityRepository.create(entityLike);\n      return this.userNotificationTokenEntityRepository.save(entity, options).catch(() => {\n        throw new ConflictException(ErrorTypeEnum.USER_NOTIFICATION_TOKEN_ALREADY_EXIST);\n      });\n    });\n  }\n\n  /**\n   *  [description]\n   * @param optionsOrConditions\n   */\n  public find(\n    optionsOrConditions?: FindManyOptions,\n  ): SelectQueryBuilder {\n    const metadata = this.userNotificationTokenEntityRepository.metadata;\n    return this.userNotificationTokenEntityRepository\n      .createQueryBuilder(\n        FindOptionsUtils.extractFindManyOptionsAlias(optionsOrConditions) || metadata.name,\n      )\n      .setFindOptions(optionsOrConditions);\n  }\n\n  /**\n   * [description]\n   * @param options\n   */\n  public async selectAll(\n    options: FindManyOptions = { loadEagerRelations: false },\n  ): Promise {\n    const qb = this.find(instanceToPlain(options));\n    return qb.getMany().catch(() => {\n      throw new NotFoundException(ErrorTypeEnum.USER_NOTIFICATION_TOKENS_NOT_FOUND);\n    });\n  }\n\n  /**\n   * [description]\n   * @param conditions\n   * @param options\n   */\n  public async selectOne(\n    conditions: FindOptionsWhere,\n    options: FindOneOptions = { loadEagerRelations: false },\n  ): Promise {\n    return this.find({ ...instanceToPlain(options), where: conditions })\n      .getOneOrFail()\n      .catch(() => {\n        throw new NotFoundException(ErrorTypeEnum.USER_NOTIFICATION_TOKEN_NOT_FOUND);\n      });\n  }\n\n  /**\n   * [description]\n   * @param conditions\n   * @param entityLike\n   * @param options\n   */\n  public async updateOne(\n    conditions: FindOptionsWhere,\n    entityLike: Partial,\n    options: SaveOptions = { transaction: false },\n  ): Promise {\n    return this.userNotificationTokenEntityRepository.manager.transaction(async () => {\n      const mergeIntoEntity = await this.selectOne(conditions);\n      const entity = this.userNotificationTokenEntityRepository.merge(mergeIntoEntity, entityLike);\n      return this.userNotificationTokenEntityRepository.save(entity, options).catch(() => {\n        throw new ConflictException(ErrorTypeEnum.USER_NOTIFICATION_TOKEN_ALREADY_EXIST);\n      });\n    });\n  }\n\n  /**\n   * [description]\n   * @param conditions\n   * @param options\n   */\n  public async deleteOne(\n    conditions: FindOptionsWhere,\n    options: RemoveOptions = { transaction: false },\n  ): Promise {\n    return this.userNotificationTokenEntityRepository.manager.transaction(async () => {\n      const entity = await this.selectOne(conditions);\n      return this.userNotificationTokenEntityRepository.remove(entity, options).catch(() => {\n        throw new NotFoundException(ErrorTypeEnum.USER_NOTIFICATION_TOKEN_NOT_FOUND);\n      });\n    });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/UserRefreshTokenEntity.html":{"url":"entities/UserRefreshTokenEntity.html","title":"entity - UserRefreshTokenEntity","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  UserRefreshTokenEntity\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/users/entities/user-refresh-token.entity.ts\n        \n\n\n            \n                Description\n            \n            \n                [description]\n\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Readonly\n                                createdAt\n                            \n                            \n                                    Public\n                                    Readonly\n                                id\n                            \n                            \n                                    Public\n                                    Readonly\n                                owner\n                            \n                            \n                                    Public\n                                ppid\n                            \n                            \n                                    Public\n                                    Readonly\n                                updatedAt\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        createdAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({readOnly: true})@CreateDateColumn({type: 'timestamptz', default: () => CURRENT_TIMESTAMP})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/users/entities/user-refresh-token.entity.ts:51\n                        \n                    \n\n            \n                \n                    [description]\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({readOnly: true})@PrimaryGeneratedColumn('uuid')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/users/entities/user-refresh-token.entity.ts:24\n                        \n                    \n\n            \n                \n                    [description]\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        owner\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Partial\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiHideProperty()@ManyToOne(undefined,  => refreshTokens, {onDelete: 'CASCADE'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/users/entities/user-refresh-token.entity.ts:41\n                        \n                    \n\n            \n                \n                    [description]\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        ppid\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Exclude()@ApiHideProperty()@Column({type: 'varchar', length: 149})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/users/entities/user-refresh-token.entity.ts:32\n                        \n                    \n\n            \n                \n                    [description]\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        updatedAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({readOnly: true})@UpdateDateColumn({type: 'timestamptz', default: () => CURRENT_TIMESTAMP})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/users/entities/user-refresh-token.entity.ts:61\n                        \n                    \n\n            \n                \n                    [description]\n\n                \n            \n\n        \n    \n\n    \n\n\n    \n        import { ApiHideProperty, ApiProperty } from '@nestjs/swagger';\nimport {\n  Entity,\n  Column,\n  ManyToOne,\n  CreateDateColumn,\n  UpdateDateColumn,\n  PrimaryGeneratedColumn,\n} from 'typeorm';\n\nimport { UserEntity } from './user.entity';\nimport { Exclude } from 'class-transformer';\n\n/**\n * [description]\n */\n@Entity('user_refresh_tokens')\nexport class UserRefreshTokenEntity {\n  /**\n   * [description]\n   */\n  @ApiProperty({ readOnly: true })\n  @PrimaryGeneratedColumn('uuid')\n  public readonly id: string;\n\n  /**\n   * [description]\n   */\n  @Exclude()\n  @ApiHideProperty()\n  @Column({ type: 'varchar', length: 149 })\n  public ppid: string;\n\n  /**\n   * [description]\n   */\n  @ApiHideProperty()\n  @ManyToOne(() => UserEntity, ({ refreshTokens }) => refreshTokens, {\n    onDelete: 'CASCADE',\n  })\n  public readonly owner: Partial;\n\n  /**\n   * [description]\n   */\n  @ApiProperty({ readOnly: true })\n  @CreateDateColumn({\n    type: 'timestamptz',\n    default: () => 'CURRENT_TIMESTAMP',\n  })\n  public readonly createdAt: Date;\n\n  /**\n   * [description]\n   */\n  @ApiProperty({ readOnly: true })\n  @UpdateDateColumn({\n    type: 'timestamptz',\n    default: () => 'CURRENT_TIMESTAMP',\n  })\n  public readonly updatedAt: Date;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/UserRefreshTokensService.html":{"url":"injectables/UserRefreshTokensService.html","title":"injectable - UserRefreshTokensService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  UserRefreshTokensService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/users/services/user-refresh-tokens.service.ts\n        \n\n\n            \n                Description\n            \n            \n                [description]\n\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Readonly\n                                userRefreshTokenEntityRepository\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                createOne\n                            \n                            \n                                    Public\n                                    Async\n                                deleteOne\n                            \n                            \n                                    Public\n                                find\n                            \n                            \n                                    Public\n                                    Async\n                                generateAndCreateOne\n                            \n                            \n                                    Public\n                                    Async\n                                selectAll\n                            \n                            \n                                    Public\n                                    Async\n                                selectOne\n                            \n                            \n                                    Public\n                                    Async\n                                updateOne\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(userRefreshTokenEntityRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/modules/users/services/user-refresh-tokens.service.ts:25\n                            \n                        \n\n                \n                    \n                            [description]\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        userRefreshTokenEntityRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        createOne\n                        \n                    \n                \n            \n            \n                \n                    \n                    createOne(entityLike: Partial, options: SaveOptions)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/users/services/user-refresh-tokens.service.ts:55\n                \n            \n\n\n            \n                \n                    [description]\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    entityLike\n                                    \n                                                Partial\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    options\n                                    \n                                            SaveOptions\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        { transaction: false }\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        deleteOne\n                        \n                    \n                \n            \n            \n                \n                    \n                    deleteOne(conditions: FindOptionsWhere, options: RemoveOptions)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/users/services/user-refresh-tokens.service.ts:136\n                \n            \n\n\n            \n                \n                    [description]\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    conditions\n                                    \n                                                FindOptionsWhere\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    options\n                                    \n                                            RemoveOptions\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        { transaction: false }\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        find\n                        \n                    \n                \n            \n            \n                \n                    \n                    find(optionsOrConditions?: FindManyOptions)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/users/services/user-refresh-tokens.service.ts:71\n                \n            \n\n\n            \n                \n                     [description]\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    optionsOrConditions\n                                    \n                                                FindManyOptions\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         SelectQueryBuilder\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        generateAndCreateOne\n                        \n                    \n                \n            \n            \n                \n                    \n                    generateAndCreateOne(entityLike: Partial, options: SaveOptions)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/users/services/user-refresh-tokens.service.ts:40\n                \n            \n\n\n            \n                \n                    [description]\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    entityLike\n                                    \n                                                Partial\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    options\n                                    \n                                            SaveOptions\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        { transaction: false }\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        selectAll\n                        \n                    \n                \n            \n            \n                \n                    \n                    selectAll(options: FindManyOptions)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/users/services/user-refresh-tokens.service.ts:86\n                \n            \n\n\n            \n                \n                    [description]\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    options\n                                    \n                                                FindManyOptions\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        { loadEagerRelations: false }\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        selectOne\n                        \n                    \n                \n            \n            \n                \n                    \n                    selectOne(conditions: FindOptionsWhere, options: FindOneOptions)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/users/services/user-refresh-tokens.service.ts:100\n                \n            \n\n\n            \n                \n                    [description]\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    conditions\n                                    \n                                                FindOptionsWhere\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    options\n                                    \n                                                FindOneOptions\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        { loadEagerRelations: false }\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        updateOne\n                        \n                    \n                \n            \n            \n                \n                    \n                    updateOne(conditions: FindOptionsWhere, entityLike: Partial, options: SaveOptions)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/users/services/user-refresh-tokens.service.ts:117\n                \n            \n\n\n            \n                \n                    [description]\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    conditions\n                                    \n                                                FindOptionsWhere\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    entityLike\n                                    \n                                                Partial\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    options\n                                    \n                                            SaveOptions\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        { transaction: false }\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        userRefreshTokenEntityRepository\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Repository\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @InjectRepository(UserRefreshTokenEntity)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/users/services/user-refresh-tokens.service.ts:32\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { ConflictException, Injectable, NotFoundException } from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { instanceToPlain } from 'class-transformer';\nimport { randomBytes } from 'crypto';\nimport { hash } from 'src/common/helpers';\nimport {\n  Repository,\n  SaveOptions,\n  RemoveOptions,\n  FindOneOptions,\n  FindManyOptions,\n  FindOptionsWhere,\n  FindOptionsUtils,\n  SelectQueryBuilder,\n} from 'typeorm';\n\nimport { ErrorTypeEnum } from 'src/common/enums';\n\nimport { UserRefreshTokenEntity } from '../entities';\n\n/**\n * [description]\n */\n@Injectable()\nexport class UserRefreshTokensService {\n  /**\n   * [description]\n   * @param userRefreshTokenEntityRepository\n   */\n  constructor(\n    @InjectRepository(UserRefreshTokenEntity)\n    public readonly userRefreshTokenEntityRepository: Repository,\n  ) {}\n\n  /**\n   * [description]\n   * @param entityLike\n   * @param options\n   */\n  public async generateAndCreateOne(\n    entityLike: Partial,\n    options: SaveOptions = { transaction: false },\n  ): Promise {\n    const refreshIdentifier = randomBytes(16).toString('hex');\n    const refreshHash = await hash(refreshIdentifier);\n    const entity = await this.createOne({ ...entityLike, ppid: refreshHash }, options);\n    return { ...entity, ppid: refreshIdentifier };\n  }\n\n  /**\n   * [description]\n   * @param entityLike\n   * @param options\n   */\n  public async createOne(\n    entityLike: Partial,\n    options: SaveOptions = { transaction: false },\n  ): Promise {\n    return this.userRefreshTokenEntityRepository.manager.transaction(async () => {\n      const entity = this.userRefreshTokenEntityRepository.create(entityLike);\n      return this.userRefreshTokenEntityRepository.save(entity, options).catch(() => {\n        throw new ConflictException(ErrorTypeEnum.USER_REFRESH_TOKEN_ALREADY_EXIST);\n      });\n    });\n  }\n\n  /**\n   *  [description]\n   * @param optionsOrConditions\n   */\n  public find(\n    optionsOrConditions?: FindManyOptions,\n  ): SelectQueryBuilder {\n    const metadata = this.userRefreshTokenEntityRepository.metadata;\n    return this.userRefreshTokenEntityRepository\n      .createQueryBuilder(\n        FindOptionsUtils.extractFindManyOptionsAlias(optionsOrConditions) || metadata.name,\n      )\n      .setFindOptions(optionsOrConditions);\n  }\n\n  /**\n   * [description]\n   * @param options\n   */\n  public async selectAll(\n    options: FindManyOptions = { loadEagerRelations: false },\n  ): Promise {\n    const qb = this.find(instanceToPlain(options));\n    return qb.getMany().catch(() => {\n      throw new NotFoundException(ErrorTypeEnum.USER_REFRESH_TOKENS_NOT_FOUND);\n    });\n  }\n\n  /**\n   * [description]\n   * @param conditions\n   * @param options\n   */\n  public async selectOne(\n    conditions: FindOptionsWhere,\n    options: FindOneOptions = { loadEagerRelations: false },\n  ): Promise {\n    return this.find({ ...instanceToPlain(options), where: conditions })\n      .getOneOrFail()\n      .catch(() => {\n        throw new NotFoundException(ErrorTypeEnum.USER_REFRESH_TOKEN_NOT_FOUND);\n      });\n  }\n\n  /**\n   * [description]\n   * @param conditions\n   * @param entityLike\n   * @param options\n   */\n  public async updateOne(\n    conditions: FindOptionsWhere,\n    entityLike: Partial,\n    options: SaveOptions = { transaction: false },\n  ): Promise {\n    return this.userRefreshTokenEntityRepository.manager.transaction(async () => {\n      const mergeIntoEntity = await this.selectOne(conditions);\n      const entity = this.userRefreshTokenEntityRepository.merge(mergeIntoEntity, entityLike);\n      return this.userRefreshTokenEntityRepository.save(entity, options).catch(() => {\n        throw new ConflictException(ErrorTypeEnum.USER_REFRESH_TOKEN_ALREADY_EXIST);\n      });\n    });\n  }\n\n  /**\n   * [description]\n   * @param conditions\n   * @param options\n   */\n  public async deleteOne(\n    conditions: FindOptionsWhere,\n    options: RemoveOptions = { transaction: false },\n  ): Promise {\n    return this.userRefreshTokenEntityRepository.manager.transaction(async () => {\n      const entity = await this.selectOne(conditions, options);\n      return this.userRefreshTokenEntityRepository.remove(entity).catch(() => {\n        throw new NotFoundException(ErrorTypeEnum.USER_REFRESH_TOKEN_NOT_FOUND);\n      });\n    });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/UsersController.html":{"url":"controllers/UsersController.html","title":"controller - UsersController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  UsersController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/users/controllers/users.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                users\n            \n\n\n            \n                Description\n            \n            \n                [description]\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                createOne\n                            \n                            \n                                    Public\n                                    Async\n                                deleteOne\n                            \n                            \n                                    Public\n                                    Async\n                                selectAll\n                            \n                            \n                                    Public\n                                    Async\n                                selectOne\n                            \n                            \n                                    Public\n                                    Async\n                                updateOne\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        createOne\n                        \n                    \n                \n            \n            \n                \n                    \n                    createOne(data: CreateUserDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()@UseRole(UserRoleEnum.ADMIN)\n                \n            \n\n            \n                \n                    Defined in src/modules/users/controllers/users.controller.ts:53\n                \n            \n\n\n            \n                \n                    [description]\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    data\n                                    \n                                                CreateUserDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        deleteOne\n                        \n                    \n                \n            \n            \n                \n                    \n                    deleteOne(conditions: ID)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete(':id')@UseRole(UserRoleEnum.ADMIN)\n                \n            \n\n            \n                \n                    Defined in src/modules/users/controllers/users.controller.ts:100\n                \n            \n\n\n            \n                \n                    [description]\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    conditions\n                                    \n                                                ID\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        selectAll\n                        \n                    \n                \n            \n            \n                \n                    \n                    selectAll(options: SelectUsersDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()@UseRole(UserRoleEnum.ADMIN)\n                \n            \n\n            \n                \n                    Defined in src/modules/users/controllers/users.controller.ts:63\n                \n            \n\n\n            \n                \n                    [description]\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    options\n                                    \n                                                SelectUsersDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        selectOne\n                        \n                    \n                \n            \n            \n                \n                    \n                    selectOne(conditions: ID, options: SelectUserDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get(':id')\n                \n            \n\n            \n                \n                    Defined in src/modules/users/controllers/users.controller.ts:73\n                \n            \n\n\n            \n                \n                    [description]\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    conditions\n                                    \n                                                ID\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    options\n                                    \n                                                SelectUserDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        updateOne\n                        \n                    \n                \n            \n            \n                \n                    \n                    updateOne(conditions: ID, data: UpdateUserDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch(':id')@UseRole(UserRoleEnum.ADMIN)\n                \n            \n\n            \n                \n                    Defined in src/modules/users/controllers/users.controller.ts:87\n                \n            \n\n\n            \n                \n                    [description]\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    conditions\n                                    \n                                                ID\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    data\n                                    \n                                                UpdateUserDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { ApiBearerAuth, ApiTags } from '@nestjs/swagger';\nimport {\n  Get,\n  Post,\n  Body,\n  Param,\n  Patch,\n  Query,\n  Delete,\n  UseGuards,\n  Controller,\n  UseInterceptors,\n  ClassSerializerInterceptor,\n} from '@nestjs/common';\n\nimport { UseRole } from 'src/common/decorators';\nimport { ID } from 'src/common/dto';\n\nimport { JwtAuthGuard } from 'src/modules/auth/guards';\n\nimport { UsersService } from '../services';\nimport { UserEntity } from '../entities';\nimport { UserRoleEnum } from '../enums';\nimport {\n  PaginationUsersDto,\n  SelectUsersDto,\n  CreateUserDto,\n  SelectUserDto,\n  UpdateUserDto,\n} from '../dto';\n\n/**\n * [description]\n */\n@ApiBearerAuth()\n@ApiTags('users')\n@Controller('users')\n@UseGuards(JwtAuthGuard)\n@UseInterceptors(ClassSerializerInterceptor)\nexport class UsersController {\n  /**\n   * [description]\n   * @param usersService\n   */\n  constructor(private readonly usersService: UsersService) {}\n\n  /**\n   * [description]\n   * @param data\n   */\n  @Post()\n  @UseRole(UserRoleEnum.ADMIN)\n  public async createOne(@Body() data: CreateUserDto): Promise {\n    return this.usersService.createOne(data);\n  }\n\n  /**\n   * [description]\n   * @param options\n   */\n  @Get()\n  @UseRole(UserRoleEnum.ADMIN)\n  public async selectAll(@Query() options: SelectUsersDto): Promise {\n    return this.usersService.selectAll(options);\n  }\n\n  /**\n   * [description]\n   * @param conditions\n   * @param options\n   */\n  @Get(':id')\n  public async selectOne(\n    @Param() conditions: ID,\n    @Query() options: SelectUserDto,\n  ): Promise {\n    return this.usersService.selectOne(conditions, options);\n  }\n\n  /**\n   * [description]\n   * @param conditions\n   * @param data\n   */\n  @Patch(':id')\n  @UseRole(UserRoleEnum.ADMIN)\n  public async updateOne(\n    @Param() conditions: ID,\n    @Body() data: UpdateUserDto,\n  ): Promise {\n    return this.usersService.updateOne(conditions, data);\n  }\n\n  /**\n   * [description]\n   * @param conditions\n   */\n  @Delete(':id')\n  @UseRole(UserRoleEnum.ADMIN)\n  public async deleteOne(@Param() conditions: ID): Promise {\n    return this.usersService.deleteOne(conditions);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/UsersModule.html":{"url":"modules/UsersModule.html","title":"module - UsersModule","body":"\n                   \n\n\n\n\n    Modules\n    UsersModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_UsersModule\n\n\n\ncluster_UsersModule_exports\n\n\n\ncluster_UsersModule_providers\n\n\n\n\nUserNotificationTokensService \n\nUserNotificationTokensService \n\n\n\nUserRefreshTokensService \n\nUserRefreshTokensService \n\n\n\nUsersService \n\nUsersService \n\n\n\nUsersModule\n\nUsersModule\n\nUserNotificationTokensService  -->\n\nUsersModule->UserNotificationTokensService \n\n\n\nUserRefreshTokensService  -->\n\nUsersModule->UserRefreshTokensService \n\n\n\nUsersService  -->\n\nUsersModule->UsersService \n\n\n\n\n\nUserNotificationTokensService\n\nUserNotificationTokensService\n\nUsersModule -->\n\nUserNotificationTokensService->UsersModule\n\n\n\n\n\nUserRefreshTokensService\n\nUserRefreshTokensService\n\nUsersModule -->\n\nUserRefreshTokensService->UsersModule\n\n\n\n\n\nUsersService\n\nUsersService\n\nUsersModule -->\n\nUsersService->UsersModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/modules/users/users.module.ts\n        \n\n\n\n        \n            Description\n        \n        \n            [description]\n\n        \n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            UserNotificationTokensService\n                        \n                        \n                            UserRefreshTokensService\n                        \n                        \n                            UsersService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            UsersController\n                        \n                        \n                            UserNotificationTokensController\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            UserNotificationTokensService\n                        \n                        \n                            UserRefreshTokensService\n                        \n                        \n                            UsersService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { TypeOrmModule } from '@nestjs/typeorm';\nimport { Module } from '@nestjs/common';\n\nimport { UserNotificationTokensService, UserRefreshTokensService, UsersService } from './services';\nimport { UserEntity, UserNotificationTokenEntity, UserRefreshTokenEntity } from './entities';\nimport { UsersController, UserNotificationTokensController } from './controllers';\n\n/**\n * [description]\n */\n@Module({\n  imports: [\n    TypeOrmModule.forFeature([UserEntity, UserRefreshTokenEntity, UserNotificationTokenEntity]),\n  ],\n  controllers: [UsersController, UserNotificationTokensController],\n  providers: [UsersService, UserRefreshTokensService, UserNotificationTokensService],\n  exports: [UsersService, UserRefreshTokensService, UserNotificationTokensService],\n})\nexport class UsersModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/UsersService.html":{"url":"injectables/UsersService.html","title":"injectable - UsersService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  UsersService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/users/services/users.service.ts\n        \n\n\n            \n                Description\n            \n            \n                [description]\n\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Readonly\n                                userEntityRepository\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                createOne\n                            \n                            \n                                    Public\n                                    Async\n                                deleteOne\n                            \n                            \n                                    Public\n                                find\n                            \n                            \n                                    Public\n                                    Async\n                                selectAll\n                            \n                            \n                                    Public\n                                    Async\n                                selectOne\n                            \n                            \n                                    Public\n                                    Async\n                                updateOne\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(userEntityRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/modules/users/services/users.service.ts:24\n                            \n                        \n\n                \n                    \n                            [description]\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        userEntityRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        createOne\n                        \n                    \n                \n            \n            \n                \n                    \n                    createOne(entityLike: Partial, options: SaveOptions)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/users/services/users.service.ts:39\n                \n            \n\n\n            \n                \n                    [description]\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    entityLike\n                                    \n                                                Partial\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    options\n                                    \n                                            SaveOptions\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        { transaction: false }\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        deleteOne\n                        \n                    \n                \n            \n            \n                \n                    \n                    deleteOne(conditions: FindOptionsWhere, options: RemoveOptions)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/users/services/users.service.ts:147\n                \n            \n\n\n            \n                \n                    [description]\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    conditions\n                                    \n                                                FindOptionsWhere\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    options\n                                    \n                                            RemoveOptions\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        { transaction: false }\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        find\n                        \n                    \n                \n            \n            \n                \n                    \n                    find(optionsOrConditions?: FindManyOptions)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/users/services/users.service.ts:57\n                \n            \n\n\n            \n                \n                     [description]\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    optionsOrConditions\n                                    \n                                                FindManyOptions\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         SelectQueryBuilder\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        selectAll\n                        \n                    \n                \n            \n            \n                \n                    \n                    selectAll(options: FindManyOptions)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/users/services/users.service.ts:90\n                \n            \n\n\n            \n                \n                    [description]\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    options\n                                    \n                                                FindManyOptions\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        { loadEagerRelations: false }\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        selectOne\n                        \n                    \n                \n            \n            \n                \n                    \n                    selectOne(conditions: FindOptionsWhere, options: FindOneOptions)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/users/services/users.service.ts:106\n                \n            \n\n\n            \n                \n                    [description]\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    conditions\n                                    \n                                                FindOptionsWhere\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    options\n                                    \n                                                FindOneOptions\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        { loadEagerRelations: false }\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        updateOne\n                        \n                    \n                \n            \n            \n                \n                    \n                    updateOne(conditions: FindOptionsWhere, entityLike: Partial, options: SaveOptions)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/users/services/users.service.ts:126\n                \n            \n\n\n            \n                \n                    [description]\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    conditions\n                                    \n                                                FindOptionsWhere\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    entityLike\n                                    \n                                                Partial\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    options\n                                    \n                                            SaveOptions\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        { transaction: false }\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        userEntityRepository\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Repository\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @InjectRepository(UserEntity)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/users/services/users.service.ts:31\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { ConflictException, Injectable, NotFoundException } from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { instanceToPlain } from 'class-transformer';\nimport {\n  Repository,\n  SaveOptions,\n  RemoveOptions,\n  FindOneOptions,\n  FindManyOptions,\n  FindOptionsWhere,\n  FindOptionsUtils,\n  SelectQueryBuilder,\n} from 'typeorm';\n\nimport { ErrorTypeEnum } from 'src/common/enums';\n\nimport { UserEntity } from '../entities';\nimport { PaginationUsersDto } from '../dto';\n\n/**\n * [description]\n */\n@Injectable()\nexport class UsersService {\n  /**\n   * [description]\n   * @param userEntityRepository\n   */\n  constructor(\n    @InjectRepository(UserEntity)\n    public readonly userEntityRepository: Repository,\n  ) {}\n\n  /**\n   * [description]\n   * @param entityLike\n   * @param options\n   */\n  public async createOne(\n    entityLike: Partial,\n    options: SaveOptions = { transaction: false },\n  ): Promise {\n    return this.userEntityRepository.manager.transaction(async () => {\n      const entity = this.userEntityRepository.create(entityLike);\n      const { id } = await this.userEntityRepository.save(entity, options).catch(() => {\n        throw new ConflictException(ErrorTypeEnum.USER_ALREADY_EXIST);\n      });\n\n      return this.selectOne({ id }, { loadEagerRelations: true });\n    });\n  }\n\n  /**\n   *  [description]\n   * @param optionsOrConditions\n   */\n  public find(optionsOrConditions?: FindManyOptions): SelectQueryBuilder {\n    const metadata = this.userEntityRepository.metadata;\n    const qb = this.userEntityRepository.createQueryBuilder(\n      FindOptionsUtils.extractFindManyOptionsAlias(optionsOrConditions) || metadata.name,\n    );\n\n    /**\n     * Place for add custom order\n     * qb.addSelect('__custom') and then\n     * order by it from property order from options\n     * @example\n     */\n    /* if (optionsOrConditions.order)\n      optionsOrConditions.order = setFindOrder(qb, optionsOrConditions.order); */\n\n    /**\n     * Place for common relation\n     * @example\n     */\n    /* if (\n      !FindOptionsUtils.isFindManyOptions(optionsOrConditions) ||\n      optionsOrConditions.loadEagerRelations !== false\n    ) {\n      qb.leftJoinAndSelect('Entity.relation_field', 'Entity_relation_field')\n    } */\n\n    return qb.setFindOptions(optionsOrConditions);\n  }\n\n  /**\n   * [description]\n   * @param options\n   */\n  public async selectAll(\n    options: FindManyOptions = { loadEagerRelations: false },\n  ): Promise {\n    return this.find(options)\n      .getManyAndCount()\n      .then((data) => new PaginationUsersDto(data))\n      .catch(() => {\n        throw new NotFoundException(ErrorTypeEnum.USERS_NOT_FOUND);\n      });\n  }\n\n  /**\n   * [description]\n   * @param conditions\n   * @param options\n   */\n  public async selectOne(\n    conditions: FindOptionsWhere,\n    options: FindOneOptions = { loadEagerRelations: false },\n  ): Promise {\n    return this.find({\n      ...instanceToPlain(options),\n      where: conditions,\n    })\n      .getOneOrFail()\n      .catch(() => {\n        throw new NotFoundException(ErrorTypeEnum.USER_NOT_FOUND);\n      });\n  }\n\n  /**\n   * [description]\n   * @param conditions\n   * @param entityLike\n   * @param options\n   */\n  public async updateOne(\n    conditions: FindOptionsWhere,\n    entityLike: Partial,\n    options: SaveOptions = { transaction: false },\n  ): Promise {\n    return this.userEntityRepository.manager.transaction(async () => {\n      const mergeIntoEntity = await this.selectOne(conditions);\n      const entity = this.userEntityRepository.merge(mergeIntoEntity, entityLike);\n      const { id } = await this.userEntityRepository.save(entity, options).catch(() => {\n        throw new ConflictException(ErrorTypeEnum.USER_ALREADY_EXIST);\n      });\n\n      return this.selectOne({ id }, { loadEagerRelations: true });\n    });\n  }\n\n  /**\n   * [description]\n   * @param conditions\n   * @param options\n   */\n  public async deleteOne(\n    conditions: FindOptionsWhere,\n    options: RemoveOptions = { transaction: false },\n  ): Promise {\n    return this.userEntityRepository.manager.transaction(async () => {\n      const entity = await this.selectOne(conditions);\n      return this.userEntityRepository.remove(entity, options).catch(() => {\n        throw new NotFoundException(ErrorTypeEnum.USER_NOT_FOUND);\n      });\n    });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"changelog.html":{"url":"changelog.html","title":"getting-started - changelog","body":"\n                   \n\n0.1.1 (2022-05-27)\n0.1.0 (2022-05-11)\nFeatures\n\nnotifications: implemented push notifications (c6f5ec4)\n\n0.0.1 (2022-05-06)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                src/app.controller.ts\n            \n            controller\n            AppController\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/common/decorators/roles.decorator.ts\n            \n            variable\n            UseRole\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/common/decorators/socket-user.decorator.ts\n            \n            variable\n            SocketUser\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/common/decorators/user.decorator.ts\n            \n            variable\n            User\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/common/dto/find-many-options/find-many-options.dto.ts\n            \n            class\n            FindManyOptionsDto\n            \n                100 %\n                (7/7)\n            \n        \n        \n            \n                \n                src/common/dto/find-one-options/find-one-options.dto.ts\n            \n            class\n            FindOneOptionsDto\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/common/dto/id/id.dto.ts\n            \n            class\n            ID\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/common/dto/pagination/pagination.dto.ts\n            \n            function\n            PaginationMixin\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/common/filters/all-exception.filter.ts\n            \n            class\n            AllExceptionFilter\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/common/filters/http-exception.filter.ts\n            \n            class\n            HttpExceptionFilter\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/common/filters/sockets-exception.filter.ts\n            \n            class\n            SocketsExceptionFilter\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/common/helpers/crypto.helper.ts\n            \n            variable\n            compare\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/common/helpers/crypto.helper.ts\n            \n            variable\n            hash\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/common/helpers/crypto.helper.ts\n            \n            variable\n            keyLength\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/common/helpers/crypto.helper.ts\n            \n            variable\n            saltRounds\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/common/helpers/crypto.helper.ts\n            \n            variable\n            scrypt\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/common/helpers/dot-notation.helper.ts\n            \n            variable\n            dotNotation\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/common/helpers/number.helper.ts\n            \n            variable\n            floatToInt\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/common/helpers/query-order.helper.ts\n            \n            variable\n            setFindOrder\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/common/helpers/query-search.helper.ts\n            \n            function\n            querySearch\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/common/interceptors/transform.interceptor.ts\n            \n            injectable\n            TransformInterceptor\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/common/interceptors/transform.interceptor.ts\n            \n            interface\n            Response\n            \n                50 %\n                (1/2)\n            \n        \n        \n            \n                \n                src/common/interfaces/find-many-brackets.interface.ts\n            \n            interface\n            FindManyBracketsOptions\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/common/pipes/validation.pipe.ts\n            \n            variable\n            validationPipe\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/config/config.service.ts\n            \n            injectable\n            ConfigService\n            \n                100 %\n                (5/5)\n            \n        \n        \n            \n                \n                src/database/migrations/1615673396368-user.migration.ts\n            \n            class\n            user1615673396368\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/database/migrations/1615673396368-user.migration.ts\n            \n            variable\n            data\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/database/migrations/1615673396368-user.migration.ts\n            \n            variable\n            password\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/database/transformers/float-int-column.transformer.ts\n            \n            variable\n            FloatIntColumnTransformer\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/main.ts\n            \n            function\n            bootstrap\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/modules/auth/auth.constants.ts\n            \n            variable\n            CACHE_AUTH_PREFIX\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/modules/auth/auth.controller.ts\n            \n            controller\n            AuthController\n            \n                100 %\n                (12/12)\n            \n        \n        \n            \n                \n                src/modules/auth/auth.service.ts\n            \n            injectable\n            AuthService\n            \n                78 %\n                (15/19)\n            \n        \n        \n            \n                \n                src/modules/auth/dto/confirmation-email.dto.ts\n            \n            class\n            ConfirmationEmailDto\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/modules/auth/dto/create-profile.dto.ts\n            \n            class\n            CreateProfileDto\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/modules/auth/dto/credentials.dto.ts\n            \n            class\n            CredentialsDto\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/modules/auth/dto/jwt-tokens.dto.ts\n            \n            class\n            JwtAccessTokenPayloadDto\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/modules/auth/dto/jwt-tokens.dto.ts\n            \n            class\n            JwtRefreshTokenDto\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/modules/auth/dto/jwt-tokens.dto.ts\n            \n            class\n            JwtRefreshTokenPayloadDto\n            \n                100 %\n                (4/4)\n            \n        \n        \n            \n                \n                src/modules/auth/dto/jwt-tokens.dto.ts\n            \n            class\n            JwtTokensDto\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/modules/auth/dto/reset-password.dto.ts\n            \n            class\n            ResetPasswordDto\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/modules/auth/dto/reset-password.dto.ts\n            \n            class\n            SendResetPasswordDto\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/modules/auth/dto/select-profile.dto.ts\n            \n            class\n            SelectProfileDto\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/modules/auth/dto/update-profile.dto.ts\n            \n            class\n            UpdateEmailDto\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/modules/auth/dto/update-profile.dto.ts\n            \n            class\n            UpdatePasswordDto\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/modules/auth/dto/update-profile.dto.ts\n            \n            class\n            UpdateProfileDto\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/modules/auth/guards/jwt-refresh.guard.ts\n            \n            injectable\n            JwtRefreshGuard\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/modules/auth/guards/jwt.guard.ts\n            \n            injectable\n            JwtAuthGuard\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/modules/auth/strategies/jwt-refresh.strategy.ts\n            \n            injectable\n            JwtRefreshTokenStrategy\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/modules/auth/strategies/jwt.strategy.ts\n            \n            injectable\n            JwtStrategy\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/modules/chats/chats.controller.ts\n            \n            controller\n            ChatsController\n            \n                100 %\n                (6/6)\n            \n        \n        \n            \n                \n                src/modules/chats/dto/chat-read-message.dto.ts\n            \n            class\n            ChatReadMessageDto\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/modules/chats/dto/chat-read-message.dto.ts\n            \n            class\n            ChatReadMessageResponseDto\n            \n                100 %\n                (4/4)\n            \n        \n        \n            \n                \n                src/modules/chats/dto/create-chat-message.dto.ts\n            \n            class\n            ChatReceiveMessageDto\n            \n                100 %\n                (4/4)\n            \n        \n        \n            \n                \n                src/modules/chats/dto/create-chat-message.dto.ts\n            \n            class\n            CreateChatMessageDto\n            \n                100 %\n                (6/6)\n            \n        \n        \n            \n                \n                src/modules/chats/dto/create-chat.dto.ts\n            \n            class\n            CreateChatDto\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/modules/chats/dto/pagination-chat-messages.dto.ts\n            \n            class\n            PaginationChatMessagesDto\n            \n                50 %\n                (1/2)\n            \n        \n        \n            \n                \n                src/modules/chats/dto/pagination-chat-participants.dto.ts\n            \n            class\n            PaginationChatParticipantsDto\n            \n                50 %\n                (1/2)\n            \n        \n        \n            \n                \n                src/modules/chats/dto/pagination-chats.dto.ts\n            \n            class\n            PaginationChatsDto\n            \n                50 %\n                (1/2)\n            \n        \n        \n            \n                \n                src/modules/chats/dto/select-chat-messages.dto.ts\n            \n            class\n            SelectChatMessagesDto\n            \n                100 %\n                (7/7)\n            \n        \n        \n            \n                \n                src/modules/chats/dto/select-chats.dto.ts\n            \n            class\n            SelectChatsDto\n            \n                100 %\n                (9/9)\n            \n        \n        \n            \n                \n                src/modules/chats/entities/chat-message.entity.ts\n            \n            entity\n            ChatMessageEntity\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/modules/chats/entities/chat-participant.entity.ts\n            \n            entity\n            ChatParticipantEntity\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/modules/chats/entities/chat-participant.entity.ts\n            \n            class\n            ChatParticipantEntity\n            \n                12 %\n                (1/8)\n            \n        \n        \n            \n                \n                src/modules/chats/entities/chat.entity.ts\n            \n            entity\n            ChatEntity\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/modules/chats/services/chat-messages.service.ts\n            \n            injectable\n            ChatMessagesService\n            \n                100 %\n                (10/10)\n            \n        \n        \n            \n                \n                src/modules/chats/services/chat-participants.service.ts\n            \n            injectable\n            ChatParticipantsService\n            \n                100 %\n                (10/10)\n            \n        \n        \n            \n                \n                src/modules/chats/services/chats.gateway.ts\n            \n            class\n            ChatsGateway\n            \n                100 %\n                (5/5)\n            \n        \n        \n            \n                \n                src/modules/chats/services/chats.service.ts\n            \n            injectable\n            ChatsService\n            \n                100 %\n                (13/13)\n            \n        \n        \n            \n                \n                src/modules/files/dto/create-file.dto.ts\n            \n            class\n            CreateFileDto\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/modules/files/dto/download-file.dto.ts\n            \n            class\n            DownloadFileDto\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/modules/files/dto/pagination-files.dto.ts\n            \n            class\n            PaginationFilesDto\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/modules/files/dto/select.file.dto.ts\n            \n            class\n            SelectFileDto\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/modules/files/dto/select.files.dto.ts\n            \n            class\n            SelectFilesDto\n            \n                100 %\n                (8/8)\n            \n        \n        \n            \n                \n                src/modules/files/entities/file.entity.ts\n            \n            entity\n            FileEntity\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/modules/files/entities/file.entity.ts\n            \n            class\n            FileEntityPreview\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/modules/files/files.controller.ts\n            \n            controller\n            FilesController\n            \n                100 %\n                (7/7)\n            \n        \n        \n            \n                \n                src/modules/files/files.service.ts\n            \n            injectable\n            FilesService\n            \n                100 %\n                (9/9)\n            \n        \n        \n            \n                \n                src/modules/notifications/dto/create-notification.dto.ts\n            \n            class\n            CreateNotificationDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/modules/notifications/dto/pagination-notifications.dto.ts\n            \n            class\n            PaginationNotificationsDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/modules/notifications/dto/select-notifications.dto.ts\n            \n            class\n            SelectNotificationsDto\n            \n                75 %\n                (6/8)\n            \n        \n        \n            \n                \n                src/modules/notifications/dto/update-notification.dto.ts\n            \n            class\n            UpdateNotificationDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/modules/notifications/entities/notification.entity.ts\n            \n            entity\n            NotificationEntity\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/modules/notifications/notifications.controller.ts\n            \n            controller\n            NotificationsController\n            \n                83 %\n                (5/6)\n            \n        \n        \n            \n                \n                src/modules/notifications/services/notifications.service.ts\n            \n            injectable\n            NotificationsService\n            \n                70 %\n                (12/17)\n            \n        \n        \n            \n                \n                src/modules/sockets/sockets.gateway.ts\n            \n            class\n            SocketsGateway\n            \n                100 %\n                (4/4)\n            \n        \n        \n            \n                \n                src/modules/sockets/sockets.service.ts\n            \n            injectable\n            SocketsService\n            \n                100 %\n                (7/7)\n            \n        \n        \n            \n                \n                src/modules/users/controllers/user-notification-tokens.controller.ts\n            \n            controller\n            UserNotificationTokensController\n            \n                100 %\n                (7/7)\n            \n        \n        \n            \n                \n                src/modules/users/controllers/users.controller.ts\n            \n            controller\n            UsersController\n            \n                100 %\n                (6/6)\n            \n        \n        \n            \n                \n                src/modules/users/dto/create-user-notification-token.dto.ts\n            \n            class\n            CreateUserNotificationTokenDto\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/modules/users/dto/create-user.dto.ts\n            \n            class\n            CreateUserDto\n            \n                100 %\n                (4/4)\n            \n        \n        \n            \n                \n                src/modules/users/dto/delete-user-notification-token.dto.ts\n            \n            class\n            DeleteUserNotificationTokenDto\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/modules/users/dto/pagination-user-notification-tokens.dto.ts\n            \n            class\n            PaginationUserNotificationTokensDto\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/modules/users/dto/pagination-users.dto.ts\n            \n            class\n            PaginationUsersDto\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/modules/users/dto/select-user-notification-token.dto.ts\n            \n            class\n            SelectUserNotificationTokenDto\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/modules/users/dto/select-user-notification-tokens.dto.ts\n            \n            class\n            SelectUserNotificationTokensDto\n            \n                100 %\n                (7/7)\n            \n        \n        \n            \n                \n                src/modules/users/dto/select-user.dto.ts\n            \n            class\n            SelectUserDto\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/modules/users/dto/select-users.dto.ts\n            \n            class\n            SelectUsersDto\n            \n                100 %\n                (7/7)\n            \n        \n        \n            \n                \n                src/modules/users/dto/update-user-notification-token.dto.ts\n            \n            class\n            UpdateUserNotificationTokenDto\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/modules/users/dto/update-user.dto.ts\n            \n            class\n            UpdateUserDto\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/modules/users/entities/user-notification-token.entity.ts\n            \n            entity\n            UserNotificationTokenEntity\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/modules/users/entities/user-refresh-token.entity.ts\n            \n            entity\n            UserRefreshTokenEntity\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/modules/users/entities/user.entity.ts\n            \n            entity\n            UserEntity\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/modules/users/services/user-notification-tokens.service.ts\n            \n            injectable\n            UserNotificationTokensService\n            \n                88 %\n                (8/9)\n            \n        \n        \n            \n                \n                src/modules/users/services/user-refresh-tokens.service.ts\n            \n            injectable\n            UserRefreshTokensService\n            \n                90 %\n                (9/10)\n            \n        \n        \n            \n                \n                src/modules/users/services/users.service.ts\n            \n            injectable\n            UsersService\n            \n                88 %\n                (8/9)\n            \n        \n        \n            \n                \n                src/multipart/decorators/file.decorator.ts\n            \n            variable\n            File\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/multipart/decorators/file.decorator.ts\n            \n            variable\n            FileDecorator\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/multipart/dto/uploaded-file.dto.ts\n            \n            class\n            UploadedFile\n            \n                100 %\n                (8/8)\n            \n        \n        \n            \n                \n                src/multipart/interfaces/multipart-module.interface.ts\n            \n            interface\n            MultipartModuleAsyncOptions\n            \n                100 %\n                (5/5)\n            \n        \n        \n            \n                \n                src/multipart/interfaces/multipart-module.interface.ts\n            \n            interface\n            MultipartOptionsFactory\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/multipart/multipart.constants.ts\n            \n            variable\n            MULTIPART_MODULE\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/multipart/multipart.constants.ts\n            \n            variable\n            MULTIPART_MODULE_OPTIONS\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/multipart/pipes/file-validation.pipe.ts\n            \n            injectable\n            FileValidationPipe\n            \n                100 %\n                (4/4)\n            \n        \n        \n            \n                \n                src/multipart/storage-s3.service.ts\n            \n            injectable\n            StorageS3Service\n            \n                77 %\n                (7/9)\n            \n        \n        \n            \n                \n                src/multipart/storage.service.ts\n            \n            injectable\n            StorageService\n            \n                90 %\n                (9/10)\n            \n        \n        \n            \n                \n                src/sendmail/sendmail.service.ts\n            \n            injectable\n            SendMailService\n            \n                100 %\n                (4/4)\n            \n        \n        \n            \n                \n                test/utils/mock-fastify.util.ts\n            \n            function\n            createRepMock\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                test/utils/mock-file.util.ts\n            \n            interface\n            CreateMockFileReturn\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                test/utils/mock-file.util.ts\n            \n            function\n            createMockFile\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                test/utils/mock-file.util.ts\n            \n            function\n            createMockFileMeta\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                test/utils/mock-file.util.ts\n            \n            variable\n            configService\n            \n                0 %\n                (0/1)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @nestjs-modules/mailer : ^1.7.1\n        \n            @nestjs/bull : ^0.5.5\n        \n            @nestjs/common : ^8.4.7\n        \n            @nestjs/core : ^8.4.7\n        \n            @nestjs/jwt : ^8.0.1\n        \n            @nestjs/microservices : ^8.4.7\n        \n            @nestjs/passport : ^8.2.2\n        \n            @nestjs/platform-fastify : ^8.4.7\n        \n            @nestjs/platform-socket.io : ^8.4.7\n        \n            @nestjs/swagger : ^5.2.1\n        \n            @nestjs/terminus : ^8.1.1\n        \n            @nestjs/throttler : ^2.0.1\n        \n            @nestjs/typeorm : ^8.1.4\n        \n            @nestjs/websockets : ^8.4.7\n        \n            aws-sdk : ^2.1168.0\n        \n            axios : ^0.27.2\n        \n            cache-manager : ^4.0.1\n        \n            cache-manager-redis-store : ^2.0.0\n        \n            class-transformer : ^0.5.1\n        \n            class-validator : ^0.13.2\n        \n            cross-env : ^7.0.3\n        \n            dotenv : ^16.0.1\n        \n            fastify-compress : ^4.1.0\n        \n            fastify-helmet : ^7.1.0\n        \n            fastify-multipart : ^5.4.0\n        \n            fastify-swagger : ^5.2.0\n        \n            firebase-admin : ^11.0.0\n        \n            handlebars : ^4.7.7\n        \n            nodemailer : ^6.7.7\n        \n            passport : ^0.6.0\n        \n            passport-jwt : ^4.0.0\n        \n            pg : ^8.7.3\n        \n            reflect-metadata : ^0.1.13\n        \n            rxjs : ^7.5.5\n        \n            typeorm : ^0.3.7\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/enumerations.html":{"url":"miscellaneous/enumerations.html","title":"miscellaneous-enumerations - enumerations","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Enumerations\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            ChatMessageStatusEnum   (src/.../chat-message-status.enum.ts)\n                        \n                        \n                            ChatMessageTypeEnum   (src/.../chat-message-type.enum.ts)\n                        \n                        \n                            ChatSocketEventsEnum   (src/.../chat-socket-events.enum.ts)\n                        \n                        \n                            ConfigMode   (src/.../config.interface.ts)\n                        \n                        \n                            ErrorTypeEnum   (src/.../error-type.enum.ts)\n                        \n                        \n                            NotificationsStatusEnum   (src/.../notifications-status.enum.ts)\n                        \n                        \n                            NotificationsTitleEnum   (src/.../notifications-title.enum.ts)\n                        \n                        \n                            NotificationsTypeEnum   (src/.../notifications-type.enum.ts)\n                        \n                        \n                            TemplateNameEnum   (src/.../template-name.enum.ts)\n                        \n                        \n                            UserRoleEnum   (src/.../user-role.enum.ts)\n                        \n                        \n                            UserStatusEnum   (src/.../user-status.enum.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/modules/chats/enums/chat-message-status.enum.ts\n    \n        \n            \n                \n                    \n                        \n                        ChatMessageStatusEnum\n                    \n                \n                    \n                        \n                            [description]\n\n                        \n                    \n                        \n                            \n                                 SENT\n                            \n                        \n                        \n                            \n                                Value : SENT\n                            \n                        \n                        \n                            \n                                 READ\n                            \n                        \n                        \n                            \n                                Value : READ\n                            \n                        \n            \n        \n\n    src/modules/chats/enums/chat-message-type.enum.ts\n    \n        \n            \n                \n                    \n                        \n                        ChatMessageTypeEnum\n                    \n                \n                    \n                        \n                            [description]\n\n                        \n                    \n                        \n                            \n                                 TEXT\n                            \n                        \n                        \n                            \n                                Value : TEXT\n                            \n                        \n                        \n                            \n                                 FILE\n                            \n                        \n                        \n                            \n                                Value : FILE\n                            \n                        \n            \n        \n\n    src/modules/chats/enums/chat-socket-events.enum.ts\n    \n        \n            \n                \n                    \n                        \n                        ChatSocketEventsEnum\n                    \n                \n                    \n                        \n                            [description]\n\n                        \n                    \n                        \n                            \n                                 CHAT_SEND_MESSAGE\n                            \n                        \n                        \n                            \n                                Value : CHAT_SEND_MESSAGE\n                            \n                        \n                        \n                            \n                                 CHAT_READ_MESSAGE\n                            \n                        \n                        \n                            \n                                Value : CHAT_READ_MESSAGE\n                            \n                        \n                        \n                            \n                                 CHAT_RECEIVE_MESSAGE\n                            \n                        \n                        \n                            \n                                Value : CHAT_RECEIVE_MESSAGE\n                            \n                        \n            \n        \n\n    src/config/interfaces/config.interface.ts\n    \n        \n            \n                \n                    \n                        \n                        ConfigMode\n                    \n                \n                    \n                        \n                            Type of application operating modes, defined as: poduction, development, test\n\n                        \n                    \n                        \n                            \n                                 production\n                            \n                        \n                        \n                            \n                                Value : production\n                            \n                        \n                        \n                            \n                                 development\n                            \n                        \n                        \n                            \n                                Value : development\n                            \n                        \n                        \n                            \n                                 test\n                            \n                        \n                        \n                            \n                                Value : test\n                            \n                        \n            \n        \n\n    src/common/enums/error-type.enum.ts\n    \n        \n            \n                \n                    \n                        \n                        ErrorTypeEnum\n                    \n                \n                    \n                        \n                            [description]\n\n                        \n                    \n                        \n                            \n                                 INTERNAL_SERVER_ERROR\n                            \n                        \n                        \n                            \n                                Value : INTERNAL_SERVER_ERROR\n                            \n                        \n                        \n                            \n                                 FILE_UNSUPPORTED_TYPE\n                            \n                        \n                        \n                            \n                                Value : FILE_UNSUPPORTED_TYPE\n                            \n                        \n                        \n                            \n                                 FILE_ALREADY_EXIST\n                            \n                        \n                        \n                            \n                                Value : FILE_ALREADY_EXIST\n                            \n                        \n                        \n                            \n                                 FILES_NOT_FOUND\n                            \n                        \n                        \n                            \n                                Value : FILES_NOT_FOUND\n                            \n                        \n                        \n                            \n                                 FILE_NOT_FOUND\n                            \n                        \n                        \n                            \n                                Value : FILE_NOT_FOUND\n                            \n                        \n                        \n                            \n                                 FILE_TOO_LARGE\n                            \n                        \n                        \n                            \n                                Value : FILE_TOO_LARGE\n                            \n                        \n                        \n                            \n                                 AUTH_INCORRECT_CREDENTIALS\n                            \n                        \n                        \n                            \n                                Value : AUTH_INCORRECT_CREDENTIALS\n                            \n                        \n                        \n                            \n                                 AUTH_INVALID_REFRESH_TOKEN\n                            \n                        \n                        \n                            \n                                Value : AUTH_INVALID_REFRESH_TOKEN\n                            \n                        \n                        \n                            \n                                 AUTH_INVALID_TOKEN\n                            \n                        \n                        \n                            \n                                Value : AUTH_INVALID_TOKEN\n                            \n                        \n                        \n                            \n                                 AUTH_UNAUTHORIZED\n                            \n                        \n                        \n                            \n                                Value : AUTH_UNAUTHORIZED\n                            \n                        \n                        \n                            \n                                 AUTH_FORBIDDEN\n                            \n                        \n                        \n                            \n                                Value : AUTH_FORBIDDEN\n                            \n                        \n                        \n                            \n                                 NEW_PASSWORD_AND_OLD_PASSWORD_CANNOT_BE_SAME\n                            \n                        \n                        \n                            \n                                Value : NEW_PASSWORD_AND_OLD_PASSWORD_CANNOT_BE_SAME\n                            \n                        \n                        \n                            \n                                 AUTH_INCORRECT_CONFIRMATION_EMAIL_CODE\n                            \n                        \n                        \n                            \n                                Value : AUTH_INCORRECT_CONFIRMATION_EMAIL_CODE\n                            \n                        \n                        \n                            \n                                 AUTH_PASSWORDS_DO_NOT_MATCH\n                            \n                        \n                        \n                            \n                                Value : AUTH_PASSWORDS_DO_NOT_MATCH\n                            \n                        \n                        \n                            \n                                 USER_ALREADY_EXIST\n                            \n                        \n                        \n                            \n                                Value : USER_ALREADY_EXISTS\n                            \n                        \n                        \n                            \n                                 USERS_NOT_FOUND\n                            \n                        \n                        \n                            \n                                Value : USERS_NOT_FOUND\n                            \n                        \n                        \n                            \n                                 USER_NOT_FOUND\n                            \n                        \n                        \n                            \n                                Value : USER_NOT_FOUND\n                            \n                        \n                        \n                            \n                                 USER_REFRESH_TOKEN_ALREADY_EXIST\n                            \n                        \n                        \n                            \n                                Value : USER_REFRESH_TOKEN_ALREADY_EXIST\n                            \n                        \n                        \n                            \n                                 USER_REFRESH_TOKENS_NOT_FOUND\n                            \n                        \n                        \n                            \n                                Value : USER_REFRESH_TOKENS_NOT_FOUND\n                            \n                        \n                        \n                            \n                                 USER_REFRESH_TOKEN_NOT_FOUND\n                            \n                        \n                        \n                            \n                                Value : USER_REFRESH_TOKEN_NOT_FOUND\n                            \n                        \n                        \n                            \n                                 USER_NOTIFICATION_TOKEN_ALREADY_EXIST\n                            \n                        \n                        \n                            \n                                Value : USER_NOTIFICATION_TOKEN_ALREADY_EXIST\n                            \n                        \n                        \n                            \n                                 USER_NOTIFICATION_TOKENS_NOT_FOUND\n                            \n                        \n                        \n                            \n                                Value : USER_NOTIFICATION_TOKENS_NOT_FOUND\n                            \n                        \n                        \n                            \n                                 USER_NOTIFICATION_TOKEN_NOT_FOUND\n                            \n                        \n                        \n                            \n                                Value : USER_NOTIFICATION_TOKEN_NOT_FOUND\n                            \n                        \n                        \n                            \n                                 NOTIFICATIONS_ALREADY_EXIST\n                            \n                        \n                        \n                            \n                                Value : NOTIFICATIONS_ALREADY_EXIST\n                            \n                        \n                        \n                            \n                                 NOTIFICATION_ALREADY_EXIST\n                            \n                        \n                        \n                            \n                                Value : NOTIFICATION_ALREADY_EXIST\n                            \n                        \n                        \n                            \n                                 NOTIFICATIONS_NOT_FOUND\n                            \n                        \n                        \n                            \n                                Value : NOTIFICATIONS_NOT_FOUND\n                            \n                        \n                        \n                            \n                                 NOTIFICATION_NOT_FOUND\n                            \n                        \n                        \n                            \n                                Value : NOTIFICATION_NOT_FOUND\n                            \n                        \n                        \n                            \n                                 SOCKET_ERROR\n                            \n                        \n                        \n                            \n                                Value : SOCKET_ERROR\n                            \n                        \n                        \n                            \n                                 CHAT_ALREADY_EXIST\n                            \n                        \n                        \n                            \n                                Value : CHAT_ALREADY_EXISTS\n                            \n                        \n                        \n                            \n                                 CHATS_NOT_FOUND\n                            \n                        \n                        \n                            \n                                Value : CHATS_NOT_FOUND\n                            \n                        \n                        \n                            \n                                 CHAT_NOT_FOUND\n                            \n                        \n                        \n                            \n                                Value : CHAT_NOT_FOUND\n                            \n                        \n                        \n                            \n                                 CHAT_MESSAGE_ALREADY_EXIST\n                            \n                        \n                        \n                            \n                                Value : CHAT_MESSAGE_ALREADY_EXIST\n                            \n                        \n                        \n                            \n                                 CHAT_MESSAGES_NOT_FOUND\n                            \n                        \n                        \n                            \n                                Value : CHAT_MESSAGES_NOT_FOUND\n                            \n                        \n                        \n                            \n                                 CHAT_MESSAGE_NOT_FOUND\n                            \n                        \n                        \n                            \n                                Value : CHAT_MESSAGE_NOT_FOUND\n                            \n                        \n                        \n                            \n                                 CHAT_PARTICIPANT_ALREADY_EXIST\n                            \n                        \n                        \n                            \n                                Value : CHAT_PARTICIPANT_ALREADY_EXIST\n                            \n                        \n                        \n                            \n                                 CHAT_PARTICIPANTS_NOT_FOUND\n                            \n                        \n                        \n                            \n                                Value : CHAT_PARTICIPANTS_NOT_FOUND\n                            \n                        \n                        \n                            \n                                 CHAT_PARTICIPANT_NOT_FOUND\n                            \n                        \n                        \n                            \n                                Value : CHAT_PARTICIPANT_NOT_FOUND\n                            \n                        \n            \n        \n\n    src/modules/notifications/enums/notifications-status.enum.ts\n    \n        \n            \n                \n                    \n                        \n                        NotificationsStatusEnum\n                    \n                \n                        \n                            \n                                 UNREAD\n                            \n                        \n                        \n                            \n                                Value : UNREAD\n                            \n                        \n                        \n                            \n                                 READ\n                            \n                        \n                        \n                            \n                                Value : READ\n                            \n                        \n            \n        \n\n    src/modules/notifications/enums/notifications-title.enum.ts\n    \n        \n            \n                \n                    \n                        \n                        NotificationsTitleEnum\n                    \n                \n                        \n                            \n                                 COLLABORATION_FEEDBACK\n                            \n                        \n                        \n                            \n                                Value : You're working with %s for 1 month. Please, leave a feedback.\n                            \n                        \n                        \n                            \n                                 COLLABORATION_ARTIST_DEACTIVATED\n                            \n                        \n                        \n                            \n                                Value : %s deactivated his account.\n                            \n                        \n                        \n                            \n                                 COLLABORATION_AGENT_DEACTIVATED\n                            \n                        \n                        \n                            \n                                Value : Your agent has just deactivated their account\n                            \n                        \n                        \n                            \n                                 VERIFICATION_ACCEPTED\n                            \n                        \n                        \n                            \n                                Value : Your account has been verified!\n                            \n                        \n                        \n                            \n                                 VERIFICATION_DECLINED\n                            \n                        \n                        \n                            \n                                Value : Your account has not been verified. Go through it again, or contact support if you have any questions.\n                            \n                        \n                        \n                            \n                                 EVENT_BOOKING_ACCEPTED\n                            \n                        \n                        \n                            \n                                Value : Your request for private event %s has accepted by %s\n                            \n                        \n                        \n                            \n                                 EVENT_CANCELLED_BY_ARTIST\n                            \n                        \n                        \n                            \n                                Value : Event %s was canceled by artist. The entire amount paid by you will be returned within 24 hours. Sorry for the inconvenience!\n                            \n                        \n                        \n                            \n                                 EVENT_REMINDER_1_HOUR\n                            \n                        \n                        \n                            \n                                Value : Event %s will start in 1 hour. Don't forget to join.\n                            \n                        \n                        \n                            \n                                 EVENT_REMINDER_15_MINUTES\n                            \n                        \n                        \n                            \n                                Value : Event %s will start in 15 minutes.\n                            \n                        \n                        \n                            \n                                 PAYMENT_REFUND\n                            \n                        \n                        \n                            \n                                Value : Your payment was refunded\n                            \n                        \n                        \n                            \n                                 PAYMENT_ARTIST_DEACTIVATED\n                            \n                        \n                        \n                            \n                                Value : %s deactivated account. The entire amount paid by you for all events will be returned within 24 hours. Sorry for the inconvenience!\n                            \n                        \n                        \n                            \n                                 PROMOTION_EXPIRE_1_HOUR\n                            \n                        \n                        \n                            \n                                Value : Your promotion subscription will expire in 1 hour.\n                            \n                        \n            \n        \n\n    src/modules/notifications/enums/notifications-type.enum.ts\n    \n        \n            \n                \n                    \n                        \n                        NotificationsTypeEnum\n                    \n                \n                        \n                            \n                                 COLLABORATION_ARTIST_DEACTIVATED\n                            \n                        \n                        \n                            \n                                Value : COLLABORATION_ARTIST_DEACTIVATED\n                            \n                        \n                        \n                            \n                                 COLLABORATION_AGENT_DEACTIVATED\n                            \n                        \n                        \n                            \n                                Value : COLLABORATION_AGENT_DEACTIVATED\n                            \n                        \n                        \n                            \n                                 COLLABORATION_FEEDBACK\n                            \n                        \n                        \n                            \n                                Value : COLLABORATION_FEEDBACK\n                            \n                        \n                        \n                            \n                                 VERIFICATION_ACCEPTED\n                            \n                        \n                        \n                            \n                                Value : VERIFICATION_ACCEPTED\n                            \n                        \n                        \n                            \n                                 VERIFICATION_DECLINED\n                            \n                        \n                        \n                            \n                                Value : VERIFICATION_DECLINED\n                            \n                        \n                        \n                            \n                                 EVENT_BOOKING_ACCEPTED\n                            \n                        \n                        \n                            \n                                Value : EVENT_BOOKING_ACCEPTED\n                            \n                        \n                        \n                            \n                                 EVENT_CANCELLED_AFTER_15_MIN\n                            \n                        \n                        \n                            \n                                Value : EVENT_CANCELLED_AFTER_15_MIN\n                            \n                        \n                        \n                            \n                                 EVENT_CANCELLED_BY_ARTIST\n                            \n                        \n                        \n                            \n                                Value : EVENT_CANCELLED_BY_ARTIST\n                            \n                        \n                        \n                            \n                                 EVENT_REMINDER_15_MINUTES\n                            \n                        \n                        \n                            \n                                Value : EVENT_REMINDER_15_MINUTES\n                            \n                        \n                        \n                            \n                                 EVENT_REMINDER_1_HOUR\n                            \n                        \n                        \n                            \n                                Value : EVENT_REMINDER_1_HOUR\n                            \n                        \n                        \n                            \n                                 EVENT_WAS_PROLONG\n                            \n                        \n                        \n                            \n                                Value : EVENT_WAS_PROLONG\n                            \n                        \n                        \n                            \n                                 EVENT_REMINDER\n                            \n                        \n                        \n                            \n                                Value : EVENT_REMINDER\n                            \n                        \n                        \n                            \n                                 EVENT_ENDED\n                            \n                        \n                        \n                            \n                                Value : EVENT_ENDED\n                            \n                        \n                        \n                            \n                                 PAYMENT_ARTIST_DEACTIVATED\n                            \n                        \n                        \n                            \n                                Value : PAYMENT_ARTIST_DEACTIVATED\n                            \n                        \n                        \n                            \n                                 PAYMENT_REFUND\n                            \n                        \n                        \n                            \n                                Value : PAYMENT_REFUND\n                            \n                        \n                        \n                            \n                                 PROMOTION_EXPIRE_1_HOUR\n                            \n                        \n                        \n                            \n                                Value : PROMOTION_EXPIRE_1_HOUR\n                            \n                        \n                        \n                            \n                                 PROMOTION_EXPIRE\n                            \n                        \n                        \n                            \n                                Value : PROMOTION_EXPIRE\n                            \n                        \n            \n        \n\n    src/sendmail/enums/template-name.enum.ts\n    \n        \n            \n                \n                    \n                        \n                        TemplateNameEnum\n                    \n                \n                    \n                        \n                            [description]\n\n                        \n                    \n                        \n                            \n                                 CONFIRMATION\n                            \n                        \n                        \n                            \n                                Value : confirmation\n                            \n                        \n                        \n                            \n                                 RESET_PASSWORD\n                            \n                        \n                        \n                            \n                                Value : reset-password\n                            \n                        \n            \n        \n\n    src/modules/users/enums/user-role.enum.ts\n    \n        \n            \n                \n                    \n                        \n                        UserRoleEnum\n                    \n                \n                    \n                        \n                            [description]\n\n                        \n                    \n                        \n                            \n                                 ADMIN\n                            \n                        \n                        \n                            \n                                Value : ADMIN\n                            \n                        \n                        \n                            \n                                 USER\n                            \n                        \n                        \n                            \n                                Value : USER\n                            \n                        \n            \n        \n\n    src/modules/users/enums/user-status.enum.ts\n    \n        \n            \n                \n                    \n                        \n                        UserStatusEnum\n                    \n                \n                    \n                        \n                            [description]\n\n                        \n                    \n                        \n                            \n                                 DEACIVATED\n                            \n                        \n                        \n                            \n                                Value : DEACIVATED\n                            \n                        \n                        \n                            \n                                 ACTIVATED\n                            \n                        \n                        \n                            \n                                Value : ACTIVATED\n                            \n                        \n            \n        \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            bootstrap   (src/.../main.ts)\n                        \n                        \n                            createMockFile   (test/.../mock-file.util.ts)\n                        \n                        \n                            createMockFileMeta   (test/.../mock-file.util.ts)\n                        \n                        \n                            createRepMock   (test/.../mock-fastify.util.ts)\n                        \n                        \n                            PaginationMixin   (src/.../pagination.dto.ts)\n                        \n                        \n                            querySearch   (src/.../query-search.helper.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/main.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        bootstrap\n                        \n                    \n                \n            \n            \n                \nbootstrap()\n                \n            \n\n\n\n\n            \n                \n                    [description]\n\n\n                \n            \n        \n    \n    test/utils/mock-file.util.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        createMockFile\n                        \n                    \n                \n            \n            \n                \ncreateMockFile(data?: Partial)\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    data\n                                    \n                                            Partial\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         CreateMockFileReturn\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        createMockFileMeta\n                        \n                    \n                \n            \n            \n                \ncreateMockFileMeta(data?: Partial)\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    data\n                                    \n                                            Partial\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         CreateMockFileReturn\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    test/utils/mock-fastify.util.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        createRepMock\n                        \n                    \n                \n            \n            \n                \ncreateRepMock(code?: number, mimetype?: string, headers?: any)\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    code\n                                    \n                                                number\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                                \n                                    mimetype\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                                \n                                    headers\n                                    \n                                                any\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    src/common/dto/pagination/pagination.dto.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        PaginationMixin\n                        \n                    \n                \n            \n            \n                \nPaginationMixin(classRef: Type)\n                \n            \n\n\n\n\n            \n                \n                    [description]\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    classRef\n                                    \n                                                Type\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    src/common/helpers/query-search.helper.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        querySearch\n                        \n                    \n                \n            \n            \n                \nquerySearch(field: string, searchAlias: string)\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    field\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    searchAlias\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        '%:search%'\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\n\n  \n\n\n  \n\n\n\n  \n\n\nCommit Message Guidelines\nhttps://www.conventionalcommits.org/en/v1.0.0/\nhttps://github.com/angular/angular/blob/22b96b9/CONTRIBUTING.md#-commit-message-guidelines\nInstallation\n$ npm installPrepare\nset up .env.development, .env.production, .env.test files in env folder like .env.example\nRunning the app\n# development\n$ npm run start\n\n# watch mode\n$ npm run start:dev\n\n# production mode\n$ npm run start:prodTest\n# unit tests\n$ npm run test\n\n# e2e tests\n$ npm run test:e2e\n\n# test coverage\n$ npm run test:cov\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        AppModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        AuthModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        ChatsModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        ConfigModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        DatabaseModule\n                    \n                    \n                                \n                                    No graph available.\n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        FilesModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        MultipartModule\n                    \n                    \n                                \n                                    No graph available.\n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        NotificationsModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        SendMailModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        SocketsModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        UsersModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n  \n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_imports\n\n\n\ncluster_AuthModule_exports\n\n\n\ncluster_AuthModule_providers\n\n\n\ncluster_ChatsModule\n\n\n\ncluster_ChatsModule_exports\n\n\n\ncluster_ChatsModule_providers\n\n\n\ncluster_ConfigModule\n\n\n\ncluster_ConfigModule_exports\n\n\n\ncluster_ConfigModule_providers\n\n\n\ncluster_FilesModule\n\n\n\ncluster_FilesModule_exports\n\n\n\ncluster_FilesModule_providers\n\n\n\ncluster_NotificationsModule\n\n\n\ncluster_NotificationsModule_exports\n\n\n\ncluster_NotificationsModule_providers\n\n\n\ncluster_SendMailModule\n\n\n\ncluster_SendMailModule_exports\n\n\n\ncluster_SendMailModule_providers\n\n\n\ncluster_SocketsModule\n\n\n\ncluster_SocketsModule_exports\n\n\n\ncluster_SocketsModule_providers\n\n\n\ncluster_UsersModule\n\n\n\ncluster_UsersModule_exports\n\n\n\ncluster_UsersModule_providers\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nAuthService \n\nAuthService \n\nAuthService  -->\n\nAuthModule->AuthService \n\n\n\n\n\nChatsModule\n\nChatsModule\n\nAppModule -->\n\nChatsModule->AppModule\n\n\n\n\n\nChatMessagesService \n\nChatMessagesService \n\nChatMessagesService  -->\n\nChatsModule->ChatMessagesService \n\n\n\n\n\nChatParticipantsService \n\nChatParticipantsService \n\nChatParticipantsService  -->\n\nChatsModule->ChatParticipantsService \n\n\n\n\n\nChatsService \n\nChatsService \n\nChatsService  -->\n\nChatsModule->ChatsService \n\n\n\n\n\nConfigModule\n\nConfigModule\n\nAppModule -->\n\nConfigModule->AppModule\n\n\n\n\n\nConfigService \n\nConfigService \n\nConfigService  -->\n\nConfigModule->ConfigService \n\n\n\n\n\nDatabaseModule\n\nDatabaseModule\n\nAppModule -->\n\nDatabaseModule->AppModule\n\n\n\n\n\nFilesModule\n\nFilesModule\n\nAppModule -->\n\nFilesModule->AppModule\n\n\n\n\n\nFilesService \n\nFilesService \n\nFilesService  -->\n\nFilesModule->FilesService \n\n\n\n\n\nMultipartModule\n\nMultipartModule\n\nAppModule -->\n\nMultipartModule->AppModule\n\n\n\n\n\nNotificationsModule\n\nNotificationsModule\n\nAppModule -->\n\nNotificationsModule->AppModule\n\n\n\n\n\nNotificationsService \n\nNotificationsService \n\nNotificationsService  -->\n\nNotificationsModule->NotificationsService \n\n\n\n\n\nSocketsModule\n\nSocketsModule\n\nChatsModule -->\n\nSocketsModule->ChatsModule\n\n\n\nAppModule -->\n\nSocketsModule->AppModule\n\n\n\n\n\nSocketsService \n\nSocketsService \n\nSocketsService  -->\n\nSocketsModule->SocketsService \n\n\n\n\n\nUsersModule\n\nUsersModule\n\nAuthModule -->\n\nUsersModule->AuthModule\n\n\n\nNotificationsModule -->\n\nUsersModule->NotificationsModule\n\n\n\nSocketsModule -->\n\nUsersModule->SocketsModule\n\n\n\nAppModule -->\n\nUsersModule->AppModule\n\n\n\n\n\nUserNotificationTokensService \n\nUserNotificationTokensService \n\nUserNotificationTokensService  -->\n\nUsersModule->UserNotificationTokensService \n\n\n\n\n\nUserRefreshTokensService \n\nUserRefreshTokensService \n\nUserRefreshTokensService  -->\n\nUsersModule->UserRefreshTokensService \n\n\n\n\n\nUsersService \n\nUsersService \n\nUsersService  -->\n\nUsersModule->UsersService \n\n\n\n\n\nSendMailModule\n\nSendMailModule\n\nAuthModule -->\n\nSendMailModule->AuthModule\n\n\n\n\n\nSendMailService \n\nSendMailService \n\nSendMailService  -->\n\nSendMailModule->SendMailService \n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\nJwtRefreshTokenStrategy\n\nJwtRefreshTokenStrategy\n\nAuthModule -->\n\nJwtRefreshTokenStrategy->AuthModule\n\n\n\n\n\nJwtStrategy\n\nJwtStrategy\n\nAuthModule -->\n\nJwtStrategy->AuthModule\n\n\n\n\n\nChatMessagesService\n\nChatMessagesService\n\nChatsModule -->\n\nChatMessagesService->ChatsModule\n\n\n\n\n\nChatParticipantsService\n\nChatParticipantsService\n\nChatsModule -->\n\nChatParticipantsService->ChatsModule\n\n\n\n\n\nChatsService\n\nChatsService\n\nChatsModule -->\n\nChatsService->ChatsModule\n\n\n\n\n\nConfigService\n\nConfigService\n\nConfigModule -->\n\nConfigService->ConfigModule\n\n\n\n\n\nFilesService\n\nFilesService\n\nFilesModule -->\n\nFilesService->FilesModule\n\n\n\n\n\nNotificationsService\n\nNotificationsService\n\nNotificationsModule -->\n\nNotificationsService->NotificationsModule\n\n\n\n\n\nSendMailService\n\nSendMailService\n\nSendMailModule -->\n\nSendMailService->SendMailModule\n\n\n\n\n\nSocketsService\n\nSocketsService\n\nSocketsModule -->\n\nSocketsService->SocketsModule\n\n\n\n\n\nUserNotificationTokensService\n\nUserNotificationTokensService\n\nUsersModule -->\n\nUserNotificationTokensService->UsersModule\n\n\n\n\n\nUserRefreshTokensService\n\nUserRefreshTokensService\n\nUsersModule -->\n\nUserRefreshTokensService->UsersModule\n\n\n\n\n\nUsersService\n\nUsersService\n\nUsersModule -->\n\nUsersService->UsersModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n  \n\n    \n        \n            \n                \n                    \n                    \n                        11 Modules\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    7 Controllers\n                \n            \n        \n        \n            \n                \n                    \n                    8 Entities\n                \n            \n        \n        \n            \n                \n                    \n                    20 Injectables\n                \n            \n        \n        \n            \n                \n                    \n                    55 Classes\n                \n            \n        \n        \n            \n                \n                    \n                    5 Interfaces\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"properties.html":{"url":"properties.html","title":"package-properties - properties","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Properties\n    \n    \n        \n            Version : 0.1.1\n        \n            Description : Nest.js is based on Fastify and TypeORM setup\n        \n            Homepage : https://github.com/broodd/nest-template\n        \n            Repository : https://github.com/broodd/nest-template.git\n        \n            Author : broodd\n    \n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/typealiases.html":{"url":"miscellaneous/typealiases.html","title":"miscellaneous-typealiases - typealiases","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Type aliases\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            HeadObjectRequest   (src/.../storage-s3.service.ts)\n                        \n                        \n                            MultipartModuleOptions   (src/.../multipart-module.interface.ts)\n                        \n                        \n                            PutObjectRequest   (src/.../storage-s3.service.ts)\n                        \n                        \n                            ResponseMailType   (src/.../response-mail.type.ts)\n                        \n                        \n                            TemplatedMailConfirmationType   (src/.../templated-mail.type.ts)\n                        \n                        \n                            TemplatedMailResetPasswordType   (src/.../templated-mail.type.ts)\n                        \n                        \n                            TemplatedMailType   (src/.../templated-mail.type.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/multipart/storage-s3.service.ts\n    \n    \n        \n            \n                \n                    \n                    HeadObjectRequest\n                \n            \n            \n                \n                            Omit\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    PutObjectRequest\n                \n            \n            \n                \n                            Omit\n\n                \n            \n        \n    \n    src/multipart/interfaces/multipart-module.interface.ts\n    \n    \n        \n            \n                \n                    \n                    MultipartModuleOptions\n                \n            \n            \n                \n                    [description]\n\n                \n            \n            \n                \n                        FastifyMultipartOptions\n\n                \n            \n        \n    \n    src/sendmail/types/response-mail.type.ts\n    \n    \n        \n            \n                \n                    \n                    ResponseMailType\n                \n            \n            \n                \n                    [description]\n\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    src/sendmail/types/templated-mail.type.ts\n    \n    \n        \n            \n                \n                    \n                    TemplatedMailConfirmationType\n                \n            \n            \n                \n                    [description]\n\n                \n            \n            \n                \n                        \n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    TemplatedMailResetPasswordType\n                \n            \n            \n                \n                    [description]\n\n                \n            \n            \n                \n                        \n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    TemplatedMailType\n                \n            \n            \n                \n                    [description]\n\n                \n            \n            \n                \n                        \n\n                \n            \n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"unit-test.html":{"url":"unit-test.html","title":"unit-test - unit-test","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Unit test coverage\n\n\n\n    \n    \n    \n    \n\n\n\n    \n        \n            File\n            Statements\n            Branches\n            Functions\n            Lines\n        \n    \n    \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/user1615673396368.html":{"url":"classes/user1615673396368.html","title":"class - user1615673396368","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  user1615673396368\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/database/migrations/1615673396368-user.migration.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                        MigrationInterface\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                down\n                            \n                            \n                                    Public\n                                    Async\n                                up\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        down\n                        \n                    \n                \n            \n            \n                \n                    \n                    down(undefined: QueryRunner)\n                \n            \n\n\n            \n                \n                    Defined in src/database/migrations/1615673396368-user.migration.ts:24\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    \n                                            QueryRunner\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        up\n                        \n                    \n                \n            \n            \n                \n                    \n                    up(undefined: QueryRunner)\n                \n            \n\n\n            \n                \n                    Defined in src/database/migrations/1615673396368-user.migration.ts:18\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    \n                                            QueryRunner\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { MigrationInterface, QueryRunner } from 'typeorm';\n\nimport { UserEntity } from 'src/modules/users/entities';\nimport { UserRoleEnum } from 'src/modules/users/enums';\n\nconst password =\n  '357fa5484137ddfd5a5b:32e0569e0c7e1ac0fd902a3db866904098e08cf1e1a1e8cd7fa8e5941b7f7c46866a9d577ece5778a32ce4b2c812e547607d111da263d51d63f9ba5135a3a421'; // password\nconst data: Partial[] = [\n  {\n    id: '067f2f3e-b936-4029-93d6-b2f58ae4f489',\n    email: 'admin@gmail.com',\n    role: UserRoleEnum.ADMIN,\n    password,\n  },\n];\n\nexport class user1615673396368 implements MigrationInterface {\n  public async up({ connection }: QueryRunner): Promise {\n    await connection.synchronize();\n    const repository = connection.getRepository(UserEntity);\n    await repository.save(data).catch((e) => console.error(e));\n  }\n\n  public async down({ connection }: QueryRunner): Promise {\n    await connection.getRepository(UserEntity).delete(data.map(({ id }) => id));\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/variables.html":{"url":"miscellaneous/variables.html","title":"miscellaneous-variables - variables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            CACHE_AUTH_PREFIX   (src/.../auth.constants.ts)\n                        \n                        \n                            compare   (src/.../crypto.helper.ts)\n                        \n                        \n                            configService   (test/.../mock-file.util.ts)\n                        \n                        \n                            data   (src/.../1615673396368-user.migration.ts)\n                        \n                        \n                            dotNotation   (src/.../dot-notation.helper.ts)\n                        \n                        \n                            File   (src/.../file.decorator.ts)\n                        \n                        \n                            FileDecorator   (src/.../file.decorator.ts)\n                        \n                        \n                            FloatIntColumnTransformer   (src/.../float-int-column.transformer.ts)\n                        \n                        \n                            floatToInt   (src/.../number.helper.ts)\n                        \n                        \n                            hash   (src/.../crypto.helper.ts)\n                        \n                        \n                            keyLength   (src/.../crypto.helper.ts)\n                        \n                        \n                            MULTIPART_MODULE   (src/.../multipart.constants.ts)\n                        \n                        \n                            MULTIPART_MODULE_OPTIONS   (src/.../multipart.constants.ts)\n                        \n                        \n                            password   (src/.../1615673396368-user.migration.ts)\n                        \n                        \n                            saltRounds   (src/.../crypto.helper.ts)\n                        \n                        \n                            scrypt   (src/.../crypto.helper.ts)\n                        \n                        \n                            setFindOrder   (src/.../query-order.helper.ts)\n                        \n                        \n                            SocketUser   (src/.../socket-user.decorator.ts)\n                        \n                        \n                            User   (src/.../user.decorator.ts)\n                        \n                        \n                            UseRole   (src/.../roles.decorator.ts)\n                        \n                        \n                            validationPipe   (src/.../validation.pipe.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/modules/auth/auth.constants.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        CACHE_AUTH_PREFIX\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'AUTH:'\n                    \n                \n\n            \n                \n                    [description]\n\n                \n            \n\n        \n    \n\n    src/common/helpers/crypto.helper.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        compare\n                        \n                    \n                \n            \n                \n                    \n                        Default value : async (password: string, encrypted: string): Promise => {\n  const [salt, key] = encrypted.split(':');\n  const keyBuffer = Buffer.from(key, 'hex');\n  const derivedKey = await scrypt(password, salt, keyLength);\n  return timingSafeEqual(keyBuffer, derivedKey);\n}\n                    \n                \n\n            \n                \n                    [description]\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        hash\n                        \n                    \n                \n            \n                \n                    \n                        Default value : async (password: string): Promise => {\n  const salt = randomBytes(saltRounds).toString('hex');\n  const derivedKey = await scrypt(password, salt, keyLength);\n  return salt + ':' + derivedKey.toString('hex');\n}\n                    \n                \n\n            \n                \n                    [description]\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        keyLength\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 64\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        saltRounds\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 10\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        scrypt\n                        \n                    \n                \n            \n                \n                    \n                        Default value : promisify(scryptCallback)\n                    \n                \n\n\n        \n    \n\n    test/utils/mock-file.util.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        configService\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new ConfigService()\n                    \n                \n\n\n        \n    \n\n    src/database/migrations/1615673396368-user.migration.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        data\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Partial[]\n\n                    \n                \n                \n                    \n                        Default value : [\n  {\n    id: '067f2f3e-b936-4029-93d6-b2f58ae4f489',\n    email: 'admin@gmail.com',\n    role: UserRoleEnum.ADMIN,\n    password,\n  },\n]\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : '357fa5484137ddfd5a5b:32e0569e0c7e1ac0fd902a3db866904098e08cf1e1a1e8cd7fa8e5941b7f7c46866a9d577ece5778a32ce4b2c812e547607d111da263d51d63f9ba5135a3a421'\n                    \n                \n\n\n        \n    \n\n    src/common/helpers/dot-notation.helper.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        dotNotation\n                        \n                    \n                \n            \n                \n                    \n                        Default value : (\n  array: string[],\n  initialValue: any = true,\n  initialObject: any = {},\n): any =>\n  array.reduce((result, objectPath) => {\n    const parts = objectPath.split('.');\n    let target = result;\n\n    while (parts.length > 1) {\n      const part = parts.shift();\n      target = target[part] = typeof target[part] === 'object' ? target[part] : {};\n    }\n\n    target[parts[0]] = initialValue;\n    return result;\n  }, initialObject)\n                    \n                \n\n            \n                \n                    Transform array of string dot-notation to object\n['foo.bar', 'foo.other', 'foo.bar.sub'] =>\n{\n foo: {\n   other: true,\n   bar: {\n     sub: true\n   }\n }\n}\n\n                \n            \n\n        \n    \n\n    src/multipart/decorators/file.decorator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        File\n                        \n                    \n                \n            \n                \n                    \n                        Default value : (options: Omit = { limits: { fileSize: 5e6 } }) =>\n  FileDecorator(options, FileValidationPipe)\n                    \n                \n\n            \n                \n                    [description]\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        FileDecorator\n                        \n                    \n                \n            \n                \n                    \n                        Default value : createParamDecorator(\n  async (\n    options: Omit = { limits: { fileSize: 5e6 } },\n    ctx: ExecutionContext,\n  ): Promise => {\n    const request = ctx\n      .switchToHttp()\n      .getRequest) => Promise }\n      >();\n    return request.file(options).catch(() => {\n      throw new PayloadTooLargeException(ErrorTypeEnum.FILE_TOO_LARGE);\n    });\n  },\n)\n                    \n                \n\n            \n                \n                    [description]\n\n                \n            \n\n        \n    \n\n    src/database/transformers/float-int-column.transformer.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        FloatIntColumnTransformer\n                        \n                    \n                \n            \n                \n                    \n                        Type :     ValueTransformer\n\n                    \n                \n                \n                    \n                        Default value : {\n  to: (value: number): number => value && floatToInt(value),\n  from: (value: number) => value / 100,\n}\n                    \n                \n\n\n        \n    \n\n    src/common/helpers/number.helper.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        floatToInt\n                        \n                    \n                \n            \n                \n                    \n                        Default value : (value) => parseInt((parseFloat(value.toFixed(2)) * 100).toString())\n                    \n                \n\n            \n                \n                    [description]\n\n                \n            \n\n        \n    \n\n    src/multipart/multipart.constants.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        MULTIPART_MODULE\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'MULTIPART_MODULE'\n                    \n                \n\n            \n                \n                    [description]\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        MULTIPART_MODULE_OPTIONS\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'MULTIPART_MODULE_OPTIONS'\n                    \n                \n\n            \n                \n                    [description]\n\n                \n            \n\n        \n    \n\n    src/common/helpers/query-order.helper.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        setFindOrder\n                        \n                    \n                \n            \n                \n                    \n                        Default value : (\n  qb: SelectQueryBuilder,\n  order: FindOptionsOrder,\n): FindOptionsOrder => {\n  Object.entries(order)\n    .filter(([key]) => key.startsWith('__'))\n    .forEach(([key, value]: [string, 'ASC' | 'DESC']) => qb.addOrderBy(key, value, 'NULLS LAST'));\n\n  return Object.keys(order)\n    .filter((key) => !key.startsWith('__'))\n    .reduce((acc, key) => ((acc[key] = order[key]), acc), {});\n}\n                    \n                \n\n\n        \n    \n\n    src/common/decorators/socket-user.decorator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        SocketUser\n                        \n                    \n                \n            \n                \n                    \n                        Default value : createParamDecorator(\n  (_data: unknown, ctx: ExecutionContext): UserEntity => {\n    return ctx.switchToWs().getClient().data.user;\n  },\n)\n                    \n                \n\n            \n                \n                    [description]\n\n                \n            \n\n        \n    \n\n    src/common/decorators/user.decorator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        User\n                        \n                    \n                \n            \n                \n                    \n                        Default value : createParamDecorator((data: string, ctx: ExecutionContext): UserEntity => {\n  const request = ctx.switchToHttp().getRequest();\n  return data ? request.user && request.user[data] : request.user;\n})\n                    \n                \n\n            \n                \n                    [description]\n\n                \n            \n\n        \n    \n\n    src/common/decorators/roles.decorator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        UseRole\n                        \n                    \n                \n            \n                \n                    \n                        Default value : (...roles: UserRoleEnum[]) =>\n  /**\n   *\n   * @param target      [description]\n   * @param key         [description]\n   * @param descriptor  [description]\n   */\n  (\n    target: Record,\n    key?: string | symbol,\n    descriptor?: TypedPropertyDescriptor,\n  ): void => {\n    const operation: OperationObject = Reflect.getMetadata(\n      DECORATORS.API_OPERATION,\n      descriptor.value,\n    );\n\n    if (!operation) ApiOperation({ summary: `[ROLE: ${roles}]` })(target, key, descriptor);\n    else operation.summary = `[ROLE: ${roles}]${operation.summary && ': ' + operation.summary}`;\n\n    SetMetadata('roles', roles)(target, key, descriptor);\n    ApiBearerAuth()(target, key, descriptor);\n  }\n                    \n                \n\n            \n                \n                    [description]\n\n                \n            \n\n        \n    \n\n    src/common/pipes/validation.pipe.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        validationPipe\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new ValidationPipe({\n  forbidNonWhitelisted: true,\n  forbidUnknownValues: true,\n  whitelist: true,\n  transform: true,\n  transformOptions: {\n    enableImplicitConversion: true,\n  },\n})\n                    \n                \n\n            \n                \n                    [description]\n\n                \n            \n\n        \n    \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
